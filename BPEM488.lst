                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (BPEM488.s)                                                                *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    Application code for the Basic Programmable Engine Management 488 project          *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project (This module)       *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 14 2020                                                                        *
                                      ;*    - BPEM488 version begins(work in progress)                                         *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
??????        S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Resource mapping -                                                                  *
                                      ;*****************************************************************************************
001000 0FD000                                         ORG   MMAP_RAM_START, MMAP_RAM_START_LIN   ; $1000, $0F_D000
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001000 0FD000 -> $1000                BASE_VARS_START           EQU *   ; * Represents the current value of the paged
                                                                        ; program counter
001000 0FD000 -> $FD000               BASE_VARS_START_LIN       EQU @   ; @ Represents the current value of the linear
                                                                        ; program counter
001068 0FD068                                         ORG   BASE_VARS_END, BASE_VARS_END_LIN
                                      ; - Shared Variables -
001068 0FD068 -> $1068                BPEM488_SHARED_VARS_START       EQU *   ; * Represents the current value of the paged
                                                                              ; program counter
001068 0FD068 -> $FD068               BPEM488_SHARED_VARS_START_LIN   EQU @   ; @ Represents the current value of the linear
                                                                              ; program counter
                                      ;BPEM488_SHARED_VARS_START_XG    EQU (BPEM488_SHARED_VARS_START_LIN & $FFFF)
                                      ;; - XGATE Variables -
                                      ;               ORG   MMAP_XGATE_RAM_START_XG, MMAP_XGATE_RAM_START_LIN   ; $8000, $0F_8000
                                      ;BPEM488_XGATE_VARS_START_XG    EQU *   ; * Represents the current value of the paged
                                                                             ; program counter
                                      ;BPEM488_XGATE_VARS_START_LIN   EQU @   ; @ Represents the current value of the linear
                                                                             ; program counter
004000 7F4000                                         ORG   MMAP_FLASH_FD_START, MMAP_FLASH_FD_START_LIN   ; $4000, $7F_4000
                                      ;*****************************************************************************************
                                      ;* - Macros -                                                                            *
                                      ;*****************************************************************************************
                                      ; ------------------------------- No macros for this module ------------------------------
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; THIS IS THE AFTER RESET ENTRY POINT                                                    *
                                      ;*****************************************************************************************
004000 7F4000 -> $4000                BPEM488_CODE_START       EQU  *  ; * Represents the current value of the paged
                                                                       ; program counter
004000 7F4000 -> $7F4000              BPEM488_CODE_START_LIN   EQU  @  ; @ Represents the current value of the linear
                                                                       ; program counter
0054EF 7F54EF                                         ORG   BPEM488_CODE_END, BPEM488_CODE_END_LIN
0054EF 7F54EF -> $54EF                BASE_CODE_START       EQU  *  ; * Represents the current value of the paged
                                                                    ; program counter
0054EF 7F54EF -> $7F54EF              BASE_CODE_START_LIN   EQU  @  ; @ Represents the current value of the linear
                                                                    ; program counter
006259 7F6259                                         ORG   BASE_CODE_END, BASE_CODE_END_LIN
                                      ; - Tables -
006259 7F6259 -> $6259                BPEM488_TABS_START       EQU  *  ; * Represents the current value of the paged
                                                                       ; program counter
006259 7F6259 -> $7F6259              BPEM488_TABS_START_LIN   EQU  @  ; @ Represents the current value of the linear
                                                                       ; program counter
006C0C 7F6C0C                                         ORG   BPEM488_TABS_END, BPEM488_TABS_END_LIN
006C0C 7F6C0C -> $6C0C                BASE_TABS_START       EQU BPEM488_TABS_END
006C0C 7F6C0C -> $7F6C0C              BASE_TABS_START_LIN   EQU BPEM488_TABS_END_LIN
                                      ;*****************************************************************************************
                                      ; - Complete last flash phrase - (Required for D-Bug12)
                                      ;*****************************************************************************************
007516 7F7516                                         ORG   BASE_TABS_END, BASE_TABS_END_LIN
                                      ;*              FILL    $FF, 8-(*&7)
007516 7F7516 FF FF                          ALIGN 7,$FF          ; This is the better option
                                      ;; - XGATE Code -
000800 780800                                         ORG   MMAP_XG_FLASH_START_XG, MMAP_XG_FLASH_START_LIN   ; $0800, $78_0800
                                      ;BPEM488_XGATE_CODE_START_XG    EQU *   ; * Represents the current value of the paged
                                                                             ; program counter
                                      ;BPEM488_XGATE_CODE_START_LIN   EQU @   ; @ Represents the current value of the linear
                                                                             ; program counter
                                      ;               ORG   BPEM488_XGATE_CODE_END_XG, BPEM488_XGATE_CODE_END_LIN
                                      ;; - XGATE Tables -
                                      ;BPEM488_XGATE_TABS_START_XG    EQU *   ; * Represents the current value of the paged
                                                                             ; program counter
                                      ;BPEM488_XGATE_TABS_START_LIN   EQU @   ; @ Represents the current value of the linear
                                                                             ; program counter
                                      ;               ORG   BPEM488_XGATE_TABS_END_XG, BPEM488_XGATE_TABS_END_LIN
000800 780800                                ALIGN 7,$FF
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001068 0FD068                                         ORG   BPEM488_SHARED_VARS_START, BPEM488_SHARED_VARS_START_LIN
001068 0FD068                                 ALIGN 1
                                      ;*****************************************************************************************
                                      ;----------------------------- RS232 Real Time Variables ---------------------------------
                                      ;   Zero page ordered list continuously updated to Tuner Studio
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Seconds counter variables
                                      ;*****************************************************************************************
001068 0FD068                         SecH:         ds 1 ; RTI seconds count Hi byte (offset=0)
001069 0FD069                         SecL:         ds 1 ; RTI seconds count Lo byte (offset=1)
                                      ;*****************************************************************************************
                                      ; - ADC variables
                                      ;*****************************************************************************************
00106A 0FD06A                         cltAdc:       ds 2 ; RV15 10 bit ADC AN00 Engine Coolant Temperature ADC(offset=2)
00106C 0FD06C                         Cltx10:       ds 2 ; Engine Coolant Temperature (Degrees F x 10)(offset=4)
00106E 0FD06E                         matAdc:       ds 2 ; RV14 10 bit ADC AN01 Manifold Air Temperature ADC(offset=6)
001070 0FD070                         Matx10:       ds 2 ; Manifold Air Temperature (Degrees F x 10)(offset=8)
001072 0FD072                         eftAdc:       ds 2 ; RV13 10 bit ADC AN02 Engine Fuel Temperature ADC(offset=10)
001074 0FD074                         Eftx10:       ds 2 ; Engine Fuel Temperature (Degrees F x 10)(offset=12)
001076 0FD076                         eotAdc:       ds 2 ; RV12 10 bit ADC AN03 Engine Oil Temperature ADC(offset=14)
001078 0FD078                         Eotx10:       ds 2 ; Engine Oil Temperature (Degrees F x 10)(offset=16)
00107A 0FD07A                         RV11Adc:      ds 2 ; RV11 10 bit ADC AN04(19)(offset=18)
00107C 0FD07C                         mapAdc:       ds 2 ; RV10 10 bit ADC AN05 Manifold Absolute Pressure ADC(offset=20)
00107E 0FD07E                         Mapx10:       ds 2 ; Manifold Absolute Pressure (KPAx10)(offset=22)
001080 0FD080                         baroAdc:      ds 2 ; RV9 10 bit ADC AN06 Barometric Pressure ADC(offset=24)
001082 0FD082                         Barox10:      ds 2 ; Barometric Pressure (KPAx10)(offset=26)
001084 0FD084                         batAdc:       ds 2 ; Battery Voltage 10 bit ADC AN07(offset=28)
001086 0FD086                         BatVx10:      ds 2 ; Battery Voltage (Volts x 10)(offset=30)
001088 0FD088                         ftrmAdc:      ds 2 ; RV8 10 bit ADC AN08 Fuel Trim ADC(offset=32)
00108A 0FD08A                         Ftrmx10:      ds 2 ; Fuel Trim (% x 10)(+-20%)(offset=34)
00108C 0FD08C                         itrmAdc:      ds 2 ; RV7 10 bit ADC AN09 Ignition Trim ADC(offset=36)
00108E 0FD08E                         Itrmx10:      ds 2 ; Ignition Trim (degrees x 10)+-20 degrees) (offset=38)
001090 0FD090                         egtAdc:       ds 2 ; RV6 10 bit ADC AN10 Exhaust Gas Temperature ADC(offset=40)
001092 0FD092                         Egt:          ds 2 ; Exhaust Gas Temperature (degrees F)(offset=42)
001094 0FD094                         eopAdc:       ds 2 ; RV5 10 bit ADC AN11 Engine Oil Pressure ADC(offset=44)
001096 0FD096                         Eopx10:       ds 2 ; Engine Oil Pressure (PSI x 10)(offset=46)
001098 0FD098                         efpAdc:       ds 2 ; RV4 10 bit ADC AN12 Engine Fuel Pressure ADC(offset=48)
00109A 0FD09A                         Efpx10:       ds 2 ; Engine Fuel Pressure (PSI x 10)(offset=50)
00109C 0FD09C                         tpsADC:       ds 2 ; RV3 10 bit ADC AN13 Throttle Position Sensor ADC (exact for TS)(offset=52)
00109E 0FD09E                         TpsPctx10:    ds 2 ; Throttle Position Sensor % of travel(%x10)(update every 100mSec)(offset=54)
0010A0 0FD0A0                         iacAdc:       ds 2 ; RV2 10 bit ADC AN14 Idle Air Control ADC(offset=56)
0010A2 0FD0A2                         egoAdc:       ds 2 ; RV1 10 bit ADC AN15 Exhaust Gas Oxygen ADC(offset=58)
0010A4 0FD0A4                         afr1x10:      ds 2 ; Air Fuel Ratio for gasoline (AFRx10)(exact for TS)(offset=60)
                                      ;*****************************************************************************************
                                      ; - Input capture variables
                                      ;*****************************************************************************************
0010A6 0FD0A6                         CASprd512:    ds 2 ; Crankshaft Angle Sensor period (5.12uS time base(offset=62)
0010A8 0FD0A8                         CASprd256:    ds 2 ; Crankshaft Angle Sensor period (2.56uS time base(offset=64)
0010AA 0FD0AA                         VSSprd:       ds 2 ; Vehicle Speed Sensor period(offset=66)
0010AC 0FD0AC                         RPM:          ds 2 ; Crankshaft Revolutions Per Minute(offset=68)
0010AE 0FD0AE                         KPH:          ds 2 ; Vehicle speed (KpH x 10)(offset=70)
                                      ;*****************************************************************************************
                                      ; - Fuel calculation variables
                                      ;*****************************************************************************************
0010B0 0FD0B0                         reqFuel:      ds 2 ; Pulse width for 14.7 AFR @ 100% VE (mS x 10)(offset=72)
0010B2 0FD0B2                         AFRcurr:      ds 2 ; Current value in AFR table (AFR x 100)(offset=74)
0010B4 0FD0B4                         VEcurr:       ds 2 ; Current value in VE table (% x 10)(offset=76)
0010B6 0FD0B6                         barocor:      ds 2 ; Barometric Pressure Correction (% x 10)(offset=78)
0010B8 0FD0B8                         matcor:       ds 2 ; Manifold Air Temperature Correction (% x 10)(offset=80)
0010BA 0FD0BA                         WUEcor:       ds 2 ; Warmup Enrichment Correction (% x 10)(offset=82)
0010BC 0FD0BC                         ASEcor:       ds 2 ; Afterstart Enrichmnet Correction (% x 10)(offset=84)
0010BE 0FD0BE                         WUEandASEcor: ds 2 ; the sum of WUEcor and ASEcor (% x 10)(offset=86)
0010C0 0FD0C0                         Crankcor:     ds 2 ; Cranking pulsewidth temperature correction (% x 10)(offset=88)
0010C2 0FD0C2                         TpsPctDOT:    ds 2 ; TPS difference over time (%/Sec)(update every 100mSec)(offset=90)
0010C4 0FD0C4                         TpsDOTcor:    ds 1 ; Throttle Opening Enrichment table value(%)(offset=92)
0010C5 0FD0C5                         ColdAddpct:   ds 1 ; Throttle Opening Enrichment cold adder (%)(offset=93)
0010C6 0FD0C6                         ColdMulpct:   ds 1 ; Throttle Opening Enrichment cold multiplier (%)(offset=94)
0010C7 0FD0C7                         TOEpct:       ds 1 ; Throttle Opening Enrichment (%)(offset=95)
0010C8 0FD0C8                         TOEpw:        ds 2 ; Throttle Opening Enrichment adder (mS x 100)(offset=96)
0010CA 0FD0CA                         PWlessTOE:    ds 2 ; Injector pulse width before "TOEpw" and "Deadband" (mS x 10)(offset=98)
0010CC 0FD0CC                         Deadband:     ds 2 ; injector deadband at current battery voltage mS*100(offset=100)
0010CE 0FD0CE                         PrimePW:      ds 2 ; Primer injector pulswidth (mS x 10)(offset=102)
0010D0 0FD0D0                         CrankPW:      ds 2 ; Cranking injector pulswidth (mS x 10)(offset=104)
0010D2 0FD0D2                         FDpw:         ds 2 ; Fuel Delivery pulse width (PW - Deadband) (mS x 10)(offset=106)
0010D4 0FD0D4                         PW:           ds 2 ; Running engine injector pulsewidth (mS x 10)(offset=108)
0010D6 0FD0D6                         FD:           ds 2 ; Fuel Delivery pulse width (mS)(offset=110)
0010D8 0FD0D8                         FDsec:        ds 2 ; Fuel delivery pulse width total over 1 second (mS)(offset=112)
0010DA 0FD0DA                         InjDelDegx10: ds 2 ; Injection delay from trigger to start of injection (deg x 10)(offset=114)
0010DC 0FD0DC                         InjPrFlo:     ds 2 ; Pair of injectors flow rate (L/hr x 100)(offset=116)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Ignition calculation variables
                                      ;*****************************************************************************************
0010DE 0FD0DE                         STcurr:         ds 2 ; Current value in ST table (Degrees x 10)(offset=118)
0010E0 0FD0E0                         Dwell:          ds 2 ; Coil on time (mS*10)(offset=120)
0010E2 0FD0E2                         DwellCor:       ds 2 ; Coil dwell voltage correction (%*10)(offset=122)
0010E4 0FD0E4                         DwellFin:       ds 2 ; ("Dwell" * "DwellCor") (mS*10)(offset=124)
0010E6 0FD0E6                         STandItrmx10:   ds 2 ; stCurr and Itmx10 (degrees*10)(offset=126)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Port status variables
                                      ;*****************************************************************************************
0010E8 0FD0E8                         PortAbits:    ds 1  ; Port A status bit field(offset=128)
0010E9 0FD0E9                         PortBbits:    ds 1  ; Port B status bit field(offset=129)
0010EA 0FD0EA                         PortEbits:    ds 1  ; Port E status bit field(offset=130)
0010EB 0FD0EB                         PortKbits:    ds 1  ; Port K status bit field(offset=131)
0010EC 0FD0EC                         PortJbits:    ds 1  ; Port J status bit field(offset=132)
0010ED 0FD0ED                         PortPbits:    ds 1  ; Port P status bit field(offset=133)
0010EE 0FD0EE                         PortTbits:    ds 1  ; Port T status bit field(offset=134)
                                      ;*****************************************************************************************
                                      ; - Misc variables
                                      ;*****************************************************************************************
0010EF 0FD0EF                         engine:       ds 1  ; Engine status bit field(offset=135)
0010F0 0FD0F0                         engine2:      ds 1  ; Engine2 status bit field(offset=136)
0010F1 0FD0F1                         alarmbits:    ds 1  ; Alarm status bit field(offset=137)
0010F2 0FD0F2                         AAoffbits:    ds 1  ; Audio Alarm Off status bit field(offset=138)
0010F3 0FD0F3                         StateStatus:  ds 1  ; State status bit field(offset=139)
0010F4 0FD0F4                         LoopTime:     ds 2  ; Program main loop time (loops/Sec)(offset=140)
0010F6 0FD0F6                         DutyCyclex10: ds 2  ; Injector duty cycle in run mode (% x 10)(offset=142)
0010F8 0FD0F8                         TestValw:     ds 2  ; Word test value (for program developement only)(offset=144)
0010FA 0FD0FA                         testValb:     ds 1  ; Byte test value (for program developement only)(offset=146)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - This marks the end of the real time variables (147 bytes in total)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; --------------------------------- RS232 equates ----------------------------------------
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - "engine" equates
                                      ;*****************************************************************************************
0010FB 0FD0FB -> $0001                OFCdelon     equ  $01 ; %00000001, bit 0, 0 = OFC timer not counting down(Grn),
                                                                              ; 1 = OFC timer counting down(Red)
0010FB 0FD0FB -> $0002                crank        equ  $02 ; %00000010, bit 1, 0 = engine not cranking(Grn),
                                                                              ; 1 = engine cranking(Red)
0010FB 0FD0FB -> $0004                run          equ  $04 ; %00000100, bit 2, 0 = engine not running(Red),
                                                                              ; 1 = engine running(Grn)
0010FB 0FD0FB -> $0008                ASEon        equ  $08 ; %00001000, bit 3, 0 = not in start/warmup(Grn),
                                                                              ; 1 = in start/warmup(Red)
0010FB 0FD0FB -> $0010                WUEon        equ  $10 ; %00010000, bit 4, 0 = not in warmup(Grn),
                                                                              ; 1 = in warmup(Red)
0010FB 0FD0FB -> $0020                TOEon        equ  $20 ; %00100000, bit 5, 0 = not in TOE mode(Grn),
                                                                              ; 1 = TOE mode(Red)
0010FB 0FD0FB -> $0040                OFCon        equ  $40 ; %01000000, bit 6, 0 = not in OFC mode(Grn),
                                                                              ; 1 = in OFC mode(Red)
0010FB 0FD0FB -> $0080                FldClr       equ $80  ; %10000000, bit 7, 0 = not in flood clear mode(Grn),
                                                                              ; 1 = Flood clear mode(Red)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; "engine2" equates
                                      ;*****************************************************************************************
0010FB 0FD0FB -> $0001                base512        equ $01 ; %00000001, bit 0, 0 = 5.12uS time base off(White),
                                                                               ; 1 = 5.12uS time base on(Grn)
0010FB 0FD0FB -> $0002                base256        equ $02 ; %00000010, bit 1, 0 = 2.56uS time base off(White),
                                                                               ; 1 = 2.56uS time base on(Grn)
0010FB 0FD0FB -> $0004                AudAlrm        equ $04 ; %00000100, bit 2, 0 = Audible Alarm on(Grn),
                                                                               ; 1 = Audible Alarm off(Red)
0010FB 0FD0FB -> $0008                eng2Bit3       equ $08 ; %00001000, bit 3, 0 = , 1 =
0010FB 0FD0FB -> $0010                eng2Bit4       equ $10 ; %00010000, bit 4, 0 = , 1 =
0010FB 0FD0FB -> $0020                eng2Bit5       equ $20 ; %00100000, bit 5, 0 = , 1 =
0010FB 0FD0FB -> $0040                eng2Bit6       equ $40 ; %01000000, bit 6, 0 = , 1 =
0010FB 0FD0FB -> $0080                eng2Bit7       equ $80 ; %10000000, bit 7, 0 = , 1 =
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; "alarmbits" equates
                                      ;*****************************************************************************************
0010FB 0FD0FB -> $0001                LOP        equ $01 ; %00000001, bit 0, 0 = No low oil pressure(Grn),
                                                                            ;1 = Low oil pressure(Red)
0010FB 0FD0FB -> $0002                HOT        equ $02 ; %00000010, bit 1, 0 = No high oil temperature(Grn),
                                                                            ;1 = High oil temperature(Red)
0010FB 0FD0FB -> $0004                HET        equ $04 ; %00000100, bit 2, 0 = No high coolant temperature(Grn),
                                                                            ;1 = High coolant temperature(Red)
0010FB 0FD0FB -> $0008                HEGT       equ $08 ; %00001000, bit 3, 0 = No high exhaust temperature(Grn),
                                                                            ;1 = High exhaust temperatrue(Red)
0010FB 0FD0FB -> $0010                HFT        equ $10 ; %00010000, bit 4, 0 = No high fuel temperature(Grn),
                                                                            ;1 = High fuel temperature(Red)
0010FB 0FD0FB -> $0020                LFP        equ $20 ; %00100000, bit 5, 0 = No Low fuel pressure(Grn),
                                                                            ;1 = Low fuel pressure(Red)
0010FB 0FD0FB -> $0040                HFP        equ $40 ; %01000000, bit 6, 0 = No high fuel pressure(Grn),
                                                                            ;1 = High fuel pressure(Red)
0010FB 0FD0FB -> $0080                Bit7       equ $80 ; %10000000, bit 7, 0 = , 1 =
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; "AAoffbits"equates
                                      ;*****************************************************************************************
0010FB 0FD0FB -> $0001                LOPoff        equ $01 ; %00000001, bit 0, 0 = No LOP audio alarm silence,
                                                                            ;1 = LOP audio alarm silence
0010FB 0FD0FB -> $0002                HOToff        equ $02 ; %00000010, bit 1, 0 = No HOT audio alarm silence,
                                                                            ;1 = HOT audio alarm silence
0010FB 0FD0FB -> $0004                HEToff        equ $04 ; %00000100, bit 2, 0 = No HET audio alarm silence,
                                                                            ;1 = HET audio alarm silence
0010FB 0FD0FB -> $0008                HEGToff       equ $08 ; %00001000, bit 3, 0 = No HEGT audio alarm silence,
                                                                            ;1 = HEGT audio alarm silence
0010FB 0FD0FB -> $0010                HFToff        equ $10 ; %00010000, bit 4, 0 = No HFT audio alarm silence,
                                                                            ;1 = HFT audio alarm silence
0010FB 0FD0FB -> $0020                LFPoff        equ $20 ; %00100000, bit 5, 0 = No LFP audio alarm silence,
                                                                            ;1 = LFP audio alarm silence
0010FB 0FD0FB -> $0040                HFPoff        equ $40 ; %01000000, bit 6, 0 = No HFP audio alarm silence,
                                                                             ;1 = HFP audio alarm silence
0010FB 0FD0FB -> $0080                Bit7off       equ $80 ; %10000000, bit 7, 0 = , 1 =
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - "StateStatus" equates
                                      ;*****************************************************************************************
0010FB 0FD0FB -> $0001                Synch            equ    $01  ; %00000001, bit 0,
                                                                   ; 0 = crank position not synchronized(Red),
                                                                                               ; 1 = crank position synchronized(Grn)
0010FB 0FD0FB -> $0002                SynchLost        equ    $02  ; %00000010, bit 1, 0 = synch not lost(Grn),
                                                                   ; 1 = synch lost(Red)
0010FB 0FD0FB -> $0004                StateNew         equ    $04  ; %00000100, bit 2, 0 = no new State value,
                                                                   ; 1 = New State value
0010FB 0FD0FB -> $0008                StateStatus3     equ    $08  ; %00001000, bit 3,
0010FB 0FD0FB -> $0010                StateStatus4     equ    $10  ; %00010000, bit 4
0010FB 0FD0FB -> $0020                StateStatus5     equ    $20  ; %00100000, bit 5
0010FB 0FD0FB -> $0040                StateStatus6     equ    $40  ; %01000000, bit 6
0010FB 0FD0FB -> $0080                StateStatus7     equ    $80  ; %10000000, bit 7
                                      ;*****************************************************************************************
                                      ; PortAbits: Port A status bit field (PORTA)
                                      ;*****************************************************************************************
0010FB 0FD0FB -> $0001                SW7on57to82  equ  $01 ;(PA0)%00000001, bit 0
0010FB 0FD0FB -> $0002                SW3on57to82  equ  $02 ;(PA1)%00000010, bit 1
0010FB 0FD0FB -> $0004                SW6on57to82  equ  $04 ;(PA2)%00000100, bit 2
0010FB 0FD0FB -> $0008                Ftrimen      equ  $08 ;(PA3)%00001000, bit 3, SW2on57to82, 0 = Fuel trim disabled(Grn),
                                                                                                ;1 = Fuel trim enabled(Red)
0010FB 0FD0FB -> $0010                Itrimen      equ  $10 ;(PA4)%00010000, bit 4, SW5on57to82, 0 = Ign trim disabled(Grn),
                                                                                                ;1 = Ign trim enabled(Red)
0010FB 0FD0FB -> $0020                SW1on57to82  equ  $20 ;(PA5)%00100000, bit 5
0010FB 0FD0FB -> $0040                RunLoad      equ  $40 ;(PA6)%01000000, bit 6, SW2 on CPU, 0 = EEM load enabled(Red),
                                                                                               ;1 = EEMload not enabled(Grn)
0010FB 0FD0FB -> $0080                SW4on57to82  equ  $80 ;(PA7)%10000000, bit 7
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; PortBbits: Port B status bit field (PORTB)
                                      ;*****************************************************************************************
0010FB 0FD0FB -> $0001                FuelPump    equ  $01 ;(PB0)%00000001, bit 0, D9on1to28, 0 = Fuel Pump off(Red),
                                                                                             ;1 = Fuel pump on(Grn)
0010FB 0FD0FB -> $0002                ASDRelay    equ  $02 ;(PB1)%00000010, bit 1, D23on1to28,0 = ASD Relay off(Red),
                                                                                             ;1 = ASD Relay on(Grn)
0010FB 0FD0FB -> $0004                D4on1to28   equ  $04 ;(PB2)%00000100, bit 2
0010FB 0FD0FB -> $0008                D20on1to28  equ  $08 ;(PB3)%00001000, bit 3
0010FB 0FD0FB -> $0010                D10on1to28  equ  $10 ;(PB4)%00010000, bit 4
0010FB 0FD0FB -> $0020                EngAlarm    equ  $20 ;(PB5)%00100000, bit 5, D1on29to56, 0 = Alarm Relay off,
                                                                                              ;1 = Alarm Relay on
0010FB 0FD0FB -> $0040                AIOT        equ  $40 ;(PB6)%01000000, bit 6, D10on29to56 0 = AIOT no pulse
                                                                                              ;1 = AIOT pulse
0010FB 0FD0FB -> $0080                D2on29to56  equ  $80 ;(PB7)%10000000, bit 7
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; PortEbits: Port E status bit field (PORTE)
                                      ;*****************************************************************************************
0010FB 0FD0FB -> $0001                XIRQpin      equ  $01  ;(PE0)%00000001, bit 0, XIRQ
0010FB 0FD0FB -> $0002                IRQpin       equ  $02  ;(PE1)%00000010, bit 1, IRQ
0010FB 0FD0FB -> $0004                SDcard       equ  $04  ;(PE2)%00000100, bit 2, SD card detect
0010FB 0FD0FB -> $0008                SW5on29to56  equ  $08  ;(PE3)%00001000, bit 3, SW5on29to56
0010FB 0FD0FB -> $0010                AudAlrmSil   equ  $10  ;(PE4)%00010000, bit 4, SW2on29to56, 0 = No Audible Alarm Silence
                                                                                              ; 1 = Audible Alarm Silence
0010FB 0FD0FB -> $0020                SW4on29to56  equ  $20  ;(PE5)%00100000, bit 5,(MODA) (hard wired to ground)
0010FB 0FD0FB -> $0040                SW1on29to56  equ  $40  ;(PE6)%01000000, bit 6,(MODB)( hard wired to ground)
0010FB 0FD0FB -> $0080                SW6on29to56  equ  $80  ;(PE7)%10000000, bit 7,
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; PortKbits: Port K status bit field (PORTK)
                                      ;*****************************************************************************************
0010FB 0FD0FB -> $0001                D22on1to28  equ  $01 ;(PK0)%00000001, bit 0
0010FB 0FD0FB -> $0002                D6on1to28   equ  $02 ;(PK1)%00000010, bit 1
0010FB 0FD0FB -> $0004                D25on1to28  equ  $04 ;(PK2)%00000100, bit 2
0010FB 0FD0FB -> $0008                D2on1to28   equ  $08 ;(PK3)%00001000, bit 3
0010FB 0FD0FB -> $0010                D19on1to28  equ  $10 ;(PK4)%00010000, bit 4
0010FB 0FD0FB -> $0020                D3on1to28   equ  $20 ;(PK5)%00100000, bit 5
                                      ;N/A        equ  $40 ;(PK6)%01000000, bit 6
0010FB 0FD0FB -> $0080                D2on87to112 equ  $80 ;(PK7)%10000000, bit 7
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; PortJbits: Port J status bit field (PTJ)
                                      ;*****************************************************************************************
0010FB 0FD0FB -> $0040                SW4on87to112 equ $40 ;(PJ6) %01000000, bit 6
0010FB 0FD0FB -> $0080                SW2on87to112 equ $80 ;(PJ7) %10000000, bit 7
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; PortPbits: Port P status bit field (PTP)(Tim1 Output Compare Channels)
                                      ;*****************************************************************************************
0010FB 0FD0FB -> $0001                Ign3      equ $01 ;(PP0)%00000001, bit 0, D21on1to28 (Ign3)(9&8)
0010FB 0FD0FB -> $0002                Ign4      equ $02 ;(PP1)%00000010, bit 1, D5on1to28 (Ign4)(4&7)
0010FB 0FD0FB -> $0004                Ign5      equ $04 ;(PP2)%00000100, bit 2, D24on1to28 (Ign5)(3&2)
0010FB 0FD0FB -> $0008                Inj1      equ $08 ;(PP3)%00001000, bit 3, D1on1to28 (Inj1)(1&10)
0010FB 0FD0FB -> $0010                Inj2      equ $10 ;(PP4)%00010000, bit 4, D3on87to112 (Inj2)(9&4)
0010FB 0FD0FB -> $0020                Inj3      equ $20 ;(PP5)%00100000, bit 5, D6on87to112 (Inj3)(3&6)
0010FB 0FD0FB -> $0040                Inj4      equ $40 ;(PP6)%01000000, bit 6, D1on87to112 (Inj4)(5&8)
0010FB 0FD0FB -> $0080                Inj5      equ $80 ;(PP7)%10000000, bit 7, D7on87to112 (Inj5)(7&2)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; PortTbits: Port T status bit field (PTT)(Enhanced Capture Channels)
                                      ;*****************************************************************************************
0010FB 0FD0FB -> $0001                Ign1       equ $01 ;(PT0)%00000001, bit 0, D7on1to28(Ign1)(1&6)
0010FB 0FD0FB -> $0002                PT1        equ $02 ;(PT1)%00000010, bit 1, P9 VR Sensor
0010FB 0FD0FB -> $0004                Ign2       equ $04 ;(PT2)%00000100, bit 2, D8on1to28(Ign2)(10&5)
0010FB 0FD0FB -> $0008                PT3        equ $08 ;(PT3)%00001000, bit 3, P10 VR Sensor
0010FB 0FD0FB -> $0010                PT4        equ $10 ;(PT4)%00010000, bit 4, U1 Volt/Frq RPM
0010FB 0FD0FB -> $0020                CamSens    equ $20 ;(PT5)%00100000, bit 5, K2 Cam Sensor
0010FB 0FD0FB -> $0040                PT6        equ $40 ;(PT6)%01000000, bit 6, U2 Volt Frq VSS
0010FB 0FD0FB -> $0080                CrnkSens   equ $80 ;(PT7)%10000000, bit 7, K3 Crank Sensor
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; ------------------------------- Non RS232 variables ------------------------------------
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Misc variables
                                      ;*****************************************************************************************
0010FB 0FD0FB                         tmp1:       ds 1 ; Temporary variable #1
0010FC 0FD0FC                         tmp2:       ds 1 ; Temporary variable #2
0010FD 0FD0FD                         tmp3:       ds 1 ; Temporary variable #3
0010FE 0FD0FE                         tmp4:       ds 1 ; Temporary variable #4
0010FF 0FD0FF                         tmp5:       ds 1 ; Temporary variable #5
001100 0FD100                         tmp6:       ds 1 ; Temporary variable #6
001101 0FD101                         tmp7:       ds 1 ; Temporary variable #7
001102 0FD102                         tmp8:       ds 1 ; Temporary variable #8
001103 0FD103                         LoopCntr:   ds 2 ; Counter for "LoopTime" (incremented every Main Loop pass)
                                      ;*****************************************************************************************
001105 0FD105 -> $1105                BPEM488_SHARED_VARS_END       EQU *   ; * Represents the current value of the paged
                                                                            ; program counter
001105 0FD105 -> $FD105               BPEM488_SHARED_VARS_END_LIN   EQU @   ; @ Represents the current value of the linear
                                                                            ; program counter
                                      ;*****************************************************************************************
                                      ;* - Macros -                                                                            *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
004000 7F4000                                         ORG   BPEM488_CODE_START, BPEM488_CODE_START_LIN
                                      ; - Initialization -
                                      ;*****************************************************************************************
                                      ; - Initialize stack pointer -
                                      ;*****************************************************************************************
004000 7F4000 CF 40 00                    lds   #$3FFF+1    ; Initialize stack pointer bottom + 1
                                      ;*****************************************************************************************
                                      ; - Make sure we are in Single Chip Mode
                                      ;*****************************************************************************************
004003 7F4003 86 80                       ldaa  #MODC     ; Load Acc A with the value in bit 7 of Mode Register
004005 7F4005 5A 0B                       staa  MODE      ; Copy to Mode Register (lock MODE register into NSC
                                                          ;(normal single chip mode)
004007 7F4007 79 00 1E                    clr  IRQCR      ; Disable IRQ (won't run without this)
00400A 7F400A MACRO                       BASE_INIT       ; Call "BASE_INIT" Macro
                                                                        ; program counter                              (BASE_INIT)
                                      ;***************************************************************************************** (BASE_INIT)
                                      ;* - Macros -                                                                            * (BASE_INIT)
                                      ;***************************************************************************************** (BASE_INIT)
                                      ; -  Initialization -                                                            (BASE_INIT)
00400A 7F400A MACRO                                           INIT_VECTAB     ; Initialize Interrupt vectors (vectabs_BEEM488.s) (BASE_INIT)
                                      ;***************************************************************************************** (BASE_INIT/INIT_VECTAB)
                                      ; ------------------------- Initialize interupt vectors ---------------------------------- (BASE_INIT/INIT_VECTAB)
                                      ;                                                                                (BASE_INIT/INIT_VECTAB)
                                      ;   Priority level 7 = highest, 1 = lowest. If no priority set then highest address has (BASE_INIT/INIT_VECTAB)
                                      ;   priority                                                                     (BASE_INIT/INIT_VECTAB)
                                      ;***************************************************************************************** (BASE_INIT/INIT_VECTAB)
                                      ; - Disable XGATE interrupts -                                                   (BASE_INIT/INIT_VECTAB)
                                      ;    clr   INT_XGPRIO       ; Clear XGATE Interrupt Priority Configuration Register (XGATE NOT USED!!!!!!!!!!!!!!!) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize RTI -> UI ISR vectors -                                           (BASE_INIT/INIT_VECTAB)
00400A 7F400A 18 0B F0 01 27              movb  #$F0,INT_CFADDR  ; Load "CFADDR" with %11110000 (Place RTI -> UI       (BASE_INIT/INIT_VECTAB)
                                                                 ; into window)                                        (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set RTI disabled)  (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$81,INT_CFDATA0 ; Load "CFDATA0" with %10000001 (Set RTI XGATE      (BASE_INIT/INIT_VECTAB)
                                                                 ; level 1 priority)                                   (BASE_INIT/INIT_VECTAB)
00400F 7F400F 18 0B 01 01 28              movb  #$01,INT_CFDATA0 ; Load "CFDATA0" with %10000001 (Set RTI CPU                ; RTI ENABLED, CPU, level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; level 1 priority)                                   (BASE_INIT/INIT_VECTAB)
004014 7F4014 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set IRQ disabled)    (BASE_INIT/INIT_VECTAB)
004019 7F4019 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set XIRQ disabled)   (BASE_INIT/INIT_VECTAB)
00401E 7F401E 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set SWI disabled)    (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize Enhanced Capture Timer Ch7 -> Ch0 vectors -                       (BASE_INIT/INIT_VECTAB)
004023 7F4023 18 0B E0 01 27              movb  #$E0,INT_CFADDR  ; Load "CFADDR" with %11100000 (Place Enhanced Captuer Timer (BASE_INIT/INIT_VECTAB)
                                                                 ; Ch7 -> Ch0 into window)                             (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set ECT ch7 disabled) (BASE_INIT/INIT_VECTAB)
004028 7F4028 18 0B 07 01 28              movb  #$07,INT_CFDATA0 ; Load "CFDATA0" with %00000111 (Set ECT ch7 geartrooth K3 CPU       ; ECT ch7(Crank) ENABLED, CPU, level 7 (Highest) (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 7)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$87,INT_CFDATA0 ; Load "CFDATA0" with %10000111 (Set ECT ch7 Crank XGATE (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 7)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set ECT ch6 VSS disabled) (BASE_INIT/INIT_VECTAB)
00402D 7F402D 18 0B 01 01 29              movb  #$01,INT_CFDATA1 ; Load "CFDATA1" with %00000001 (Set ECT ch6 Volt Freq U2 CPU,        ; ECT ch6 (VSS) ENABLED, CPU, level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set ECT ch5 disabled) (BASE_INIT/INIT_VECTAB)
004032 7F4032 18 0B 06 01 2A              movb  #$06,INT_CFDATA2 ; Load "CFDATA2" with %00000110 (Set ECT ch5 Geartooth K2 CPU)        ; ECT ch5 (Cam) ENABLED, CPU level 6 (BASE_INIT/INIT_VECTAB)
                                                                 ;priority level 6)                                    (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$86,INT_CFDATA2 ; Load "CFDATA2" with %10000110 (Set ECT ch5 Geartooth K2 XGATE) (BASE_INIT/INIT_VECTAB)
                                                                 ;priority level 6)                                    (BASE_INIT/INIT_VECTAB)
004037 7F4037 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set ECT ch4 disabled) (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$01,INT_CFDATA3 ; Load "CFDATA3" with %00000001 (Set ECT ch4 Volt/freq RPM CPU, (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
00403C 7F403C 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set ECT ch3 VR sensor disabled) (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set ECT ch2 disabled) (BASE_INIT/INIT_VECTAB)
004041 7F4041 18 0B 01 01 2D              movb  #$01,INT_CFDATA5 ; Load "CFDATA5" with %00000001 (Set (D8)(1to28)(Ign2)(10&5)         ; ECT ch2 ((D8)(1to28)(Ign2)(10&5)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
004046 7F4046 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set ECT ch1 VR sensor disabled) (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set ECT ch0 disabled) (BASE_INIT/INIT_VECTAB)
00404B 7F404B 18 0B 01 01 2F              movb  #$01,INT_CFDATA7 ; Load "CFDATA7" with %00000001 (Set (D7)(1to28)(Ign1)(1&6)        ; ECT ch0 ((D7)(1to28)(Ign1)(1&6)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize ATD1 -> Enhanced Capture Timer Overflow Interrupt Vectors -       (BASE_INIT/INIT_VECTAB)
004050 7F4050 18 0B D0 01 27              movb  #$D0,INT_CFADDR  ; Load "CFADDR" with %11010000 (Place ATD1 -> Enhanced (BASE_INIT/INIT_VECTAB)
                                                                 ; Capture Timer Overflow into window)                 (BASE_INIT/INIT_VECTAB)
004055 7F4055 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set ATD1 disabled)   (BASE_INIT/INIT_VECTAB)
00405A 7F405A 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set ATD0 disabled)   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$01,INT_CFDATA1 ; Load "CFDATA1" with %00000001 (Set ATD0 CPU to    (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
00405F 7F405F 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set SCI1 disabled)   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set SCI0 disabled) (BASE_INIT/INIT_VECTAB)
004064 7F4064 18 0B 01 01 2B              movb  #$01,INT_CFDATA3 ; Load "CFDATA3" with %00000001 (Set SCI0 CPU to         ; SCI0 ENABLED, CPU, level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
004069 7F4069 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set SPI0 disabled)   (BASE_INIT/INIT_VECTAB)
00406E 7F406E 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set Pulse accumulator input (BASE_INIT/INIT_VECTAB)
                                                                 ; edge disabled)                                      (BASE_INIT/INIT_VECTAB)
004073 7F4073 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set Pulse accumulator A (BASE_INIT/INIT_VECTAB)
                                                                 ; overflow disabled)                                  (BASE_INIT/INIT_VECTAB)
004078 7F4078 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set ECT overflow disabled) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize IIC0 bus -> Port J Interrupt Vectors -                            (BASE_INIT/INIT_VECTAB)
00407D 7F407D 18 0B C0 01 27              movb  #$C0,INT_CFADDR  ; Load "CFADDR" with %11000000 (IIC0 bus -> Port J    (BASE_INIT/INIT_VECTAB)
                                                                 ; into window)                                        (BASE_INIT/INIT_VECTAB)
004082 7F4082 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set IIC0 bus disabled) (BASE_INIT/INIT_VECTAB)
004087 7F4087 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set SCI6 disabled)   (BASE_INIT/INIT_VECTAB)
00408C 7F408C 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set CRG self clock mode (BASE_INIT/INIT_VECTAB)
                                                                 ; disabled)                                           (BASE_INIT/INIT_VECTAB)
004091 7F4091 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set CRG PLL lock disabled) (BASE_INIT/INIT_VECTAB)
004096 7F4096 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set Pulse accumulator B (BASE_INIT/INIT_VECTAB)
                                                                 ; overflow disabled)                                  (BASE_INIT/INIT_VECTAB)
00409B 7F409B 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set Modulus down counter (BASE_INIT/INIT_VECTAB)
                                                                 ; underflow disabled)                                 (BASE_INIT/INIT_VECTAB)
0040A0 7F40A0 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set Port H disabled) (BASE_INIT/INIT_VECTAB)
0040A5 7F40A5 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set Port J disabled) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize CAN0 transmit -> SPI1 Interrupt Vectors -                         (BASE_INIT/INIT_VECTAB)
0040AA 7F40AA 18 0B B0 01 27              movb  #$B0,INT_CFADDR  ; Load "CFADDR" with %10110000 (CAN0 transmit -> SPI1 (BASE_INIT/INIT_VECTAB)
                                                                 ; into window)                                        (BASE_INIT/INIT_VECTAB)
0040AF 7F40AF 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set CAN0 transmit disabled) (BASE_INIT/INIT_VECTAB)
0040B4 7F40B4 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set CAN0 receive disabled) (BASE_INIT/INIT_VECTAB)
0040B9 7F40B9 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set CAN0 errors disabled) (BASE_INIT/INIT_VECTAB)
0040BE 7F40BE 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set CAN0 wake-up disabled) (BASE_INIT/INIT_VECTAB)
0040C3 7F40C3 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set FLASH disabled)  (BASE_INIT/INIT_VECTAB)
0040C8 7F40C8 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set Flash fault detect (BASE_INIT/INIT_VECTAB)
                                                                 ; disabled)                                           (BASE_INIT/INIT_VECTAB)
0040CD 7F40CD 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set SPI2 disabled)   (BASE_INIT/INIT_VECTAB)
0040D2 7F40D2 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set SPI1 disabled)   (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize CAN2 transmit -> CAN1 wake-up Interrupt Vectors -                 (BASE_INIT/INIT_VECTAB)
0040D7 7F40D7 18 0B A0 01 27              movb  #$A0,INT_CFADDR  ; Load "CFADDR" with %10100000 (CAN2 transmit -> CAN1 (BASE_INIT/INIT_VECTAB)
                                                                 ; wake-up into window)                                (BASE_INIT/INIT_VECTAB)
0040DC 7F40DC 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set CAN2 transmit disabled) (BASE_INIT/INIT_VECTAB)
0040E1 7F40E1 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set CAN2 receive disabled) (BASE_INIT/INIT_VECTAB)
0040E6 7F40E6 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set CAN2 errors disabled) (BASE_INIT/INIT_VECTAB)
0040EB 7F40EB 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set CAN2 wake-up disabled) (BASE_INIT/INIT_VECTAB)
0040F0 7F40F0 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set CAN1 transmit disabled) (BASE_INIT/INIT_VECTAB)
0040F5 7F40F5 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set CAN1 receive disabled) (BASE_INIT/INIT_VECTAB)
0040FA 7F40FA 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set CAN1 errors disabled) (BASE_INIT/INIT_VECTAB)
0040FF 7F40FF 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set CAN1 wake-up disabled) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize CAN4 transmit -> CAN3 wake-up Interrupt Vectors -                 (BASE_INIT/INIT_VECTAB)
004104 7F4104 18 0B 90 01 27              movb  #$90,INT_CFADDR  ; Load "CFADDR" with %10010000 (CAN2 transmit -> CAN1 (BASE_INIT/INIT_VECTAB)
                                                                 ; wake-up into window)                                (BASE_INIT/INIT_VECTAB)
004109 7F4109 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set CAN4 transmit disabled) (BASE_INIT/INIT_VECTAB)
00410E 7F410E 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set CAN4 receive disabled) (BASE_INIT/INIT_VECTAB)
004113 7F4113 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set CAN4 errors disabled) (BASE_INIT/INIT_VECTAB)
004118 7F4118 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set CAN4 wake-up disabled) (BASE_INIT/INIT_VECTAB)
00411D 7F411D 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set CAN3 transmit disabled) (BASE_INIT/INIT_VECTAB)
004122 7F4122 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set CAN3 receive disabled) (BASE_INIT/INIT_VECTAB)
004127 7F4127 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set CAN3 errors disabled) (BASE_INIT/INIT_VECTAB)
00412C 7F412C 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set CAN3 wake-up disabled) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize Low Voltage interrupt -> Port P Interrupt Vectors -               (BASE_INIT/INIT_VECTAB)
004131 7F4131 18 0B 80 01 27              movb  #$80,INT_CFADDR  ; Load "CFADDR" with %10000000 (Low Voltage interrupt -> (BASE_INIT/INIT_VECTAB)
                                                                 ; Port P into window)                                 (BASE_INIT/INIT_VECTAB)
004136 7F4136 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set Low Voltage interrupt (BASE_INIT/INIT_VECTAB)
                                                                 ; disabled)                                           (BASE_INIT/INIT_VECTAB)
00413B 7F413B 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set IIC1 bus disabled) (BASE_INIT/INIT_VECTAB)
004140 7F4140 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set SCI5 disabled)   (BASE_INIT/INIT_VECTAB)
004145 7F4145 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set SCI4 disabled)   (BASE_INIT/INIT_VECTAB)
00414A 7F414A 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set SCI3 transmit disabled) (BASE_INIT/INIT_VECTAB)
00414F 7F414F 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set SCI2 receive disabled) (BASE_INIT/INIT_VECTAB)
004154 7F4154 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set PWM emergency shutdown (BASE_INIT/INIT_VECTAB)
                                                                 ; disabled)                                           (BASE_INIT/INIT_VECTAB)
004159 7F4159 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set Port P interrupt disabled) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize XGATE SW trig 1 -> API Interrupt Vectors -                        (BASE_INIT/INIT_VECTAB)
00415E 7F415E 18 0B 70 01 27              movb  #$70,INT_CFADDR  ; Load "CFADDR" with %01110000 (XGATE SW trig 1 -> API (BASE_INIT/INIT_VECTAB)
                                                                 ; into window)                                        (BASE_INIT/INIT_VECTAB)
004163 7F4163 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set XGATE SW trig 1 disabled) (BASE_INIT/INIT_VECTAB)
004168 7F4168 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set XGATE SW trig 0 disabled) (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$81,INT_CFDATA1 ; Load "CFDATA1" with %10000001 (Set XGATE SW trig 0 XGATE,)      ; XGATE SW Trig 0 (RTI) Disabled, XGATE, level 1 (used to clear RTI variables) (BASE_INIT/INIT_VECTAB)
                                                                 ; level 1 priority)                                   (BASE_INIT/INIT_VECTAB)
00416D 7F416D 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set PIT ch3 disabled) (BASE_INIT/INIT_VECTAB)
004172 7F4172 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set PIT ch2 disabled) (BASE_INIT/INIT_VECTAB)
004177 7F4177 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set PIT ch1 transmit disabled) (BASE_INIT/INIT_VECTAB)
00417C 7F417C 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set PIT ch0 disabled) (BASE_INIT/INIT_VECTAB)
004181 7F4181 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set Hi Temp interrupt disabled) (BASE_INIT/INIT_VECTAB)
004186 7F4186 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set API interrupt disabled) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize XGATE SW trig 7 -> XGATE SW trig 2 Interrupt Vectors -            (BASE_INIT/INIT_VECTAB)
00418B 7F418B 18 0B 64 01 27              movb  #$64,INT_CFADDR  ; Load "CFADDR" with %01100100 (XGATE SW trig 7 -> XGATE SW (BASE_INIT/INIT_VECTAB)
                                                                 ; trig 2 into window)                                 (BASE_INIT/INIT_VECTAB)
004190 7F4190 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set XGATE SW trig 7 disabled) (BASE_INIT/INIT_VECTAB)
004195 7F4195 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set XGATE SW trig 6 disabled) (BASE_INIT/INIT_VECTAB)
00419A 7F419A 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set XGATE SW trig 5 disabled) (BASE_INIT/INIT_VECTAB)
00419F 7F419F 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set XGATE SW trig 4 disabled) (BASE_INIT/INIT_VECTAB)
0041A4 7F41A4 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set XGATE SW trig 3 disabled) (BASE_INIT/INIT_VECTAB)
0041A9 7F41A9 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set XGATE SW trig 2 disabled) (BASE_INIT/INIT_VECTAB)
0041AE 7F41AE 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
0041B3 7F41B3 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize TIM ch2 -> PIT ch4 Interrupt Vectors -                            (BASE_INIT/INIT_VECTAB)
0041B8 7F41B8 18 0B 50 01 27              movb  #$50,INT_CFADDR  ; Load "CFADDR" with %01010000 (TIM ch2 -> PIT ch4    (BASE_INIT/INIT_VECTAB)
                                                                 ; into window)                                        (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set TIM ch2 disabled) (BASE_INIT/INIT_VECTAB)
0041BD 7F41BD 18 0B 01 01 28              movb  #$01,INT_CFDATA0 ; Load "CFDATA0" with %00000001 (Set (D24)(1to28)(Ign5)(3&2)  ; TIM ch2 ((D24)(1to28)(Ign5)(3&2)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set TIM ch1 disabled) (BASE_INIT/INIT_VECTAB)
0041C2 7F41C2 18 0B 01 01 29              movb  #$01,INT_CFDATA1 ; Load "CFDATA1" with %00000001 (Set (D5)(1to28)(Ign4)(4&7)   ; TIM ch1 ((D5)(1to28)(Ign4)(4&7)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set TIM ch0 disabled) (BASE_INIT/INIT_VECTAB)
0041C7 7F41C7 18 0B 01 01 2A              movb  #$01,INT_CFDATA2 ; Load "CFDATA2" with %00000001 (Set (D21)(1to28)(Ign3)(9&8)  ; TIM ch0 ((D21)(1to28)(Ign3)(9&8)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
0041CC 7F41CC 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set SCI7 disabled)   (BASE_INIT/INIT_VECTAB)
0041D1 7F41D1 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set PIT ch7 disabled) (BASE_INIT/INIT_VECTAB)
0041D6 7F41D6 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set PIT ch6 disabled) (BASE_INIT/INIT_VECTAB)
0041DB 7F41DB 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set PIT ch5 disabled) (BASE_INIT/INIT_VECTAB)
0041E0 7F41E0 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set PIT ch4 disabled) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize TIM Pulse accumulator input edge -> TIM ch3 Interrupt Vectors -   (BASE_INIT/INIT_VECTAB)
0041E5 7F41E5 18 0B 40 01 27              movb  #$40,INT_CFADDR  ; Load "CFADDR" with %01000000 (TIM Pulse accumulator (BASE_INIT/INIT_VECTAB)
                                                                 ; input edge -> TIM ch3 into window)                  (BASE_INIT/INIT_VECTAB)
0041EA 7F41EA 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set TIM Pulse accumulator (BASE_INIT/INIT_VECTAB)
                                                                 ; input edge disabled)                                (BASE_INIT/INIT_VECTAB)
0041EF 7F41EF 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set TIM Pulse accumulator (BASE_INIT/INIT_VECTAB)
                                                                 ; A overflow disabled)                                (BASE_INIT/INIT_VECTAB)
0041F4 7F41F4 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set TIM overflow disabled) (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set TIM ch7 disabled) (BASE_INIT/INIT_VECTAB)
0041F9 7F41F9 18 0B 01 01 2B              movb  #$01,INT_CFDATA3 ; Load "CFDATA3" with %00000001 (Set (D7)(87to112)(Inj5)(7&2)  ; TIM ch7 ((D7)(87to112)(Inj5)(7&2)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set TIM ch6 disabled) (BASE_INIT/INIT_VECTAB)
0041FE 7F41FE 18 0B 01 01 2C              movb  #$01,INT_CFDATA4 ; Load "CFDATA4" with %00000001 (Set (D1)(87to112)(Inj4)(5&8)  ; TIM ch6 ((D1)(87to112)(Inj4)(5&8)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set TIM ch5 disabled) (BASE_INIT/INIT_VECTAB)
004203 7F4203 18 0B 01 01 2D              movb  #$01,INT_CFDATA5 ; Load "CFDATA5" with %00000001 (Set (D6)(87to112)(Inj3)(3&6)  ; TIM ch5 ((D6)(87to112)(Inj3)(3&6)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA6 ; Load "CFDATA6" with %00000000 (Set TIM ch4 disabled) (BASE_INIT/INIT_VECTAB)
004208 7F4208 18 0B 01 01 2E              movb  #$01,INT_CFDATA6 ; Load "CFDATA6" with %00000001 (Set (D3)(87to112)(Inj2)(9&4)  ; TIM ch4 ((D3)(87to112)(Inj2)(9&4)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA7 ; Load "CFDATA7" with %00000000 (Set TIM ch3 disabled) (BASE_INIT/INIT_VECTAB)
00420D 7F420D 18 0B 01 01 2F              movb  #$01,INT_CFDATA7 ; Load "CFDATA7" with %00000001 (Set (D1)(1to28)(Inj1)(1&10)  ; TIM ch3 ((D1)(1to28)(Inj1)(1&10)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize ATD1 Compare interrupt -> ATD0 Compare interrupt Interrupt Vectors - (BASE_INIT/INIT_VECTAB)
004212 7F4212 18 0B 3C 01 27              movb  #$3C,INT_CFADDR  ; Load "CFADDR" with %00111100 (ATD1 Compare interrupt -> (BASE_INIT/INIT_VECTAB)
                                                                 ; ATD0 Compare interrupt into window)                 (BASE_INIT/INIT_VECTAB)
004217 7F4217 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set ATD1 Compare interrupt disabled) (BASE_INIT/INIT_VECTAB)
00421C 7F421C 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set ATD0 Compare interrupt disabled) (BASE_INIT/INIT_VECTAB)
004221 7F4221 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
004226 7F4226 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
00422B 7F422B 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
004230 7F4230 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
004235 7F4235 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
00423A 7F423A 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize Spurious interrupt -> XGATE software error Interrupt Vectors -    (BASE_INIT/INIT_VECTAB)
00423F 7F423F 18 0B 10 01 27              movb  #$10,INT_CFADDR  ; Load "CFADDR" with %00010000 (ATD1 Compare interrupt -> (BASE_INIT/INIT_VECTAB)
                                                                 ; ATD0 Compare interrupt into window)                 (BASE_INIT/INIT_VECTAB)
004244 7F4244 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set Spurious interrupt (BASE_INIT/INIT_VECTAB)
                                                                 ; disabled)                                           (BASE_INIT/INIT_VECTAB)
004249 7F4249 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set System Call disabled) (BASE_INIT/INIT_VECTAB)
00424E 7F424E 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set MPU access error disabled) (BASE_INIT/INIT_VECTAB)
004253 7F4253 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set XGATE software error (BASE_INIT/INIT_VECTAB)
                                                                 ; disabled)                                           (BASE_INIT/INIT_VECTAB)
004258 7F4258 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
00425D 7F425D 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
004262 7F4262 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
004267 7F4267 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
00426C 7F426C MACRO                                           CLR_VECTAB_VARS ; Clear Vectab variables (vectabs_BPEM488.s) (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_VECTAB_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_VECTAB_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_VECTAB_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_VECTAB_VARS)
00426C 7F426C 79 10 00                   clr  ResetFlgs  ; Reset Flags bit field variable                              (BASE_INIT/CLR_VECTAB_VARS)
00426F 7F426F 79 10 01                   clr  VecDebug   ; Vector Table de-bug address holder                          (BASE_INIT/CLR_VECTAB_VARS)
004272 7F4272 MACRO                                           INIT_EEEM       ; Initialize EEPROM Emulation (eeem_BEEM488.s) (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/INIT_EEEM)
                                      ;***************************************************************************************** (BASE_INIT/INIT_EEEM)
                                      ;* - Macros -                                                                            * (BASE_INIT/INIT_EEEM)
                                      ;***************************************************************************************** (BASE_INIT/INIT_EEEM)
                                      ; - Initialization -                                                             (BASE_INIT/INIT_EEEM)
004272 7F4272 18 0B 0F 01 00              movb    #EEEM_FDIV_VAL, FCLKDIV ; Load Flash clock Divider Register          (BASE_INIT/INIT_EEEM)
004277 7F4277 MACRO                               INIT_CLOCK      ; Initialize Clocks and RTI(clock_BEEM488.s)         (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/INIT_CLOCK)
                                      ;***************************************************************************************** (BASE_INIT/INIT_CLOCK)
                                      ;* - Macros -                                                                            * (BASE_INIT/INIT_CLOCK)
                                      ;***************************************************************************************** (BASE_INIT/INIT_CLOCK)
                                      ;***************************************************************************************** (BASE_INIT/INIT_CLOCK)
                                      ; - Initialize the the clock generator and Phase Lock Loop for 50 Mhz            (BASE_INIT/INIT_CLOCK)
                                      ;   Bus Clock frequency.(See pages 473, 474 and 486,487)                         (BASE_INIT/INIT_CLOCK)
                                      ;                                                                                (BASE_INIT/INIT_CLOCK)
                                      ;   SYSCLK (bus clock) is half of selected source clock, either OSCCLK           (BASE_INIT/INIT_CLOCK)
                                      ;   or PLLCLK.The PLLCLK frequency is:                                           (BASE_INIT/INIT_CLOCK)
                                      ;   PLLCLCK = 2 * OSCCLK * (SYDIV + 1) / REFDIV + 1)                             (BASE_INIT/INIT_CLOCK)
                                      ;   We are using a 16 Mhz crystal oscilator for OSCCLK, So if SYNDIV             (BASE_INIT/INIT_CLOCK)
                                      ;   = 24 and REFDIV = 7 then PLLCLCK will be (2 * 16000000 *25) / 8 =            (BASE_INIT/INIT_CLOCK)
                                      ;   100 Mhz. PLLCLK / 2 = 50 Mhz. Bus Clock.                                     (BASE_INIT/INIT_CLOCK)
                                      ;   From table 11-2 for 100MHz VCO clock VCOFRQ[1:0] = 11 so                     (BASE_INIT/INIT_CLOCK)
                                      ;   so SYNR = %11011000 = $D8                                                    (BASE_INIT/INIT_CLOCK)
                                      ;   From table 11-3 for 2MHz REFLCK frequency REFFRQ[1:0] = 00 so                (BASE_INIT/INIT_CLOCK)
                                      ;   so REFDV = %00000111 = $07                                                   (BASE_INIT/INIT_CLOCK)
                                      ;***************************************************************************************** (BASE_INIT/INIT_CLOCK)
004277 7F4277 18 0B FF 00 37              movb  #$FF,CRGFLG     ; Clear all flags                                      (BASE_INIT/INIT_CLOCK)
00427C 7F427C 18 0B D8 00 34              movb  #$D8,SYNR       ; Load "SYNR" with %11011000                           (BASE_INIT/INIT_CLOCK)
004281 7F4281 18 0B 07 00 35              movb  #$07,REFDV      ; Load "REFDV" with %00000111                          (BASE_INIT/INIT_CLOCK)
004286 7F4286 4F 37 08 FC                 brclr CRGFLG,LOCK,*+0 ; Loop until LOCK flag is cleared                      (BASE_INIT/INIT_CLOCK)
00428A 7F428A 4C 39 80                    bset  CLKSEL,PLLSEL   ; Set "PLL Select bit" to derive system clocks from "PLLCLK" (BASE_INIT/INIT_CLOCK)
00428D 7F428D MACRO                               INIT_RTI        ; Initialize Real Time Interrupt (rti_BEEM488.s)     (BASE_INIT)
                                      ;***************************************************************************************** (BASE_INIT/INIT_RTI)
                                      ; - Initialize Real Time Interrupt for 125uS period -                            (BASE_INIT/INIT_RTI)
                                      ;   OSCLOCK / 2 = Frequency divide rate                                          (BASE_INIT/INIT_RTI)
                                      ;   16,000,000/2=8,000,000                                                       (BASE_INIT/INIT_RTI)
                                      ;   1/8,000,000=0.000125 Sec period                                              (BASE_INIT/INIT_RTI)
                                      ;***************************************************************************************** (BASE_INIT/INIT_RTI)
00428D 7F428D 18 0B 81 00 3B              movb  #$81,RTICTL     ; Load "RTICTL with %10000001 (Decimal                 (BASE_INIT/INIT_RTI)
                                                                ; based divider,125uS period)                          (BASE_INIT/INIT_RTI)
004292 7F4292 4C 37 80                    bset  CRGFLG,RTIF     ; Clear Real Time Interrupt Flag                       (BASE_INIT/INIT_RTI)
004295 7F4295 4C 38 80                    bset  CRGINT,RTIE     ; Enable RTI                                           (BASE_INIT/INIT_RTI)
004298 7F4298 MACRO                                           CLR_RTI_VARS    ; Clear RTI variables  (rti_BEEM488.s)   (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_RTI_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_RTI_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_RTI_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_RTI_VARS)
004298 7F4298 79 10 02                   clr uSx125     ; 125 microsecond counter                                      (BASE_INIT/CLR_RTI_VARS)
00429B 7F429B 79 10 03                   clr mS         ; 1 millisecond counter                                        (BASE_INIT/CLR_RTI_VARS)
00429E 7F429E 79 10 04                   clr mSx250     ; 250 millisecond counter                                      (BASE_INIT/CLR_RTI_VARS)
0042A1 7F42A1 79 10 05                   clr clock      ; Time rate flag marker bit field                              (BASE_INIT/CLR_RTI_VARS)
0042A4 7F42A4 MACRO                               INIT_SCI0       ; Initialize SCI0 (sci0_BEEM488.s)                   (BASE_INIT)
                                      ;***************************************************************************************** (BASE_INIT/INIT_SCI0)
                                      ; - Initialize the SCI0 interface for 115,200 Baud Rate                          (BASE_INIT/INIT_SCI0)
                                      ;   When IREN = 0, SCI Baud Rate = SCI bus clock / 16 x SBR[12-0]                (BASE_INIT/INIT_SCI0)
                                      ;   or SCI0BDH:SCI0BDL = (Bus Freq/16)/115200 = 21.70                            (BASE_INIT/INIT_SCI0)
                                      ;   27.1 rounded = 27 = $1B                                                      (BASE_INIT/INIT_SCI0)
                                      ;***************************************************************************************** (BASE_INIT/INIT_SCI0)
0042A4 7F42A4 18 0B 00 00 C8              movb  #$00,SCI0BDH  ; Load SCI0BDH with %01010100, (IR disabled, 1/16 narrow pulse (BASE_INIT/INIT_SCI0)
                                                              ; width, no prescale Hi Byte)                            (BASE_INIT/INIT_SCI0)
0042A9 7F42A9 18 0B 1B 00 C9              movb  #$1B,SCI0BDL  ; Load SCI0BDL with decimal 27, prescale Lo byte         (BASE_INIT/INIT_SCI0)
                                                              ;(115,200 Baud Rate)                                     (BASE_INIT/INIT_SCI0)
0042AE 7F42AE 79 00 CA                    clr   SCI0CR1       ; Load SCI0CR1 with %00000000(Normal operation, SCI enabled (BASE_INIT/INIT_SCI0)
                                                              ; in wait mode. Internal receiver source. One start bit,8 data (BASE_INIT/INIT_SCI0)
                                                              ; bits, one stop bit. Idle line wakeup. No parity.)      (BASE_INIT/INIT_SCI0)
0042B1 7F42B1 18 0B 24 00 CB              movb  #$24,SCI0CR2  ; Load SCI0CR2 with %00100100(TDRE interrupts disabled. TCIE (BASE_INIT/INIT_SCI0)
0042B6 7F42B6 MACRO                                           CLR_SCI0_VARS   ; Clear SCI0 variables  (sci0_BEEM488.s) (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_SCI0_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_SCI0_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_SCI0_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_SCI0_VARS)
0042B6 7F42B6 79 10 06                   clr  txgoalMSB    ; SCI number of bytes to send/rcv Hi byte                   (BASE_INIT/CLR_SCI0_VARS)
0042B9 7F42B9 79 10 07                   clr  txgoalLSB    ; SCI number of bytes to send/rcv Lo byte                   (BASE_INIT/CLR_SCI0_VARS)
0042BC 7F42BC 18 79 10 08                clrw txcnt        ; SCI count of bytes sent/rcvd                              (BASE_INIT/CLR_SCI0_VARS)
0042C0 7F42C0 79 10 0A                   clr  rxoffsetMSB  ; SCI offset from start of page Hi byte                     (BASE_INIT/CLR_SCI0_VARS)
0042C3 7F42C3 79 10 0B                   clr  rxoffsetLSB  ; SCI offset from start of page lo byte                     (BASE_INIT/CLR_SCI0_VARS)
0042C6 7F42C6 79 10 0C                   clr  rxmode       ; SCI receive mode selector                                 (BASE_INIT/CLR_SCI0_VARS)
0042C9 7F42C9 79 10 0D                   clr  txmode       ; SCI transmit mode selector                                (BASE_INIT/CLR_SCI0_VARS)
0042CC 7F42CC 79 10 0E                   clr  pageID       ; SCI page identifier                                       (BASE_INIT/CLR_SCI0_VARS)
0042CF 7F42CF 79 10 0F                   clr  txcmnd       ; SCI command character identifier                          (BASE_INIT/CLR_SCI0_VARS)
0042D2 7F42D2 79 10 10                   clr  dataMSB      ; SCI data Most Significant Byte received                   (BASE_INIT/CLR_SCI0_VARS)
0042D5 7F42D5 79 10 11                   clr  dataLSB      ; SCI data Least Significant Byte received                  (BASE_INIT/CLR_SCI0_VARS)
0042D8 7F42D8 MACRO                               INIT_ADC0       ; Initialize ADC0 channels (adc0_BEEM488.s)          (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/INIT_ADC0)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ADC0)
                                      ;* - Macros -                                                                            * (BASE_INIT/INIT_ADC0)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ADC0)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ADC0)
                                      ; - Initialize Analog to Digital Converter (ATD0) for continuous conversions     (BASE_INIT/INIT_ADC0)
                                      ;   8.3MHz ATDCLK period = 0.00000012048 Sec.                                    (BASE_INIT/INIT_ADC0)
                                      ;   10 bit ATD Conversion period = 41 ATDCLK cycles(ref page 1219)               (BASE_INIT/INIT_ADC0)
                                      ;   Sample time per channel = 24+2 for discharge capacitor = 26 ATDCLK cycles    (BASE_INIT/INIT_ADC0)
                                      ;   Sample time for all 16 channels = (41+26)x16=1072 ATDCLK periods = 0.00012915 Sec. (~129uS) (BASE_INIT/INIT_ADC0)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ADC0)
0042D8 7F42D8 18 03 00 00 02 CC           movw  #$0000,ATD0DIENH  ; Load ATD0 Input Enable Register                    (BASE_INIT/INIT_ADC0)
                                                                  ; Hi byte and Lo byte with                           (BASE_INIT/INIT_ADC0)
                                                                  ; %0000000000000000 (all pins ADC)                   (BASE_INIT/INIT_ADC0)
0042DE 7F42DE 18 0B 0F 02 C0              movb  #$0F,ATD0CTL0 ; Load "ATD0CTL0" with %00001111                         (BASE_INIT/INIT_ADC0)
                                                              ; (wrap at AN15)                                         (BASE_INIT/INIT_ADC0)
                                                                          ;             ^  ^                           (BASE_INIT/INIT_ADC0)
                                                                          ;    WRAP-----+--+                           (BASE_INIT/INIT_ADC0)
0042E3 7F42E3 18 0B 30 02 C1              movb  #$30,ATD0CTL1 ; Load "ATD0CTL1" with %00110000                         (BASE_INIT/INIT_ADC0)
                                                              ; (no external trigger, 10 bit resolution,               (BASE_INIT/INIT_ADC0)
                                                              ; discharge cap before conversion)                       (BASE_INIT/INIT_ADC0)
                                                              ;         ^^^^^  ^                                       (BASE_INIT/INIT_ADC0)
                                                              ;ETRIGSEL-+||||  |                                       (BASE_INIT/INIT_ADC0)
                                                              ;    SRES--++||  |                                       (BASE_INIT/INIT_ADC0)
                                                              ; SMP_DIS----+|  |                                       (BASE_INIT/INIT_ADC0)
                                                              ; ETRIGCH-----+--+                                       (BASE_INIT/INIT_ADC0)
                                      ;*    movb  #$62,ATD0CTL2 ; Load "ATD0CTL2" with %01100010                       (BASE_INIT/INIT_ADC0)
                                                              ;(fast flag clear, continue in stop,                     (BASE_INIT/INIT_ADC0)
                                                              ; no external trigger, Sequence                          (BASE_INIT/INIT_ADC0)
                                                              ; complete interrupt enabled,                            (BASE_INIT/INIT_ADC0)
                                                              ; Compare interrupt disabled)                            (BASE_INIT/INIT_ADC0)
                                                              ;          ^^^^^^^                                       (BASE_INIT/INIT_ADC0)
                                                              ;    AFFC--+||||||                                       (BASE_INIT/INIT_ADC0)
                                                              ; ICLKSTP---+|||||                                       (BASE_INIT/INIT_ADC0)
                                                              ; ETRIGLE----+||||                                       (BASE_INIT/INIT_ADC0)
                                                              ;  ETRIGP-----+|||                                       (BASE_INIT/INIT_ADC0)
                                                              ;  ETRIGE------+||                                       (BASE_INIT/INIT_ADC0)
                                                              ;   ASCIE-------+|                                       (BASE_INIT/INIT_ADC0)
                                                              ;  ACMPIE--------+                                       (BASE_INIT/INIT_ADC0)
0042E8 7F42E8 18 0B 60 02 C2              movb  #$60,ATD0CTL2 ; Load "ATD0CTL2" with %01100000                         (BASE_INIT/INIT_ADC0)
                                                              ;(fast flag clear, continue in stop,                     (BASE_INIT/INIT_ADC0)
                                                              ; no external trigger, Sequence                          (BASE_INIT/INIT_ADC0)
                                                              ; complete interrupt disabled,                           (BASE_INIT/INIT_ADC0)
                                                              ; Compare interrupt disabled)                            (BASE_INIT/INIT_ADC0)
                                                              ;          ^^^^^^^                                       (BASE_INIT/INIT_ADC0)
                                                              ;    AFFC--+||||||                                       (BASE_INIT/INIT_ADC0)
                                                              ; ICLKSTP---+|||||                                       (BASE_INIT/INIT_ADC0)
                                                              ; ETRIGLE----+||||                                       (BASE_INIT/INIT_ADC0)
                                                              ;  ETRIGP-----+|||                                       (BASE_INIT/INIT_ADC0)
                                                              ;  ETRIGE------+||                                       (BASE_INIT/INIT_ADC0)
                                                              ;   ASCIE-------+|                                       (BASE_INIT/INIT_ADC0)
                                                              ;  ACMPIE--------+                                       (BASE_INIT/INIT_ADC0)
0042ED 7F42ED 18 0B 80 02 C3              movb  #$80,ATD0CTL3 ; Load "ATD0CTL3" with %10000000                         (BASE_INIT/INIT_ADC0)
                                                              ;(right justifed data, 16 conversions,                   (BASE_INIT/INIT_ADC0)
                                                              ; no Fifo, no freeze)                                    (BASE_INIT/INIT_ADC0)
                                                              ;         ^^^^^^^^                                       (BASE_INIT/INIT_ADC0)
                                                              ;     DJM-+|||||||                                       (BASE_INIT/INIT_ADC0)
                                                              ;     S8C--+||||||                                       (BASE_INIT/INIT_ADC0)
                                                              ;     S4C---+|||||                                       (BASE_INIT/INIT_ADC0)
                                                              ;     S2C----+||||                                       (BASE_INIT/INIT_ADC0)
                                                              ;     S1C-----+|||                                       (BASE_INIT/INIT_ADC0)
                                                              ;    FIFO------+||                                       (BASE_INIT/INIT_ADC0)
                                                              ;     FRZ-------++                                       (BASE_INIT/INIT_ADC0)
0042F2 7F42F2 18 0B E2 02 C4              movb  #$E2,ATD0CTL4 ; Load "ATD0CTL4" with %11100010                         (BASE_INIT/INIT_ADC0)
0042F7 7F42F7 MACRO                               INIT_GPIO       ; Initialize GPIOs (gpio_BEEM488.s)                  (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ;* - Macros -                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ;*    This Macro initializes all GPIO ports for the BEPM simulator                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port AD:                                                                           * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD00 - ATD0  0 (RV15)(cltADC)     (analog, no pull) temperature sensor           * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD01 - ATD0  1 (RV14)(matADC)     (analog, no pull) temperature sensor           * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD02 - ATD0  2 (RV13)(eftADC)     (analog, no pull) temperature sensor           * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD03 - ATD0  3 (RV12)(eotADC)     (analog, no pull) temperature sensor           * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD04 - ATD0  4 (RV11)             (analog, no pull) temperature sensor           * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD05 - ATD0  5 (RV10)(mapADC)     (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD06 - ATD0  6 (RV9) (baroADC)    (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD07 - ATD0  7       (batADC)     (analog, no pull) hard wired Bat volts only    * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD08 - ATD0  8 (RV8) (ftrmADC)    (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD09 - ATD0  9 (RV7) (itrmADC)    (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD10 - ATD0 10 (RV6) (egtADC)     (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD11 - ATD0 11 (RV5) (eopADC)     (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD12 - ATD0 12 (RV4) (efpADC)     (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD13 - ATD0 13 (RV3) (tpsADC)     (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD14 - ATD0 14 (RV2) (iacADC)     (analog, no pull) external 0-5v option         * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD15 - ATD0 15 (RV1) (egoADC)     (analog, no pull) external 0-5v option         * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port A:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PA0 - SW7(57to82)                          (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PA1 - SW3(57to82)                          (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PA2 - SW6(57to82)                          (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PA3 - SW2(57to82)(Fuel Trim Enable)        (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PA4 - SW5(57to82)(Ignition Trim Enable)    (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PA5 - SW1(57to82)                          (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PA6 - SW2 (run/load)(CPU)                  (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PA7 - SW4(57to82)                          (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port B:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PB0 - LED red (D9) (1to28)(FuelPump)                               (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*     PB1 - LED red (D23)(1to28)(ASDRelay)                               (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*     PB2 - LED red (D4) (1to28)                                          (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*     PB3 - LED red (D20)(1to28)                                          (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*     PB4 - LED red (D10)(1to28)                                          (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*     PB5 - LED red (D1) (29to56)(EngAlarm)                               (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*     PB6 - LED red (D10)(29to56)(AIOT)                                   (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*     PB7 - LED red (D2) (29to56)                                         (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port C: - Not Available in 112 LQFP                                                * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port D: - Not Available in 112 LQFP                                                * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port E:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PE0 - XIRQ                                 (input, pull-up) gear tooth K1         * (BASE_INIT/INIT_GPIO)
                                      ;*     PE1 - IRQ                                  (input, pull-up) gear tooth K2         * (BASE_INIT/INIT_GPIO)
                                      ;*     PE2 - SD card detect                       (input, pull_up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PE3 - SW5(29to56)(AudAlrmSil)              (input, pull-up) momentary contact     * (BASE_INIT/INIT_GPIO)
                                      ;*     PE4 - SW2(29to56)(Send Date/Time)          (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PE5 - SW4 (MODA) (hard wired to ground)    (input, pull-up) SW4 not in service    * (BASE_INIT/INIT_GPIO)
                                      ;*     PE6 - SW1 (MODB)( hard wired to ground)    (input, pull-up) SW1 not in service    * (BASE_INIT/INIT_GPIO)
                                      ;*     PE7 - SW6(29to56)(Decel Fuel Cut Disable)  (input, pull-up) momentary contact     * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port F: - Not Available in 112 LQFP                                                * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port H:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PH0 - SD data out     (MISO1)           (input,   pull-down)                      * (BASE_INIT/INIT_GPIO)
                                      ;*     PH1 - SD CMD          (MOSI1)           (output, Hi      )                        * (BASE_INIT/INIT_GPIO)
                                      ;*     PH2 - SD CLK          (SCK1)            (output, Hi      )                        * (BASE_INIT/INIT_GPIO)
                                      ;*     PH3 - SD CD           (SS1)             (output, Hi      )                        * (BASE_INIT/INIT_GPIO)
                                      ;*     PH4 - Real time clock (MISO2)           (input,  pull-down)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PH5 - Real time clock (MOSI2)           (output, Hi      )                        * (BASE_INIT/INIT_GPIO)
                                      ;*     PH6 - Real time clock (SCK2)            (output, Hi      )                        * (BASE_INIT/INIT_GPIO)
                                      ;*     PH7 - Real time clock (SS2)             (output, Hi      )                        * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port J:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ0 - SCI2 RXD                            (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ1 - SCI2 TXD                            (output, high   )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ2 - Not Available in 112 LQFP           (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ3 - Not Available in 112 LQFP           (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ4 - Not Available in 112 LQFP           (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ5 - Not Available in 112 LQFP           (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ6 - SW4(87to112)                        (input,  pull-up) momentary contact     * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ7 - SW2(87to112)                        (input,  pull-up) momentary contact     * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port K:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PK0 - LED red (D22)(1to28)                                      (output, low    ) * (BASE_INIT/INIT_GPIO)
                                      ;*     PK1 - LED red (D6) (1to28)                                      (output, low    ) * (BASE_INIT/INIT_GPIO)
                                      ;*     PK2 - LED red (D25)(1to28)(Rev counter)                         (output, low    ) * (BASE_INIT/INIT_GPIO)
                                      ;*     PK3 - LED red (D2) (1to28)                                      (output, low    ) * (BASE_INIT/INIT_GPIO)
                                      ;*     PK4 - LED red (D19)(1to28)                                      (output, low    ) * (BASE_INIT/INIT_GPIO)
                                      ;*     PK5 - LED red (D3) (1to28)                                      (output, low    ) * (BASE_INIT/INIT_GPIO)
                                      ;*     PK6 - Not Available in 112 LQFP                                 (input,  pull-up) * (BASE_INIT/INIT_GPIO)
                                      ;*     PK7 - LED red (D2) (87to112)(TS real time variables toggle)     (output, low    ) * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port M:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PM0 - RXCAN0                              (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PM1 - TXCAN0                              (output, high   )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PM2 - RXCAN1                              (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PM3 - TXCAN1                              (output, high   )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PM4 - SW3(87to112)                        (input,  pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PM5 - SW1(87to112)                        (input,  pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PM6 - SCI3 RXD                            (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PM7 - SCI3 TXD                            (output, high   )                       * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port L: - Not Available in 112 LQFP                                                * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port P:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PP0(P4) - TIM1 OC0 (D21)(1to28)(Ign3)(9&8)     (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP1(P3) - TIM1 OC1 (D5)(1to28)(Ign4)(4&7)      (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP2(P2) - TIM1 OC2 (D24)(1to28)(Ign5)(3&2)     (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP3(P1) - TIM1 OC3 (D1)(1to28)(Inj1)(1&10)     (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP4(P112) - TIM1 OC4 (D3)(87to112)(Inj2)(9&4)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP5(P111) - TIM1 OC5 (D6)(87to112)(Inj3)(3&6)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP6(P110) - TIM1 OC6 (D1)(87to112)(Inj4)(5&8)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP7(P109) - TIM1 OC7 (D7)(87to112)(Inj5)(7&2)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port R: - Not Available in 112 LQFP                                                * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port S:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PS0 - SCI0 RXD                          (input,  pull-up  )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PS1 - SCI0 TXD                          (output, high     )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PS2 - SCI1 RXD                          (input,  pull-up  )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PS3 - SCI1 TXD                          (output, high     )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PS4 - MISO0 (P8)                        (input,  pull-down)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PS5 - MOSI0 (P8)                        (output, low      )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PS6 - SCK0  (P8)                        (output, low      )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PS7 - SS0   (P8)                        (output, high     )                       * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port T:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PT0(P9) - IOC0 OC0 LED red  (D7)(1to28)(Ign1)(1&6)   (output, low)                * (BASE_INIT/INIT_GPIO)
                                      ;*     PT1(P10) - IOC1 IC1 (CASc)(Tooth decoder)(input,  pull-down) VR sensor P9         * (BASE_INIT/INIT_GPIO)
                                      ;*     PT2(P11) - IOC2 OC2 LED red  (D8)(1to28)(Ign2)(10&5)  (output, low)               * (BASE_INIT/INIT_GPIO)
                                      ;*     PT3(P12) - IOC3 IC3 (VSSb)(Vehicle Speed)(input,  pull-down) VR sensor P10        * (BASE_INIT/INIT_GPIO)
                                      ;*     PT4(P15) - IOC4 IC4 (CASa)(RPM)          (input,  pull-down) Volt to Freq U1      * (BASE_INIT/INIT_GPIO)
                                      ;*     PT5(P16) - IOC5 IC5 (CASd)(Tooth decoder)(input,  pull-down) gear tooth K2 Cam    * (BASE_INIT/INIT_GPIO)
                                      ;*     PT6(P17) - IOC6 IC6 (VSSa)(Vehicle Speed)(input,  pull-down) Volt to Freq U2      * (BASE_INIT/INIT_GPIO)
                                      ;*     PT7(P18) - IoC7 IC7 (CASb)(Tooth decoder)(input,  pull-down) gear tooth K3 Crank  * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port A. General purpose I/Os. All pins inputs -                   (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
0042F7 7F42F7 79 00 02                    clr   DDRA        ; Load %00000000 into Port A Data Direction                (BASE_INIT/INIT_GPIO)
                                                            ; Register(all pins inputs)                                (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port B. General purpose I/Os. all pins outputs -                  (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
0042FA 7F42FA 18 0B FF 00 03              movb  #$FF,DDRB   ; Load %11111111 into Port B Data                          (BASE_INIT/INIT_GPIO)
                                                            ; Direction Register (all pins outputs)                    (BASE_INIT/INIT_GPIO)
0042FF 7F42FF 18 0B 00 00 01              movb  #$00,PORTB  ; Load %00000000 into Port B Data                          (BASE_INIT/INIT_GPIO)
                                                            ; Register (all pin states low)                            (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port E. General purpose I/Os. All pins inputs -                   (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
004304 7F4304 79 00 09                    clr   DDRE        ; Load %00000000 into Port E Data                          (BASE_INIT/INIT_GPIO)
                                                            ; Direction Register (all pins inputs)                     (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize SPI1 and SPI2 on alternate ports -                                (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ;    movb  #$60 MODRR  ; Load %01100000 into Module Routing Register (SPI NOT USED!!!!!!!) (BASE_INIT/INIT_GPIO)
                                                            ; SPI1 MISO PH0                                            (BASE_INIT/INIT_GPIO)
                                                            ; SPI1 MOSI PH1                                            (BASE_INIT/INIT_GPIO)
                                                            ; SPI1 SCK PH2                                             (BASE_INIT/INIT_GPIO)
                                                            ; SPI1 SS PH3                                              (BASE_INIT/INIT_GPIO)
                                                            ; SPI2 MISO PH4                                            (BASE_INIT/INIT_GPIO)
                                                            ; SPI2 MOSI PH5                                            (BASE_INIT/INIT_GPIO)
                                                            ; SPI2 SCK PH6                                             (BASE_INIT/INIT_GPIO)
                                                            ; SPI2 SS PH7                                              (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port H. General purpose I/Os. Pins 7,6,5,3,2,1 outputs            (BASE_INIT/INIT_GPIO)
                                      ;   pins 4,0 inputs (all outputs initiialized Hi)                                (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
004307 7F4307 18 0B EE 02 60              movb #$EE PTH     ; Load Port H with %11101110 (initialize pins Hi)          (BASE_INIT/INIT_GPIO)
00430C 7F430C 18 0B EE 02 62              movb #$EE,DDRH    ; Load Port H Data Direction Register                      (BASE_INIT/INIT_GPIO)
                                                            ; with %11101110 (pins 7,6,5,3,2,1                         (BASE_INIT/INIT_GPIO)
                                                            ; outputs, pins 4,0 inputs)                                (BASE_INIT/INIT_GPIO)
004311 7F4311 18 03 11 11 02 64           movw #$1111,PERH  ; Load Port H Pull Device Enable                           (BASE_INIT/INIT_GPIO)
                                                            ; Register and Port H Polarity Select                      (BASE_INIT/INIT_GPIO)
                                                            ; Register with%0001000100010001                           (BASE_INIT/INIT_GPIO)
                                                            ; (pull-downs and rising edge on pins                      (BASE_INIT/INIT_GPIO)
                                                            ; 4 and 0)                                                 (BASE_INIT/INIT_GPIO)
                                      ;*    movb #$FF DDRH    ; Load Port H Data Direction Register                    (BASE_INIT/INIT_GPIO)
                                                            ; with %11111111 (all pins outputs)                        (BASE_INIT/INIT_GPIO)
                                      ;*    movb #$FF PTH     ; Load Port H with %11111111 (initialize pins Hi)        (BASE_INIT/INIT_GPIO)
                                      ;*    movb #$00 PTH     ; Load Port H with %00000000 (initialize pins Lo)        (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port J. General purpose I/Os.                                     (BASE_INIT/INIT_GPIO)
                                      ;   PJ1 output, all others inputs.                                               (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
004317 7F4317 18 0B 02 02 68              movb  #$02, PTJ   ; Load Port J Data Register with                           (BASE_INIT/INIT_GPIO)
                                                            ; %00000010(initialize PJ1 Hi)                             (BASE_INIT/INIT_GPIO)
00431C 7F431C 18 0B 02 02 6A                  movb  #$02, DDRJ  ; Load Port J Data Direction Register                  (BASE_INIT/INIT_GPIO)
                                                            ; with %00000010 (PJ1 output (SCI2 TXD)                    (BASE_INIT/INIT_GPIO)
                                                            ; all others inputs)                                       (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port K. General purpose I/Os. All pins outputs, inital            (BASE_INIT/INIT_GPIO)
                                      ;   state low.                                                                   (BASE_INIT/INIT_GPIO)
                                      ;   NOTE! - PK6 not available in 112 pin package.                                (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
004321 7F4321 18 0B BF 00 33              movb  #$BF,DDRK   ; Load %10111111 into Port K Data                          (BASE_INIT/INIT_GPIO)
                                                            ; (PE6 N/C, set to input, all others                       (BASE_INIT/INIT_GPIO)
                                                            ; outputs)                                                 (BASE_INIT/INIT_GPIO)
004326 7F4326 18 0B 00 00 32              movb  #$00,PORTK  ; Load %00000000 into Port K Data                          (BASE_INIT/INIT_GPIO)
                                                            ; Register (all pin states low)                            (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Set pull ups for Port K (PK6), BKGD, Port E and Port A                       (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
00432B 7F432B 18 0B D1 00 0C              movb  #$D1,PUCR   ; Load %11010001 into Pull Up Control                      (BASE_INIT/INIT_GPIO)
                                                            ; Register (pullups enabled Port K,                        (BASE_INIT/INIT_GPIO)
                                                            ; BKGD, Port E and Port A                                  (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port M. General purpose I/Os. 7,3,1 outputs, inital               (BASE_INIT/INIT_GPIO)
                                      ;   state high, all others inputs.                                               (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
004330 7F4330 18 0B 8A 02 50              movb  #$8A,PTM    ; Load Port M Data Register with                           (BASE_INIT/INIT_GPIO)
                                                            ; %10001010                                                (BASE_INIT/INIT_GPIO)
004335 7F4335 18 0B 8A 02 52                  movb  #$8A,DDRM   ; Load Port M Data direction Register                  (BASE_INIT/INIT_GPIO)
                                                            ; with %10001010 (outputs on Pins 7,3,1                    (BASE_INIT/INIT_GPIO)
                                                            ; inputs on pins 6,5,4,2,0)                                (BASE_INIT/INIT_GPIO)
00433A 7F433A 18 0B 75 02 54                  movb  #$75,PERM   ; Load Port M Pull Device Enable                       (BASE_INIT/INIT_GPIO)
                                                            ; Register with %01110101 (pull ups                        (BASE_INIT/INIT_GPIO)
                                                            ; enabled on pins 6,5,4,2,0)                               (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port P. General purpose I/Os. all pins outputs                    (BASE_INIT/INIT_GPIO)
                                      ;*     PP0(P4) - TIM1 OC0 (D21)(1to28)(Ign3)(9&8)     (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP1(P3) - TIM1 OC1 (D5)(1to28)(Ign4)(4&7)      (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP2(P2) - TIM1 OC2 (D24)(1to28)(Ign5)(3&2)     (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP3(P1) - TIM1 OC3 (D1)(1to28)(Inj1)(1&10)     (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP4(P112) - TIM1 OC4 (D3)(87to112)(Inj2)(9&4)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP5(P111) - TIM1 OC5 (D6)(87to112)(Inj3)(3&6)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP6(P110) - TIM1 OC6 (D1)(87to112)(Inj4)(5&8)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP7(P109) - TIM1 OC7 (D7)(87to112)(Inj5)(7&2)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ;* - NOTE! Port P is initialized in tim_BEEM488.s                                (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port S. General purpose I/Os. outputs pins 7,6,5,3,1              (BASE_INIT/INIT_GPIO)
                                      ;   inputs pins 4,2,0                                                            (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
00433F 7F433F 18 0B 8A 02 48              movb  #$8A,PTS    ; Load Port S Data Register with                           (BASE_INIT/INIT_GPIO)
                                                            ; %10001010(initialize PS7,3,1 Hi,                         (BASE_INIT/INIT_GPIO)
                                                            ; PS6,5,4,2,0 Lo                                           (BASE_INIT/INIT_GPIO)
004344 7F4344 18 0B EA 02 4A              movb  #$EA,DDRS   ; Load Port S Data Direction Register                      (BASE_INIT/INIT_GPIO)
                                                            ; with %11101010 (outputs on PS7,6,5,                      (BASE_INIT/INIT_GPIO)
                                                            ; 3,1 inputs on PS4,2,0)                                   (BASE_INIT/INIT_GPIO)
004349 7F4349 18 0B 10 02 4D              movb  #$10,PPSS   ; Load Port S Polarity Select Register                     (BASE_INIT/INIT_GPIO)
00434E 7F434E MACRO                                           INIT_ECT        ; Initialize Enhanced Captuer Timers (ect_BEEM488.s) (BASE_INIT)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ECT)
                                      ; - Initialize Port T. Enhanced Capture Channels IOC7-IOC0. pg 527               (BASE_INIT/INIT_ECT)
                                      ;*     PT0(P9) - IOC0 OC0 LED red  (D7)(1to28)(Ign1)(1&6)   (output, low)                * (BASE_INIT/INIT_ECT)
                                      ;*     PT1(P10) - IOC1 IC1 (CASc)(Tooth decoder)(input,  pull-down) VR sensor P9         * (BASE_INIT/INIT_ECT)
                                      ;*     PT2(P11) - IOC2 OC2 LED red  (D8)(1to28)(Ign2)(10&5)  (output, low)               * (BASE_INIT/INIT_ECT)
                                      ;*     PT3(P12) - IOC3 IC3 (VSSb)(Vehicle Speed)(input,  pull-down) VR sensor P10        * (BASE_INIT/INIT_ECT)
                                      ;*     PT4(P15) - IOC4 IC4 (CASa)(RPM)          (input,  pull-down) Volt to Freq U1      * (BASE_INIT/INIT_ECT)
                                      ;*     PT5(P16) - IOC5 IC5 (CASd)(Tooth decoder)(input,  pull-down) gear tooth K2 Cam    * (BASE_INIT/INIT_ECT)
                                      ;*     PT6(P17) - IOC6 IC6 (VSSa)(Vehicle Speed)(input,  pull-down) Volt to Freq U2      * (BASE_INIT/INIT_ECT)
                                      ;*     PT7(P18) - IoC7 IC7 (CASb)(Tooth decoder)(input,  pull-down) gear tooth K3 Crank  * (BASE_INIT/INIT_ECT)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ECT)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ECT)
                                      ;* - The crank trigger wheel on the Dodge V10 has 5 pairs of two notches. Each notch is (BASE_INIT/INIT_ECT)
                                      ;    3 degrees wide. The falling edges of the notch pairs are 18 degrees apart and the (BASE_INIT/INIT_ECT)
                                      ;    pairs are 54 degrees apart. Any 3 consecutive notches will cover 72 degrees. The (BASE_INIT/INIT_ECT)
                                      ;    time period of 72 degrees can be used as a base to calculate RPM, ignition and (BASE_INIT/INIT_ECT)
                                      ;    injection timing. In order to determine the best timer rate it has to be able to (BASE_INIT/INIT_ECT)
                                      ;    accurately determine the period between notches at cranking speeds before rolling (BASE_INIT/INIT_ECT)
                                      ;    over and still have good resolution at the highest expected engine speed. Rather (BASE_INIT/INIT_ECT)
                                      ;    than make this compromise the decision was made to use the 5.12uS time base in crank (BASE_INIT/INIT_ECT)
                                      ;    mode and the 2.56uS time base in run mode. The interrupts for the crankshaft and (BASE_INIT/INIT_ECT)
                                      ;    camshaft sensors are handled in the state_BPEM488.s module. It is here that that (BASE_INIT/INIT_ECT)
                                      ;    the 72 degree period is calculated and the determination of crank mode and run mode (BASE_INIT/INIT_ECT)
                                      ;    are made.                                                                   (BASE_INIT/INIT_ECT)
                                      ;                                                                                (BASE_INIT/INIT_ECT)
                                      ;    5000RPM = 83.333Hz = .012Sec period / 5 =.0024Sec per 72 degrees            (BASE_INIT/INIT_ECT)
                                      ;                                                                                (BASE_INIT/INIT_ECT)
                                      ;    A prescale of 256 results in a 5.12uS clock tick with a maximum period of 335.5392mS (BASE_INIT/INIT_ECT)
                                      ;    Lowest cranking speed can be:                                               (BASE_INIT/INIT_ECT)
                                      ;    .3355392 * 5 = 1.677696Sec = .596Hz * 60 = 35.76RPM                         (BASE_INIT/INIT_ECT)
                                      ;    5000RPM .0024/.00000512 = 468.75 5000/468.75 = 10.666 RPM resolution        (BASE_INIT/INIT_ECT)
                                      ;                                                                                (BASE_INIT/INIT_ECT)
                                      ;    A prescale of 128 results in a 2.56uS clock tick with a maximum period of 167.7696mS (BASE_INIT/INIT_ECT)
                                      ;    Lowest cranking speed can be:                                               (BASE_INIT/INIT_ECT)
                                      ;    .1677696 * 5 = .838848Sec = 1.192111086Hz * 60 = 71.53RPM                   (BASE_INIT/INIT_ECT)
                                      ;    5000RPM .0024/.00000256 = 937.5 5000/937.5 = 5.333 RPM resolution           (BASE_INIT/INIT_ECT)
                                      ;                                                                                (BASE_INIT/INIT_ECT)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ECT)
00434E 7F434E 18 03 05 00 02 42           movw  #$0500,DDRT   ; Load Port T Data Direction Register and                (BASE_INIT/INIT_ECT)
                                                              ; Port T Reduced Drive Register with                     (BASE_INIT/INIT_ECT)
                                                              ; %0000_0101_0000_0000 (PT2,0 outputs,                   (BASE_INIT/INIT_ECT)
                                                              ; PT7,6,5,4,3,1 inputs PT2,0 full                        (BASE_INIT/INIT_ECT)
                                                              ; drive, PT7,6,5,4,3,0 full drive)                       (BASE_INIT/INIT_ECT)
004354 7F4354 18 03 FA FA 02 44           movw  #$FAFA,PERT   ; Load Port T Pull Device Register and                   (BASE_INIT/INIT_ECT)
                                                              ; Port T Polarity Select Register with                   (BASE_INIT/INIT_ECT)
                                                              ; %1111_1010_1111_1010                                   (BASE_INIT/INIT_ECT)
                                                              ; (pull device enabled on PT7,6,5,4,                     (BASE_INIT/INIT_ECT)
                                                              ; 3,1. Disabled on PT2,0. Pull down on                   (BASE_INIT/INIT_ECT)
                                                              ; PT7,6,5,4,3,1 pull up on PT2,0)                        (BASE_INIT/INIT_ECT)
00435A 7F435A 1D 02 40 04                 bclr PTT,Bit2       ; Initialize PT2 low                                     (BASE_INIT/INIT_ECT)
00435E 7F435E 1D 02 40 01                 bclr PTT,Bit0       ; Initialize PT0 low                                     (BASE_INIT/INIT_ECT)
004362 7F4362 18 0B 05 00 40              movb #$05,ECT_TIOS  ; Load Timer Input capture/Output                        (BASE_INIT/INIT_ECT)
                                                              ; compare Select register with                           (BASE_INIT/INIT_ECT)
                                                              ; %00000101 (Hall/K3, VtoF/U2,                           (BASE_INIT/INIT_ECT)
                                                              ; Hall/K2, VtoF/U1, VR2/P10,                             (BASE_INIT/INIT_ECT)
                                                              ; D8, VR1/P9, D7)(IC Ch7,6,5,4,3,1)                      (BASE_INIT/INIT_ECT)
                                                              ;(OC Ch2,0)                                              (BASE_INIT/INIT_ECT)
004367 7F4367 18 0B 98 00 46              movb #$98,ECT_TSCR1 ; Load ECT_TSCR1 with %10011000                          (BASE_INIT/INIT_ECT)
                                                              ;(timer enabled, no stop in wait,                        (BASE_INIT/INIT_ECT)
                                                              ; no stop in freeze, fast flag clear,                    (BASE_INIT/INIT_ECT)
                                                              ; precision timer)                                       (BASE_INIT/INIT_ECT)
00436C 7F436C 18 0B FF 00 4C              movb  #$FF,ECT_TIE  ; Load Timer Interrupt Enable Register                   (BASE_INIT/INIT_ECT)
                                                              ; with %11111111 (interrupts enabled                     (BASE_INIT/INIT_ECT)
                                                              ; Ch7,6,5,4,3,2,1,0)                                     (BASE_INIT/INIT_ECT)
004371 7F4371 18 0B 07 00 4D              movb #$07,ECT_TSCR2 ; Load ECT_TSCR2 with %00000111                          (BASE_INIT/INIT_ECT)
                                                              ; (timer overflow interrupt disabled,                    (BASE_INIT/INIT_ECT)
                                                              ; timer counter reset disabled,                          (BASE_INIT/INIT_ECT)
                                                              ; prescale divide by 128 for legacy timer only)          (BASE_INIT/INIT_ECT)
                                      ;*    movb #$0F,ECT_PTPSR ; Load ECT_PTPSR with %00001111                        (BASE_INIT/INIT_ECT)
                                                              ; (prescale 16, 0.32us resolution,                       (BASE_INIT/INIT_ECT)
                                                              ; max period 20.9712ms)                                  (BASE_INIT/INIT_ECT)
                                      ;*    movb #$1F,ECT_PTPSR ; Load ECT_PTPSR with %00011111                        (BASE_INIT/INIT_ECT)
                                                              ; (prescale 32, 0.64us resolution,                       (BASE_INIT/INIT_ECT)
                                                              ; max period 41.94248ms)                                 (BASE_INIT/INIT_ECT)
                                      ;*    movb #$3F,ECT_PTPSR ; Load ECT_PTPSR with %00111111                        (BASE_INIT/INIT_ECT)
                                                              ; (prescale 64, 1.28us resolution,                       (BASE_INIT/INIT_ECT)
                                                              ; max period 83.884ms)                                   (BASE_INIT/INIT_ECT)
                                      ;*    movb #$7F,ECT_PTPSR ; Load ECT_PTPSR with %01111111  (time base for run mode) (BASE_INIT/INIT_ECT)
                                                              ; (prescale 128, 2.56us resolution,                      (BASE_INIT/INIT_ECT)
                                                              ; max period 167.7696ms)                                 (BASE_INIT/INIT_ECT)
004376 7F4376 18 0B FF 00 6E              movb #$FF,ECT_PTPSR ; Load ECT_PTPSR with %11111111 (time base for prime or crank modes) (BASE_INIT/INIT_ECT)
                                                              ; (prescale 256, 5.12us resolution,                      (BASE_INIT/INIT_ECT)
                                                              ; max period 335.5ms)                                    (BASE_INIT/INIT_ECT)
00437B 7F437B 18 0B 55 00 4A              movb #$55,ECT_TCTL3 ; Load ECT_TCTL3 with %01010101 (rising                  (BASE_INIT/INIT_ECT)
                                                              ; edge capture Ch7,6,5,4)                                (BASE_INIT/INIT_ECT)
004380 7F4380 18 0B 44 00 4B              movb #$44,ECT_TCTL4 ; Load ECT_TCTL4 with %01000100 (rising                  (BASE_INIT/INIT_ECT)
004385 7F4385 MACRO                                           CLR_ECT_VARS    ; Clear ECT variables  (ect_BEEM488.s)   (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_ECT_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_ECT_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_ECT_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_ECT_VARS)
004385 7F4385 18 79 10 12                clrw VSS1st      ; VSS input capture rising edge 1st time stamp (5.12uS or 2.56uS res) (BASE_INIT/CLR_ECT_VARS)
004389 7F4389 MACRO                               INIT_TIM        ; Initialize Timer (tim_BEEM488.s)                   (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/INIT_TIM)
                                      ;***************************************************************************************** (BASE_INIT/INIT_TIM)
                                      ;* - Macros -                                                                            * (BASE_INIT/INIT_TIM)
                                      ;***************************************************************************************** (BASE_INIT/INIT_TIM)
                                      ;***************************************************************************************** (BASE_INIT/INIT_TIM)
                                      ; - Initialize Port P. General purpose I/Os. all pins outputs                    (BASE_INIT/INIT_TIM)
                                      ;*     PP0(P4) - TIM1 OC0 (D21)(1to28)(Ign3)(9&8)     (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;*     PP1(P3) - TIM1 OC1 (D5)(1to28)(Ign4)(4&7)      (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;*     PP2(P2) - TIM1 OC2 (D24)(1to28)(Ign5)(3&2)     (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;*     PP3(P1) - TIM1 OC3 (D1)(1to28)(Inj1)(1&10)     (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;*     PP4(P112) - TIM1 OC4 (D3)(87to112)(Inj2)(9&4)  (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;*     PP5(P111) - TIM1 OC5 (D6)(87to112)(Inj3)(3&6)  (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;*     PP6(P110) - TIM1 OC6 (D1)(87to112)(Inj4)(5&8)  (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;*     PP7(P109) - TIM1 OC7 (D7)(87to112)(Inj5)(7&2)  (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;***************************************************************************************** (BASE_INIT/INIT_TIM)
                                      ;***************************************************************************************** (BASE_INIT/INIT_TIM)
004389 7F4389 18 0B FF 03 6F              movb #$FF,PTRRR     ; Load Port R Routing Register with %00000101 (All TIM1 OC channels (BASE_INIT/INIT_TIM)
                                                              ; available on Port P)                                   (BASE_INIT/INIT_TIM)
00438E 7F438E 18 0B FF 02 5A              movb  #$FF,DDRP     ; Load Port P Data Direction Register                    (BASE_INIT/INIT_TIM)
                                                              ; with %11111111 (all pins outputs)                      (BASE_INIT/INIT_TIM)
004393 7F4393 18 0B 00 02 58              movb #$00,PTP       ; Load Port P with %00000000 (initialize all pins low)   (BASE_INIT/INIT_TIM)
004398 7F4398 18 0B FF 03 D0              movb #$FF,TIM_TIOS  ;(TIM_TIOS equ $03D0)                                    (BASE_INIT/INIT_TIM)
                                                              ; Load Timer Input capture/Output compare Select register with (BASE_INIT/INIT_TIM)
                                                              ; %11111111 (All channels outputs)                       (BASE_INIT/INIT_TIM)
00439D 7F439D 18 0B 98 03 D6              movb #$98,TIM_TSCR1 ; (TIM_TSCR1 equ $03D6)                                  (BASE_INIT/INIT_TIM)
                                                              ; Load TIM_TSCR1 with %10011000 (timer enabled, no stop in wait, (BASE_INIT/INIT_TIM)
                                                              ; no stop in freeze, fast flag clear, precision timer)   (BASE_INIT/INIT_TIM)
0043A2 7F43A2 18 0B FF 03 DC              movb #$FF,TIM_TIE   ; Load TIM_TIE (Timer Interrupt Enable Register)         (BASE_INIT/INIT_TIM)
                                                              ; with %11111111 (enable interrupts all channels)        (BASE_INIT/INIT_TIM)
0043A7 7F43A7 18 0B 07 03 DD              movb #$07,TIM_TSCR2 ; (TIM_TSCR2 equ $03DD)(Load TIM_TSCR2 with %00000111    (BASE_INIT/INIT_TIM)
                                                              ; (timer overflow interrupt disabled,timer counter       (BASE_INIT/INIT_TIM)
                                                              ; reset disabled, prescale divide by 128)                (BASE_INIT/INIT_TIM)
                                      ;*    movb #$7F,TIM_PTPSR ; (TIM_PTPSR equ $03FE) Load TIM_PTPSR with %01111111  (BASE_INIT/INIT_TIM)
                                                              ; (prescale 128, 2.56us resolution,                      (BASE_INIT/INIT_TIM)
                                                              ; max period 167.7696ms)(Time base for run mode)         (BASE_INIT/INIT_TIM)
0043AC 7F43AC 18 0B FF 03 FE              movb #$FF,TIM_PTPSR ; (TIM_PTPSR equ $03FE)(Load TIM_PTPSR with %11111111    (BASE_INIT/INIT_TIM)
0043B1 7F43B1 MACRO                                           CLR_IGN_VARS    ; Clear Ignition Calcs variables (igncalcs_BPEM488.s) (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_IGN_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_IGN_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_IGN_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_IGN_VARS)
0043B1 7F43B1 18 79 10 37                clrw Spantk         ; Ignition Span time (5.12uS or 2.56uS res)               (BASE_INIT/CLR_IGN_VARS)
0043B5 7F43B5 18 79 10 39                clrw DwellFintk     ; Time required for dwell after correction (5.12uS or 2.56uS res) (BASE_INIT/CLR_IGN_VARS)
0043B9 7F43B9 18 79 10 3B                clrw STandItrmtk    ; STcurr and Itmx10 (5.12uS or 2.56uS res)                (BASE_INIT/CLR_IGN_VARS)
0043BD 7F43BD 18 79 10 3D                clrw Advancetk      ; Delay time for desired spark advance + dwell(5.12uS or 2.56uS res) (BASE_INIT/CLR_IGN_VARS)
0043C1 7F43C1 18 79 10 3F                clrw Delaytk        ; Delay time from crank signal to energise coil(5.12uS or 2.56uS res) (BASE_INIT/CLR_IGN_VARS)
0043C5 7F43C5 18 79 10 41                clrw IgnOCadd1      ; First ignition output compare adder (5.12uS or 2.56uS res) (BASE_INIT/CLR_IGN_VARS)
0043C9 7F43C9 18 79 10 43                clrw IgnOCadd2      ; Second ignition output compare adder(5.12uS or 2.56uS res) (BASE_INIT/CLR_IGN_VARS)
0043CD 7F43CD MACRO                                           CLR_INJ_VARS    ; Clear Injection Calcs variables (injcalcs_BPEM488.s) (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_INJ_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_INJ_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_INJ_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_INJ_VARS)
0043CD 7F43CD 18 79 10 45                clrw TpsPctx10last ; Throttle Position Sensor percent last (%x10)(updated every 100Msec) (BASE_INIT/CLR_INJ_VARS)
0043D1 7F43D1 79 10 47                   clr  OFCdel        ; Overrun Fuel Cut delay duration (decremented every 100 mS) (BASE_INIT/CLR_INJ_VARS)
0043D4 7F43D4 79 10 48                   clr  TOEtim        ; Throttle Opening Enrichment duration (decremented every 100 mS) (BASE_INIT/CLR_INJ_VARS)
0043D7 7F43D7 79 10 49                   clr  DdBndZ1       ; Deadband interpolation Z1 value                          (BASE_INIT/CLR_INJ_VARS)
0043DA 7F43DA 79 10 4A                   clr  DdBndZ2       ; Deadband interpolation Z2 value                          (BASE_INIT/CLR_INJ_VARS)
0043DD 7F43DD 18 79 10 4B                clrw PWcalc1       ; PW calculations result 1                                 (BASE_INIT/CLR_INJ_VARS)
0043E1 7F43E1 18 79 10 4D                clrw PWcalc2       ; PW calculations result 2                                 (BASE_INIT/CLR_INJ_VARS)
0043E5 7F43E5 18 79 10 4F                clrw PWcalc3       ; PW calculations result 3                                 (BASE_INIT/CLR_INJ_VARS)
0043E9 7F43E9 18 79 10 51                clrw PWcalc4       ; PW calculations result 4                                 (BASE_INIT/CLR_INJ_VARS)
0043ED 7F43ED 18 79 10 53                clrw PWcalc5       ; PW calculations result 5                                 (BASE_INIT/CLR_INJ_VARS)
0043F1 7F43F1 18 79 10 55                clrw ASErev        ; Afterstart Enrichment Taper (revolutions)                (BASE_INIT/CLR_INJ_VARS)
0043F5 7F43F5 18 79 10 57                clrw ASEcnt        ; Counter value for ASE taper                              (BASE_INIT/CLR_INJ_VARS)
0043F9 7F43F9 18 79 10 59                clrw PrimePWtk     ; Primer injector pulswidth timer ticks(uS x 5.12)         (BASE_INIT/CLR_INJ_VARS)
0043FD 7F43FD 18 79 10 5B                clrw CrankPWtk     ; Cranking injector pulswidth timer ticks(uS x 5.12)       (BASE_INIT/CLR_INJ_VARS)
004401 7F4401 18 79 10 5D                clrw PWtk          ; Running injector pulsewidth timer ticks(uS x 2.56)       (BASE_INIT/CLR_INJ_VARS)
004405 7F4405 18 79 10 5F                clrw InjOCadd1     ; First injector output compare adder (5.12uS res or 2.56uS res) (BASE_INIT/CLR_INJ_VARS)
004409 7F4409 18 79 10 61                clrw InjOCadd2     ; Second injector output compare adder (5.12uS res or 2.56uS res) (BASE_INIT/CLR_INJ_VARS)
00440D 7F440D 18 79 10 63                clrw FDt           ; Fuel Delivery pulse width total(mS) (for FDsec calcs)    (BASE_INIT/CLR_INJ_VARS)
004411 7F4411 18 79 10 65                clrw FDcnt         ; Fuel delivery pulse width total(ms)(for totalizer pulse on rollover) (BASE_INIT/CLR_INJ_VARS)
004415 7F4415 79 10 67                   clr  AIOTcnt       ; Counter for AIOT totalizer pulse width                   (BASE_INIT/CLR_INJ_VARS)
004418 7F4418 MACRO                                           CLR_INTERP_VARS ; Clear Interp variables (interp_BPEM488.s) (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_INTERP_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_INTERP_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_INTERP_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_INTERP_VARS)
004418 7F4418 18 79 10 25                clrw CrvPgPtr   ; Pointer to the page where the desired curve resides         (BASE_INIT/CLR_INTERP_VARS)
00441C 7F441C 18 79 10 27                clrw CrvRowOfst ; Offset from the curve page to the curve row                 (BASE_INIT/CLR_INTERP_VARS)
004420 7F4420 18 79 10 29                clrw CrvColOfst ; Offset from the curve page to the curve column              (BASE_INIT/CLR_INTERP_VARS)
004424 7F4424 18 79 10 2B                clrw CrvCmpVal  ; Curve comparison value for interpolation                    (BASE_INIT/CLR_INTERP_VARS)
004428 7F4428 79 10 2D                   clr  CrvBinCnt  ; Number of bins in the curve row or column minus 1           (BASE_INIT/CLR_INTERP_VARS)
00442B 7F442B 79 10 2E                   clr  IndexNum   ; Position in the row or column of the curve comparison value (BASE_INIT/CLR_INTERP_VARS)
00442E 7F442E 18 79 10 2F                clrw CrvRowHi   ; Curve row high boundry value for interpolation              (BASE_INIT/CLR_INTERP_VARS)
004432 7F4432 18 79 10 31                clrw CrvRowLo   ; Curve row low boundry value for interpolation               (BASE_INIT/CLR_INTERP_VARS)
004436 7F4436 18 79 10 33                clrw CrvColHi   ; Curve column high boundry value for interpolation           (BASE_INIT/CLR_INTERP_VARS)
00443A 7F443A 18 79 10 35                clrw CrvColLo   ; Curve column low boundry value for interpolation            (BASE_INIT/CLR_INTERP_VARS)
00443E 7F443E MACRO                                           CLR_STATE_VARS  ; Clear State variables (state_BPEM488.s) (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_STATE_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_STATE_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_STATE_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_STATE_VARS)
00443E 7F443E 18 79 10 15                clrw CAS1sttk    ; CAS input capture rising edge 1st time stamp ((5.12uS or 2.56uS res) (BASE_INIT/CLR_STATE_VARS)
004442 7F4442 18 79 10 17                clrw CAS2ndtk    ; CAS input capture rising edge 2nd time stamp (5.12uS or 2.56uS res) (BASE_INIT/CLR_STATE_VARS)
004446 7F4446 18 79 10 19                clrw CASprd1tk   ; Period between CAS1st and CAS2nd (5.12uS or 2.56uS res)    (BASE_INIT/CLR_STATE_VARS)
00444A 7F444A 18 79 10 1B                clrw CASprd2tk   ; Period between CAS2nd and CAS3d ((5.12uS or 2.56uS res)    (BASE_INIT/CLR_STATE_VARS)
00444E 7F444E 18 79 10 1D                clrw Degx10tk512 ; Time to rotate crankshaft 1 degree in 5.12uS resolution x 10 (BASE_INIT/CLR_STATE_VARS)
004452 7F4452 18 79 10 1F                clrw Degx10tk256 ; Time to rotate crankshaft 1 degree in 2.56uS resolution x 10 (BASE_INIT/CLR_STATE_VARS)
004456 7F4456 79 10 21                   clr  RevCntr     ; Counter for "Revmarker" flag                               (BASE_INIT/CLR_STATE_VARS)
004459 7F4459 18 79 10 22                clrw Stallcnt    ; No crank or stall condition counter (1mS increments)       (BASE_INIT/CLR_STATE_VARS)
00445D 7F445D 79 10 24                   clr  ICflgs      ; Input Capture flags bit field                              (BASE_INIT/CLR_STATE_VARS)
004460 7F4460 20 00                                           JOB     DONE        ; Jump or branch to DONE             (BASE_INIT)
004462 7F4462 -> $4462                DONE        EQU *     ; * Represents the current value of the paged              (BASE_INIT)
                                      ; - Application code -
                                      ;*****************************************************************************************
                                      ; - Clear all real time variables -
                                      ;*****************************************************************************************
004462 7F4462 18 79 10 6A                clrw cltAdc       ; RV15 10 bit ADC AN00 Engine Coolant Temperature ADC(offset=2)
004466 7F4466 18 79 10 6C                clrw Cltx10       ; Engine Coolant Temperature (Degrees F x 10)(offset=4)
00446A 7F446A 18 79 10 6E                clrw matAdc       ; RV14 10 bit ADC AN01 Manifold Air Temperature ADC(offset=6)
00446E 7F446E 18 79 10 70                clrw Matx10       ; Manifold Air Temperature (Degrees F x 10)(offset=8)
004472 7F4472 18 79 10 72                clrw eftAdc       ; RV13 10 bit ADC AN02 Engine Fuel Temperature ADC(offset=10)
004476 7F4476 18 79 10 74                clrw Eftx10       ; Engine Fuel Temperature (Degrees F x 10)(offset=12)
00447A 7F447A 18 79 10 76                clrw eotAdc       ; RV12 10 bit ADC AN03 Engine Oil Temperature ADC(offset=14)
00447E 7F447E 18 79 10 78                clrw Eotx10       ; Engine Oil Temperature (Degrees F x 10)(offset=16)
004482 7F4482 18 79 10 7A                clrw RV11Adc      ; RV11 10 bit ADC AN04(19)(offset=18)
004486 7F4486 18 79 10 7C                clrw mapAdc       ; RV10 10 bit ADC AN05 Manifold Absolute Pressure ADC(offset=20)
00448A 7F448A 18 79 10 7E                clrw Mapx10       ; Manifold Absolute Pressure (KPAx10)(offset=22)
00448E 7F448E 18 79 10 80                clrw baroAdc      ; RV9 10 bit ADC AN06 Barometric Pressure ADC(offset=24)
004492 7F4492 18 79 10 82                clrw Barox10      ; Barometric Pressure (KPAx10)(offset=26)
004496 7F4496 18 79 10 84                clrw batAdc       ; Battery Voltage 10 bit ADC AN07(offset=28)
00449A 7F449A 18 79 10 86                clrw BatVx10      ; Battery Voltage (Volts x 10)(offset=30)
00449E 7F449E 18 79 10 88                clrw ftrmAdc      ; RV8 10 bit ADC AN08 Fuel Trim ADC(offset=32)
0044A2 7F44A2 18 79 10 8A                clrw Ftrmx10      ; Fuel Trim (% x 10)(+-20%)(offset=34)
0044A6 7F44A6 18 79 10 8C                clrw itrmAdc      ; RV7 10 bit ADC AN09 Ignition Trim ADC(offset=36)
0044AA 7F44AA 18 79 10 8E                clrw Itrmx10      ; Ignition Trim (degrees x 10)+-20 degrees) (offset=38)
0044AE 7F44AE 18 79 10 90                clrw egtAdc       ; RV6 10 bit ADC AN10 Exhaust Gas Temperature ADC(offset=40)
0044B2 7F44B2 18 79 10 92                clrw Egt          ; Exhaust Gas Temperature (degrees F)(offset=42)
0044B6 7F44B6 18 79 10 94                clrw eopAdc       ; RV5 10 bit ADC AN11 Engine Oil Pressure ADC(offset=44)
0044BA 7F44BA 18 79 10 96                clrw Eopx10       ; Engine Oil Pressure (PSI x 10)(offset=46)
0044BE 7F44BE 18 79 10 98                clrw efpAdc       ; RV4 10 bit ADC AN12 Engine Fuel Pressure ADC(offset=48)
0044C2 7F44C2 18 79 10 9A                clrw Efpx10       ; Engine Fuel Pressure (PSI x 10)(offset=50)
0044C6 7F44C6 18 79 10 9C                clrw tpsADC       ; RV3 10 bit ADC AN13 Throttle Position Sensor ADC (exact for TS)(offset=52)
0044CA 7F44CA 18 79 10 9E                clrw TpsPctx10    ; Throttle Position Sensor % of travel(%x10)(update every 100mSec)(offset=54)
0044CE 7F44CE 18 79 10 A0                clrw iacAdc       ; RV2 10 bit ADC AN14 Idle Air Control ADC(offset=56)
0044D2 7F44D2 18 79 10 A2                clrw egoAdc       ; RV1 10 bit ADC AN15 Exhaust Gas Oxygen ADC(offset=58)
0044D6 7F44D6 18 79 10 A4                clrw afr1x10      ; Air Fuel Ratio for gasoline (AFRx10)(exact for TS)(offset=60)
                                      ;*****************************************************************************************
                                      ; - Input capture variables
                                      ;*****************************************************************************************
0044DA 7F44DA 18 79 10 A6                clrw CASprd512    ; Crankshaft Angle Sensor period (5.12uS time base(offset=62)
0044DE 7F44DE 18 79 10 A8                clrw CASprd256    ; Crankshaft Angle Sensor period (2.56uS time base(offset=64)
0044E2 7F44E2 18 79 10 AA                clrw VSSprd       ; Vehicle Speed Sensor period(offset=66)
0044E6 7F44E6 18 79 10 AC                clrw RPM          ; Crankshaft Revolutions Per Minute(offset=68)
0044EA 7F44EA 18 79 10 AE                clrw KPH          ; Vehicle speed (KpH x 10)(offset=70)
                                      ;*****************************************************************************************
                                      ; - Fuel calculation variables
                                      ;*****************************************************************************************
0044EE 7F44EE 18 79 10 B0                clrw reqFuel      ; Pulse width for 14.7 AFR @ 100% VE (mS x 10)(offset=72)
0044F2 7F44F2 18 79 10 B2                clrw AFRcurr      ; Current value in AFR table (AFR x 100)(offset=74)
0044F6 7F44F6 18 79 10 B4                clrw VEcurr       ; Current value in VE table (% x 10)(offset=76)
0044FA 7F44FA 18 79 10 B6                clrw barocor      ; Barometric Pressure Correction (% x 10)(offset=78)
0044FE 7F44FE 18 79 10 B8                clrw matcor       ; Manifold Air Temperature Correction (% x 10)(offset=80)
004502 7F4502 18 79 10 BA                clrw WUEcor       ; Warmup Enrichment Correction (% x 10)(offset=82)
004506 7F4506 18 79 10 BC                clrw ASEcor       ; Afterstart Enrichmnet Correction (% x 10)(offset=84)
00450A 7F450A 18 79 10 BE                clrw WUEandASEcor ; the sum of WUEcor and ASEcor (% x 10)(offset=86)
00450E 7F450E 18 79 10 C0                clrw Crankcor     ; Cranking pulsewidth temperature correction (% x 10)(offset=88)
004512 7F4512 18 79 10 C2                clrw TpsPctDOT    ; TPS difference over time (%/Sec)(update every 100mSec)(offset=90)
004516 7F4516 79 10 C4                   clr  TpsDOTcor    ; Throttle Opening Enrichment table value(%)(offset=92)
004519 7F4519 79 10 C5                   clr  ColdAddpct   ; Throttle Opening Enrichment cold adder (%)(offset=93)
00451C 7F451C 79 10 C6                   clr  ColdMulpct   ; Throttle Opening Enrichment cold multiplier (%)(offset=94)
00451F 7F451F 79 10 C7                   clr  TOEpct       ; Throttle Opening Enrichment (%)(offset=95)
004522 7F4522 18 79 10 C8                clrw TOEpw        ; Throttle Opening Enrichment adder (mS x 100)(offset=96)
004526 7F4526 18 79 10 CA                clrw PWlessTOE    ; Injector pulse width before "TOEpw" and "Deadband" (mS x 10)(offset=98)
00452A 7F452A 18 79 10 CC                clrw Deadband     ; injector deadband at current battery voltage mS*100(offset=100)
00452E 7F452E 18 79 10 CE                clrw PrimePW      ; Primer injector pulswidth (mS x 10)(offset=102)
004532 7F4532 18 79 10 D0                clrw CrankPW      ; Cranking injector pulswidth (mS x 10)(offset=104)
004536 7F4536 18 79 10 D2                clrw FDpw         ; Fuel Delivery pulse width (PW - Deadband) (mS x 10)(offset=106)
00453A 7F453A 18 79 10 D4                clrw PW           ; Running engine injector pulsewidth (mS x 10)(offset=108)
00453E 7F453E 18 79 10 D6                clrw FD           ; Fuel Delivery pulse width (mS)(offset=110)
004542 7F4542 18 79 10 D8                clrw FDsec        ; Fuel delivery pulse width total over 1 second (mS)(offset=112)
004546 7F4546 18 79 10 DA                clrw InjDelDegx10 ; Injection delay from trigger to start of injection (deg x 10)(offset=114)
00454A 7F454A 18 79 10 DC                clrw InjPrFlo     ; Pair of injectors flow rate (L/hr x 100)(offset=116)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Ignition calculation variables
                                      ;*****************************************************************************************
00454E 7F454E 18 79 10 DE                clrw STcurr         ; Current value in ST table (Degrees x 10)(offset=118)
004552 7F4552 18 79 10 E0                clrw Dwell          ; Coil on time (mS*10)(offset=120)
004556 7F4556 18 79 10 E2                clrw DwellCor       ; Coil dwell voltage correction (%*10)(offset=122)
00455A 7F455A 18 79 10 E4                clrw DwellFin       ; ("Dwell" * "DwellCor") (mS*10)(offset=124)
00455E 7F455E 18 79 10 E6                clrw STandItrmx10   ; stCurr and Itmx10 (degrees*10)(offset=126)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Port status variables
                                      ;*****************************************************************************************
004562 7F4562 79 10 E8                   clr  PortAbits    ; Port A status bit field(offset=128)
004565 7F4565 79 10 E9                   clr  PortBbits    ; Port B status bit field(offset=129)
004568 7F4568 79 10 EA                   clr  PortEbits    ; Port E status bit field(offset=130)
00456B 7F456B 79 10 EB                   clr  PortKbits    ; Port K status bit field(offset=131)
00456E 7F456E 79 10 EC                   clr  PortJbits    ; Port J status bit field(offset=132)
004571 7F4571 79 10 ED                   clr  PortPbits    ; Port P status bit field(offset=133)
004574 7F4574 79 10 EE                   clr  PortTbits    ; Port T status bit field(offset=134)
                                      ;*****************************************************************************************
                                      ; - Misc variables
                                      ;*****************************************************************************************
004577 7F4577 79 10 EF                   clr  engine       ; Engine status bit field(offset=135)
00457A 7F457A 79 10 F0                   clr  engine2      ; Engine2 status bit field(offset=136)
00457D 7F457D 79 10 F1                   clr  alarmbits    ; Alarm status bit field(offset=137)
004580 7F4580 79 10 F2                   clr  AAoffbits    ; Audio Alarm Off status bit field(offset=138)
004583 7F4583 79 10 F3                   clr  StateStatus  ; State status bit field(offset=139)
004586 7F4586 18 79 10 F4                clrw LoopTime     ; Program main loop time (loops/Sec)(offset=140)
00458A 7F458A 18 79 10 F6                clrw DutyCyclex10 ; Injector duty cycle in run mode (% x 10)(offset=142)
00458E 7F458E 18 79 10 F8                clrw TestValw     ; Word test value (for program developement only)(offset=143)
004592 7F4592 79 10 FA                   clr  testValb     ; Byte test value (for program developement only)(offset=145)
                                      ;*****************************************************************************************
                                      ; - Clear other variables -
                                      ;*****************************************************************************************
004595 7F4595 79 10 FB                   clr  tmp1       ; Temporary variable #1
004598 7F4598 79 10 FC                   clr  tmp2       ; Temporary variable #2
00459B 7F459B 79 10 FD                   clr  tmp3       ; Temporary variable #3
00459E 7F459E 79 10 FE                   clr  tmp4       ; Temporary variable #4
0045A1 7F45A1 79 10 FF                   clr  tmp5       ; Temporary variable #5
0045A4 7F45A4 79 11 00                   clr  tmp6       ; Temporary variable #6
0045A7 7F45A7 79 11 01                   clr  tmp7       ; Temporary variable #7
0045AA 7F45AA 79 11 02                   clr  tmp8       ; Temporary variable #8
0045AD 7F45AD 18 79 11 03                clrw LoopCntr   ; Counter for "LoopTime" (incremented every Main Loop pass)
                                      ;*****************************************************************************************
                                      ; - Initialize other variables -
                                      ;*****************************************************************************************
0045B1 7F45B1 18 0B 09 10 21              movb  #$09,RevCntr     ; Counter for Revolution Counter signals
                                      ;*****************************************************************************************
                                      ; - SW2 on the CPU board is labled Load/Run and is labled backwards. In the "Load"
                                      ;   position PA6(bit7) is high (set). In the "Run" position PA6(bit7) is low (clear).
                                      ;   Pole Port A PA6(bit7) to check it's state.
                                      ;
                                      ;   BPEM488 utilizes EEPROM Emulation and all configurable constants are stored in D-Flash
                                      ;   and run from Buffer Ram. Tuner Studio reads Buffer Ram on start up but if values there
                                      ;   are not within acceptable ranges the session is aborted. Default values are stored
                                      ;   in P-Flash and this code transfers those values to Buffer Ram to keep TS happy.
                                      ;   This should only have to be done once. After that, tuning changes to Buffer Ram
                                      ;   will be automatically copied to D-Flash by the EEPROM Emulation module.
                                      ;*****************************************************************************************
0045B6 7F45B6 MACRO                       EEEM_ENABLE   ; Enable EEPROM Emulation Macro in eeemBPEM488.s
                                                                          ; with $0F (FCLK=1MHz)                       (EEEM_ENABLE)
                                      ; - Enable EE Emulation -                                                        (EEEM_ENABLE)
                                      ; args:   1: branch address of error handler (optional)                          (EEEM_ENABLE)
                                      ; result: none                                                                   (EEEM_ENABLE)
                                      ; SSTACK: none                                                                   (EEEM_ENABLE)
                                      ;         X, Y, and D are preserved                                              (EEEM_ENABLE)
                                      ; - Step (1): Set FCCOBIX -                                                      (EEEM_ENABLE)
0045B6 7F45B6 79 01 02                    clr    FCCOBIX    ; Clear Flash CCOB Index Register                          (EEEM_ENABLE)
                                      ; - Step (2): Enter parameters into FCCOB -                                      (EEEM_ENABLE)
0045B9 7F45B9 18 0B 13 01 0A              movb   #$13, FCCOBHI  ; Move %00010011 into Flash Common Command Register    (EEEM_ENABLE)
                                                                ; Hi byte (Flash command enable EEEPROM Emulation)     (EEEM_ENABLE)
                                      ;     movb   #$13, FCCOBLO                                                       (EEEM_ENABLE)
                                      ; - Step (3): Launch command -                                                   (EEEM_ENABLE)
0045BE 7F45BE 18 0B B0 01 06              movb #(CCIF|ACCERR|FPVIOL), FSTAT ; Move $B0 (%10110000) into Flash Status Register (EEEM_ENABLE)
                                                                            ;( Write 1s to Command Complete Interrupt  (EEEM_ENABLE)
                                                                            ; flag, Flash Access Error Flag and Flash  (EEEM_ENABLE)
                                                                            ; Protection Violation Flag to clear flags) (EEEM_ENABLE)
                                      ; - Step (4): Wait until command is executed -                                   (EEEM_ENABLE)
0045C3 7F45C3 1F 01 06 80 FB              brclr       FSTAT, #CCIF, *  ; Loop until Command Complete Interrupt         (EEEM_ENABLE)
0045C8 7F45C8 4E 00 40 53                 brset PORTA,PA6,PA6Set ; Pole PORTA, bit PA6 and branch to PA6Set: if bit is Hi
                                                                 ; This is the normal condition in mis-named position "Load"
0045CC 7F45CC MACRO                       EEEM_ENABLE   ; Enable EEPROM Emulation Macro in eeemBPEM488.s
                                                                          ; with $0F (FCLK=1MHz)                       (EEEM_ENABLE)
                                      ; - Enable EE Emulation -                                                        (EEEM_ENABLE)
                                      ; args:   1: branch address of error handler (optional)                          (EEEM_ENABLE)
                                      ; result: none                                                                   (EEEM_ENABLE)
                                      ; SSTACK: none                                                                   (EEEM_ENABLE)
                                      ;         X, Y, and D are preserved                                              (EEEM_ENABLE)
                                      ; - Step (1): Set FCCOBIX -                                                      (EEEM_ENABLE)
0045CC 7F45CC 79 01 02                    clr    FCCOBIX    ; Clear Flash CCOB Index Register                          (EEEM_ENABLE)
                                      ; - Step (2): Enter parameters into FCCOB -                                      (EEEM_ENABLE)
0045CF 7F45CF 18 0B 13 01 0A              movb   #$13, FCCOBHI  ; Move %00010011 into Flash Common Command Register    (EEEM_ENABLE)
                                                                ; Hi byte (Flash command enable EEEPROM Emulation)     (EEEM_ENABLE)
                                      ;     movb   #$13, FCCOBLO                                                       (EEEM_ENABLE)
                                      ; - Step (3): Launch command -                                                   (EEEM_ENABLE)
0045D4 7F45D4 18 0B B0 01 06              movb #(CCIF|ACCERR|FPVIOL), FSTAT ; Move $B0 (%10110000) into Flash Status Register (EEEM_ENABLE)
                                                                            ;( Write 1s to Command Complete Interrupt  (EEEM_ENABLE)
                                                                            ; flag, Flash Access Error Flag and Flash  (EEEM_ENABLE)
                                                                            ; Protection Violation Flag to clear flags) (EEEM_ENABLE)
                                      ; - Step (4): Wait until command is executed -                                   (EEEM_ENABLE)
0045D9 7F45D9 1F 01 06 80 FB              brclr       FSTAT, #CCIF, *  ; Loop until Command Complete Interrupt         (EEEM_ENABLE)
                                      ;*********************************************************************
                                      ; - Copy page 1, VE table, ranges and other configurable constants
                                      ;   from Flash to Buffer Ram. (EPAGE=$FF)
                                      ;*********************************************************************
0045DE 7F45DE 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
0045E3 7F45E3 CC 04 00                    ldd    #$400        ; Load accu D with decimal 1024
0045E6 7F45E6 CE 62 59                    ldx    #veBins_F    ; Load index register X with the address  NOTE CHANGE
                                                              ; of the first value in "veBins_F" table (Flash)
0045E9 7F45E9 CD 08 00                    ldy    #veBins_E      ; Load index register Y with the address  NOTE CHANGE
                                                              ; of the first value in "veBins" table (Buffer Ram)
0045EC 7F45EC                         CopyPage1:
0045EC 7F45EC 18 0A 30 70                 movb    1,X+, 1,Y+  ; Copy byte value from Flash to Buffer Ram and
                                                              ; increment X and Y registers
0045F0 7F45F0 04 34 F9                    dbne    D,CopyPage1 ; Decrement Accu D and loop back to CopyPage1:
                                                              ; if not zero
                                      ;*********************************************************************
                                      ; - Copy page 2, ST table, ranges and other configurable constants
                                      ;   from Flash to Buffer Ram. (EPAGE=$FE)
                                      ;*********************************************************************
0045F3 7F45F3 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE
0045F8 7F45F8 CC 04 00                    ldd    #$400        ; Load accu D with decimal 1024
0045FB 7F45FB CE 66 50                    ldx    #stBins_F    ; Load index register X with the address
                                                              ; of the first value in "stBins_F" table (Flash)
0045FE 7F45FE CD 08 00                    ldy    #stBins_E      ; Load index register Y with the address
                                                              ; of the first value in "stBins" table ( Buffer Ram)
004601 7F4601                         CopyPage2:
004601 7F4601 18 0A 30 70                 movb    1,X+, 1,Y+  ; Copy byte value from Flash to Buffer Ram and
                                                              ; increment X and Y registers
004605 7F4605 04 34 F9                    dbne    D,CopyPage2 ; Decrement Accu D and loop back to CopyPage2:
                                                              ; if not zero
                                      ;*********************************************************************
                                      ; - Copy page 3, AFR table, ranges and other configurable constants
                                      ;   from Flash to Buffer Ram. (EPAGE=$FD)
                                      ;*********************************************************************
004608 7F4608 18 0B FD 00 17              movb  #(BUF_RAM_P3_START>>16),EPAGE  ; Move $FD into EPAGE
00460D 7F460D CC 04 00                    ldd    #$400        ; Load accu D with decimal 1024
004610 7F4610 CE 69 3C                    ldx    #afrBins_F   ; Load index register X with the address
                                                              ; of the first value in "afrBins_F" table (Flash)
004613 7F4613 CD 08 00                    ldy    #afrBins_E     ; Load index register Y with the address
                                                              ; of the first value in "afrBins" table (Buffer Ram)
004616 7F4616                         CopyPage3:
004616 7F4616 18 0A 30 70                 movb    1,X+, 1,Y+  ; Copy byte value from Flash to Buffer Ram and
                                                              ; increment X and Y registers
00461A 7F461A 04 34 F9                    dbne    D,CopyPage3 ; Decrement Accu D and loop back to CopyPage3:
                                                              ; if not zero
00461D 7F461D 20 00                       bra   PA6Done       ; Branch to PA6Done:
00461F 7F461F                         PA6Set:
00461F 7F461F                         PA6Done:
                                      ;*****************************************************************************************
00461F 7F461F 79 00 1E                    clr  IRQCR   ; Disable IRQ (won't run without this)
004622 7F4622 10 EF                       cli          ; Clear Interrupt mask (enable interrupts)
                                      ;*****************************************************************************************
004624 7F4624 1F 10 05 08 FB              brclr clock,ms500,*  ; Wait here for 500mSec. Without this the ATD0 sequence below
                                                               ; won't work on power up. Slow start up for switching 5V power
                                                               ; supply is suspect.
                                      ;*****************************************************************************************
                                      ; - Start ATD0 conversion sequence, load all results and do conversions to user units
                                      ;   as a starting point for calculations.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;    Port AD:
                                      ;     PAD00 - ATD0  0 (RV15)(cltADC)
                                      ;     PAD01 - ATD0  1 (RV14)(matADC)
                                      ;     PAD02 - ATD0  2 (RV13)(eftADC)
                                      ;     PAD03 - ATD0  3 (RV12)(eotADC)
                                      ;     PAD04 - ATD0  4 (RV11)
                                      ;     PAD05 - ATD0  5 (RV10)(mapADC)
                                      ;     PAD06 - ATD0  6 (RV9)(baroADC)
                                      ;     PAD07 - ATD0  7       (batADC)
                                      ;     PAD08 - ATD0  8 (RV8)(ftrmADC)
                                      ;     PAD09 - ATD0  9 (RV7)(itrmADC)
                                      ;     PAD10 - ATD0 10 (RV6)(egtADC)
                                      ;     PAD11 - ATD0 11 (RV5)(eopADC)
                                      ;     PAD12 - ATD0 12 (RV4)(efpADC)
                                      ;     PAD13 - ATD0 13 (RV3)(tpsADC)
                                      ;     PAD14 - ATD0 14 (RV2)(iacAdc)
                                      ;     PAD15 - ATD0 15 (RV1)(egoADC)
                                      ;*****************************************************************************************
004629 7F4629 MACRO                       START_ATD0    ;(Macro in adc0_BPEM488.s)
                                                              ;(24 cycle sample time, prescale = 2                     (START_ATD0)
                                                              ; for 8.3MHz ATDCLK)                                     (START_ATD0)
                                                              ;         ^ ^^   ^                                       (START_ATD0)
                                                              ;     SMP-+-+|   |                                       (START_ATD0)
                                                              ;     PRS----+---+                                       (START_ATD0)
                                      ;***************************************************************************************** (START_ATD0)
                                      ;- Start ATD0 and get ADC values for all channels                                (START_ATD0)
                                      ;***************************************************************************************** (START_ATD0)
004629 7F4629 18 0B 30 02 C5              movb  #$30,ATD0CTL5   ; Load "ATD0CTL5" with %00110000 (no special channel,continuous (START_ATD0)
                                                                ; conversion, multi channel, initial channel 0)        (START_ATD0)
                                                                ; (Start conversion sequence)                          (START_ATD0)
                                                                ;         ^^^^^^^^                                     (START_ATD0)
                                                                ;       SC-+||||||                                     (START_ATD0)
                                                                ;     SCAN--+|||||                                     (START_ATD0)
                                                                ;     MULT---+||||                                     (START_ATD0)
                                                                ;       CD----+|||                                     (START_ATD0)
                                                                ;       CC-----+||                                     (START_ATD0)
                                                                ;       CB------+|                                     (START_ATD0)
                                                                ;       CA-------+                                     (START_ATD0)
00462E 7F462E 1F 02 C6 80 FB              brclr ATD0STAT0,SCF,*  ; Loop here until Sequence Complete Flag is set       (START_ATD0)
004633 7F4633 18 0B 80 02 C6              movb  #SCF,ATD0STAT0 ; Set the Sequence Complete Flag of ATD0STAT0 to clear the flag (START_ATD0)
004638 7F4638 FC 02 D0                    ldd   ATD0DR0H  ; Load accumulator with value in ATD Ch00                    (START_ATD0)
00463B 7F463B 7C 10 6A                    std   cltAdc    ; Copy to cltAdc                                             (START_ATD0)
00463E 7F463E FC 02 D2                    ldd   ATD0DR1H  ; Load accumulator with value in ATD Ch01                    (START_ATD0)
004641 7F4641 7C 10 6E                    std   matAdc    ; Copy to matAdc ADC                                         (START_ATD0)
004644 7F4644 FC 02 D4                    ldd   ATD0DR2H  ; Load accumulator with value in ATD Ch02                    (START_ATD0)
004647 7F4647 7C 10 72                    std   eftAdc    ; Copy to eftAdc ADC                                         (START_ATD0)
00464A 7F464A FC 02 D6                    ldd   ATD0DR3H  ; Load accumulator with value in ATD Ch03                    (START_ATD0)
00464D 7F464D 7C 10 76                    std   eotAdc    ; Copy to eotAdc                                             (START_ATD0)
004650 7F4650 FC 02 D8                    ldd   ATD0DR4H  ; Load accumulator with value in ATD Ch04                    (START_ATD0)
004653 7F4653 7C 10 7A                    std   RV11Adc   ; Copy to RV11 ADC                                           (START_ATD0)
004656 7F4656 FC 02 DA                    ldd   ATD0DR5H  ; Load accumulator with value in ATD Ch05                    (START_ATD0)
004659 7F4659 7C 10 7C                    std   mapAdc    ; Copy to mapAdc                                             (START_ATD0)
00465C 7F465C FC 02 DC                    ldd   ATD0DR6H  ; Load accumulator with value in ATD Ch06                    (START_ATD0)
00465F 7F465F 7C 10 80                    std   baroAdc   ; Copy to baroAdc                                            (START_ATD0)
004662 7F4662 FC 02 DE                    ldd   ATD0DR7H  ; Load accumulator with value in ATD Ch07                    (START_ATD0)
004665 7F4665 7C 10 84                    std   batAdc    ; Copy to bat ADC                                            (START_ATD0)
004668 7F4668 FC 02 E0                    ldd   ATD0DR8H  ; Load accumulator with value in ATD Ch08                    (START_ATD0)
00466B 7F466B 7C 10 88                    std   ftrmAdc   ; Copy to ftrmAdc                                            (START_ATD0)
00466E 7F466E FC 02 E2                    ldd   ATD0DR9H  ; Load accumulator with value in ATD Ch09                    (START_ATD0)
004671 7F4671 7C 10 8C                    std   itrmAdc   ; Copy to itrmAdc                                            (START_ATD0)
004674 7F4674 FC 02 E4                    ldd   ATD0DR10H ; Load accumulator with value in ATD Ch10                    (START_ATD0)
004677 7F4677 7C 10 90                    std   egtAdc    ; Copy to egtAdc                                             (START_ATD0)
00467A 7F467A FC 02 E6                    ldd   ATD0DR11H ; Load accumulator with value in ATD Ch11                    (START_ATD0)
00467D 7F467D 7C 10 94                    std   eopAdc    ; Copy to eopAdc                                             (START_ATD0)
004680 7F4680 FC 02 E8                    ldd   ATD0DR12H ; Load accumulator with value in ATD Ch12                    (START_ATD0)
004683 7F4683 7C 10 98                    std   efpAdc    ; Copy to efpAdc                                             (START_ATD0)
004686 7F4686 FC 02 EA                    ldd   ATD0DR13H ; Load accumulator with value in ATD Ch13                    (START_ATD0)
004689 7F4689 7C 10 9C                    std   tpsADC    ; Copy to tpsADC                                             (START_ATD0)
00468C 7F468C FC 02 EC                    ldd   ATD0DR14H ; Load accumulator with value in ATD Ch14                    (START_ATD0)
00468F 7F468F 7C 10 A0                    std   iacAdc    ; Copy to iacADC                                             (START_ATD0)
004692 7F4692 FC 02 EE                    ldd   ATD0DR15H ; Load accumulator with value in ATD Ch15                    (START_ATD0)
004695 7F4695 7C 10 A2                    std   egoAdc    ; Copy to egoAdc                                             (START_ATD0)
                                      ;*****************************************************************************************
                                      ; - Convert ADC values to user units -
                                      ;*****************************************************************************************
                                      ;    ADC0_CLT     ; Calculate Cltx10    ; Engine Coolant Temperature (Degrees F x 10) (6)
                                      ;    ADC0_MAT     ; Calculate Matx10    ; Manifold Air Temperature (Degrees F x 10) (10)
                                      ;    ADC0_EFT     ; Calculate Eftx10    ; Engine Fuel Temperature (Degrees F x 10) (14)
                                      ;    ADC0_EOT     ; Calculate Eotx10    ; Engine Oil Temperature (Degrees F x 10)(18)
                                      ;    ADC0_MAP     ; Calculate Mapx10    ; Manifold Absolute Pressure (KPAx10) (24)
                                      ;    ADC0_BARO    ; Calculate Barox10   ; Barometric Pressure (KPAx10) (28)
                                      ;    ADC0_BATV    ; Calculate BatVx10   ; Battery Voltage (Volts x 10) (32)
                                      ;    ADC0_FTRM    ; Calculate Ftrmx10   ; Fuel Trim (% x 10)(+-20%) (36)
                                      ;    ADC0_ITRM    ; Calculate Itrmx10   ; Ignition Trim (degrees x 10)+-20 degrees) (40)
                                      ;        ADC0_EGT     ; Calculate Egt       ; Exhaust Gas Temperature (degrees F) (44)
                                      ;    ADC0_EOP     ; Calculate Eopx10    ; Engine Oil Pressure (PSI x 10) (48)
                                      ;    ADC0_EFP     ; Calculate Efpx10    ; Engine Fuel Pressure (PSI x 10)( (52)
                                      ;    ADC0_TPSPCT  ; Calculate TpsPctx10 ; Throttle Position Sensor % of travel(%x10) (56)
                                      ;        ADC0_AFR1    ; Calculate afr1x10   ; Air Fuel Ratio (AFRx10)(exact for TS) (62)
                                      ;*****************************************************************************************
004698 7F4698 MACRO                       CONVERT_ATD0    ;(Macro in adc0_BPEM488.s)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Engine Coolant Temperature (Degrees F x 10)                          (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004698 7F4698 FE 10 6A                    ldx   cltAdc            ; Load index register X with value in "cltAdc"       (CONVERT_ATD0)
00469B 7F469B 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "cltAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
00469D 7F469D ED E2 6D 18                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
0046A1 7F46A1 7D 10 6C                    sty   Cltx10            ; Copy result to "Cltx10" Engine Coolant Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Manifold Air Temperature (Degrees F x 10)                            (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0046A4 7F46A4 FE 10 6E                    ldx   matAdc            ; Load index register X with value in "matAdc"       (CONVERT_ATD0)
0046A7 7F46A7 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "matAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
0046A9 7F46A9 ED E2 6D 18                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
0046AD 7F46AD 7D 10 70                    sty   Matx10            ; Copy result to "Matx100" Manifold Air Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Engine Fuel Temperature (Degrees F x 10)                             (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0046B0 7F46B0 FE 10 72                    ldx   eftAdc            ; Load index register X with value in "eftAdc"       (CONVERT_ATD0)
0046B3 7F46B3 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "eftAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
0046B5 7F46B5 ED E2 6D 18                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
0046B9 7F46B9 7D 10 74                    sty   Eftx10            ; Copy result to "Eftx100" Engine Fuel Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Engine Oil Temperature (Degrees F x 10)                              (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0046BC 7F46BC FE 10 76                    ldx   eotAdc            ; Load index register X with value in "eoAdc"        (CONVERT_ATD0)
0046BF 7F46BF 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "eoAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
0046C1 7F46C1 ED E2 6D 18                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
0046C5 7F46C5 7D 10 78                    sty   Eotx10           ; Copy result to "Eotx100" Engine Oil Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Manifold Absolute Pressure x 10 (Used to calculate to 1 decimal place) (CONVERT_ATD0)
                                      ;   MAP sensor MPX4115AP                                                         (CONVERT_ATD0)
                                      ;   Vout = MAP sensor output voltage                                             (CONVERT_ATD0)
                                      ;   P = Manifold pressure in KPA                                                 (CONVERT_ATD0)
                                      ;                                                                                (CONVERT_ATD0)
                                      ;   Vout = (mapAdc/1023)*5                                                       (CONVERT_ATD0)
                                      ;   P = ((Vout/5)+0.095)/0.009                                                   (CONVERT_ATD0)
                                      ; - For integer math:                                                            (CONVERT_ATD0)
                                      ;   P x 10 = ((mapAdc*10,000)/1023)+950)/9                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0046C8 7F46C8 FC 10 7C                    ldd   mapAdc        ; Load double accumulator with value in "mapAdc"         (CONVERT_ATD0)
0046CB 7F46CB CD 27 10                    ldy   #$2710        ; Load index register Y with decimal decimal 10,000      (CONVERT_ATD0)
0046CE 7F46CE 13                          emul                ; Extended 16x16 multiply (D)x(Y)=Y:D                    (CONVERT_ATD0)
0046CF 7F46CF CE 03 FF                    ldx   #$03FF        ; Load index register X with decimal 1023                (CONVERT_ATD0)
0046D2 7F46D2 11                          ediv                ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                (CONVERT_ATD0)
0046D3 7F46D3 18 CB 03 B6                 addy  #$03B6        ; Add without carry decimal 950 to Y (Y)+(M:M+1)->(Y)    (CONVERT_ATD0)
0046D7 7F46D7 B7 64                       tfr   Y,D           ; Copy value in "Y" to "D"                               (CONVERT_ATD0)
0046D9 7F46D9 CE 00 09                    ldx   #$0009        ; Load index register "X" with decimal 9                 (CONVERT_ATD0)
0046DC 7F46DC 18 10                       idiv                ; Integer divide (D)/(X)=>X Rem=>D                       (CONVERT_ATD0)
0046DE 7F46DE 7E 10 7E                    stx   Mapx10        ; Copy result to "Mapx10" (KPAx10)                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Barometric Pressure x 10(Used to calculate to 1 decimal place)     (CONVERT_ATD0)
                                      ;   Baro sensor MPX4115AP                                                        (CONVERT_ATD0)
                                      ;   Vout = Baro sensor output voltage                                            (CONVERT_ATD0)
                                      ;   P = Barometric pressure in KPA                                               (CONVERT_ATD0)
                                      ;                                                                                (CONVERT_ATD0)
                                      ;   Vout = (baroAdc/1023)*5                                                      (CONVERT_ATD0)
                                      ;   P = ((Vout/5)+0.095)/0.009                                                   (CONVERT_ATD0)
                                      ; - For integer math:                                                            (CONVERT_ATD0)
                                      ;   P x 10 = ((baroAdc*10,000)/1023)+950)/9                                      (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0046E1 7F46E1 FC 10 80                    ldd   baroAdc       ; Load double accumulator with value in "baroAdc"        (CONVERT_ATD0)
0046E4 7F46E4 CD 27 10                    ldy   #$2710        ; Load index register Y with decimal decimal 10,000      (CONVERT_ATD0)
0046E7 7F46E7 13                          emul                ; Extended 16x16 multiply (D)x(Y)=Y:D                    (CONVERT_ATD0)
0046E8 7F46E8 CE 03 FF                    ldx   #$03FF        ; Load index register X with decimal 1023                (CONVERT_ATD0)
0046EB 7F46EB 11                          ediv                ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                (CONVERT_ATD0)
0046EC 7F46EC 18 CB 03 B6                 addy  #$03B6        ; Add without carry decimal 950 to Y (Y)+(M:M+1)->(Y)    (CONVERT_ATD0)
0046F0 7F46F0 B7 64                       tfr   Y,D           ; Copy value in "Y" to "D"                               (CONVERT_ATD0)
0046F2 7F46F2 CE 00 09                    ldx   #$0009        ; Load index register "X" with decimal 9                 (CONVERT_ATD0)
0046F5 7F46F5 18 10                       idiv                ; Integer divide (D)/(X)=>X Rem=>D                       (CONVERT_ATD0)
0046F7 7F46F7 7E 10 82                    stx   Barox10        ; Copy result to "Barox10" (KPAx10)                     (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Battery Voltage x 10 -                                             (CONVERT_ATD0)
                                      ;    (batAdc/1023)*29.95 = BatV                                                  (CONVERT_ATD0)
                                      ;             or                                                                 (CONVERT_ATD0)
                                      ;    batAdc*(29.95/1023) = BatV, batADC = BatV                                   (CONVERT_ATD0)
                                      ;    batAdc*.029276637 = BatV  batADC = batV/.029276637                          (CONVERT_ATD0)
                                      ;    batAdc*(300/1023) = BatV*10                                                 (CONVERT_ATD0)
                                      ;    batAdc*.29276637 = BatV*10 bat ADC = batV*10/.29276637                      (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0046FA 7F46FA FC 10 84                    ldd   batAdc       ; Load double accumulator with value in "batAdc"          (CONVERT_ATD0)
0046FD 7F46FD CD 01 2C                    ldy   #$012C       ; Load index register Y with decimal decimal 300          (CONVERT_ATD0)
004700 7F4700 13                          emul               ; Extended 16x16 multiply (D)x(Y)=Y:D                     (CONVERT_ATD0)
004701 7F4701 CE 03 FF                    ldx   #$03FF       ; Load index register X with decimal 1023                 (CONVERT_ATD0)
004704 7F4704 11                          ediv               ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                 (CONVERT_ATD0)
004705 7F4705 7D 10 86                    sty   BatVx10      ; Copy result to "BatVx10" (Battery Voltage x 10)         (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Fuel Trim (% x 10)(+-20%) -                                        (CONVERT_ATD0)
                                      ;   (80% = 80% of VEcurr, 100% = 100% of VeCurr(no correction), 120% = 120% of VEcurr) (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004708 7F4708 1F 10 E8 08 39              brclr PortAbits,Ftrimen,NoFtrim ; "If Ftrimen" bit of "PortAbits" is clear, branch to (CONVERT_ATD0)
                                                                ; NoFtrim: (Fuel trim enable switch is off so skip over) (CONVERT_ATD0)
00470D 7F470D CC 00 00                    ldd   #$0000      ; Load double accumulator with zero (0 volt ADC)           (CONVERT_ATD0)
004710 7F4710 3B                          pshd              ; Push to stack (V1)                                       (CONVERT_ATD0)
004711 7F4711 FC 10 88                    ldd   ftrmAdc     ; Load double accumulator with "ftrmAdc"                   (CONVERT_ATD0)
004714 7F4714 CD 00 0A                    ldy   #$000A      ; Load index register Y with decimal 10                    (CONVERT_ATD0)
004717 7F4717 13                          emul              ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)         (CONVERT_ATD0)
004718 7F4718 3B                          pshd              ; Push to stack (V)                                        (CONVERT_ATD0)
004719 7F4719 CC 27 F6                    ldd   #$27F6      ; Load double accumulator with decimal 1023x10 (5 volt ADC) (CONVERT_ATD0)
00471C 7F471C 3B                          pshd              ; Push to stack (V2)                                       (CONVERT_ATD0)
00471D 7F471D CC 03 20                    ldd   #$0320      ; Load double accumulator with decimal 80x10 (Low range %) (CONVERT_ATD0)
004720 7F4720 3B                          pshd              ; Push to stack (Z1)                                       (CONVERT_ATD0)
004721 7F4721 CC 04 B0                    ldd   #$04B0      ; Load double accumulator with decimal 120x10 (High range %) (CONVERT_ATD0)
004724 7F4724 3B                          pshd              ; Push to stack (Z2)                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004725 7F4725 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004725 7F4725 EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004727 7F4727 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004729 7F4729 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00472B 7F472B EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
00472D 7F472D A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00472F 7F472F 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004731 7F4731 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004733 7F4733 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004735 7F4735 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004737 7F4737 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004739 7F4739 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
00473B 7F473B B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00473D 7F473D E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
00473F 7F473F 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (CONVERT_ATD0)
004741 7F4741 7C 10 8A                    std   Ftrmx10   ; Copy result to "Ftrmx10" Fuel Trim (%x10)                  (CONVERT_ATD0)
004744 7F4744 20 06                           bra   FtrimDone ; Branch to FtrimDone:                                   (CONVERT_ATD0)
004746 7F4746                         NoFtrim:                                                                         (CONVERT_ATD0)
004746 7F4746 18 03 03 E8 10 8A           movw #$03E8,Ftrmx10  ; Decimal 1000 -> "Ftrmx10" (100%, no trim)             (CONVERT_ATD0)
00474C 7F474C                         FtrimDone:                                                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Ignition Trim (Degrees x 10)(+-20 Degrees) -                       (CONVERT_ATD0)
                                      ;   Ignition calculations delay the coil energisation time (dwell) and the discharge time (CONVERT_ATD0)
                                      ;   (spark timing) from a known crankshaft angle. A trim offset of 20 degrees is built in. (CONVERT_ATD0)
                                      ;    An Itrm value of 0 results in 20 degree retard                              (CONVERT_ATD0)
                                      ;    An Itrm value of 20 results in no ignition trim                             (CONVERT_ATD0)
                                      ;    An Itrm value of 40 results in 20 degree advance                            (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
00474C 7F474C 1F 10 E8 10 39              brclr PortAbits,Itrimen,NoItrim ; "If Itrimen" bit of "PortAbits" is clear, branch to (CONVERT_ATD0)
                                                               ; NoItrim: (Ignition trim enable switch is off so skip over) (CONVERT_ATD0)
004751 7F4751 CC 00 00                    ldd  #$0000      ; Load double accumulator with zero (0 volt ADC)            (CONVERT_ATD0)
004754 7F4754 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004755 7F4755 FC 10 8C                    ldd  itrmAdc     ; Load double accumulator with "itrmAdc"                    (CONVERT_ATD0)
004758 7F4758 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
00475B 7F475B 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "itrmAdc" by 10)         (CONVERT_ATD0)
00475C 7F475C 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
00475D 7F475D CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023x10 (5 volt ADC) (CONVERT_ATD0)
004760 7F4760 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
004761 7F4761 CC 00 00                    ldd  #$0000      ; Load double accumulator with zero (Low range degrees)     (CONVERT_ATD0)
004764 7F4764 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004765 7F4765 CC 01 90                    ldd  #$0190      ; Load double accumulator with decimal 40x10 (High range degrees) (CONVERT_ATD0)
004768 7F4768 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004769 7F4769 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004769 7F4769 EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
00476B 7F476B A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
00476D 7F476D B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00476F 7F476F EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004771 7F4771 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004773 7F4773 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004775 7F4775 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004777 7F4777 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004779 7F4779 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
00477B 7F477B B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
00477D 7F477D 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
00477F 7F477F B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004781 7F4781 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004783 7F4783 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (CONVERT_ATD0)
004785 7F4785 7C 10 8E                    std   Itrmx10   ; Copy result to "Itrmx10" Ignition Trim (Degrees x 10)      (CONVERT_ATD0)
004788 7F4788 20 06                           bra   ItrimDone ; Branch to ItrimDone:                                   (CONVERT_ATD0)
00478A 7F478A                         NoItrim:                                                                         (CONVERT_ATD0)
00478A 7F478A 18 03 00 CB 10 8E           movw #$00CB,Itrmx10  ; Decimal 200 -> "Itrmx10" (20 degrees, no trim)        (CONVERT_ATD0)
004790 7F4790                         ItrimDone:                                                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Exhaust Gas Temperature "Egt" -                                    (CONVERT_ATD0)
                                      ;   EGT amplifier 0.0027v @ 0C (32F), 5.022v @ 720C (1328F) Resolution ~ 5 degrees F (CONVERT_ATD0)
                                      ;   Egt = (((egtAdc-0)*(1328-32))/(1023-0))+32                                   (CONVERT_ATD0)
                                      ;   Egt = ((egtAdc*(1296/1023)+32                                                (CONVERT_ATD0)
                                      ;   Egt = (egtAdc*1.26686217)+32                                                 (CONVERT_ATD0)
                                      ;   For integer math:                                                            (CONVERT_ATD0)
                                      ;   Egt = (egtAdc*12668/10000)+32                                                (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004790 7F4790 FC 10 90                    ldd   egtAdc       ; Load double accumulator with value in "egtAdc"          (CONVERT_ATD0)
004793 7F4793 CD 31 7C                    ldy   #$317C       ; Load index register Y with decimal decimal 12,668       (CONVERT_ATD0)
004796 7F4796 13                          emul               ; Extended 16x16 multiply (D)x(Y)=Y:D                     (CONVERT_ATD0)
004797 7F4797 CE 27 10                    ldx   #$2710       ; Load index register X with decimal 10,000               (CONVERT_ATD0)
00479A 7F479A 11                          ediv               ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                 (CONVERT_ATD0)
00479B 7F479B 18 CB 00 20                 addy  #$0020           ; (Y)+(M:M+1)->Y Add decimal 32                       (CONVERT_ATD0)
00479F 7F479F 7D 10 92                    sty   Egt          ; copy result to "Egt" Exhaust Gas Temperature            (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Engine Oil Pressure x 10 -                                         (CONVERT_ATD0)
                                      ;   Pressure transducer is ratiometric 1V to 5V 0PSI to 100PSI                   (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0047A2 7F47A2 CC 08 02                    ldd  #$0802      ; Load double accumulator with decimal 205 (1 volt ADC) ( x 10) (CONVERT_ATD0)
0047A5 7F47A5 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
0047A6 7F47A6 FC 10 94                    ldd  eopAdc      ; Load double accumulator with "eopAdc"                     (CONVERT_ATD0)
0047A9 7F47A9 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
0047AC 7F47AC 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)          (CONVERT_ATD0)
0047AD 7F47AD 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
0047AE 7F47AE CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023 (5 volt ADC) ( x 10) (CONVERT_ATD0)
0047B1 7F47B1 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
0047B2 7F47B2 CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (Low range PSI) ( x 10) (CONVERT_ATD0)
0047B5 7F47B5 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
0047B6 7F47B6 CC 03 E8                    ldd  #$03E8      ; Load double accumulator with decimal 100 (High range PSI) ( x 10) (CONVERT_ATD0)
0047B9 7F47B9 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
0047BA 7F47BA MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047BA 7F47BA EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
0047BC 7F47BC A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
0047BE 7F47BE B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047C0 7F47C0 EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
0047C2 7F47C2 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047C4 7F47C4 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
0047C6 7F47C6 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047C8 7F47C8 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
0047CA 7F47CA A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
0047CC 7F47CC B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
0047CE 7F47CE 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
0047D0 7F47D0 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047D2 7F47D2 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0047D4 7F47D4 1B 8A                       leas  10,SP    ; Stack pointer -> bottom of stack                            (CONVERT_ATD0)
0047D6 7F47D6 7C 10 96                    std   Eopx10   ; Copy result to "Eopx10" Engine Oil Pressure x 10            (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Engine Fuel Pressure x 10 -                                        (CONVERT_ATD0)
                                      ;   Pressure transducer is ratiometric 1V to 5V 0PSI to 100PSI                   (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0047D9 7F47D9 CC 08 02                    ldd  #$0802      ; Load double accumulator with decimal 205 (1 volt ADC) ( x 10) (CONVERT_ATD0)
0047DC 7F47DC 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
0047DD 7F47DD FC 10 98                    ldd  efpAdc      ; Load double accumulator with "efpAdc"                     (CONVERT_ATD0)
0047E0 7F47E0 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
0047E3 7F47E3 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)          (CONVERT_ATD0)
0047E4 7F47E4 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
0047E5 7F47E5 CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023 (5 volt ADC) ( x 10) (CONVERT_ATD0)
0047E8 7F47E8 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
0047E9 7F47E9 CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (Low range PSI) ( x 10) (CONVERT_ATD0)
0047EC 7F47EC 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
0047ED 7F47ED CC 03 E8                    ldd  #$03E8      ; Load double accumulator with decimal 100 (High range PSI) ( x 10) (CONVERT_ATD0)
0047F0 7F47F0 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
0047F1 7F47F1 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047F1 7F47F1 EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
0047F3 7F47F3 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
0047F5 7F47F5 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047F7 7F47F7 EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
0047F9 7F47F9 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047FB 7F47FB 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
0047FD 7F47FD B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047FF 7F47FF EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004801 7F4801 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004803 7F4803 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004805 7F4805 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004807 7F4807 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004809 7F4809 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
00480B 7F480B 1B 8A                       leas  10,SP    ; Stack pointer -> bottom of stack                            (CONVERT_ATD0)
00480D 7F480D 7C 10 9A                    std   Efpx10   ; Copy result to "Efpx10" Engine Fuel Pressure x 10           (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Throttle Position Percent x 10 -                                   (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004810 7F4810 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (CONVERT_ATD0)
004815 7F4815 CD 08 00                    ldy  #veBins_E   ; Load index register Y with address of first configurable constant (CONVERT_ATD0)
                                                           ; on buffer RAM page 1 (veBins)                             (CONVERT_ATD0)
004818 7F4818 EC EA 03 E8                 ldd  $03E8,Y     ; Load Accu D with value in buffer RAM page 1 offset 1000 (tpsMin) (CONVERT_ATD0)
00481C 7F481C CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
00481F 7F481F 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "tpsMin" by 10)          (CONVERT_ATD0)
004820 7F4820 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004821 7F4821 FC 10 9C                    ldd  tpsADC      ; Load double accumulator with "tpsADCAdc"                  (CONVERT_ATD0)
004824 7F4824 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004827 7F4827 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "tpsADC" by 10)          (CONVERT_ATD0)
004828 7F4828 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
004829 7F4829 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (CONVERT_ATD0)
00482E 7F482E CD 08 00                    ldy  #veBins_E   ; Load index register Y with address of first configurable constant (CONVERT_ATD0)
                                                           ; on buffer RAM page 1 (vebins)                             (CONVERT_ATD0)
004831 7F4831 EC EA 03 EA                 ldd  $03EA,Y     ; Load Accu D with value in buffer RAM page 1 offset 1002 (tpsMax) (CONVERT_ATD0)
004835 7F4835 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004838 7F4838 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "tpsMax" by 10)          (CONVERT_ATD0)
004839 7F4839 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
00483A 7F483A CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (Low range %) ( x 10) (CONVERT_ATD0)
00483D 7F483D 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
00483E 7F483E CC 03 E8                    ldd  #$03E8      ; Load double accumulator with decimal 100 (High range %) ( x 10) (CONVERT_ATD0)
004841 7F4841 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004842 7F4842 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004842 7F4842 EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004844 7F4844 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004846 7F4846 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004848 7F4848 EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
00484A 7F484A A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00484C 7F484C 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
00484E 7F484E B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004850 7F4850 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004852 7F4852 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004854 7F4854 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004856 7F4856 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004858 7F4858 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00485A 7F485A E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
00485C 7F485C 1B 8A                       leas  10,SP    ; Stack pointer -> bottom of stack                            (CONVERT_ATD0)
00485E 7F485E 7C 10 9E                    std  TpsPctx10 ; Copy result to "TpsPctx10" Throttle Position Percent of travel x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Air Fuel Ratio x 10 -                                              (CONVERT_ATD0)
                                      ;   Innovate LC-2 AFR is ratiometric 0V to 5V 7.35 AFR to 22.39 AFR              (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004861 7F4861 CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (0 volt ADC) ( x 10) (CONVERT_ATD0)
004864 7F4864 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004865 7F4865 FC 10 A2                    ldd  egoAdc      ; Load double accumulator with "egoAdc"                     (CONVERT_ATD0)
004868 7F4868 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
00486B 7F486B 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)          (CONVERT_ATD0)
00486C 7F486C 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
00486D 7F486D CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023 (5 volt ADC) ( x 10) (10230) (CONVERT_ATD0)
004870 7F4870 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
004871 7F4871 CC 00 4A                    ldd  #$004A      ; Load double accumulator with decimal 7.35 (Low range AFR) ( x 10) (74) (CONVERT_ATD0)
004874 7F4874 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004875 7F4875 CC 00 E0                    ldd  #$00E0      ; Load double accumulator with decimal 22.39 (High range AFR) ( x 10) (224) (CONVERT_ATD0)
004878 7F4878 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004879 7F4879 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004879 7F4879 EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
00487B 7F487B A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
00487D 7F487D B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00487F 7F487F EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004881 7F4881 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004883 7F4883 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004885 7F4885 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004887 7F4887 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004889 7F4889 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
00488B 7F488B B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
00488D 7F488D 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
00488F 7F488F B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004891 7F4891 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004893 7F4893 1B 8A                       leas  10,SP       ; Stack pointer -> bottom of stack                         (CONVERT_ATD0)
004895 7F4895 7C 10 A4                    std   afr1x10     ; Copy result to "afr1x10" Air Fuel Ratio x 10             (CONVERT_ATD0)
                                      ;*****************************************************************************************
                                      ; - Calculate values at Z1 and Z2 to interpolate injector deadband at current battery
                                      ;   voltage. This is done before entering the main loop as will only change if the
                                      ;   configurable constants for injector dead time and battery voltage correction have
                                      ;   been changed.
                                      ;*****************************************************************************************
004898 7F4898 MACRO                       DEADBAND_Z1_Z2   ; Macro in injcalcs_BPEM488.s
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
                                      ; - Injector dead band is the time required for the injectors to open and close and must (DEADBAND_Z1_Z2)
                                      ;   be included in the pulse width time. The amount of time will depend on battery voltge. (DEADBAND_Z1_Z2)
                                      ;   Battery voltage correction for injector deadband is calculated as a linear function (DEADBAND_Z1_Z2)
                                      ;   of battery voltage from 7.2 volts to 19.2 volts with 13.2 volts being the nominal (DEADBAND_Z1_Z2)
                                      ;   operating voltage where no correction is applied.                            (DEADBAND_Z1_Z2)
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
                                      ; - Calculate values at Z1 and Z2 to interpolate injector deadband at current battery (DEADBAND_Z1_Z2)
                                      ;   voltage. This is done before entering the main loop as will only change if the (DEADBAND_Z1_Z2)
                                      ;   configurable constants for injector dead time and battery voltage correction have (DEADBAND_Z1_Z2)
                                      ;   been changed.                                                                (DEADBAND_Z1_Z2)
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
                                      ;                                                                                (DEADBAND_Z1_Z2)
                                      ;  V1 = 72 (7.2 volts)                                                           (DEADBAND_Z1_Z2)
                                      ;  V  = BatVx10 (current battery voltage x 10)                                   (DEADBAND_Z1_Z2)
                                      ;  V2 = 192 (19.2volts)                                                          (DEADBAND_Z1_Z2)
                                      ;  Z1 = DdBndBase - (DdBBndCor * 6)                                              (DEADBAND_Z1_Z2)
                                      ;  Z  = unknown (deadband)                                                       (DEADBAND_Z1_Z2)
                                      ;  Z2 = DdBndBase + (DdBBndCor * 6)                                              (DEADBAND_Z1_Z2)
                                      ;                                                                                (DEADBAND_Z1_Z2)
                                      ;    |                                                                           (DEADBAND_Z1_Z2)
                                      ;  Z2+....................*                                                      (DEADBAND_Z1_Z2)
                                      ;    |                    :                                                      (DEADBAND_Z1_Z2)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (DEADBAND_Z1_Z2)
                                      ;    |           :        :        Z = Z1 + --------------                       (DEADBAND_Z1_Z2)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (DEADBAND_Z1_Z2)
                                      ;    |   :       :        :                                                      (DEADBAND_Z1_Z2)
                                      ;   -+---+-------+--------+-                                                     (DEADBAND_Z1_Z2)
                                      ;    |   V1      V        V2                                                     (DEADBAND_Z1_Z2)
                                      ;                                                                                (DEADBAND_Z1_Z2)
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
                                      ; - Calculate values at Z1 and Z2                                                (DEADBAND_Z1_Z2)
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
004898 7F4898 18 0B FF 00 17                  movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE               (DEADBAND_Z1_Z2)
00489D 7F489D CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable (DEADBAND_Z1_Z2)
                                                              ; constant on buffer RAM page 1 (veBins_E)               (DEADBAND_Z1_Z2)
0048A0 7F48A0 A6 EA 03 CC                 ldaa   $03CC,Y      ; Load Accu A with value in buffer RAM page 1 offset 972 (DEADBAND_Z1_Z2)
                                                              ; Injector deadband at 13.2V (mSec*10)(DdBndBase_F)      (DEADBAND_Z1_Z2)
0048A4 7F48A4 7A 10 FB                    staa  tmp1          ; Copy to "tmp1" (Injector deadband at 13.2V (mSec * 100)) (DEADBAND_Z1_Z2)
0048A7 7F48A7 18 0B FF 00 17                  movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE               (DEADBAND_Z1_Z2)
0048AC 7F48AC CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable (DEADBAND_Z1_Z2)
                                                              ; constant on buffer RAM page 1 (veBins_E)               (DEADBAND_Z1_Z2)
0048AF 7F48AF A6 EA 03 CE                 ldaa   $03CE,Y      ; Load Accu A with value in buffer RAM page 1 offset 974 (DEADBAND_Z1_Z2)
                                                              ; Injector deadband voltage correction (mSec/V x 100)(DdBndCor_F) (DEADBAND_Z1_Z2)
0048B3 7F48B3 C6 06                       ldab  #$06          ; Decimal 6-> Accu B                                     (DEADBAND_Z1_Z2)
0048B5 7F48B5 12                              mul                 ;(A)x(B)->A:B "Injector deadband voltage correction" * 6 (DEADBAND_Z1_Z2)
0048B6 7F48B6 7B 10 FC                        stab   tmp2         ;("Injector deadband voltage correction" * 6)-> tmp2 (DEADBAND_Z1_Z2)
0048B9 7F48B9 FB 10 FB                        addb  tmp1          ;(B)+(M)->B (Injector deadband at 13.2V + (Injector deadband (DEADBAND_Z1_Z2)
                                                                  ; voltage correction * 6)                            (DEADBAND_Z1_Z2)
0048BC 7F48BC 7B 10 4A                        stab   DdBndZ2      ; Copy result to "DdBndZ2"                           (DEADBAND_Z1_Z2)
0048BF 7F48BF B6 10 FB                    ldaa  tmp1          ; (Injector deadband at 13.2V)-> Accu A                  (DEADBAND_Z1_Z2)
0048C2 7F48C2 B0 10 FC                    suba  tmp2          ; (A)-(M)->A ((Injector deadband at 13.2V) -             (DEADBAND_Z1_Z2)
                                                                  ; (Injector deadband voltage correction * 6))        (DEADBAND_Z1_Z2)
0048C5 7F48C5 7A 10 49                    staa  DdBndZ1       ; Copy result to "DdBndZ1"                               (DEADBAND_Z1_Z2)
                                      ;*****************************************************************************************
                                      ; - Interpolate injector deadband at current battery voltage
                                      ;*****************************************************************************************
0048C8 7F48C8 MACRO                       DEADBAND_CALCS   ; Macro in injcalcs_BPEM488.s
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                      ; - Interpolate injector deadband at current battery voltage                     (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
0048C8 7F48C8 CC 00 48                    ldd  #$0048      ; Decimal 72 (7.2 volts) -> Accu D                          (DEADBAND_CALCS)
0048CB 7F48CB 3B                          pshd             ; Push to stack (V1)                                        (DEADBAND_CALCS)
0048CC 7F48CC FC 10 86                    ldd  BatVx10     ; "BatVx10"(battery volts x 10) -> Accu D                   (DEADBAND_CALCS)
0048CF 7F48CF 3B                          pshd             ; Push to stack (V)                                         (DEADBAND_CALCS)
0048D0 7F48D0 CC 00 C0                    ldd  #$00C0      ; Decimal 192 (19.2 volts) -> Accu D                        (DEADBAND_CALCS)
0048D3 7F48D3 3B                          pshd             ; Push to stack (V2)                                        (DEADBAND_CALCS)
0048D4 7F48D4 FC 10 49                        ldd  DdBndZ1     ;((Injector deadband at 13.2V) - (Injector deadband voltage (DEADBAND_CALCS)
                                                               ; correction * 6)) -> Accu D                            (DEADBAND_CALCS)
0048D7 7F48D7 3B                          pshd             ; Push to stack (Z1)                                        (DEADBAND_CALCS)
0048D8 7F48D8 FC 10 4A                        ldd  DdBndZ2     ;((Injector deadband at 13.2V) + (Injector deadband voltage (DEADBAND_CALCS)
                                                               ; correction * 6)) -> Accu D                            (DEADBAND_CALCS)
0048DB 7F48DB 3B                          pshd             ; Push to stack (Z2)                                        (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        Z2       |  SP+ 0                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        Z1       |  SP+ 2                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V2       |  SP+ 4                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V        |  SP+ 6                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V1       |  SP+ 8                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                      ;                     V      V1      V2      Z1    Z2                            (DEADBAND_CALCS)
0048DC 7F48DC MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ; ==========================                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ; result: D: interpolated result                                                 (DEADBAND_CALCS/2D_IPOL)
                                      ; SSTACK: none                                                                   (DEADBAND_CALCS/2D_IPOL)
                                      ;         no registers are preserved                                             (DEADBAND_CALCS/2D_IPOL)
                                      ;                                                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;    ^ V                                                                         (DEADBAND_CALCS/2D_IPOL)
                                      ;    |                                                                           (DEADBAND_CALCS/2D_IPOL)
                                      ;  Z2+....................*                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;    |                    :                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (DEADBAND_CALCS/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (DEADBAND_CALCS/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (DEADBAND_CALCS/2D_IPOL)
                                      ;    |   :       :        :                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ;                                                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
0048DC 7F48DC EC 86                                   LDD       \1    ; load V                                         (DEADBAND_CALCS/2D_IPOL)
0048DE 7F48DE A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (DEADBAND_CALCS/2D_IPOL)
0048E0 7F48E0 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
0048E2 7F48E2 EC 80                                   LDD       \5    ; load Z2                                        (DEADBAND_CALCS/2D_IPOL)
0048E4 7F48E4 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
0048E6 7F48E6 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (DEADBAND_CALCS/2D_IPOL)
0048E8 7F48E8 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
0048EA 7F48EA EC 84                                   LDD       \3    ; load V2                                        (DEADBAND_CALCS/2D_IPOL)
0048EC 7F48EC A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (DEADBAND_CALCS/2D_IPOL)
0048EE 7F48EE B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (DEADBAND_CALCS/2D_IPOL)
                                      ;*********************************************************************           (DEADBAND_CALCS/2D_IPOL)
0048F0 7F48F0 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (DEADBAND_CALCS/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (DEADBAND_CALCS/2D_IPOL)
0048F2 7F48F2 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
0048F4 7F48F4 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                      ; - Free stack space (result in D)                                               (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
0048F6 7F48F6 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (DEADBAND_CALCS)
0048F8 7F48F8 7B 10 CC                    stab  Deadband  ; Copy result to "Deadband" (Injector deadband at current battery (DEADBAND_CALCS)
                                      ;*****************************************************************************************
                                      ; - Energise the Fuel pump relay and the Emergency Shutdown relay on Port B Bit0
                                      ;*****************************************************************************************
0048FB 7F48FB MACRO                       FUEL_PUMP_AND_ASD_ON    ; Macro in gpio_BEEM488.s
                                                            ; with %00010000 (PS4 pull down,                           (FUEL_PUMP_AND_ASD_ON)
                                                            ; PS7,6,5,3,2,1,0 pull up)                                 (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ; - Initialize Port T. Enhanced Capture Channels IOC7-IOC0. pg 527               (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT0(P9) - IOC0 OC0 LED red  (D7)(1to28)(Ign1)(1&6)   (output, low)                * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT1(P10) - IOC1 IC1 (CASc)(Tooth decoder)(input,  pull-down) VR sensor P9         * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT2(P11) - IOC2 OC2 LED red  (D8)(1to28)(Ign2)(10&5)  (output, low)               * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT3(P12) - IOC3 IC3 (VSSb)(Vehicle Speed)(input,  pull-down) VR sensor P10        * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT4(P15) - IOC4 IC4 (CASa)(RPM)          (input,  pull-down) Volt to Freq U1      * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT5(P16) - IOC5 IC5 (CASd)(Tooth decoder)(input,  pull-down) gear tooth K2 Cam    * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT6(P17) - IOC6 IC6 (VSSa)(Vehicle Speed)(input,  pull-down) Volt to Freq U2      * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT7(P18) - IoC7 IC7 (CASb)(Tooth decoder)(input,  pull-down) gear tooth K3 Crank  * (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ;* - NOTE! Port T is initialized in ect_BEEM.s                                   (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ; - Energise the Fuel pump relay and the Emergency Shutdown relay on Port B Bit0 and Bit1 (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
0048FB 7F48FB 4C 01 01                    bset  PORTB,FuelPump  ; Set "FuelPump" pin on Port B(LED9 board 1 to 28)     (FUEL_PUMP_AND_ASD_ON)
0048FE 7F48FE 4C 01 02                        bset  PORTB,ASDRelay  ; Set "ASDRelay" pin on Port B(LED23 board 1 to 28) (FUEL_PUMP_AND_ASD_ON)
                                      ;*****************************************************************************************
                                      ; --------------------------------- Priming Mode ----------------------------------------
                                      ;
                                      ; On power up before entering the main loop all injectors are pulsed with a priming pulse
                                      ; to wet the intake manifold walls and provide some initial starting fuel. The injector
                                      ; pulse width is interpolated from the Prime Pulse table which plots engine temperature
                                      ; in degrees F to 0.1 degree resoluion against time in mS to 0.1mS resoluion
                                      ;
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - The ECT and TIM timers are initilized with the 5.12uS time base. This time base is
                                      ;   used for ignition calculations in crank mode as well as injector pulse width
                                      ;   calculations in prime and crank mode. In run mode the time base is swithced to 2.56uS
                                      ;   resolution for all calculations.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Look up the value for the prime pulse width in 5.12uS resolution
                                      ;*****************************************************************************************
004901 7F4901 MACRO                       PRIME_PW_LU              ; (Macro in injcalcs_BEEM488.s)
                                      ;***************************************************************************************** (PRIME_PW_LU)
                                      ; --------------------------------- Priming Mode ---------------------------------------- (PRIME_PW_LU)
                                      ;                                                                                (PRIME_PW_LU)
                                      ; On power up before entering the main loop all injectors are pulsed with a priming pulse (PRIME_PW_LU)
                                      ; to wet the intake manifold walls and provide some initial starting fuel. The injector (PRIME_PW_LU)
                                      ; pulse width is interpolated from the Prime Pulse table which plots engine temperature (PRIME_PW_LU)
                                      ; in degrees F to 0.1 degree resoluion against time in mS to 0.1mS resoluion     (PRIME_PW_LU)
                                      ;                                                                                (PRIME_PW_LU)
                                      ;***************************************************************************************** (PRIME_PW_LU)
                                      ;***************************************************************************************** (PRIME_PW_LU)
                                      ; - Look up current value in Prime Pulsewidth Table (PrimePW)(mS x 10)           (PRIME_PW_LU)
                                      ;***************************************************************************************** (PRIME_PW_LU)
004901 7F4901 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (PRIME_PW_LU)
004906 7F4906 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (PRIME_PW_LU)
                                                                  ; ->page where the desired curve resides             (PRIME_PW_LU)
00490C 7F490C 18 03 01 90 10 27           movw #$0190,CrvRowOfst  ; 400 -> Offset from the curve page to the curve row (PRIME_PW_LU)
                                                                      ; (tempTable2)Actual offset is 800)              (PRIME_PW_LU)
004912 7F4912 18 03 01 AC 10 29           movw #$01AC,CrvColOfst  ; 428 -> Offset from the curve page to the curve column (PRIME_PW_LU)
                                                                      ; (primePWTable)(actual offset is 856)           (PRIME_PW_LU)
004918 7F4918 18 04 10 6C 10 2B           movw Cltx10,CrvCmpVal   ; Engine Coolant Temperature (Degrees F x 10) ->     (PRIME_PW_LU)
                                                                  ; Curve comparison value                             (PRIME_PW_LU)
00491E 7F491E 18 0B 09 10 2D              movb #$09,CrvBinCnt     ; 9 -> number of bins in the curve row or column minus 1 (PRIME_PW_LU)
004923 7F4923 16 60 CE                    jsr   CRV_LU_NP         ; Jump to subroutine at CRV_LU_NP:(located in        (PRIME_PW_LU)
                                                                      ; interp_BPEM488.s module)                       (PRIME_PW_LU)
004926 7F4926 7C 10 D2                        std  FDpw               ; Result -> "FDpw" (fuel delivery pulsewidth (mS x 10) (PRIME_PW_LU)
004929 7F4929 F3 10 CC                        addd Deadband           ; (A:B)+(M:M+1)->A:B ("FDpw"+"Deadband"="PrimePW" (PRIME_PW_LU)
00492C 7F492C 7C 10 CE                        std  PrimePW            ; Result -> "PrimePW" (primer injector pulsewidth) (mS x 10) (PRIME_PW_LU)
00492F 7F492F FC 10 D2                        ldd  FDpw               ; "FDpw"->Accu D (mS x 10)                       (PRIME_PW_LU)
004932 7F4932 CE 00 0A                        ldx  #$000A             ; Decimal 10->Accu X                             (PRIME_PW_LU)
004935 7F4935 18 10                           idiv                    ; (D)/(X)->Xrem->D ("FDpw"/10="FD")(mS)          (PRIME_PW_LU)
004937 7F4937 7E 10 D6                        stx  FD                 ; Copy reslut to "FD"(mS)(Fuel burn calcs have to be in mS) (PRIME_PW_LU)
                                      ;***************************************************************************************** (PRIME_PW_LU)
                                      ; - Convert to timer ticks in 5.12uS resolution                                  (PRIME_PW_LU)
                                      ;***************************************************************************************** (PRIME_PW_LU)
00493A 7F493A FC 10 CE                    ldd  PrimePW     ; "PrimePW" -> Accu D                                       (PRIME_PW_LU)
00493D 7F493D CD 27 10                        ldy   #$2710     ; Load index register Y with decimal 10000 (for integer math) (PRIME_PW_LU)
004940 7F4940 13                              emul             ;(D)x(Y)=Y:D "PrimePW" * 10,000                         (PRIME_PW_LU)
004941 7F4941 CE 02 00                        ldx   #$200      ; Decimal 512 -> Accu X                                 (PRIME_PW_LU)
004944 7F4944 11                          ediv             ;(Y:D)/(X)=Y;Rem->D "PrimePW" * 10,000 / 512 = "CrankPWtk"  (PRIME_PW_LU)
004945 7F4945 7D 10 59                    sty   PrimePWtk  ; Copy result to "PrimePWtk" (Priming pulse width in 5.12uS (PRIME_PW_LU)
004948 7F4948 18 04 10 59 10 61               movw primePWtk,InjOCadd2 ; Copy value in "primePWtk" to "InjOCadd2" (Primer pulse width
                                                                       ; in 5.12uS res to injector timer output compare adder)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - In the INIT_TIM macro, Port T PT0, PT2 and all Port P pins are set as outputs with
                                      ;   initial setting low. To control both the ignition and injector drivers two interrupts
                                      ;   are required for each ignition or injection event. At the appropriate crank angle and
                                      ;   cam phase an interrupt is triggered. In this ISR routine the channel output compare
                                      ;   register is loaded with the delay value from trigger time to the time desired to
                                      ;   energise the coil or injector and the channel interrupt is enabled. When the output
                                      ;   compare matches, the pin is commanded high and the timer channel interrupt is triggered.
                                      ;   The output compare register is then loaded with the value to keep the coil or injector
                                      ;   energised. When the output compare matches the pin is commanded low to fire the coil
                                      ;   or de-energise the injector.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Pulse Inj1 (Cylinders 1&10) with value in "primePWtk"
                                      ;*****************************************************************************************
00494E 7F494E MACRO                       FIRE_INJ1               ; Macro in tim_BEEM488.s
                                      ;***************************************************************************************** (FIRE_INJ1)
                                      ; - PP3(P1) - TIM1 OC3 (D1)(1to28)(Inj1)(1&10) Control                           (FIRE_INJ1)
                                      ;***************************************************************************************** (FIRE_INJ1)
                                      ;***************************************************************************************** (FIRE_INJ1)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ1)
                                      ;***************************************************************************************** (FIRE_INJ1)
00494E 7F494E 1C 03 D9 80                 bset TIM_TCTL2,Bit7 ; Set Ch3 output line to 1 on compare                    (FIRE_INJ1)
004952 7F4952 1C 03 D9 40                 bset TIM_TCTL2,Bit6 ; Set Ch3 output line to 1 on compare                    (FIRE_INJ1)
004956 7F4956 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ1)
004959 7F4959 F3 10 5F                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ1)
00495C 7F495C 7C 03 E6                    std  TIM_TC3H       ; Copy result to Timer IC/OC register 3 (Start OC operation) (FIRE_INJ1)
                                      ;*****************************************************************************************
                                      ; - Pulse Inj2 (Cylinders 9&4) with value in "primePWtk"
                                      ;*****************************************************************************************
00495F 7F495F MACRO                       FIRE_INJ2               ; Macro in tim_BEEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
                                      ; - PP4(P112) - TIM1 OC4 (D3)(87to112)(Inj2)(9&4) Control                        (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
00495F 7F495F 1C 03 D8 01                 bset TIM_TCTL1,Bit0 ; Set Ch4 output line to 1 on compare                    (FIRE_INJ2)
004963 7F4963 1C 03 D8 02                 bset TIM_TCTL1,Bit1 ; Set Ch4 output line to 1 on compare                    (FIRE_INJ2)
004967 7F4967 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ2)
00496A 7F496A F3 10 5F                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ2)
00496D 7F496D 7C 03 E8                    std  TIM_TC4H       ; Copy result to Timer IC/OC register 4 (Start OC operation) (FIRE_INJ2)
                                      ;*****************************************************************************************
                                      ; - Pulse Inj3 (Cylinders 3&6) with value in "primePWtk"
                                      ;*****************************************************************************************
004970 7F4970 MACRO                       FIRE_INJ3               ; Macro in tim_BEEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
                                      ; - PP5(P111) - TIM1 OC5 (D6)(87to112)(Inj3)(3&6) Control                        (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
004970 7F4970 1C 03 D8 04                 bset TIM_TCTL1,Bit2 ; Set Ch5 output line to 1 on compare                    (FIRE_INJ3)
004974 7F4974 1C 03 D8 08                 bset TIM_TCTL1,Bit3 ; Set Ch5 output line to 1 on compare                    (FIRE_INJ3)
004978 7F4978 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ3)
00497B 7F497B F3 10 5F                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ3)
00497E 7F497E 7C 03 EA                    std  TIM_TC5H       ; Copy result to Timer IC/OC register 5 (Start OC operation) (FIRE_INJ3)
                                      ;*****************************************************************************************
                                      ; - Pulse Inj4 (Cylinders 5&8) with value in "primePWtk"
                                      ;*****************************************************************************************
004981 7F4981 MACRO                       FIRE_INJ4               ; Macro in tim_BEEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
                                      ; - PP6(P110) - TIM1 OC6 (D1)(87to112)(Inj4)(5&8) Control                        (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
004981 7F4981 1C 03 D8 10                 bset TIM_TCTL1,Bit4 ; Set Ch6 output line to 1 on compare                    (FIRE_INJ4)
004985 7F4985 1C 03 D8 20                 bset TIM_TCTL1,Bit5 ; Set Ch6 output line to 1 on compare                    (FIRE_INJ4)
004989 7F4989 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ4)
00498C 7F498C F3 10 5F                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ4)
00498F 7F498F 7C 03 EC                    std  TIM_TC6H       ; Copy result to Timer IC/OC register 6 (Start OC operation) (FIRE_INJ4)
                                      ;*****************************************************************************************
                                      ; - Pulse Inj5 (Cylinders 7&2) with value in "primePWtk"
                                      ;*****************************************************************************************
004992 7F4992 MACRO                       FIRE_INJ5               ; Macro in tim_BEEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
                                      ; - PP7(P109) - TIM1 OC7 (D7)(87to112)(Inj5)(7&2) Control                        (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
004992 7F4992 1C 03 D8 80                 bset TIM_TCTL1,Bit7 ; Set Ch7 output line to 1 on compare                    (FIRE_INJ5)
004996 7F4996 1C 03 D8 40                 bset TIM_TCTL1,Bit6 ; Set Ch7 output line to 1 on compare                    (FIRE_INJ5)
00499A 7F499A FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ5)
00499D 7F499D F3 10 5F                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ5)
0049A0 7F49A0 7C 03 EE                    std  TIM_TC7H       ; Copy result to Timer IC/OC register 7(Start OC operation) (FIRE_INJ5)
                                      ;*****************************************************************************************
                                      ; - Set the "crank" bit and clear the "run" bit of the "engine" bit field in preparation
                                      ;   for cranking.
                                      ;*****************************************************************************************
0049A3 7F49A3 1C 10 EF 02                bset engine,crank   ; Set the "crank" bit of "engine" bit field
0049A7 7F49A7 1D 10 EF 04                bclr engine,run     ; Clear the "run" bit of "engine" bit field
                                      ;*****************************************************************************************
                                      ; - Set the "base512" bit and clear the "base256" bit of the "engine2" bit field in
                                      ;   preparation for cranking.
                                      ;*****************************************************************************************
0049AB 7F49AB 1C 10 F0 01                bset engine2,base512   ; Set the "base512" bit of "engine" bit field
0049AF 7F49AF 1D 10 F0 02                bclr engine2,base256   ; Clear the "base256" bit of "engine" bit field
                                      ;*****************************************************************************************
                                      ; - Load stall counter with compare value. Stall check is done in the main loop every
                                      ;   mSec. "Stallcnt" is decremented every mSec and reloaded at every crank signal.
                                      ;*****************************************************************************************
0049B3 7F49B3 18 0B FF 00 17                  movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
0049B8 7F49B8 CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable
                                                              ; constant on buffer RAM page 1 (vebins)
0049BB 7F49BB EC EA 03 E6                 ldd   $03E6,Y       ; Load Accu A with value in buffer RAM page 1 offset 998
                                                              ; "Stallcnt" (stall counter)(offset = 998)
0049BF 7F49BF 7C 10 22                    std  Stallcnt       ; Copy to "Stallcnt" (no crank or stall condition counter)
                                                              ; (1mS increments)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;************************* --- M A I N  E V E N T  L O O P --- ***************************
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
0049C2 7F49C2                         MainLoop:
                                      ;*****************************************************************************************
                                      ; Coding experiments
                                      ;*****************************************************************************************
                                      ;
                                      ;    movw #$7FFF,TestVal  ; Load "TestVal" with decimal +32767
                                      ;    movw #$FFFF,TestVal  ; Load "TestVal" with decimal -1
                                      ;    movw #$FFFE,TestVal  ; Load "TestVal" with decimal -2
                                      ;    movw #$FFD8,TestVal  ; Load "TestVal" with decimal -40
                                      ;    movw #$8000,TestVal  ; Load "TestVal" with decimal -32768
                                      ;    movw #$8001,TestVal  ; Load "TestVal" with decimal -32767
                                      ;    movw #$F060,TestVal  ; Load "TestVal" with decimal -4000
                                      ;    movw #$52D0,TestVal  ; Load "TestVal" with decimal +21200
                                      ;    movw #TestVal,TestVal ; Load "TestVal" with the address of "TestVal" ($1050 decimal 4176)
                                      ;
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Update Ports A, B, E, K, J, P and T status bits
                                      ;*****************************************************************************************
0049C2 7F49C2 96 00                       ldaa PORTA      ; Load accu A with value in Port A
0049C4 7F49C4 7A 10 E8                    staa PortAbits  ; Copy to "PortAbits"
0049C7 7F49C7 96 01                       ldaa PORTB      ; Load accu A with value in Port B
0049C9 7F49C9 7A 10 E9                    staa PortBbits  ; Copy to "PortBbits"
0049CC 7F49CC 96 08                       ldaa PORTE      ; Load accu A with value in Port E
0049CE 7F49CE 7A 10 EA                    staa PortEbits  ; Copy to "PortEbits"
0049D1 7F49D1 96 32                       ldaa PORTK      ; Load accu K with value in Port K
0049D3 7F49D3 7A 10 EB                    staa PortKbits  ; Copy to "PortKBits"
0049D6 7F49D6 B6 02 68                    ldaa PTJ        ; Load accu A with value in Port J
0049D9 7F49D9 7A 10 EC                    staa PortJbits  ; Copy to "PortJbits"
0049DC 7F49DC B6 02 58                    ldaa PTP        ; Load accu A with value in Port P
0049DF 7F49DF 7A 10 ED                    staa PortPbits  ; Copy to "PortPbits"
0049E2 7F49E2 B6 02 40                    ldaa PTT        ; Load accu A with value in Port T
0049E5 7F49E5 7A 10 EE                    staa PortTbits  ; Copy to "PortTbits"
                                       ;*****************************************************************************************
                                      ; - Run ATD0 conversion sequence and load all results.
                                      ;*****************************************************************************************
0049E8 7F49E8 MACRO                       Run_ATD0    ;(Macro in adc0_BPEM488.s)
0049E8 7F49E8 18 0B 80 02 C6              movb  #SCF,ATD0STAT0 ; Set the Sequence Complete Flag of ATD0STAT0 to clear the flag (RUN_ATD0)
0049ED 7F49ED FC 02 D0                    ldd   ATD0DR0H  ; Load accumulator with value in ATD Ch00                    (RUN_ATD0)
0049F0 7F49F0 7C 10 6A                    std   cltAdc    ; Copy to cltAdc                                             (RUN_ATD0)
0049F3 7F49F3 FC 02 D2                    ldd   ATD0DR1H  ; Load accumulator with value in ATD Ch01                    (RUN_ATD0)
0049F6 7F49F6 7C 10 6E                    std   matAdc    ; Copy to matAdc ADC                                         (RUN_ATD0)
0049F9 7F49F9 FC 02 D4                    ldd   ATD0DR2H  ; Load accumulator with value in ATD Ch02                    (RUN_ATD0)
0049FC 7F49FC 7C 10 72                    std   eftAdc    ; Copy to eftAdc ADC                                         (RUN_ATD0)
0049FF 7F49FF FC 02 D6                    ldd   ATD0DR3H  ; Load accumulator with value in ATD Ch03                    (RUN_ATD0)
004A02 7F4A02 7C 10 76                    std   eotAdc    ; Copy to eotAdc                                             (RUN_ATD0)
004A05 7F4A05 FC 02 D8                    ldd   ATD0DR4H  ; Load accumulator with value in ATD Ch04                    (RUN_ATD0)
004A08 7F4A08 7C 10 7A                    std   RV11Adc   ; Copy to RV11 ADC                                           (RUN_ATD0)
004A0B 7F4A0B FC 02 DA                    ldd   ATD0DR5H  ; Load accumulator with value in ATD Ch05                    (RUN_ATD0)
004A0E 7F4A0E 7C 10 7C                    std   mapAdc    ; Copy to mapAdc                                             (RUN_ATD0)
004A11 7F4A11 FC 02 DC                    ldd   ATD0DR6H  ; Load accumulator with value in ATD Ch06                    (RUN_ATD0)
004A14 7F4A14 7C 10 80                    std   baroAdc   ; Copy to baroAdc                                            (RUN_ATD0)
004A17 7F4A17 FC 02 DE                    ldd   ATD0DR7H  ; Load accumulator with value in ATD Ch07                    (RUN_ATD0)
004A1A 7F4A1A 7C 10 84                    std   batAdc    ; Copy to bat ADC                                            (RUN_ATD0)
004A1D 7F4A1D FC 02 E0                    ldd   ATD0DR8H  ; Load accumulator with value in ATD Ch08                    (RUN_ATD0)
004A20 7F4A20 7C 10 88                    std   ftrmAdc   ; Copy to ftrmAdc                                            (RUN_ATD0)
004A23 7F4A23 FC 02 E2                    ldd   ATD0DR9H  ; Load accumulator with value in ATD Ch09                    (RUN_ATD0)
004A26 7F4A26 7C 10 8C                    std   itrmAdc   ; Copy to itrmAdc                                            (RUN_ATD0)
004A29 7F4A29 FC 02 E4                    ldd   ATD0DR10H ; Load accumulator with value in ATD Ch10                    (RUN_ATD0)
004A2C 7F4A2C 7C 10 90                    std   egtAdc    ; Copy to egtAdc                                             (RUN_ATD0)
004A2F 7F4A2F FC 02 E6                    ldd   ATD0DR11H ; Load accumulator with value in ATD Ch11                    (RUN_ATD0)
004A32 7F4A32 7C 10 94                    std   eopAdc    ; Copy to eopAdc                                             (RUN_ATD0)
004A35 7F4A35 FC 02 E8                    ldd   ATD0DR12H ; Load accumulator with value in ATD Ch12                    (RUN_ATD0)
004A38 7F4A38 7C 10 98                    std   efpAdc    ; Copy to efpAdc                                             (RUN_ATD0)
004A3B 7F4A3B FC 02 EA                    ldd   ATD0DR13H ; Load accumulator with value in ATD Ch13                    (RUN_ATD0)
004A3E 7F4A3E 7C 10 9C                    std   tpsADC    ; Copy to tpsADC                                             (RUN_ATD0)
004A41 7F4A41 FC 02 EC                    ldd   ATD0DR14H ; Load accumulator with value in ATD Ch14                    (RUN_ATD0)
004A44 7F4A44 7C 10 A0                    std   iacAdc    ; Copy to iacADC                                             (RUN_ATD0)
004A47 7F4A47 FC 02 EE                    ldd   ATD0DR15H ; Load accumulator with value in ATD Ch15                    (RUN_ATD0)
004A4A 7F4A4A 7C 10 A2                    std   egoAdc    ; Copy to egoAdc                                             (RUN_ATD0)
                                      ;*****************************************************************************************
                                      ; - Pole Port A to see if Fuel Trim and or Ignition Trim have been enabled.
                                      ;*****************************************************************************************
004A4D 7F4A4D                         CheckFtrim:
004A4D 7F4A4D 4F 00 08 02                brclr PORTA,PA3,FtrimOn     ; If "Ftrimen"(PA3)pin of PORTA is low, branch to FtrimOn:
                                                                     ; (switch is on)
004A51 7F4A51 20 06                      bra  Ftrimoff               ; Branch to Ftrimoff: (Pin must be high) (Switch is off)
004A53 7F4A53                         FtrimOn:
004A53 7F4A53 1C 10 E8 08                bset PortAbits,Ftrimen      ; Set "Ftrimen"(bit3) of "PortAbits"
004A57 7F4A57 20 04                      bra  CheckItrim             ; Branch to CheckItrim:
004A59 7F4A59                         Ftrimoff:
004A59 7F4A59 1D 10 E8 08                bclr PortAbits,Ftrimen      ; Clear "Ftrimen"(bit3) of "PortAbits"
004A5D 7F4A5D                         CheckItrim:
004A5D 7F4A5D 4F 00 10 02                brclr PORTA,PA4,ItrimOn     ; If "Itrimen"(PA4)pin of PORTA is low, branch to ItrimOn:
                                                                     ; (switch is on)
004A61 7F4A61 20 06                      bra  Itrimoff               ; Branch to Itrimoff: (Pin must be high) (Switch is off)
004A63 7F4A63                         ItrimOn:
004A63 7F4A63 1C 10 E8 10                bset PortAbits,Itrimen      ; Set "Itrimen"(bit4) of "PortAbits"
004A67 7F4A67 20 04                      bra  TrimChkDone            ; Branch to TrimChkDone:
004A69 7F4A69                         Itrimoff:
004A69 7F4A69 1D 10 E8 10                bclr PortAbits,Itrimen      ; Clear "Itrimen"(bit4) of "PortAbits"
004A6D 7F4A6D                         TrimChkDone:
                                      ;*****************************************************************************************
                                      ; - Convert ADC values to user units -
                                      ;*****************************************************************************************
                                      ;    ADC0_CLT     ; Calculate Cltx10    ; Engine Coolant Temperature (Degrees F x 10) (6)
                                      ;    ADC0_MAT     ; Calculate Matx10    ; Manifold Air Temperature (Degrees F x 10) (10)
                                      ;    ADC0_EFT     ; Calculate Eftx10    ; Engine Fuel Temperature (Degrees F x 10) (14)
                                      ;    ADC0_EOT     ; Calculate Eotx10    ; Engine Oil Temperature (Degrees F x 10)(18)
                                      ;    ADC0_MAP     ; Calculate Mapx10    ; Manifold Absolute Pressure (KPAx10) (24)
                                      ;    ADC0_BARO    ; Calculate Barox10   ; Barometric Pressure (KPAx10) (28)
                                      ;    ADC0_BATV    ; Calculate BatVx10   ; Battery Voltage (Volts x 10) (32)
                                      ;    ADC0_FTRM    ; Calculate Ftrmx10   ; Fuel Trim (% x 10)(+-20%) (36)
                                      ;    ADC0_ITRM    ; Calculate Itrmx10   ; Ignition Trim (degrees x 10)+-20 degrees) (40)
                                      ;        ADC0_EGT     ; Calculate Egt       ; Exhaust Gas Temperature (degrees F) (44)
                                      ;    ADC0_EOP     ; Calculate Eopx10    ; Engine Oil Pressure (PSI x 10) (48)
                                      ;    ADC0_EFP     ; Calculate Efpx10    ; Engine Fuel Pressure (PSI x 10)( (52)
                                      ;    ADC0_TPSPCT  ; Calculate TpsPctx10 ; Throttle Position Sensor % of travel(%x10) (56)
                                      ;        ADC0_AFR1    ; Calculate afr1x10   ; Air Fuel Ratio (AFRx10)(exact for TS) (62)
                                      ;*****************************************************************************************
004A6D 7F4A6D MACRO                       CONVERT_ATD0    ;(Macro in adc0_BPEM488.s)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Engine Coolant Temperature (Degrees F x 10)                          (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004A6D 7F4A6D FE 10 6A                    ldx   cltAdc            ; Load index register X with value in "cltAdc"       (CONVERT_ATD0)
004A70 7F4A70 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "cltAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
004A72 7F4A72 ED E2 6D 18                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
004A76 7F4A76 7D 10 6C                    sty   Cltx10            ; Copy result to "Cltx10" Engine Coolant Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Manifold Air Temperature (Degrees F x 10)                            (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004A79 7F4A79 FE 10 6E                    ldx   matAdc            ; Load index register X with value in "matAdc"       (CONVERT_ATD0)
004A7C 7F4A7C 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "matAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
004A7E 7F4A7E ED E2 6D 18                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
004A82 7F4A82 7D 10 70                    sty   Matx10            ; Copy result to "Matx100" Manifold Air Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Engine Fuel Temperature (Degrees F x 10)                             (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004A85 7F4A85 FE 10 72                    ldx   eftAdc            ; Load index register X with value in "eftAdc"       (CONVERT_ATD0)
004A88 7F4A88 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "eftAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
004A8A 7F4A8A ED E2 6D 18                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
004A8E 7F4A8E 7D 10 74                    sty   Eftx10            ; Copy result to "Eftx100" Engine Fuel Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Engine Oil Temperature (Degrees F x 10)                              (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004A91 7F4A91 FE 10 76                    ldx   eotAdc            ; Load index register X with value in "eoAdc"        (CONVERT_ATD0)
004A94 7F4A94 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "eoAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
004A96 7F4A96 ED E2 6D 18                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
004A9A 7F4A9A 7D 10 78                    sty   Eotx10           ; Copy result to "Eotx100" Engine Oil Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Manifold Absolute Pressure x 10 (Used to calculate to 1 decimal place) (CONVERT_ATD0)
                                      ;   MAP sensor MPX4115AP                                                         (CONVERT_ATD0)
                                      ;   Vout = MAP sensor output voltage                                             (CONVERT_ATD0)
                                      ;   P = Manifold pressure in KPA                                                 (CONVERT_ATD0)
                                      ;                                                                                (CONVERT_ATD0)
                                      ;   Vout = (mapAdc/1023)*5                                                       (CONVERT_ATD0)
                                      ;   P = ((Vout/5)+0.095)/0.009                                                   (CONVERT_ATD0)
                                      ; - For integer math:                                                            (CONVERT_ATD0)
                                      ;   P x 10 = ((mapAdc*10,000)/1023)+950)/9                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004A9D 7F4A9D FC 10 7C                    ldd   mapAdc        ; Load double accumulator with value in "mapAdc"         (CONVERT_ATD0)
004AA0 7F4AA0 CD 27 10                    ldy   #$2710        ; Load index register Y with decimal decimal 10,000      (CONVERT_ATD0)
004AA3 7F4AA3 13                          emul                ; Extended 16x16 multiply (D)x(Y)=Y:D                    (CONVERT_ATD0)
004AA4 7F4AA4 CE 03 FF                    ldx   #$03FF        ; Load index register X with decimal 1023                (CONVERT_ATD0)
004AA7 7F4AA7 11                          ediv                ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                (CONVERT_ATD0)
004AA8 7F4AA8 18 CB 03 B6                 addy  #$03B6        ; Add without carry decimal 950 to Y (Y)+(M:M+1)->(Y)    (CONVERT_ATD0)
004AAC 7F4AAC B7 64                       tfr   Y,D           ; Copy value in "Y" to "D"                               (CONVERT_ATD0)
004AAE 7F4AAE CE 00 09                    ldx   #$0009        ; Load index register "X" with decimal 9                 (CONVERT_ATD0)
004AB1 7F4AB1 18 10                       idiv                ; Integer divide (D)/(X)=>X Rem=>D                       (CONVERT_ATD0)
004AB3 7F4AB3 7E 10 7E                    stx   Mapx10        ; Copy result to "Mapx10" (KPAx10)                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Barometric Pressure x 10(Used to calculate to 1 decimal place)     (CONVERT_ATD0)
                                      ;   Baro sensor MPX4115AP                                                        (CONVERT_ATD0)
                                      ;   Vout = Baro sensor output voltage                                            (CONVERT_ATD0)
                                      ;   P = Barometric pressure in KPA                                               (CONVERT_ATD0)
                                      ;                                                                                (CONVERT_ATD0)
                                      ;   Vout = (baroAdc/1023)*5                                                      (CONVERT_ATD0)
                                      ;   P = ((Vout/5)+0.095)/0.009                                                   (CONVERT_ATD0)
                                      ; - For integer math:                                                            (CONVERT_ATD0)
                                      ;   P x 10 = ((baroAdc*10,000)/1023)+950)/9                                      (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004AB6 7F4AB6 FC 10 80                    ldd   baroAdc       ; Load double accumulator with value in "baroAdc"        (CONVERT_ATD0)
004AB9 7F4AB9 CD 27 10                    ldy   #$2710        ; Load index register Y with decimal decimal 10,000      (CONVERT_ATD0)
004ABC 7F4ABC 13                          emul                ; Extended 16x16 multiply (D)x(Y)=Y:D                    (CONVERT_ATD0)
004ABD 7F4ABD CE 03 FF                    ldx   #$03FF        ; Load index register X with decimal 1023                (CONVERT_ATD0)
004AC0 7F4AC0 11                          ediv                ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                (CONVERT_ATD0)
004AC1 7F4AC1 18 CB 03 B6                 addy  #$03B6        ; Add without carry decimal 950 to Y (Y)+(M:M+1)->(Y)    (CONVERT_ATD0)
004AC5 7F4AC5 B7 64                       tfr   Y,D           ; Copy value in "Y" to "D"                               (CONVERT_ATD0)
004AC7 7F4AC7 CE 00 09                    ldx   #$0009        ; Load index register "X" with decimal 9                 (CONVERT_ATD0)
004ACA 7F4ACA 18 10                       idiv                ; Integer divide (D)/(X)=>X Rem=>D                       (CONVERT_ATD0)
004ACC 7F4ACC 7E 10 82                    stx   Barox10        ; Copy result to "Barox10" (KPAx10)                     (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Battery Voltage x 10 -                                             (CONVERT_ATD0)
                                      ;    (batAdc/1023)*29.95 = BatV                                                  (CONVERT_ATD0)
                                      ;             or                                                                 (CONVERT_ATD0)
                                      ;    batAdc*(29.95/1023) = BatV, batADC = BatV                                   (CONVERT_ATD0)
                                      ;    batAdc*.029276637 = BatV  batADC = batV/.029276637                          (CONVERT_ATD0)
                                      ;    batAdc*(300/1023) = BatV*10                                                 (CONVERT_ATD0)
                                      ;    batAdc*.29276637 = BatV*10 bat ADC = batV*10/.29276637                      (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004ACF 7F4ACF FC 10 84                    ldd   batAdc       ; Load double accumulator with value in "batAdc"          (CONVERT_ATD0)
004AD2 7F4AD2 CD 01 2C                    ldy   #$012C       ; Load index register Y with decimal decimal 300          (CONVERT_ATD0)
004AD5 7F4AD5 13                          emul               ; Extended 16x16 multiply (D)x(Y)=Y:D                     (CONVERT_ATD0)
004AD6 7F4AD6 CE 03 FF                    ldx   #$03FF       ; Load index register X with decimal 1023                 (CONVERT_ATD0)
004AD9 7F4AD9 11                          ediv               ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                 (CONVERT_ATD0)
004ADA 7F4ADA 7D 10 86                    sty   BatVx10      ; Copy result to "BatVx10" (Battery Voltage x 10)         (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Fuel Trim (% x 10)(+-20%) -                                        (CONVERT_ATD0)
                                      ;   (80% = 80% of VEcurr, 100% = 100% of VeCurr(no correction), 120% = 120% of VEcurr) (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004ADD 7F4ADD 1F 10 E8 08 39              brclr PortAbits,Ftrimen,NoFtrim ; "If Ftrimen" bit of "PortAbits" is clear, branch to (CONVERT_ATD0)
                                                                ; NoFtrim: (Fuel trim enable switch is off so skip over) (CONVERT_ATD0)
004AE2 7F4AE2 CC 00 00                    ldd   #$0000      ; Load double accumulator with zero (0 volt ADC)           (CONVERT_ATD0)
004AE5 7F4AE5 3B                          pshd              ; Push to stack (V1)                                       (CONVERT_ATD0)
004AE6 7F4AE6 FC 10 88                    ldd   ftrmAdc     ; Load double accumulator with "ftrmAdc"                   (CONVERT_ATD0)
004AE9 7F4AE9 CD 00 0A                    ldy   #$000A      ; Load index register Y with decimal 10                    (CONVERT_ATD0)
004AEC 7F4AEC 13                          emul              ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)         (CONVERT_ATD0)
004AED 7F4AED 3B                          pshd              ; Push to stack (V)                                        (CONVERT_ATD0)
004AEE 7F4AEE CC 27 F6                    ldd   #$27F6      ; Load double accumulator with decimal 1023x10 (5 volt ADC) (CONVERT_ATD0)
004AF1 7F4AF1 3B                          pshd              ; Push to stack (V2)                                       (CONVERT_ATD0)
004AF2 7F4AF2 CC 03 20                    ldd   #$0320      ; Load double accumulator with decimal 80x10 (Low range %) (CONVERT_ATD0)
004AF5 7F4AF5 3B                          pshd              ; Push to stack (Z1)                                       (CONVERT_ATD0)
004AF6 7F4AF6 CC 04 B0                    ldd   #$04B0      ; Load double accumulator with decimal 120x10 (High range %) (CONVERT_ATD0)
004AF9 7F4AF9 3B                          pshd              ; Push to stack (Z2)                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004AFA 7F4AFA MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004AFA 7F4AFA EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004AFC 7F4AFC A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004AFE 7F4AFE B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B00 7F4B00 EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004B02 7F4B02 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B04 7F4B04 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004B06 7F4B06 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B08 7F4B08 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004B0A 7F4B0A A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004B0C 7F4B0C B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004B0E 7F4B0E 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004B10 7F4B10 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B12 7F4B12 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004B14 7F4B14 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (CONVERT_ATD0)
004B16 7F4B16 7C 10 8A                    std   Ftrmx10   ; Copy result to "Ftrmx10" Fuel Trim (%x10)                  (CONVERT_ATD0)
004B19 7F4B19 20 06                           bra   FtrimDone ; Branch to FtrimDone:                                   (CONVERT_ATD0)
004B1B 7F4B1B                         NoFtrim:                                                                         (CONVERT_ATD0)
004B1B 7F4B1B 18 03 03 E8 10 8A           movw #$03E8,Ftrmx10  ; Decimal 1000 -> "Ftrmx10" (100%, no trim)             (CONVERT_ATD0)
004B21 7F4B21                         FtrimDone:                                                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Ignition Trim (Degrees x 10)(+-20 Degrees) -                       (CONVERT_ATD0)
                                      ;   Ignition calculations delay the coil energisation time (dwell) and the discharge time (CONVERT_ATD0)
                                      ;   (spark timing) from a known crankshaft angle. A trim offset of 20 degrees is built in. (CONVERT_ATD0)
                                      ;    An Itrm value of 0 results in 20 degree retard                              (CONVERT_ATD0)
                                      ;    An Itrm value of 20 results in no ignition trim                             (CONVERT_ATD0)
                                      ;    An Itrm value of 40 results in 20 degree advance                            (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004B21 7F4B21 1F 10 E8 10 39              brclr PortAbits,Itrimen,NoItrim ; "If Itrimen" bit of "PortAbits" is clear, branch to (CONVERT_ATD0)
                                                               ; NoItrim: (Ignition trim enable switch is off so skip over) (CONVERT_ATD0)
004B26 7F4B26 CC 00 00                    ldd  #$0000      ; Load double accumulator with zero (0 volt ADC)            (CONVERT_ATD0)
004B29 7F4B29 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004B2A 7F4B2A FC 10 8C                    ldd  itrmAdc     ; Load double accumulator with "itrmAdc"                    (CONVERT_ATD0)
004B2D 7F4B2D CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004B30 7F4B30 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "itrmAdc" by 10)         (CONVERT_ATD0)
004B31 7F4B31 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
004B32 7F4B32 CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023x10 (5 volt ADC) (CONVERT_ATD0)
004B35 7F4B35 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
004B36 7F4B36 CC 00 00                    ldd  #$0000      ; Load double accumulator with zero (Low range degrees)     (CONVERT_ATD0)
004B39 7F4B39 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004B3A 7F4B3A CC 01 90                    ldd  #$0190      ; Load double accumulator with decimal 40x10 (High range degrees) (CONVERT_ATD0)
004B3D 7F4B3D 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004B3E 7F4B3E MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B3E 7F4B3E EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004B40 7F4B40 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004B42 7F4B42 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B44 7F4B44 EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004B46 7F4B46 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B48 7F4B48 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004B4A 7F4B4A B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B4C 7F4B4C EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004B4E 7F4B4E A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004B50 7F4B50 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004B52 7F4B52 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004B54 7F4B54 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B56 7F4B56 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004B58 7F4B58 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (CONVERT_ATD0)
004B5A 7F4B5A 7C 10 8E                    std   Itrmx10   ; Copy result to "Itrmx10" Ignition Trim (Degrees x 10)      (CONVERT_ATD0)
004B5D 7F4B5D 20 06                           bra   ItrimDone ; Branch to ItrimDone:                                   (CONVERT_ATD0)
004B5F 7F4B5F                         NoItrim:                                                                         (CONVERT_ATD0)
004B5F 7F4B5F 18 03 00 CB 10 8E           movw #$00CB,Itrmx10  ; Decimal 200 -> "Itrmx10" (20 degrees, no trim)        (CONVERT_ATD0)
004B65 7F4B65                         ItrimDone:                                                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Exhaust Gas Temperature "Egt" -                                    (CONVERT_ATD0)
                                      ;   EGT amplifier 0.0027v @ 0C (32F), 5.022v @ 720C (1328F) Resolution ~ 5 degrees F (CONVERT_ATD0)
                                      ;   Egt = (((egtAdc-0)*(1328-32))/(1023-0))+32                                   (CONVERT_ATD0)
                                      ;   Egt = ((egtAdc*(1296/1023)+32                                                (CONVERT_ATD0)
                                      ;   Egt = (egtAdc*1.26686217)+32                                                 (CONVERT_ATD0)
                                      ;   For integer math:                                                            (CONVERT_ATD0)
                                      ;   Egt = (egtAdc*12668/10000)+32                                                (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004B65 7F4B65 FC 10 90                    ldd   egtAdc       ; Load double accumulator with value in "egtAdc"          (CONVERT_ATD0)
004B68 7F4B68 CD 31 7C                    ldy   #$317C       ; Load index register Y with decimal decimal 12,668       (CONVERT_ATD0)
004B6B 7F4B6B 13                          emul               ; Extended 16x16 multiply (D)x(Y)=Y:D                     (CONVERT_ATD0)
004B6C 7F4B6C CE 27 10                    ldx   #$2710       ; Load index register X with decimal 10,000               (CONVERT_ATD0)
004B6F 7F4B6F 11                          ediv               ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                 (CONVERT_ATD0)
004B70 7F4B70 18 CB 00 20                 addy  #$0020           ; (Y)+(M:M+1)->Y Add decimal 32                       (CONVERT_ATD0)
004B74 7F4B74 7D 10 92                    sty   Egt          ; copy result to "Egt" Exhaust Gas Temperature            (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Engine Oil Pressure x 10 -                                         (CONVERT_ATD0)
                                      ;   Pressure transducer is ratiometric 1V to 5V 0PSI to 100PSI                   (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004B77 7F4B77 CC 08 02                    ldd  #$0802      ; Load double accumulator with decimal 205 (1 volt ADC) ( x 10) (CONVERT_ATD0)
004B7A 7F4B7A 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004B7B 7F4B7B FC 10 94                    ldd  eopAdc      ; Load double accumulator with "eopAdc"                     (CONVERT_ATD0)
004B7E 7F4B7E CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004B81 7F4B81 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)          (CONVERT_ATD0)
004B82 7F4B82 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
004B83 7F4B83 CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023 (5 volt ADC) ( x 10) (CONVERT_ATD0)
004B86 7F4B86 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
004B87 7F4B87 CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (Low range PSI) ( x 10) (CONVERT_ATD0)
004B8A 7F4B8A 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004B8B 7F4B8B CC 03 E8                    ldd  #$03E8      ; Load double accumulator with decimal 100 (High range PSI) ( x 10) (CONVERT_ATD0)
004B8E 7F4B8E 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004B8F 7F4B8F MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B8F 7F4B8F EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004B91 7F4B91 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004B93 7F4B93 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B95 7F4B95 EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004B97 7F4B97 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B99 7F4B99 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004B9B 7F4B9B B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B9D 7F4B9D EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004B9F 7F4B9F A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004BA1 7F4BA1 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004BA3 7F4BA3 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004BA5 7F4BA5 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004BA7 7F4BA7 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004BA9 7F4BA9 1B 8A                       leas  10,SP    ; Stack pointer -> bottom of stack                            (CONVERT_ATD0)
004BAB 7F4BAB 7C 10 96                    std   Eopx10   ; Copy result to "Eopx10" Engine Oil Pressure x 10            (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Engine Fuel Pressure x 10 -                                        (CONVERT_ATD0)
                                      ;   Pressure transducer is ratiometric 1V to 5V 0PSI to 100PSI                   (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004BAE 7F4BAE CC 08 02                    ldd  #$0802      ; Load double accumulator with decimal 205 (1 volt ADC) ( x 10) (CONVERT_ATD0)
004BB1 7F4BB1 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004BB2 7F4BB2 FC 10 98                    ldd  efpAdc      ; Load double accumulator with "efpAdc"                     (CONVERT_ATD0)
004BB5 7F4BB5 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004BB8 7F4BB8 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)          (CONVERT_ATD0)
004BB9 7F4BB9 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
004BBA 7F4BBA CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023 (5 volt ADC) ( x 10) (CONVERT_ATD0)
004BBD 7F4BBD 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
004BBE 7F4BBE CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (Low range PSI) ( x 10) (CONVERT_ATD0)
004BC1 7F4BC1 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004BC2 7F4BC2 CC 03 E8                    ldd  #$03E8      ; Load double accumulator with decimal 100 (High range PSI) ( x 10) (CONVERT_ATD0)
004BC5 7F4BC5 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004BC6 7F4BC6 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004BC6 7F4BC6 EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004BC8 7F4BC8 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004BCA 7F4BCA B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004BCC 7F4BCC EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004BCE 7F4BCE A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004BD0 7F4BD0 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004BD2 7F4BD2 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004BD4 7F4BD4 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004BD6 7F4BD6 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004BD8 7F4BD8 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004BDA 7F4BDA 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004BDC 7F4BDC B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004BDE 7F4BDE E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004BE0 7F4BE0 1B 8A                       leas  10,SP    ; Stack pointer -> bottom of stack                            (CONVERT_ATD0)
004BE2 7F4BE2 7C 10 9A                    std   Efpx10   ; Copy result to "Efpx10" Engine Fuel Pressure x 10           (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Throttle Position Percent x 10 -                                   (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004BE5 7F4BE5 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (CONVERT_ATD0)
004BEA 7F4BEA CD 08 00                    ldy  #veBins_E   ; Load index register Y with address of first configurable constant (CONVERT_ATD0)
                                                           ; on buffer RAM page 1 (veBins)                             (CONVERT_ATD0)
004BED 7F4BED EC EA 03 E8                 ldd  $03E8,Y     ; Load Accu D with value in buffer RAM page 1 offset 1000 (tpsMin) (CONVERT_ATD0)
004BF1 7F4BF1 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004BF4 7F4BF4 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "tpsMin" by 10)          (CONVERT_ATD0)
004BF5 7F4BF5 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004BF6 7F4BF6 FC 10 9C                    ldd  tpsADC      ; Load double accumulator with "tpsADCAdc"                  (CONVERT_ATD0)
004BF9 7F4BF9 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004BFC 7F4BFC 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "tpsADC" by 10)          (CONVERT_ATD0)
004BFD 7F4BFD 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
004BFE 7F4BFE 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (CONVERT_ATD0)
004C03 7F4C03 CD 08 00                    ldy  #veBins_E   ; Load index register Y with address of first configurable constant (CONVERT_ATD0)
                                                           ; on buffer RAM page 1 (vebins)                             (CONVERT_ATD0)
004C06 7F4C06 EC EA 03 EA                 ldd  $03EA,Y     ; Load Accu D with value in buffer RAM page 1 offset 1002 (tpsMax) (CONVERT_ATD0)
004C0A 7F4C0A CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004C0D 7F4C0D 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "tpsMax" by 10)          (CONVERT_ATD0)
004C0E 7F4C0E 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
004C0F 7F4C0F CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (Low range %) ( x 10) (CONVERT_ATD0)
004C12 7F4C12 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004C13 7F4C13 CC 03 E8                    ldd  #$03E8      ; Load double accumulator with decimal 100 (High range %) ( x 10) (CONVERT_ATD0)
004C16 7F4C16 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004C17 7F4C17 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C17 7F4C17 EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004C19 7F4C19 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004C1B 7F4C1B B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C1D 7F4C1D EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004C1F 7F4C1F A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C21 7F4C21 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004C23 7F4C23 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C25 7F4C25 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004C27 7F4C27 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004C29 7F4C29 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004C2B 7F4C2B 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004C2D 7F4C2D B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C2F 7F4C2F E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004C31 7F4C31 1B 8A                       leas  10,SP    ; Stack pointer -> bottom of stack                            (CONVERT_ATD0)
004C33 7F4C33 7C 10 9E                    std  TpsPctx10 ; Copy result to "TpsPctx10" Throttle Position Percent of travel x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Air Fuel Ratio x 10 -                                              (CONVERT_ATD0)
                                      ;   Innovate LC-2 AFR is ratiometric 0V to 5V 7.35 AFR to 22.39 AFR              (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004C36 7F4C36 CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (0 volt ADC) ( x 10) (CONVERT_ATD0)
004C39 7F4C39 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004C3A 7F4C3A FC 10 A2                    ldd  egoAdc      ; Load double accumulator with "egoAdc"                     (CONVERT_ATD0)
004C3D 7F4C3D CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004C40 7F4C40 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)          (CONVERT_ATD0)
004C41 7F4C41 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
004C42 7F4C42 CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023 (5 volt ADC) ( x 10) (10230) (CONVERT_ATD0)
004C45 7F4C45 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
004C46 7F4C46 CC 00 4A                    ldd  #$004A      ; Load double accumulator with decimal 7.35 (Low range AFR) ( x 10) (74) (CONVERT_ATD0)
004C49 7F4C49 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004C4A 7F4C4A CC 00 E0                    ldd  #$00E0      ; Load double accumulator with decimal 22.39 (High range AFR) ( x 10) (224) (CONVERT_ATD0)
004C4D 7F4C4D 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004C4E 7F4C4E MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C4E 7F4C4E EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004C50 7F4C50 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004C52 7F4C52 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C54 7F4C54 EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004C56 7F4C56 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C58 7F4C58 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004C5A 7F4C5A B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C5C 7F4C5C EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004C5E 7F4C5E A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004C60 7F4C60 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004C62 7F4C62 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004C64 7F4C64 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C66 7F4C66 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004C68 7F4C68 1B 8A                       leas  10,SP       ; Stack pointer -> bottom of stack                         (CONVERT_ATD0)
004C6A 7F4C6A 7C 10 A4                    std   afr1x10     ; Copy result to "afr1x10" Air Fuel Ratio x 10             (CONVERT_ATD0)
                                      ;*****************************************************************************************
                                      ; - BPEM488 allows for the following alarms:
                                      ;   High Engine Temperature
                                      ;   High Oil Temperature
                                      ;   High Fuel Temperature
                                      ;   High Exhaust Gas Temperture
                                      ;   Low Oil Pressure
                                      ;   High Fuel Pressure
                                      ;   Low Fuel Pressure
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Check to see if we have any alarm conditions.
                                      ;*****************************************************************************************
004C6D 7F4C6D MACRO                       CHECK_ALARMS    ; Macro in adc0BPEM488.s
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - BPEM488 allows for the following alarms:                                     (CHECK_ALARMS)
                                      ;   High Engine Temperature                                                      (CHECK_ALARMS)
                                      ;   High Oil Temperature                                                         (CHECK_ALARMS)
                                      ;   High Fuel Temperature                                                        (CHECK_ALARMS)
                                      ;   High Exhaust Gas Temperture                                                  (CHECK_ALARMS)
                                      ;   Low Oil Pressure                                                             (CHECK_ALARMS)
                                      ;   High Fuel Pressure                                                           (CHECK_ALARMS)
                                      ;   Low Fuel Pressure                                                            (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - Check for high engine temperature.                                           (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004C6D 7F4C6D                         CHK_HET_OFF:                                                                     (CHECK_ALARMS)
004C6D 7F4C6D 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004C72 7F4C72 CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004C75 7F4C75 EC EA 02 D2                 ldd  $02D2,Y    ; Load Accu D with value in buffer RAM page 2 offset 722 (hetoff) (CHECK_ALARMS)
004C79 7F4C79 BC 10 6C                        cpd  Cltx10     ; (A:B)-(M:M+1) Compare "hetoff" with "Cltx10            (CHECK_ALARMS)
004C7C 7F4C7C 24 02                       bhs  CLEAR_HET  ; If "hetoff" is higher or the same as "Cltx10" branch to CLEAR_HET (CHECK_ALARMS)
004C7E 7F4C7E 20 0B                       bra  CHK_HET_ON ; Branch to CHK_HET_ON:                                      (CHECK_ALARMS)
004C80 7F4C80                         CLEAR_HET:                                                                       (CHECK_ALARMS)
004C80 7F4C80 1F 10 F1 04 22               brclr   alarmbits,HET,HET_ALARM_DONE ; If "HET" bit of "alarmbits" is clear, (CHECK_ALARMS)
                                                                                ; branch to HET_ALARM_DONE:            (CHECK_ALARMS)
004C85 7F4C85 1D 10 F1 04                  bclr    alarmbits,HET                ; Clear "HET" bit of "alarmbits"       (CHECK_ALARMS)
004C89 7F4C89 20 1C                        bra     HET_ALARM_DONE               ; Branch to HET_ALARM_DONE:            (CHECK_ALARMS)
004C8B 7F4C8B                         CHK_HET_ON:                                                                      (CHECK_ALARMS)
004C8B 7F4C8B 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004C90 7F4C90 CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004C93 7F4C93 EC EA 02 D0                 ldd  $02D0,Y    ; Load Accu D with value in buffer RAM page 2 offset 720 (heton) (CHECK_ALARMS)
004C97 7F4C97 BC 10 6C                        cpd  Cltx10     ; (A:B)-(M:M+1) Compare "heton" with "Cltx10"            (CHECK_ALARMS)
004C9A 7F4C9A 23 02                       bls  SET_HET    ; If "heton" is lower or the same as "Cltx10" branch to SET_HET (CHECK_ALARMS)
004C9C 7F4C9C 20 09                       bra  HET_ALARM_DONE ; Branch to HET_ALARM_DONE:                              (CHECK_ALARMS)
004C9E 7F4C9E                         SET_HET:                                                                         (CHECK_ALARMS)
004C9E 7F4C9E 1E 10 F1 04 04               brset   alarmbits,HET,HET_ALARM_DONE ; If "HET" bit of "alarmbits" is set, branch to (CHECK_ALARMS)
                                                                                ; HET_ALARM_DONE:                      (CHECK_ALARMS)
004CA3 7F4CA3 1C 10 F1 04                  bset    alarmbits,HET                ; Set "HET" bit of "alarmbits"         (CHECK_ALARMS)
004CA7 7F4CA7                         HET_ALARM_DONE:                                                                  (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - Check for high oil temperature.                                              (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004CA7 7F4CA7                         CHK_HOT_OFF:                                                                     (CHECK_ALARMS)
004CA7 7F4CA7 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004CAC 7F4CAC CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004CAF 7F4CAF EC EA 02 D6                 ldd  $02D6,Y    ; Load Accu D with value in buffer RAM page 2 offset 726 (hotoff) (CHECK_ALARMS)
004CB3 7F4CB3 BC 10 78                        cpd  Eotx10     ; (A:B)-(M:M+1) Compare "hotoff" with "Eotx10"           (CHECK_ALARMS)
004CB6 7F4CB6 24 02                       bhs  CLEAR_HOT  ; If "hotoff" is higher or the same as "Eotx10" branch to CLEAR_HOT (CHECK_ALARMS)
004CB8 7F4CB8 20 0B                       bra  CHK_HOT_ON ; Branch to CHK_HOT_ON:                                      (CHECK_ALARMS)
004CBA 7F4CBA                         CLEAR_HOT:                                                                       (CHECK_ALARMS)
004CBA 7F4CBA 1F 10 F1 02 22               brclr   alarmbits,HOT,HOT_ALARM_DONE ; If "HOT" bit of "alarmbits" is clear, (CHECK_ALARMS)
                                                                                ; branch to HOT_ALARM_DONE:            (CHECK_ALARMS)
004CBF 7F4CBF 1D 10 F1 02                  bclr    alarmbits,HOT                ; Clear "HOT" bit of "alarmbits"       (CHECK_ALARMS)
004CC3 7F4CC3 20 1C                        bra     HOT_ALARM_DONE               ; Branch to HOT_ALARM_DONE:            (CHECK_ALARMS)
004CC5 7F4CC5                         CHK_HOT_ON:                                                                      (CHECK_ALARMS)
004CC5 7F4CC5 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004CCA 7F4CCA CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004CCD 7F4CCD EC EA 02 D4                 ldd  $02D4,Y    ; Load Accu D with value in buffer RAM page 2 offset 724 (hoton) (CHECK_ALARMS)
004CD1 7F4CD1 BC 10 78                        cpd  Eotx10     ; (A:B)-(M:M+1) Compare "hoton" with "Eotx10"            (CHECK_ALARMS)
004CD4 7F4CD4 23 02                       bls  SET_HOT    ; If "hoton" is lower or the same as "Eotx10" branch to SET_HOT (CHECK_ALARMS)
004CD6 7F4CD6 20 09                       bra  HOT_ALARM_DONE ; Branch to HOT_ALARM_DONE:                              (CHECK_ALARMS)
004CD8 7F4CD8                         SET_HOT:                                                                         (CHECK_ALARMS)
004CD8 7F4CD8 1E 10 F1 02 04               brset   alarmbits,HOT,HOT_ALARM_DONE ; If "HOT" bit of "alarmbits" is set, branch to (CHECK_ALARMS)
                                                                                ; HOT_ALARM_DONE:                      (CHECK_ALARMS)
004CDD 7F4CDD 1C 10 F1 02                  bset    alarmbits,HOT                ; Set "HOT" bit of "alarmbits"         (CHECK_ALARMS)
004CE1 7F4CE1                         HOT_ALARM_DONE:                                                                  (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - Check for high fuel temperature.                                             (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004CE1 7F4CE1                         CHK_HFT_OFF:                                                                     (CHECK_ALARMS)
004CE1 7F4CE1 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004CE6 7F4CE6 CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004CE9 7F4CE9 EC EA 02 DA                 ldd  $02DA,Y    ; Load Accu D with value in buffer RAM page 2 offset 730 (hftoff) (CHECK_ALARMS)
004CED 7F4CED BC 10 74                        cpd  Eftx10     ; (A:B)-(M:M+1) Compare "hftoff" with "Eftx10"           (CHECK_ALARMS)
004CF0 7F4CF0 24 02                       bhs  CLEAR_HFT  ; If "hftoff" is higher or the same as "Eftx10" branch to CLEAR_HFT (CHECK_ALARMS)
004CF2 7F4CF2 20 0B                       bra  CHK_HFT_ON ; Branch to CHK_HFT_ON:                                      (CHECK_ALARMS)
004CF4 7F4CF4                         CLEAR_HFT:                                                                       (CHECK_ALARMS)
004CF4 7F4CF4 1F 10 F1 10 22               brclr   alarmbits,HFT,HFT_ALARM_DONE ; If "HFT" bit of "alarmbits" is clear, (CHECK_ALARMS)
                                                                                ; branch to HFT_ALARM_DONE:            (CHECK_ALARMS)
004CF9 7F4CF9 1D 10 F1 10                  bclr    alarmbits,HFT                ; Clear "HFT" bit of "alarmbits"       (CHECK_ALARMS)
004CFD 7F4CFD 20 1C                        bra     HFT_ALARM_DONE               ; Branch to HFT_ALARM_DONE:            (CHECK_ALARMS)
004CFF 7F4CFF                         CHK_HFT_ON:                                                                      (CHECK_ALARMS)
004CFF 7F4CFF 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004D04 7F4D04 CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004D07 7F4D07 EC EA 02 D8                 ldd  $02D8,Y    ; Load Accu D with value in buffer RAM page 2 offset 728 (hfton) (CHECK_ALARMS)
004D0B 7F4D0B BC 10 74                        cpd  Eftx10     ; (A:B)-(M:M+1) Compare "hfton" with "Eftx10"            (CHECK_ALARMS)
004D0E 7F4D0E 23 02                       bls  SET_HFT    ; If "hfton" is lower or the same as "Eftx10" branch to SET_HFT (CHECK_ALARMS)
004D10 7F4D10 20 09                       bra  HFT_ALARM_DONE ; Branch to HFT_ALARM_DONE:                              (CHECK_ALARMS)
004D12 7F4D12                         SET_HFT:                                                                         (CHECK_ALARMS)
004D12 7F4D12 1E 10 F1 10 04               brset   alarmbits,HFT,HFT_ALARM_DONE ; If "HFT" bit of "alarmbits" is set, branch to (CHECK_ALARMS)
                                                                                ; HFT_ALARM_DONE:                      (CHECK_ALARMS)
004D17 7F4D17 1C 10 F1 10                  bset    alarmbits,HFT                ; Set "HFT" bit of "alarmbits"         (CHECK_ALARMS)
004D1B 7F4D1B                         HFT_ALARM_DONE:                                                                  (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - Check for high exhaust gas temperature.                                      (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004D1B 7F4D1B                         CHK_HEGT_OFF:                                                                    (CHECK_ALARMS)
004D1B 7F4D1B 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004D20 7F4D20 CD 08 00                    ldy  #stBins_E     ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                           ; on buffer RAM page 2 (stBins)                             (CHECK_ALARMS)
004D23 7F4D23 EC EA 02 DE                 ldd  $02DE,Y     ; Load Accu D with value in buffer RAM page 2 offset 734 (hegtoff) (CHECK_ALARMS)
004D27 7F4D27 BC 10 92                        cpd  Egt         ; (A:B)-(M:M+1) Compare "hegt_ff" with "Egt"            (CHECK_ALARMS)
004D2A 7F4D2A 24 02                       bhs  CLEAR_HEGT  ; If "hegtoff" is higher or the same as "Egt" branch to CLEAR_HEGT (CHECK_ALARMS)
004D2C 7F4D2C 20 0B                       bra  CHK_HEGT_ON ; Branch to CHK_HEGT_ON:                                    (CHECK_ALARMS)
004D2E 7F4D2E                         CLEAR_HEGT:                                                                      (CHECK_ALARMS)
004D2E 7F4D2E 1F 10 F1 08 22               brclr   alarmbits,HEGT,HEGT_ALARM_DONE ; If "HEGT" bit of "alarmbits" is clear, (CHECK_ALARMS)
                                                                                  ; branch to HEGT_ALARM_DONE:         (CHECK_ALARMS)
004D33 7F4D33 1D 10 F1 08                  bclr    alarmbits,HEGT                 ; Clear "HEGT" bit of "alarmbits"    (CHECK_ALARMS)
004D37 7F4D37 20 1C                        bra     HEGT_ALARM_DONE                ; Branch to HEGT_ALARM_DONE:         (CHECK_ALARMS)
004D39 7F4D39                         CHK_HEGT_ON:                                                                     (CHECK_ALARMS)
004D39 7F4D39 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004D3E 7F4D3E CD 08 00                    ldy  #stBins_E     ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                           ; on buffer RAM page 2 (stBins)                             (CHECK_ALARMS)
004D41 7F4D41 EC EA 02 DC                 ldd  $02DC,Y     ; Load Accu D with value in buffer RAM page 2 offset 732 (hegton) (CHECK_ALARMS)
004D45 7F4D45 BC 10 92                        cpd  Egt         ; (A:B)-(M:M+1) Compare "hegton" with "Egt"             (CHECK_ALARMS)
004D48 7F4D48 23 02                       bls  SET_HEGT    ; If "hegton" is lower or the same as "Egt" branch to SET_HEGT (CHECK_ALARMS)
004D4A 7F4D4A 20 09                       bra  HEGT_ALARM_DONE ; Branch to HEGT_ALARM_DONE:                            (CHECK_ALARMS)
004D4C 7F4D4C                         SET_HEGT:                                                                        (CHECK_ALARMS)
004D4C 7F4D4C 1E 10 F1 08 04               brset   alarmbits,HEGT,HEGT_ALARM_DONE ; If "HEGT" bit of "alarmbits" is set, branch to (CHECK_ALARMS)
                                                                                  ; HEGT_ALARM_DONE:                   (CHECK_ALARMS)
004D51 7F4D51 1C 10 F1 08                  bset    alarmbits,HEGT                 ; Set "HEGT" bit of "alarmbits"      (CHECK_ALARMS)
004D55 7F4D55                         HEGT_ALARM_DONE:                                                                 (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - Check for low oil pressure                                                   (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004D55 7F4D55                         CHK_LOP_OFF:                                                                     (CHECK_ALARMS)
004D55 7F4D55 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004D5A 7F4D5A CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004D5D 7F4D5D EC EA 02 E2                 ldd  $02E2,Y    ; Load Accu D with value in buffer RAM page 2 offset 738 (lopoff) (CHECK_ALARMS)
004D61 7F4D61 BC 10 96                        cpd  Eopx10     ; (A:B)-(M:M+1) Compare "lopoff" with "Eopx10"           (CHECK_ALARMS)
004D64 7F4D64 23 02                       bls  CLEAR_LOP  ; If "lopoff" is lower or the same as "Eopx10" branch to CLEAR_LOP (CHECK_ALARMS)
004D66 7F4D66 20 0B                       bra  CHK_LOP_ON ; Branch to CHK_LOP_ON:                                      (CHECK_ALARMS)
004D68 7F4D68                         CLEAR_LOP:                                                                       (CHECK_ALARMS)
004D68 7F4D68 1F 10 F1 01 22               brclr   alarmbits,LOP,LOP_ALARM_DONE ; If "LOP" bit of "alarmbits" is clear, (CHECK_ALARMS)
                                                                                ; branch to LOP_ALARM_DONE:            (CHECK_ALARMS)
004D6D 7F4D6D 1D 10 F1 01                  bclr    alarmbits,LOP                ; Clear "LOP" bit of "alarmbits"       (CHECK_ALARMS)
004D71 7F4D71 20 1C                        bra     LOP_ALARM_DONE               ; Branch to LOP_ALARM_DONE:            (CHECK_ALARMS)
004D73 7F4D73                         CHK_LOP_ON:                                                                      (CHECK_ALARMS)
004D73 7F4D73 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004D78 7F4D78 CD 08 00                    ldy  #stBins_E     ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                           ; on buffer RAM page 2 (stBins)                             (CHECK_ALARMS)
004D7B 7F4D7B EC EA 02 E0                 ldd  $02E0,Y     ; Load Accu D with value in buffer RAM page 2 offset 736 (lopon) (CHECK_ALARMS)
004D7F 7F4D7F BC 10 96                        cpd  Eopx10      ; (A:B)-(M:M+1) Compare "lopon" with "Eopx10"           (CHECK_ALARMS)
004D82 7F4D82 24 02                       bhs  SET_LOP     ; If "lopon" is higher or the same as "Eopx10" branch to SET_LOP (CHECK_ALARMS)
004D84 7F4D84 20 09                       bra  LOP_ALARM_DONE ; Branch to LOP_ALARM_DONE:                              (CHECK_ALARMS)
004D86 7F4D86                         SET_LOP:                                                                         (CHECK_ALARMS)
004D86 7F4D86 1E 10 F1 01 04               brset   alarmbits,LOP,LOP_ALARM_DONE ; If "LOP" bit of "alarmbits" is set, branch to (CHECK_ALARMS)
                                                                                ; LOP_ALARM_DONE:                      (CHECK_ALARMS)
004D8B 7F4D8B 1C 10 F1 01                  bset    alarmbits,LOP                ; Set "LOP" bit of "alarmbits"         (CHECK_ALARMS)
004D8F 7F4D8F                         LOP_ALARM_DONE:                                                                  (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - Check for high fuel pressure                                                 (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004D8F 7F4D8F                         CHK_HFP_OFF:                                                                     (CHECK_ALARMS)
004D8F 7F4D8F 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004D94 7F4D94 CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004D97 7F4D97 EC EA 02 E6                 ldd  $02E6,Y    ; Load Accu D with value in buffer RAM page 2 offset 742 (hfpoff) (CHECK_ALARMS)
004D9B 7F4D9B BC 10 9A                        cpd  Efpx10     ; (A:B)-(M:M+1) Compare "hfp_off" with "Efpx10"          (CHECK_ALARMS)
004D9E 7F4D9E 24 02                       bhs  CLEAR_HFP  ; If "hfpoff" is higher or he same as "Efpx10" branch to CLEAR_HFP (CHECK_ALARMS)
004DA0 7F4DA0 20 0B                       bra  CHK_HFP_ON ; Branch to CHK_HFP_ON:                                      (CHECK_ALARMS)
004DA2 7F4DA2                         CLEAR_HFP:                                                                       (CHECK_ALARMS)
004DA2 7F4DA2 1F 10 F1 40 22               brclr   alarmbits,HFP,HFP_ALARM_DONE ; If "HFP" bit of "alarmbits" is clear, (CHECK_ALARMS)
                                                                                ; branch to HFP_ALARM_DONE:            (CHECK_ALARMS)
004DA7 7F4DA7 1D 10 F1 40                  bclr    alarmbits,HFP                ; Clear "HFP" bit of "alarmbits"       (CHECK_ALARMS)
004DAB 7F4DAB 20 1C                        bra     HFP_ALARM_DONE               ; Branch to HFP_ALARM_DONE:            (CHECK_ALARMS)
004DAD 7F4DAD                         CHK_HFP_ON:                                                                      (CHECK_ALARMS)
004DAD 7F4DAD 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004DB2 7F4DB2 CD 08 00                    ldy  #stBins_E     ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                           ; on buffer RAM page 2 (stBins)                             (CHECK_ALARMS)
004DB5 7F4DB5 EC EA 02 E4                 ldd  $02E4,Y     ; Load Accu D with value in buffer RAM page 2 offset 740 (hfpon) (CHECK_ALARMS)
004DB9 7F4DB9 BC 10 9A                        cpd  Efpx10      ; (A:B)-(M:M+1) Compare "hfpon" with "Efpx10"           (CHECK_ALARMS)
004DBC 7F4DBC 23 02                       bls  SET_HFP     ; If "hfpon" is lower or the same as "Efpx10" branch to SET_HFP (CHECK_ALARMS)
004DBE 7F4DBE 20 09                       bra  HFP_ALARM_DONE ; Branch to HFP_ALARM_DONE:                              (CHECK_ALARMS)
004DC0 7F4DC0                         SET_HFP:                                                                         (CHECK_ALARMS)
004DC0 7F4DC0 1E 10 F1 40 04               brset   alarmbits,HFP,HFP_ALARM_DONE ; If "LOP" bit of "alarmbits" is set, branch to (CHECK_ALARMS)
                                                                                ; HFP_ALARM_DONE:                      (CHECK_ALARMS)
004DC5 7F4DC5 1C 10 F1 40                  bset    alarmbits,HFP                ; Set "HFP" bit of "alarmbits"         (CHECK_ALARMS)
004DC9 7F4DC9                         HFP_ALARM_DONE:                                                                  (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - Check for low fuel pressure                                                  (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004DC9 7F4DC9                         CHK_LFP_OFF:                                                                     (CHECK_ALARMS)
004DC9 7F4DC9 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004DCE 7F4DCE CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004DD1 7F4DD1 EC EA 02 EA                 ldd  $02EA,Y    ; Load Accu D with value in buffer RAM page 2 offset 746 (lfpoff) (CHECK_ALARMS)
004DD5 7F4DD5 BC 10 9A                        cpd  Efpx10     ; (A:B)-(M:M+1) Compare "lfpoff" with "Efpx10"           (CHECK_ALARMS)
004DD8 7F4DD8 23 02                       bls  CLEAR_LFP  ; If "lfpoff" is lower or the same as "Efpx10" branch to CLEAR_LFP (CHECK_ALARMS)
004DDA 7F4DDA 20 0B                       bra  CHK_LFP_ON ; Branch to CHK_LFP_ON:                                      (CHECK_ALARMS)
004DDC 7F4DDC                         CLEAR_LFP:                                                                       (CHECK_ALARMS)
004DDC 7F4DDC 1F 10 F1 20 22               brclr   alarmbits,LFP,LFP_ALARM_DONE ; If "LFP" bit of "alarmbits" is clear, (CHECK_ALARMS)
                                                                                ; branch to LFP_ALARM_DONE:            (CHECK_ALARMS)
004DE1 7F4DE1 1D 10 F1 20                  bclr    alarmbits,LFP                ; Clear "LFP" bit of "alarmbits"       (CHECK_ALARMS)
004DE5 7F4DE5 20 1C                        bra     LFP_ALARM_DONE               ; Branch to LFP_ALARM_DONE:            (CHECK_ALARMS)
004DE7 7F4DE7                         CHK_LFP_ON:                                                                      (CHECK_ALARMS)
004DE7 7F4DE7 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004DEC 7F4DEC CD 08 00                    ldy  #stBins_E     ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                           ; on buffer RAM page 2 (stBins)                             (CHECK_ALARMS)
004DEF 7F4DEF EC EA 02 E8                 ldd  $02E8,Y     ; Load Accu D with value in buffer RAM page 2 offset 744 (lfpon) (CHECK_ALARMS)
004DF3 7F4DF3 BC 10 9A                        cpd  Efpx10      ; (A:B)-(M:M+1) Compare "lfpon" with "Efpx10"           (CHECK_ALARMS)
004DF6 7F4DF6 24 02                       bhs  SET_LFP     ; If "lfpon" is higher or the same as "Efpx10" branch to SET_LFP (CHECK_ALARMS)
004DF8 7F4DF8 20 09                       bra  LFP_ALARM_DONE ; Branch to LFP_ALARM_DONE:                              (CHECK_ALARMS)
004DFA 7F4DFA                         SET_LFP:                                                                         (CHECK_ALARMS)
004DFA 7F4DFA 1E 10 F1 20 04               brset   alarmbits,LFP,LFP_ALARM_DONE ; If "LOP" bit of "alarmbits" is set, branch to (CHECK_ALARMS)
                                                                                ; LFP_ALARM_DONE:                      (CHECK_ALARMS)
004DFF 7F4DFF 1C 10 F1 20                  bset    alarmbits,LFP                ; Set "LFP" bit of "alarmbits"         (CHECK_ALARMS)
004E03 7F4E03                         LFP_ALARM_DONE:                                                                  (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - When an engine alarm condition occurs an indicator light on the dashbord is  (CHECK_ALARMS)
                                      ;   illuminated and an audible alarm will sound. The alarm can be silenced by switching (CHECK_ALARMS)
                                      ;   the alarm silence switch on the dashboard to the on position but the light will remain (CHECK_ALARMS)
                                      ;   illuminated  until the alarm conditionn is no longer met. When the alarm silence (CHECK_ALARMS)
                                      ;   switch is in the on posiiton an indicator on the dashboard will warn the driver that (CHECK_ALARMS)
                                      ;   feature is off and that subsequent alarms will be indicator lights only.     (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - If we have an audible alarm see if it should be silenced.                    (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004E03 7F4E03 4F 08 10 06                 brclr PORTE,PE4,NoAudAlrm ; If "AudAlrmSil"(PE4) pin on port E is clear, branch to (CHECK_ALARMS)
                                                                           ; NoAudAlrm: (Switch is on so prohibit audible alarm) (CHECK_ALARMS)
004E07 7F4E07 1D 10 F0 04                 bclr engine2,AudAlrm             ; Clear "AudAlrm" bit of "engine2" bit field (CHECK_ALARMS)
004E0B 7F4E0B 20 04                       bra  ChkAlarmbits                ; Branch to ChkAlarmbits:                   (CHECK_ALARMS)
004E0D 7F4E0D                         NoAudAlrm:                                                                       (CHECK_ALARMS)
004E0D 7F4E0D 1C 10 F0 04                 bset engine2,AudAlrm             ; Set "AudAlrm" bit of "engine2" bit field  (CHECK_ALARMS)
004E11 7F4E11                         ChkAlarmbits:                                                                    (CHECK_ALARMS)
004E11 7F4E11 B6 10 F1                    ldaa  alarmbits                  ; "alarmbits"-> Accu A                      (CHECK_ALARMS)
004E14 7F4E14 8A 00                       oraa  #$00000000                 ; Inclusive or with %00000000 (all bits cleared (CHECK_ALARMS)
                                                                           ; on power up and bit 7 is not assigned     (CHECK_ALARMS)
004E16 7F4E16 27 0A                       beq   AudibleAlarmOff            ; If all bits are zero branch to AudibleAlarmOff: (CHECK_ALARMS)
004E18 7F4E18 1E 10 F0 04 05              brset engine2,AudAlrm,AudibleAlarmOff  ; if "AudAlrm" bit of "engine2" is set branch (CHECK_ALARMS)
                                                                           ; to AudibleAlarmOff: (Switch is on so prohibit audible (CHECK_ALARMS)
                                                                           ; alarm)                                    (CHECK_ALARMS)
004E1D 7F4E1D 4C 01 20                    bset  PORTB,EngAlarm             ; Set "EngAlarm pin on Port B (audible alarm on) (CHECK_ALARMS)
004E20 7F4E20 20 03                       bra   AudibleAlarmDone           ; Branch to AudibleAlarmDone:               (CHECK_ALARMS)
004E22 7F4E22                         AudibleAlarmOff:                                                                 (CHECK_ALARMS)
004E22 7F4E22 4D 01 20                    bclr  PORTB,EngAlarm             ; Clear "EngAlarm" pin on port B (audible alarm on) (CHECK_ALARMS)
004E25 7F4E25                         AudibleAlarmDone:                                                                (CHECK_ALARMS)
                                      ;*****************************************************************************************
                                      ; - Do RPM calculations when there is a new input capture period.
                                      ;*****************************************************************************************
004E25 7F4E25 1F 10 24 01 29             brclr ICflgs,RPMcalc,NoRPMcalc ; If "RPMcalc" bit of "ICflgs" is clear,
                                                                        ; branch to "NoRPMcalc:"(bit is set in State_BPEM.s
                                                                                                        ; and cleared in ect_BPEM.s)
004E2A 7F4E2A MACRO                       CALC_RPM   ; (Macro in ect_BEEM488.s)
                                                              ; edge capture Ch3,1)(Capture disabled Ch2,0)            (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ; ------------------------------- RPM CALCULATION SECTION -------------------------------- (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ;                                                                                (CALC_RPM)
                                      ; RPM = CONSTANT/PERIOD                                                          (CALC_RPM)
                                      ; Where:                                                                         (CALC_RPM)
                                      ; RPM    = Engine RPM                                                            (CALC_RPM)
                                      ; RPMk   = 24 bit constant using 5.12uS IC clock tick (195.3125khz)              (CALC_RPM)
                                      ;             ((195,312.5 tickpsec*60secpmin)/(360/72))                          (CALC_RPM)
                                      ; CASprd = 16 bit period count between three consecutive IC events in 5.12uS     (CALC_RPM)
                                      ;               resolution                                                       (CALC_RPM)
                                      ;   RPMk                                                                         (CALC_RPM)
                                      ;   ----- = RPM                                                                  (CALC_RPM)
                                      ;   CASprd512                                                                    (CALC_RPM)
                                      ;                                                                                (CALC_RPM)
                                      ; RPMk = ((195312.5*60)/5) = 2343750 = $0023C346                                 (CALC_RPM)
                                      ;                                                                                (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ;                                                                                (CALC_RPM)
                                      ; RPM = CONSTANT/PERIOD                                                          (CALC_RPM)
                                      ; Where:                                                                         (CALC_RPM)
                                      ; RPM    = Engine RPM                                                            (CALC_RPM)
                                      ; RPMk   = 24 bit constant using 2.56uS IC clock tick (390.625khz)               (CALC_RPM)
                                      ;             ((390,625 tickpsec*60secpmin)/(360/72))                            (CALC_RPM)
                                      ; CASprd256 = 16 bit period count between three consecutive IC events in 2.56uS  (CALC_RPM)
                                      ;               resolution                                                       (CALC_RPM)
                                      ;   RPMk                                                                         (CALC_RPM)
                                      ;   ----- = RPM                                                                  (CALC_RPM)
                                      ;   CASprd256                                                                    (CALC_RPM)
                                      ;                                                                                (CALC_RPM)
                                      ; RPMk = ((390,625*60)/5) = 4,687,500 = $0047868C                                (CALC_RPM)
                                      ;                                                                                (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ; - Check the state of the "Run" bit in "engine" bit field. If it is set we are running (CALC_RPM)
                                      ;   so change the calculations from timer base from 5.12uS to 2.56 uS.           (CALC_RPM)
                                      ;****************************************************************************************** (CALC_RPM)
004E2A 7F4E2A 1E 10 EF 04 13                  brset engine,run,RunRPM ; If "run" bit of "engine variable is set branch to RunRPM: (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ; - Do RPM calculations for 5.12uS time base when there is a new input capture period (CALC_RPM)
                                      ;   using 32x16 divide                                                           (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
004E2F 7F4E2F CC C3 46                    ldd  #$C346         ; Load accu D with Lo word of  10 cyl RPMk (5.12uS clock tick) (CALC_RPM)
004E32 7F4E32 CD 00 23                    ldy  #$0023         ; Load accu Y with Hi word of 10 cyl RPMk (5.12uS clock tick) (CALC_RPM)
004E35 7F4E35 FE 10 A6                    ldx  CASprd512      ; Load "X" register with value in "CASprd512"            (CALC_RPM)
004E38 7F4E38 11                          ediv                ; Extended divide (Y:D)/(X)=>Y;Rem=>D                    (CALC_RPM)
                                                                  ;(Divide "RPMk" by "CASprd512")                      (CALC_RPM)
004E39 7F4E39 7D 10 AC                    sty  RPM            ; Copy result to "RPM"                                   (CALC_RPM)
004E3C 7F4E3C 1D 10 24 01                 bclr ICflgs,RPMcalc ; Clear "RPMcalc" bit of "ICflgs"                        (CALC_RPM)
004E40 7F4E40 20 11                           bra  RunRPMDone     ; Branch to RunRPMDone:                              (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ; - Do RPM calculations for 2.56uS time base when there is a new input capture period (CALC_RPM)
                                      ;   using 32x16 divide                                                           (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
004E42 7F4E42                         RunRPM:                                                                          (CALC_RPM)
004E42 7F4E42 CC 86 8C                    ldd  #$868C         ; Load accu D with Lo word of  10 cyl RPMk (2.56uS clock tick) (CALC_RPM)
004E45 7F4E45 CD 00 47                    ldy  #$0047         ; Load accu Y with Hi word of 10 cyl RPMk (2.56uS clock tick) (CALC_RPM)
004E48 7F4E48 FE 10 A8                    ldx  CASprd256      ; Load "X" register with value in "CASprd256"            (CALC_RPM)
004E4B 7F4E4B 11                          ediv                ; Extended divide (Y:D)/(X)=>Y;Rem=>D                    (CALC_RPM)
                                                                  ;(Divide "RPMk" by "CASprd256")                      (CALC_RPM)
004E4C 7F4E4C 7D 10 AC                    sty  RPM            ; Copy result to "RPM"                                   (CALC_RPM)
004E4F 7F4E4F 1D 10 24 01                 bclr ICflgs,RPMcalc ; Clear "RPMcalc" bit of "ICflgs"                        (CALC_RPM)
004E53 7F4E53                         RunRPMDone:                                                                      (CALC_RPM)
004E53 7F4E53                         NoRPMcalc
                                      ;*****************************************************************************************
                                      ; - Do KPH calculations when there is a new input capture period.
                                      ;*****************************************************************************************
004E53 7F4E53 1F 10 24 02 11              brclr ICflgs,KPHcalc,NoKPHcalc ; If "KPHcalc" bit of "ICflgs" is clear,
                                                                         ; branch to "NoKPHcalc:"(bit is set and cleared in
                                                                                                         ; ect_BPEM.s)
004E58 7F4E58 MACRO                       CALC_KPH   ; (Macro in ect_BEEM488.s)
                                      ;***************************************************************************************** (CALC_KPH)
                                      ; ------------------------------- KPH CALCULATION SECTION -------------------------------- (CALC_KPH)
                                      ;***************************************************************************************** (CALC_KPH)
                                      ;                                                                                (CALC_KPH)
                                      ; KPH = CONSTANT/PERIOD                                                          (CALC_KPH)
                                      ; Where:                                                                         (CALC_KPH)
                                      ; KPH         = Vehicle speed in Kilometers per Hour                             (CALC_KPH)
                                      ; KPHk = 19 bit constant using 2.56uS IC clock tick (390.625khz)                 (CALC_KPH)
                                      ;             ((390.625 tickpsec*60secpmin*60minphr)/4971pulsepkm                (CALC_KPH)
                                      ; VSSprd = 16 bit period count between consecutive IC events in 2.56uS           (CALC_KPH)
                                      ;               resolution. 8000 pulse per mile, 4971 pulse per KM               (CALC_KPH)
                                      ;   KPHk                                                                         (CALC_KPH)
                                      ;   ----- = KPH                                                                  (CALC_KPH)
                                      ;   VSSprd                                                                       (CALC_KPH)
                                      ;                                                                                (CALC_KPH)
                                      ; KPHk = ((390,625*60*60)/4971) = 282890.7664 = $0004510B                        (CALC_KPH)
                                      ; min 4.316636368 KPH                                                            (CALC_KPH)
                                      ; Resolution @ 100KPH = .0796KM                                                  (CALC_KPH)
                                      ;                                                                                (CALC_KPH)
                                      ;***************************************************************************************** (CALC_KPH)
                                      ;***************************************************************************************** (CALC_KPH)
                                      ; - Do KPH calculations for 2.56uS time base when there is a new input capture period (CALC_KPH)
                                      ;   using 32x16 divide                                                           (CALC_KPH)
                                      ;***************************************************************************************** (CALC_KPH)
004E58 7F4E58                         RunKPH:                                                                          (CALC_KPH)
004E58 7F4E58 CC 51 0B                    ldd  #$510B         ; Load accu D with Lo word of KPHk                       (CALC_KPH)
004E5B 7F4E5B CD 00 04                    ldy  #$0004         ; Load accu Y with Hi word of KPHk                       (CALC_KPH)
004E5E 7F4E5E FE 10 AA                    ldx  VSSprd         ; Load "X" register with value in "VSSprd"               (CALC_KPH)
004E61 7F4E61 11                          ediv                ; Extended divide (Y:D)/(X)=>Y;Rem=>D (Divide "KPHk" by "VSSprd") (CALC_KPH)
004E62 7F4E62 7D 10 AE                    sty  KPH            ; Copy result to "KPH"                                   (CALC_KPH)
004E65 7F4E65 1D 10 24 02                 bclr ICflgs,KPHcalc ; Clear "KPHcalc" bit of "ICflgs"                        (CALC_KPH)
004E69 7F4E69                         RunKPHDone:                                                                      (CALC_KPH)
004E69 7F4E69                         NoKPHcalc:
                                      ;*****************************************************************************************
                                      ; - Every mS:
                                      ;   Decrement "AIOTcnt" (AIOT pulse width counter)
                                      ;   Decrement "Stallcnt" (stall counter)
                                      ;   Check for no crank or stall condition.
                                      ;*****************************************************************************************
004E69 7F4E69 1F 10 05 01 79              brclr clock,ms1,NoMS1Routines ; If "ms1" bit of "clock" bit field is clear branch to
                                                                        ; NoMS1Routines:
004E6E 7F4E6E MACRO                       MILLISEC_ROUTINES             ; (Macro in rti_BEEM488.s)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ; - Every mS:                                                                    (MILLISEC_ROUTINES)
                                      ;   Decrement "AIOTcnt" (AIOT pulse width counter)                               (MILLISEC_ROUTINES)
                                      ;   Decrement "Stallcnt" (stall counter)                                         (MILLISEC_ROUTINES)
                                      ;   Check for no crank or stall condition.                                       (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ;********************************************************************************************** (MILLISEC_ROUTINES)
                                      ; - Check the value of the AIOT pulse width counter, if other than zero, decrement it. (MILLISEC_ROUTINES)
                                      ;   When it reaches zero, shut the AIOT trigger off(open collector output)       (MILLISEC_ROUTINES)
                                      ;********************************************************************************************** (MILLISEC_ROUTINES)
004E6E 7F4E6E B6 10 67                    ldaa    AIOTcnt         ; "AIOTcnt"->Accu A                                  (MILLISEC_ROUTINES)
004E71 7F4E71 27 0D                       beq     AIOT_CHK_DONE   ; If "Z" bit of "CCR is set, branch to AIOT_CHK_DONE: (MILLISEC_ROUTINES)
004E73 7F4E73 73 10 67                    dec     AIOTcnt         ; Decrement "AIOTcnt"                                (MILLISEC_ROUTINES)
004E76 7F4E76 B6 10 67                    ldaa    AIOTcnt         ; load accumulator with value in "AIOTcnt"           (MILLISEC_ROUTINES)
004E79 7F4E79 27 02                       beq     AIOT_OFF        ; If "Z" bit of "CCR is set, branch to AIOT_OFF:     (MILLISEC_ROUTINES)
004E7B 7F4E7B 20 03                       bra     AIOT_CHK_DONE   ; Branch to AIOT_CHK_DONE:                           (MILLISEC_ROUTINES)
004E7D 7F4E7D                         AIOT_OFF:                                                                        (MILLISEC_ROUTINES)
004E7D 7F4E7D 4D 01 40                    bclr PORTB,AIOT         ; Clear "AIOT" pin on Port B (PB6)(end totalizer pulse) (MILLISEC_ROUTINES)
004E80 7F4E80                         AIOT_CHK_DONE:                                                                   (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ;   Decrement "Stallcnt" (no crank or stall condition counter)(1mS increments)   (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
004E80 7F4E80 18 73 10 22                decw Stallcnt   ; Decrement "Stallcnt" (no crank or stall condition counter)  (MILLISEC_ROUTINES)
                                                         ; (1mS increments)                                            (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ;   Check for no crank or stall condition.                                       (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
004E84 7F4E84 27 02                      beq  DoStall ; If "Stallcnt" has decremented to zero branch to DoStall:       (MILLISEC_ROUTINES)
004E86 7F4E86 20 5B                      bra  NoStall ; Branch to NoStall: (counter is not zero so fall through)       (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ;   Engine either hasn't begun to crank yet or has stalled                       (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
004E88 7F4E88                         DoStall:                                                                         (MILLISEC_ROUTINES)
004E88 7F4E88 MACRO                       FUEL_PUMP_AND_ASD_OFF       ; Shut fuel pump and ASD relay off(macro in gpio_BEEM.s) (MILLISEC_ROUTINES)
                                      ;    ldaa   PORTB    ; Load Accu A with value in Port B (LED9 board 1 to 28)     (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
                                      ;    oraa   #$03     ; Bitwise "OR" Accu A with %00000011 (set bits 0 and 1)     (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
                                      ;    staa   PORTB    ; Copy to Port B  (set bits 0 and 1)                        (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
                                      ; - De-energise the Fuel pump relay and the Emergency Shutdown relay on Port B Bit0, Bit1 (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
004E88 7F4E88 4D 01 01                    bclr  PORTB,FuelPump  ; Clear "FuelPump" pin on Port B(LED9 board 1 to 28)   (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
004E8B 7F4E8B 4D 01 02                        bclr  PORTB,ASDRelay  ; Clear "ASDRelay" pin on Port B(LED23 board 1 to 28) (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
004E8E 7F4E8E 18 79 10 AC                 clrw RPM                    ; Clear "RPM" (engine RPM)                       (MILLISEC_ROUTINES)
004E92 7F4E92 79 10 14                    clr  State                  ; Clear "State" (Cam-Crank state machine current state ) (MILLISEC_ROUTINES)
004E95 7F4E95 79 10 EF                    clr  engine                 ; Clear all flags in "engine" bit field          (MILLISEC_ROUTINES)
004E98 7F4E98 79 10 F0                    clr  engine2                ; Clear all flags in "engine2" bit field         (MILLISEC_ROUTINES)
004E9B 7F4E9B 79 10 24                    clr  ICflgs                 ; Clear all flags in "ICflgs" bit field          (MILLISEC_ROUTINES)
004E9E 7F4E9E 79 10 F3                        clr  StateStatus            ; Clear "StateStatus" bit field              (MILLISEC_ROUTINES)
004EA1 7F4EA1 18 79 10 A6                 clrw CASprd512              ; Clear Crankshaft Angle Sensor period (5.12uS time base (MILLISEC_ROUTINES)
004EA5 7F4EA5 18 79 10 A8                 clrw CASprd256              ; Clear Crankshaft Angle Sensor period (2.56uS time base (MILLISEC_ROUTINES)
004EA9 7F4EA9 18 79 10 1D                 clrw Degx10tk512            ; Clear Time to rotate crankshaft 1 degree (5.12uS x 10) (MILLISEC_ROUTINES)
004EAD 7F4EAD 18 79 10 1F                 clrw Degx10tk256            ; Clear Time to rotate crankshaft 1 degree (2.56uS x 10) (MILLISEC_ROUTINES)
004EB1 7F4EB1 1C 10 F3 02                 bset StateStatus,SynchLost  ; Set "SynchLost" bit of "StateStatus" bit field (bit1) (MILLISEC_ROUTINES)
004EB5 7F4EB5 18 0B FF 00 6E              movb #$FF,ECT_PTPSR         ; Load ECT_PTPSR with %11111111 (prescale 256, 5.12us (MILLISEC_ROUTINES)
                                                                      ; resolution, max period 335.5ms)                (MILLISEC_ROUTINES)
004EBA 7F4EBA 18 0B FF 03 FE              movb #$FF,TIM_PTPSR         ; Load TIM_PTPSR with %11111111 (prescale 256, 5.12us (MILLISEC_ROUTINES)
                                                                      ; resolution, max period 335.5ms)(min RPM = ~85) (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ; - Set the "crank" bit and clear the "run" bit of the "engine" bit field in preparation (MILLISEC_ROUTINES)
                                      ;   for cranking.                                                                (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
004EBF 7F4EBF 1C 10 EF 02                bset engine,crank   ; Set the "crank" bit of "engine" bit field               (MILLISEC_ROUTINES)
004EC3 7F4EC3 1D 10 EF 04                bclr engine,run     ; Clear the "run" bit of "engine" bit field               (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ; - Set the "base512" bit and clear the "base256" bit of the "engine2" bit field in (MILLISEC_ROUTINES)
                                      ;   preparation for cranking.                                                    (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
004EC7 7F4EC7 1C 10 F0 01                bset engine2,base512   ; Set the "base512" bit of "engine" bit field          (MILLISEC_ROUTINES)
004ECB 7F4ECB 1D 10 F0 02                bclr engine2,base256   ; Clear the "base256" bit of "engine" bit field        (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ; - Load stall counter with compare value. Stall check is done in the main loop every (MILLISEC_ROUTINES)
                                      ;   mSec. "Stallcnt" is decremented every mSec and reloaded at every crank signal. (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
004ECF 7F4ECF 18 0B FF 00 17                  movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE               (MILLISEC_ROUTINES)
004ED4 7F4ED4 CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable (MILLISEC_ROUTINES)
                                                              ; constant on buffer RAM page 1 (vebins)                 (MILLISEC_ROUTINES)
004ED7 7F4ED7 EC EA 03 E6                 ldd   $03E6,Y       ; Load Accu A with value in buffer RAM page 1 offset 998 (MILLISEC_ROUTINES)
                                                              ; "Stallcnt" (stall counter)(offset = 998)               (MILLISEC_ROUTINES)
004EDB 7F4EDB 7C 10 22                    std  Stallcnt       ; Copy to "Stallcnt" (no crank or stall condition counter) (MILLISEC_ROUTINES)
                                                              ; (1mS increments)                                       (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ; - Initialize other variables -                                                 (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
004EDE 7F4EDE 18 0B 09 10 21              movb  #$09,RevCntr     ; Counter for Revolution Counter signals              (MILLISEC_ROUTINES)
004EE3 7F4EE3                         NoStall:                                                                         (MILLISEC_ROUTINES)
004EE3 7F4EE3 1D 10 05 01                     bclr clock,ms1                ; Clear "ms1" bit of "clock" bit field
004EE7 7F4EE7                         NoMS1Routines:
                                      ;*****************************************************************************************
                                      ; - Every 100 mS:
                                      ;   Decrement "OFCdelcmp" (counter for Overrun Fuel Cut delay calculations)
                                      ;   Decrement "TOEtimcmp" (counter for Throttle Opening Enrichment calculations)
                                      ;   Save current TPS percent reading "TpsPctx10" as "TpsPctx10last" to compute "tpsDOT"
                                      ;   in acceleration  enrichment section.
                                      ;*****************************************************************************************
004EE7 7F4EE7 1F 10 05 02 10              brclr clock,ms100,NoMS100Routines ; If "ms100" bit of "clock" bit field is clear
                                                                            ; branch to NoMS100Routines:
004EEC 7F4EEC MACRO                       MILLISEC100_ROUTINES              ; (Macro in rti_BEEM488.s)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
                                      ; - Every 100 mS:                                                                (MILLISEC100_ROUTINES)
                                      ;   Decrement "OFCdelcmp" (counter for Overrun Fuel Cut delay calculations)      (MILLISEC100_ROUTINES)
                                      ;   Decrement "TOEtimcmp" (counter for Throttle Opening Enrichment calculations) (MILLISEC100_ROUTINES)
                                      ;   Save current TPS percent reading "TpsPctx10" as "TpsPctx10last" to compute "tpsDOT" (MILLISEC100_ROUTINES)
                                      ;   in acceleration  enrichment section.                                         (MILLISEC100_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
                                      ; - Decrement "OFCdel" Overrun Fuel Cut delay duration (decremented every 100 mS) (MILLISEC100_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
004EEC 7F4EEC 73 10 47                        dec  OFCdel    ; Decrement Overrun Fuel Cut delay duration               (MILLISEC100_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
                                      ; - Decrement "TOEtim" Throttle Opening Enrichment duration (decremented every 100 mS) (MILLISEC100_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
004EEF 7F4EEF 73 10 48                    dec  TOEtim    ; Decrement Throttle Opening Enrichment duration              (MILLISEC100_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
                                      ; - "TPSdot" is throttle position percent rate of change in 100mS. Save current TPS (MILLISEC100_ROUTINES)
                                      ;   percent reading "TpsPctx10" as "TpsPctx10last" to compute "tpsDOT" in acceleration (MILLISEC100_ROUTINES)
                                      ;   enrichment section.                                                          (MILLISEC100_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
004EF2 7F4EF2 18 04 10 9E 10 45           movw  TpsPctx10,TpsPctx10last   ; Copy value in "TpsPctx10" to "TpsPctx10last" (MILLISEC100_ROUTINES)
004EF8 7F4EF8 1D 10 05 02                     bclr clock,ms100                  ; Clear "ms100" bit of "clock" bit field
004EFC 7F4EFC                         NoMS100Routines:
                                      ;*****************************************************************************************
                                      ; - Every 1000mS:
                                      ;   Save the current fuel delivery total ("FDt") as "FDsec" so it can be used by Tuner
                                      ;   Studio and Shadow Dash for fuel burn calculations
                                      ;*****************************************************************************************
004EFC 7F4EFC 1F 10 05 10 18              brclr clock,ms1000,NoMS1000Routines ; If "ms1000" bit of "clock" bit field is clear
                                                                              ; branch to NoMS1000Routines:
004F01 7F4F01 MACRO                       MILLISEC1000_ROUTINES               ; (Macro in rti_BEEM488.s)
                                                                           ;(current becomes last)                     (MILLISEC1000_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC1000_ROUTINES)
                                      ; - Save the current value of "LoopCntr" as "LoopTime" (loops per second)        (MILLISEC1000_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC1000_ROUTINES)
004F01 7F4F01 FC 11 03                        ldd  LoopCntr      ; "LoopCntr" (counter for "LoopTime") ->Accu D        (MILLISEC1000_ROUTINES)
004F04 7F4F04 7C 10 F4                    std  LoopTime      ; Copy to "LoopTime" (Program loop time (loops/Sec)       (MILLISEC1000_ROUTINES)
004F07 7F4F07 18 79 11 03                 clrw LoopCntr      ; Clear "LoopCntr" (incremented every Main Loop pass)     (MILLISEC1000_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC1000_ROUTINES)
                                      ; - Save the current fuel delivery total ("FDt") as "FDsec" so it can be used by Tuner (MILLISEC1000_ROUTINES)
                                      ;   Studio and Shadow Dash for fuel burn calculations                            (MILLISEC1000_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC1000_ROUTINES)
004F0B 7F4F0B FC 10 63                    ldd   FDt     ; "FDt"->Accu D (fuel delivery pulse width time total)         (MILLISEC1000_ROUTINES)
004F0E 7F4F0E 7C 10 D8                        Std   FDsec   ; Copy to "FDsec" (fuel delivery pulse width time total per second) (MILLISEC1000_ROUTINES)
004F11 7F4F11 18 79 10 63                     clrw  FDt     ; Clear "FDt" (fuel delivery pulse width time total)       (MILLISEC1000_ROUTINES)
004F15 7F4F15 1D 10 05 10                     bclr clock,ms1000                   ; Clear "ms1000" bit of "clock" bit field
004F19 7F4F19                         NoMS1000Routines:
                                      ;*****************************************************************************************
                                      ; ----------------------- Ignition Calculations Section ----------------------------------
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;
                                      ; - Ignition timing in degrees to 0.1 degree resolution is selected from the 3D
                                      ;   lookup table "ST" which plots manifold pressure against RPM. A potentiometer on the
                                      ;   dash board allows a manual trim of the "ST" values of from 0 to 20 degrees advance
                                      ;   and from 0 to 20 degrees retard. The ignition system is what is called "waste spark",
                                      ;   which pairs cylinders on a single coil. The spark is delivered to both cylinders at
                                      ;   the same time. One cylinder recieves the spark at the appropriate time for ignition.
                                      ;   The other recieves it when the exhaust valve is open. Hence the name "waste spark".
                                      ;   On this 10 cylinder engine there are 5 coils, each controlled by its own hardware
                                      ;   timer. The cylinders are paired 1&6, 10&5, 9&8, 4&7, 3&2
                                      ;   In an ignition event the timer is first loaded with the output compare value in
                                      ;   "Delaytk". At the compare interrupt the coil is energised and the timer is loaded
                                      ;   with the output compare value in "DwllFintk". At the compare interrupt the coil is
                                      ;   de-energized to fire the spark. The delay in timer ticks will depend on the timer base
                                      ;   rate of either 5.12 uS for cranking or 2.56uS for running.
                                      ;
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Look up current value in ST table (STcurr) (degrees*10)
                                      ;*****************************************************************************************
004F19 7F4F19 MACRO                       ST_LU    ; Macro in injcalcs_BPEM.s
                                      ;***************************************************************************************** (ST_LU)
                                      ; For a 2.56uS timer 1 Sec = 1/.00000256 = 390625 tics                           (ST_LU)
                                      ; 1mS = 390625 / 1000 = 390.625 tics                                             (ST_LU)
                                      ; 0.1mS = 390.625 / 10 = 39.0625 tics                                            (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ; 1 RPM/60 = .016666666 Rev per Sec                                              (ST_LU)
                                      ; 1/.016666666 = 60 sec period                                                   (ST_LU)
                                      ; 60/360 = .166666666 sec per degree at 1 RPM                                    (ST_LU)
                                      ; 60/5 = 12 sec Crank Angle Sensor period at 1 RPM                               (ST_LU)
                                      ; 12/.00000256 = 4687500 2.56uS tics at 1 RPM ("CASprdtk")                       (ST_LU)
                                      ; 4687500/72 = 65104.16667 2.56uS tics per degree at 1 RPM ("TkspDeg")           (ST_LU)
                                      ; .166666666/.00000256 = 65104.14063 2.56uS tics per degree at 1 RPM ("TkspDeg") (ST_LU)
                                      ; 1/65104.16667 = .000001528808485 degrees per tic at 1 RPM                      (ST_LU)
                                      ; 71.52666514/60 = 1.192111 Rev per Sec                                          (ST_LU)
                                      ; 1/1.192111 = .83884806 sec period                                              (ST_LU)
                                      ; .83884806/360 = .0023301335 sec per degree at 71.52666 RPM                     (ST_LU)
                                      ; .83884806/5 = .167769612 sec Crank Angle Sensor period at 71.52666 RPM         (ST_LU)
                                      ; .167769612/.00000256 = 65535 2.56uS tics at 71.52666 RPM ("CASprdtk")          (ST_LU)
                                      ; 65535/72 = 910.208333 2.56uS tics per degree at 71.52666 RPM ("TkspDeg")       (ST_LU)
                                      ; .0023301335/.00000256 = 910.2083984 2.56uS tics per degree at 71.52666 RPM ("TkspDeg") (ST_LU)
                                      ; 1/910.208333 = .001098649577 degrees per tic at 71.52666 RPM                   (ST_LU)
                                      ; 500 RPM/60 = 8.333333333 Rev per Sec                                           (ST_LU)
                                      ; 1/8.333333333 = .12 sec period                                                 (ST_LU)
                                      ; .12/360 = .0003333333 sec per degree at 500 RPM                                (ST_LU)
                                      ; .12/5 = .024 sec Crank Angle Sensor period at 500 RPM                          (ST_LU)
                                      ; .024/.00000256 = 9375 2.56uS tics at 500 RPM ("CASprdtk")                      (ST_LU)
                                      ; 9375/72 = 130.2083333 2.56uS tics per degree at 500 RPM ("TkspDeg")            (ST_LU)
                                      ; .0003333333/.00000256 = 130.2083203 2.56uS tics per degree at 500 RPM ("TkspDeg") (ST_LU)
                                      ; 1/130.2083333 = .00768 degrees per tic at 500 RPM                              (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ; 4250 RPM/60 = 70.8333333 Rev per Sec                                           (ST_LU)
                                      ; 1/70.8333333 = .014117647 sec period                                           (ST_LU)
                                      ; .014117647/360 = .00003921568629 sec per degree at 4250 RPM                    (ST_LU)
                                      ; .014117647/5 = .0028235294 sec Crank Angle Sensor period at 5000 RPM           (ST_LU)
                                      ; .0028235294/.00000256 = 1102.941172 2.56uS tics at 5000 RPM ("CASprdtk")       (ST_LU)
                                      ; 1102.941172/72 = 15.31862739 2.56uS tics per degree at 4250 RPM ("TkspDeg")    (ST_LU)
                                      ; .00003921568629/.00000256 = 15.31862746 2.56uS tics per degree at 4250 RPM ("TkspDeg") (ST_LU)
                                      ; 1/15.31862739 = .06528 degrees per tic at 4250 RPM                             (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ; Ignition crank notches are placed 150 degrees BTDC for their respective cylinder (ST_LU)
                                      ; Dwell times of .006sec crank and .004sec run seem to work well                 (ST_LU)
                                      ; Maximum ignition advance expected is 35 degrees BTDC at low load and high RPM  (ST_LU)
                                      ; From data logs cranking RPM is between ~154RPM and ~241RPM                     (ST_LU)
                                      ; Just before stall is ~251RPM                                                   (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ; At 4250 RPM a 4mSec dwell time takes .004/.00003921568629 = 102 degrees of rotation (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ; At power up the timers are initialized with a 5.12uS time base. A "Spantk"     (ST_LU)
                                      ; value of 65535 will happen at 84.441 RPM so this is the lowest RPM that can be (ST_LU)
                                      ; calculated during crank conditions. Resolution at 4250 RPM is 7.706 RPM. If the (ST_LU)
                                      ; time base were 2.56uS a "Spantk" value of 65535 will happen at 168.882 RPM.    (ST_LU)
                                      ; Resolution at 4250 RPM is 3.856 RPM. Cranking RPM can be lower than 168 RPM    (ST_LU)
                                      ; so this is why we begin with the 5.12uS base. When RPM reaches ~300 we are almost (ST_LU)
                                      ; ceratinly running so at that point the time base is switched to 2.56uS. This base (ST_LU)
                                      ; will allow ignition calculations to be done as low as ~169 RPM which is probably lower (ST_LU)
                                      ; than the speed at which the engine can be made to run.                         (ST_LU)
                                      ; With a time base of 5.12uS "CASprd512" of 7812 happens at 300 RPM. When the period gets (ST_LU)
                                      ; shorter than this the time base is switched over to 2.56uS ("CASprd256").      (ST_LU)
                                      ;***************************************************************************************** (ST_LU)
                                      ;***************************************************************************************** (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ; - Ignition timing in degrees to 0.1 degree resolution is selected from the 3D  (ST_LU)
                                      ;   lookup table "ST" which plots manifold pressure against RPM. A potentiometer on the (ST_LU)
                                      ;   dash board allows a manual trim of the "ST" values of from 0 to 20 degrees advance (ST_LU)
                                      ;   and from 0 to 20 degrees retard. The ignition system is what is called "waste spark", (ST_LU)
                                      ;   which pairs cylinders on a single coil. The spark is delivered to both cylinders at (ST_LU)
                                      ;   the same time. One cylinder recieves the spark at the appropriate time for ignition. (ST_LU)
                                      ;   The other recieves it when the exhaust valve is open. Hence the name "waste spark". (ST_LU)
                                      ;   On this 10 cylinder engine there are 5 coils, each controlled by its own hardware (ST_LU)
                                      ;   timer. The cylinders are paired 1&6, 10&5, 9&8, 4&7, 3&2                     (ST_LU)
                                      ;   In an ignition event the timer is first loaded with the output compare value in (ST_LU)
                                      ;   "Delaytk". At the compare interrupt the coil is energised and the timer is loaded (ST_LU)
                                      ;   with the output compare value in "DwllFintk". At the compare interrupt the coil is (ST_LU)
                                      ;   de-energized to fire the spark. The delay in timer ticks will depend on the timer base (ST_LU)
                                      ;   rate of either 5.12 uS for cranking or 2.56uS for running.                   (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ;***************************************************************************************** (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ;  Crank Signal                                                                  (ST_LU)
                                      ;   150BTDC                          Ign                    20ATDC               (ST_LU)
                                      ;      <- Delay          -><- Dwell -><-      ST + Trim     ->                   (ST_LU)
                                      ;     I___________________I__________ I_______________________I                  (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ;                          <-            Advance            ->                   (ST_LU)
                                      ;      <-            Ignition Span (170 degrees)            ->                   (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ;***************************************************************************************** (ST_LU)
                                      ;***************************************************************************************** (ST_LU)
                                      ; - Look up current value in ST table (STcurr) (degrees*10)                      (ST_LU)
                                      ;***************************************************************************************** (ST_LU)
004F19 7F4F19 FE 10 7E                    ldx   Mapx10     ; Load index register X with value in "Mapx10"(Column value Manifold (ST_LU)
                                                           ; Absolute Pressure*10 )                                    (ST_LU)
004F1C 7F4F1C FC 10 AC                    ldd   RPM        ; Load double accumulator D with value in "RPM" (Row value RPM) (ST_LU)
004F1F 7F4F1F 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (ST_LU)
004F24 7F4F24 CD 08 00                    ldy   #stBins_E    ; Load index register Y with address of the first value in ST table (ST_LU)
                                                           ;(in RAM)                                                   (ST_LU)
004F27 7F4F27 16 5F 36                    jsr   3D_LOOKUP  ; Jump to subroutine at 3D_LOOKUP:                          (ST_LU)
004F2A 7F4F2A 7C 10 DE                    std   STcurr     ; Copy result to "STcurr"                                   (ST_LU)
                                      ;*****************************************************************************************
                                      ; - Look up current value in Dwell Battery Adjustment Table (dwellcor)(% x 10)
                                      ;*****************************************************************************************
004F2D 7F4F2D MACRO                       DWELL_COR_LU    ; Macro in injcalcs_BPEM.s
                                      ;***************************************************************************************** (DWELL_COR_LU)
                                      ; - Look up current value in Dwell Battery Adjustment Table (dwellcor)(% x 10)   (DWELL_COR_LU)
                                      ;***************************************************************************************** (DWELL_COR_LU)
004F2D 7F4F2D 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (DWELL_COR_LU)
004F32 7F4F32 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (DWELL_COR_LU)
                                                                  ;  ->page where the desired curve resides            (DWELL_COR_LU)
004F38 7F4F38 18 03 01 7A 10 27           movw #$017A,CrvRowOfst  ; 378 -> Offset from the curve page to the curve row(dwellvolts) (DWELL_COR_LU)
                                                                      ;(actual offset is 756                           (DWELL_COR_LU)
004F3E 7F4F3E 18 03 01 80 10 29           movw #$0180,CrvColOfst  ; 384 -> Offset from the curve page to the curve column(dwellcorr) (DWELL_COR_LU)
                                                                      ;(actual offset is 768)                          (DWELL_COR_LU)
004F44 7F4F44 18 04 10 86 10 2B           movw BatVx10,CrvCmpVal  ; Battery Voltage (Volts x 10) -> Curve comparison value (DWELL_COR_LU)
004F4A 7F4F4A 18 0B 05 10 2D              movb #$05,CrvBinCnt     ; 5 -> number of bins in the curve row or column minus 1 (DWELL_COR_LU)
004F4F 7F4F4F 16 60 05                    jsr   CRV_LU_P   ; Jump to subroutine at CRV_LU_P:(located in interp_BEEM488.s module) (DWELL_COR_LU)
004F52 7F4F52 7C 10 E2                    std   DwellCor   ; Copy result to Dwell battery correction (% x 10)          (DWELL_COR_LU)
                                      ;*****************************************************************************************
                                      ; The determination of whether the engine is cranking or running is made in the
                                      ; State_BPEM488.s module within the Crank Angle Sensor interrupt. It is here that the
                                      ; "crank" and "run" bits of the "engine" bit field are set or cleared.
                                      ;*****************************************************************************************
004F55 7F4F55 1E 10 EF 02 02              brset engine,crank,CrankTime ; If "crank" bit of "engine" bit field is set branch
                                                                           ; to CrankTime:
004F5A 7F4F5A 20 5E                           bra   RunTime                ; Branch to RunTime:(no need to test "run" bit)
004F5C 7F4F5C                         CrankTime:
                                      ;*****************************************************************************************
                                      ; - Do ignition calculations for a 5.12uS time base.
                                      ;*****************************************************************************************
004F5C 7F4F5C MACRO                       IGN_CALCS_512      ; Macro in igncalcsBPEM488.s
                                      ;***************************************************************************************** (IGN_CALCS_512)
                                      ; - Convert the Igntion Span(170 degrees) to time in 5.12uS resolution (Spantk)  (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
004F5C 7F4F5C CC 06 A4                    ldd  #$06A4       ; Decimal 1700 -> Accu D (170 *10 for 0.1 degree resolution calcs) (IGN_CALCS_512)
004F5F 7F4F5F FD 10 1D                    ldy  Degx10tk512  ;(Time for 1 degree of rotation in 5.12uS resolution x 10) (IGN_CALCS_512)
004F62 7F4F62 13                          emul              ;(D)x(Y)=Y:D "1700" * Degx10tk512                          (IGN_CALCS_512)
004F63 7F4F63 CE 00 64                        ldx  #$0064       ; Decimal 100 -> Accu X                                (IGN_CALCS_512)
004F66 7F4F66 11                              ediv              ;(Y:D)/(X)=Y;Rem->D (("STandItrmx10" * Degx10tk512)/100 (IGN_CALCS_512)
                                                                ; = "Spantk"                                           (IGN_CALCS_512)
004F67 7F4F67 7C 10 37                        std  Spantk       ; Copy result to "Spantk"                              (IGN_CALCS_512)
                                      ;****************************************************************************************** (IGN_CALCS_512)
                                      ; - Multiply dwell time (mS*10) by the correction and divide by 1000 (%*10)("DwellFin") (IGN_CALCS_512)
                                      ;****************************************************************************************** (IGN_CALCS_512)
004F6A 7F4F6A FC 10 E0                    ldd   Dwell         ; "Dwell" -> Accu D (mS*10)                              (IGN_CALCS_512)
004F6D 7F4F6D FD 10 E2                    ldy   DwellCor      ; "DwellCor" -> Accu Y (%*10)                            (IGN_CALCS_512)
004F70 7F4F70 13                          emul                ;(D)x(Y)=Y:D "Dwell" * "DwellCor"                        (IGN_CALCS_512)
004F71 7F4F71 CE 03 E8                    ldx   #$03E8        ; Decimal 1000 -> Accu Y (for integer math)              (IGN_CALCS_512)
004F74 7F4F74 11                          ediv                ; (Y:D)/(X)=Y;Rem->D (("Dwell" * "DwellCor")/1000) = "DwellFin" (IGN_CALCS_512)
004F75 7F4F75 7D 10 E4                        sty   DwellFin      ; Copy result to "DwellFin                           (IGN_CALCS_512)
                                      ;****************************************************************************************** (IGN_CALCS_512)
                                      ; - Convert "DwellFin" to time in 5.12uS resolution.("DwellFintk")               (IGN_CALCS_512)
                                      ;****************************************************************************************** (IGN_CALCS_512)
004F78 7F4F78 FC 10 E4                        ldd   DwellFin      ; "DwellFin" -> Accu D                               (IGN_CALCS_512)
004F7B 7F4F7B CD 27 10                        ldy   #$2710        ; Load index register Y with decimal 10000 (for integer math) (IGN_CALCS_512)
004F7E 7F4F7E 13                              emul                ;(D)x(Y)=Y:D "DwellFin" * 10,000                     (IGN_CALCS_512)
004F7F 7F4F7F CE 02 00                        ldx   #$200         ; Load index register X decimal 512                  (IGN_CALCS_512)
004F82 7F4F82 11                          ediv                ;(Y:D)/(X)=Y;Rem->D ("DwellFin" * 10,000) / 512 = "DwellFintk" (IGN_CALCS_512)
004F83 7F4F83 7D 10 39                    sty   DwellFintk    ; Copy result to "DwellFintk" (Time required for dwell after (IGN_CALCS_512)
                                                                  ; correction in 5.12uS resolution                    (IGN_CALCS_512)
004F86 7F4F86 7D 10 43                        sty   IgnOCadd2     ; Copy result to "IgnOCadd2" (Time required for dwell after (IGN_CALCS_512)
                                                                  ; correction in 5.12uS resolution                    (IGN_CALCS_512)
                                                              ; This is the second OC value loaded into the timer      (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
                                      ; - Correct the current ST value for trim (degrees*10)("STandItrmx10")           (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
004F89 7F4F89 FC 10 DE                    ldd   STcurr      ; Current value in ST table (Degrees x 10) -> Accu D       (IGN_CALCS_512)
004F8C 7F4F8C C3 00 CB                    addd  #$00CB      ; (A:B)+(M:M+1)->A:B "STdeg" + decimal 200 = "Igncalc1" (Degrees*10) (IGN_CALCS_512)
004F8F 7F4F8F F3 10 8E                    addd  Itrmx10     ; (A:B)+(M:M+1)->A:B "Igncalc1" + Itrm10th) = "Igncalc2" (Degrees*10) (IGN_CALCS_512)
004F92 7F4F92 83 00 CB                    subd  #$00CB      ; Subtract (A:B)-(M:M+1)=>A:B  "Igncalc2" - decimal 200 = "STandItrm" (IGN_CALCS_512)
                                                                ;(Degrees*10)                                          (IGN_CALCS_512)
004F95 7F4F95 7C 10 E6                        std  STandItrmx10 ; Copy result to "STandItrmx10"(Degrees*10)            (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
                                      ; - Convert "STandItrmx10" to time in 5.12uS resolution ("STandItrmtk")          (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
004F98 7F4F98 FD 10 1D                    ldy  Degx10tk512  ;(Time for 1 degree of rotation in 2.56uS resolution x 10) (IGN_CALCS_512)
004F9B 7F4F9B 13                          emul              ;(D)x(Y)=Y:D "STandItrmx10" * Degx10tk512                  (IGN_CALCS_512)
004F9C 7F4F9C CE 00 64                        ldx  #$0064       ; Decimal 100 -> Accu X                                (IGN_CALCS_512)
004F9F 7F4F9F 11                              ediv              ;(Y:D)/(X)=Y;Rem->D (("STandItrmx10" * Degx10tk512)/100 (IGN_CALCS_512)
                                                                ; = "Spantk"                                           (IGN_CALCS_512)
004FA0 7F4FA0 7C 10 3B                        std  STandItrmtk  ; Copy result to "STandItrmtk"                         (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
                                      ; - Add "STandItrmtk" and "DwellFintk" = "Advancetk"                             (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
004FA3 7F4FA3 FC 10 3B                   ldd   STandItrmtk     ; "STandItrmtk" -> Accu D                               (IGN_CALCS_512)
004FA6 7F4FA6 F3 10 39                   addd  DwellFintk      ; (A:B)+(M:M+1)->A:B "STandItrmtk" + "DwellFintk" = "Advancetk" (IGN_CALCS_512)
004FA9 7F4FA9 7C 10 3D                   std   Advancetk       ; Copy result to "Advancetk"                            (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
                                      ; - Subtract "Advancetk" from "Spantk" = "Delaytk"                               (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
004FAC 7F4FAC FC 10 37                        ldd   Spantk     ; "Spantk" -> Accu D                                    (IGN_CALCS_512)
004FAF 7F4FAF B3 10 3D                        subd  Advancetk  ; Subtract (A:B)-(M:M+1)=>A:B "Spantk" - "Advancetk" = "Delaytk" (IGN_CALCS_512)
004FB2 7F4FB2 7C 10 3F                        std   Delaytk    ; Copy result to "Delaytk"                              (IGN_CALCS_512)
004FB5 7F4FB5 7C 10 41                        std   IgnOCadd1  ; Copy result to "IgnOCadd1"                            (IGN_CALCS_512)
004FB8 7F4FB8 20 5C                           bra  IgnCalcsDone  ; Branch to IgnCalcsDone:
004FBA 7F4FBA                         RunTime:
                                      ;*****************************************************************************************
                                      ; - Do ignition calculations for a 2.56uS time base.
                                      ;*****************************************************************************************
004FBA 7F4FBA MACRO                       IGN_CALCS_256    ; Macro in igncalcsBPEM488.s
                                                           ; This is the first OC value loaded into the timer          (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
                                      ; - Convert the Igntion Span(170 degrees) to time in 2.56uS resolution (Spantk)  (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
004FBA 7F4FBA CC 06 A4                    ldd  #$06A4       ; Decimal 1700 -> Accu D (170 *10 for 0.1 degree resolution calcs) (IGN_CALCS_256)
004FBD 7F4FBD FD 10 1F                    ldy  Degx10tk256  ;(Time for 1 degree of rotation in 2.56uS resolution x 10) (IGN_CALCS_256)
004FC0 7F4FC0 13                          emul              ;(D)x(Y)=Y:D "1700" * Degx10tk256                          (IGN_CALCS_256)
004FC1 7F4FC1 CE 00 64                        ldx  #$0064       ; Decimal 100 -> Accu X                                (IGN_CALCS_256)
004FC4 7F4FC4 11                              ediv              ;(Y:D)/(X)=Y;Rem->D (("STandItrmx10" * Degx10tk256)/100 (IGN_CALCS_256)
                                                                ; = "Spantk"                                           (IGN_CALCS_256)
004FC5 7F4FC5 7C 10 37                        std  Spantk       ; Copy result to "Spantk"                              (IGN_CALCS_256)
                                      ;****************************************************************************************** (IGN_CALCS_256)
                                      ; - Multiply dwell time (mS*10) by the correction and divide by 1000 (%*10)("DwellFin") (IGN_CALCS_256)
                                      ;****************************************************************************************** (IGN_CALCS_256)
004FC8 7F4FC8 FC 10 E0                    ldd   Dwell         ; "Dwell" -> Accu D (mS*10)                              (IGN_CALCS_256)
004FCB 7F4FCB FD 10 E2                    ldy   DwellCor      ; "DwellCor" -> Accu Y (%*10)                            (IGN_CALCS_256)
004FCE 7F4FCE 13                          emul                ;(D)x(Y)=Y:D "Dwell" * "DwellCor"                        (IGN_CALCS_256)
004FCF 7F4FCF CE 03 E8                    ldx   #$03E8        ; Decimal 1000 -> Accu Y (for integer math)              (IGN_CALCS_256)
004FD2 7F4FD2 11                          ediv                ; (Y:D)/(X)=Y;Rem->D (("Dwell" * "DwellCor")/1000) = "DwellFin" (IGN_CALCS_256)
004FD3 7F4FD3 7D 10 E4                        sty   DwellFin      ; Copy result to "DwellFin                           (IGN_CALCS_256)
                                      ;****************************************************************************************** (IGN_CALCS_256)
                                      ; - Convert "DwellFin" to time in 2.56uS resolution.("DwellFintk")               (IGN_CALCS_256)
                                      ;****************************************************************************************** (IGN_CALCS_256)
004FD6 7F4FD6 FC 10 E4                        ldd   DwellFin      ; "DwellFin" -> Accu D                               (IGN_CALCS_256)
004FD9 7F4FD9 CD 27 10                        ldy   #$2710        ; Load index register Y with decimal 10000 (for integer math) (IGN_CALCS_256)
004FDC 7F4FDC 13                              emul                ;(D)x(Y)=Y:D "DwellFin" * 10,000                     (IGN_CALCS_256)
004FDD 7F4FDD CE 01 00                        ldx   #$100         ; Load index register X decimal 256                  (IGN_CALCS_256)
004FE0 7F4FE0 11                          ediv                ;(Y:D)/(X)=Y;Rem->D ("DwellFin" * 10,000) / 256 = "DwellFintk" (IGN_CALCS_256)
004FE1 7F4FE1 7D 10 39                    sty   DwellFintk    ; Copy result to "DwellFintk" (Time required for dwell after (IGN_CALCS_256)
                                                                  ; correction in 2.56uS resolution                    (IGN_CALCS_256)
004FE4 7F4FE4 7D 10 43                        sty   IgnOCadd2     ; Copy result to "IgnOCadd2" (Time required for dwell after (IGN_CALCS_256)
                                                                  ; correction in 2.56uS resolution                    (IGN_CALCS_256)
                                                              ; This is the second OC value loaded into the timer      (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
                                      ; - Correct the current ST value for trim (degrees*10)("STandItrmx10")           (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
004FE7 7F4FE7 FC 10 DE                    ldd   STcurr      ; Current value in ST table (Degrees x 10) -> Accu D       (IGN_CALCS_256)
004FEA 7F4FEA C3 00 CB                    addd  #$00CB      ; (A:B)+(M:M+1)->A:B "STdeg" + decimal 200 = "Igncalc1" (Degrees*10) (IGN_CALCS_256)
004FED 7F4FED F3 10 8E                    addd  Itrmx10     ; (A:B)+(M:M+1)->A:B "Igncalc1" + Itrm10th) = "Igncalc2" (Degrees*10) (IGN_CALCS_256)
004FF0 7F4FF0 83 00 CB                    subd  #$00CB      ; Subtract (A:B)-(M:M+1)=>A:B  "Igncalc2" - decimal 200 = "STandItrm" (IGN_CALCS_256)
                                                                ;(Degrees*10)                                          (IGN_CALCS_256)
004FF3 7F4FF3 7C 10 E6                        std  STandItrmx10 ; Copy result to "STandItrmx10"(Degrees*10)            (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
                                      ; - Convert "STandItrmx10" to time in 2.56uS resolution ("STandItrmtk")          (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
004FF6 7F4FF6 FD 10 1F                    ldy  Degx10tk256   ;(Time for 1 degree of rotation in 2.56uS resolution x 10) (IGN_CALCS_256)
004FF9 7F4FF9 13                          emul              ;(D)x(Y)=Y:D "STandItrmx10" * Degx10tk256                  (IGN_CALCS_256)
004FFA 7F4FFA CE 00 64                        ldx  #$0064       ; Decimal 100 -> Accu X                                (IGN_CALCS_256)
004FFD 7F4FFD 11                              ediv              ;(Y:D)/(X)=Y;Rem->D (("STandItrmx10" * Degx10tk256)/100 (IGN_CALCS_256)
                                                                ; = "Spantk"                                           (IGN_CALCS_256)
004FFE 7F4FFE 7C 10 3B                        std  STandItrmtk  ; Copy result to "STandItrmtk"                         (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
                                      ; - Add "STandItrmtk" and "DwellFintk" = "Advancetk"                             (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
005001 7F5001 FC 10 3B                   ldd   STandItrmtk     ; "STandItrmtk" -> Accu D                               (IGN_CALCS_256)
005004 7F5004 F3 10 39                   addd  DwellFintk      ; (A:B)+(M:M+1)->A:B "STandItrmtk" + "DwellFintk" = "Advancetk" (IGN_CALCS_256)
005007 7F5007 7C 10 3D                   std   Advancetk       ; Copy result to "Advancetk"                            (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
                                      ; - Subtract "Advancetk" from "Spantk" = "Delaytk"                               (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
00500A 7F500A FC 10 37                        ldd   Spantk     ; "Spantk" -> Accu D                                    (IGN_CALCS_256)
00500D 7F500D B3 10 3D                        subd  Advancetk  ; Subtract (A:B)-(M:M+1)=>A:B "Spantk" - "Advancetk" = "Delaytk" (IGN_CALCS_256)
005010 7F5010 7C 10 3F                        std   Delaytk    ; Copy result to "Delaytk"                              (IGN_CALCS_256)
005013 7F5013 7C 10 41                        std   IgnOCadd1  ; Copy result to "IgnOCadd1"                            (IGN_CALCS_256)
005016 7F5016                         IgnCalcsDone:
                                      ;*****************************************************************************************
                                      ; ---------------------- End Of Ignition Calculations Section ----------------------------
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; ------------------------ Injector Calculations Section ---------------------------------
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - The fuel injectors are wired in pairs arranged in the firing order 1&10, 9&4, 3&6, 5&8
                                      ;   7&2. This arrangement allows a "semi sequential" injection strategy with only 5
                                      ;   injector drivers. The cylinder pairs are 54 degrees apart in crankshaft rotation so
                                      ;   the injector pulse for the trailing cylinder will lag the leading cylinder by 54
                                      ;   degrees. The benefits of injector timing is an open question but its effect is most
                                      ;   felt at idle when the injection pulse can be timed to an opeing intake valve. At
                                      ;   higher speeds and loads the effect is less becasue the pulse width is longer than the
                                      ;   opening time of the valve. The engine has 10 trigger points on the crankshaft so
                                      ;   there is lots of choice where to refernce the start of the pulse from. I have chosen
                                      ;   to use the point when the intake valve on the leading cylinder is just starting to
                                      ;   open. Actual injector pulse start time can be delayed from this point by the value in
                                      ;   "InjDelDegx10". The delay in timer ticks will depend on the timer base rate of either
                                      ;   5.12 uS for cranking or 2.56uS for running.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; The determination of whether the engine is cranking or running is made in the
                                      ; State_BPEM488.s module within the Crank Angle Sensor interrupt. It is here that the
                                      ; "crank" and "run" bits of the "engine" bit field are set or cleared.
                                      ;*****************************************************************************************
005016 7F5016 1E 10 EF 02 04              brset engine,crank,CrankMode ; If "crank" bit of "engine" bit field is set branch
                                                                           ; to CrankMode:
00501B 7F501B 18 20 00 CA                     bra   RunMode                ; Branch to RunMode:(no need to test "run" bit)
00501F 7F501F                         CrankMode:
                                      ;    bset    engine,WUEon        ; Set "WUEon" bit of "engine" bit field
                                      ;    bset    engine,ASEon        ; Set "ASEon" bit of "engine" bit field
                                      ;    clr     ASEcnt              ; Clear the after-start enrichment counter variable
                                      ;*****************************************************************************************
                                      ; Check if we are in flood clear or normal crank mode
                                      ;*****************************************************************************************
00501F 7F501F 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
005024 7F5024 CD 08 00                    ldy   #veBins_E     ; Load index register Y with address of first configurable
                                                              ; constant on buffer RAM page 1 (veBins_E)
005027 7F5027 EE EA 03 E4                 ldx   $03E4,Y       ; Load Accu X with value in buffer RAM page 1 offset 996
                                                              ; "FloodClear" (Flood Clear threshold)
00502B 7F502B BE 10 9E                    cpx   TpsPctx10     ; Compare "FloodClear" with "TpsPctx10"
00502E 7F502E 22 0F                       bhi   NoFloodClear  ; If "FloodClear" is greater than "TpsPctx10", branch to
                                                                  ; NoFloodClear: ("TpsPctx10" below threshold so interpolate
                                                                                  ; the cranking pulse width)
005030 7F5030 1C 10 EF 80                     bset  engine,FldClr ; Set "FldClr" bit of "engine" bit field
005034 7F5034 18 79 10 5B                 clrw  CrankPWtk     ; Clear Cranking injector pulswidth timer ticks(uS x 5.12)
005038 7F5038 18 79 10 D2                     clrw  FDpw          ; Fuel delivery pulsewidth (PW - dead time)
                                                                  ; (mS x 1000)(116)
00503C 7F503C 06 54 E8                    job  MainLoopEnd    ; Jump or branch to "MainLoop" (keep looping here until no
                                                                  ; longer in flood clear mode
00503F 7F503F                         NoFloodClear:
00503F 7F503F 1D 10 EF 80                     bclr  engine,FldClr ; Clear "FldClr" bit of "engine" bit field
                                      ;*****************************************************************************************
                                      ; - Calculate the delay time to start injection in 5.12uS resoluion.
                                      ;*****************************************************************************************
005043 7F5043 MACRO                       INJ_DEL_CALC_512    ; Macro in tim_BPEM.s
                                                              ; (prescale 256, 5.12us resolution,                      (INJ_DEL_CALC_512)
                                                              ; max period 335.5ms) (time base for prime or crank modes) (INJ_DEL_CALC_512)
                                      ;***************************************************************************************** (INJ_DEL_CALC_512)
                                      ; - The fuel injectors are wired in pairs arranged in the firing order 1&10, 9&4, 3&6, 5&8 (INJ_DEL_CALC_512)
                                      ;   7&2. This arrangement allows a "semi sequential" injection strategy with only 5 (INJ_DEL_CALC_512)
                                      ;   injector drivers. The cylinder pairs are 54 degrees apart in crankshaft rotation so (INJ_DEL_CALC_512)
                                      ;   the injector pulse for the trailing cylinder will lag the leading cylinder by 54 (INJ_DEL_CALC_512)
                                      ;   degrees. The benefits of injector timing is an open question but its effect is most (INJ_DEL_CALC_512)
                                      ;   felt at idle when the injection pulse can be timed to an opeing intake valve. At (INJ_DEL_CALC_512)
                                      ;   higher speeds and loads the effect is less becasue the pulse width is longer than the (INJ_DEL_CALC_512)
                                      ;   opening time of the valve. The engine has 10 trigger points on the crankshaft so (INJ_DEL_CALC_512)
                                      ;   there is lots of choice where to refernce the start of the pulse from. I have chosen (INJ_DEL_CALC_512)
                                      ;   to use the point when the intake valve on the leading cylinder is just starting to (INJ_DEL_CALC_512)
                                      ;   open. Actual injector pulse start time can be delayed from this point by the value in (INJ_DEL_CALC_512)
                                      ;   "InjDelDegx10". The delay in timer ticks will depend on the timer base rate of either (INJ_DEL_CALC_512)
                                      ;   5.12 uS for cranking or 2.56uS for running.                                  (INJ_DEL_CALC_512)
                                      ;***************************************************************************************** (INJ_DEL_CALC_512)
                                      ;***************************************************************************************** (INJ_DEL_CALC_512)
                                      ; - Calculate the delay time from crankshaft trigger to start of the injector pulse in (INJ_DEL_CALC_512)
                                      ;   5.12uS resolution.                                                           (INJ_DEL_CALC_512)
                                      ;***************************************************************************************** (INJ_DEL_CALC_512)
005043 7F5043 FC 10 DA                    ldd  InjDelDegx10 ; InjDelDegx10 -> Accu Y (Delay to start injection)(Degx10) (INJ_DEL_CALC_512)
005046 7F5046 FD 10 1D                    ldy  Degx10tk512  ;(Time for 1 degree of rotation in 5.12uS resolution x 10) (INJ_DEL_CALC_512)
005049 7F5049 13                          emul              ;(D)x(Y)=Y:D "InjDelDegx10" * Degx10tk512                  (INJ_DEL_CALC_512)
00504A 7F504A CE 00 64                        ldx  #$0064       ; Decimal 100 -> Accu X                                (INJ_DEL_CALC_512)
00504D 7F504D 11                              ediv              ;(Y:D)/(X)=Y;Rem->D ((InjDelDegx10" * Degx10tk512)/100 (INJ_DEL_CALC_512)
                                                                ; = "InjOCadd1"                                        (INJ_DEL_CALC_512)
00504E 7F504E 7C 10 5F                        std  InjOCadd1    ; Copy result to "InjOCadd1"                           (INJ_DEL_CALC_512)
                                      ;*****************************************************************************************
                                      ; - Interpolate injector deadband at current battery voltage
                                      ;*****************************************************************************************
005051 7F5051 MACRO                       DEADBAND_CALCS   ; Macro in injcalcs_BPEM488.s
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                      ; - Interpolate injector deadband at current battery voltage                     (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
005051 7F5051 CC 00 48                    ldd  #$0048      ; Decimal 72 (7.2 volts) -> Accu D                          (DEADBAND_CALCS)
005054 7F5054 3B                          pshd             ; Push to stack (V1)                                        (DEADBAND_CALCS)
005055 7F5055 FC 10 86                    ldd  BatVx10     ; "BatVx10"(battery volts x 10) -> Accu D                   (DEADBAND_CALCS)
005058 7F5058 3B                          pshd             ; Push to stack (V)                                         (DEADBAND_CALCS)
005059 7F5059 CC 00 C0                    ldd  #$00C0      ; Decimal 192 (19.2 volts) -> Accu D                        (DEADBAND_CALCS)
00505C 7F505C 3B                          pshd             ; Push to stack (V2)                                        (DEADBAND_CALCS)
00505D 7F505D FC 10 49                        ldd  DdBndZ1     ;((Injector deadband at 13.2V) - (Injector deadband voltage (DEADBAND_CALCS)
                                                               ; correction * 6)) -> Accu D                            (DEADBAND_CALCS)
005060 7F5060 3B                          pshd             ; Push to stack (Z1)                                        (DEADBAND_CALCS)
005061 7F5061 FC 10 4A                        ldd  DdBndZ2     ;((Injector deadband at 13.2V) + (Injector deadband voltage (DEADBAND_CALCS)
                                                               ; correction * 6)) -> Accu D                            (DEADBAND_CALCS)
005064 7F5064 3B                          pshd             ; Push to stack (Z2)                                        (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        Z2       |  SP+ 0                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        Z1       |  SP+ 2                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V2       |  SP+ 4                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V        |  SP+ 6                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V1       |  SP+ 8                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                      ;                     V      V1      V2      Z1    Z2                            (DEADBAND_CALCS)
005065 7F5065 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ; ==========================                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ; result: D: interpolated result                                                 (DEADBAND_CALCS/2D_IPOL)
                                      ; SSTACK: none                                                                   (DEADBAND_CALCS/2D_IPOL)
                                      ;         no registers are preserved                                             (DEADBAND_CALCS/2D_IPOL)
                                      ;                                                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;    ^ V                                                                         (DEADBAND_CALCS/2D_IPOL)
                                      ;    |                                                                           (DEADBAND_CALCS/2D_IPOL)
                                      ;  Z2+....................*                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;    |                    :                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (DEADBAND_CALCS/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (DEADBAND_CALCS/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (DEADBAND_CALCS/2D_IPOL)
                                      ;    |   :       :        :                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ;                                                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
005065 7F5065 EC 86                                   LDD       \1    ; load V                                         (DEADBAND_CALCS/2D_IPOL)
005067 7F5067 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (DEADBAND_CALCS/2D_IPOL)
005069 7F5069 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
00506B 7F506B EC 80                                   LDD       \5    ; load Z2                                        (DEADBAND_CALCS/2D_IPOL)
00506D 7F506D A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
00506F 7F506F 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (DEADBAND_CALCS/2D_IPOL)
005071 7F5071 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
005073 7F5073 EC 84                                   LDD       \3    ; load V2                                        (DEADBAND_CALCS/2D_IPOL)
005075 7F5075 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (DEADBAND_CALCS/2D_IPOL)
005077 7F5077 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (DEADBAND_CALCS/2D_IPOL)
                                      ;*********************************************************************           (DEADBAND_CALCS/2D_IPOL)
005079 7F5079 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (DEADBAND_CALCS/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (DEADBAND_CALCS/2D_IPOL)
00507B 7F507B B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
00507D 7F507D E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                      ; - Free stack space (result in D)                                               (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
00507F 7F507F 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (DEADBAND_CALCS)
005081 7F5081 7B 10 CC                    stab  Deadband  ; Copy result to "Deadband" (Injector deadband at current battery (DEADBAND_CALCS)
                                      ;*****************************************************************************************
                                      ; - Look up the value for the cranking pulse width in 5.12uS resolution
                                      ;*****************************************************************************************
005084 7F5084 MACRO                       CRANK_COR_LU       ; Macro in injcalcsBPEM.s
                                                               ; resolution)                                           (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ; --------------------------------- Cranking Mode ---------------------------------------- (CRANK_COR_LU)
                                      ; When the engine is cranking the injector pulse width is calculated by          (CRANK_COR_LU)
                                      ; multiplying the value in ReqFuel by the pertentage value in "Crankcor". "Crankcor" is (CRANK_COR_LU)
                                      ; interpolated from the Cranking Pulse table which plots engine temperature in degrees F (CRANK_COR_LU)
                                      ; to 0.1 degree resoluion against percent to 0.1 percent resolution.             (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ; - Look up current value in Cranking Pulsewidth Correction Table (Crankcor)     (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
005084 7F5084 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (CRANK_COR_LU)
005089 7F5089 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (CRANK_COR_LU)
                                                                  ; ->page where the desired curve resides             (CRANK_COR_LU)
00508F 7F508F 18 03 01 90 10 27           movw #$0190,CrvRowOfst  ; 400 -> Offset from the curve page to the curve row( (CRANK_COR_LU)
                                                                      ; tempTable2)(actual offset is 800)              (CRANK_COR_LU)
005095 7F5095 18 03 01 B6 10 29           movw #$01B6,CrvColOfst  ; 438 -> Offset from the curve page to the curve column (CRANK_COR_LU)
                                                                      ; (crankPctTable)(actual offset is 876)          (CRANK_COR_LU)
00509B 7F509B 18 04 10 6C 10 2B           movw Cltx10,CrvCmpVal   ; Engine Coolant Temperature (Degrees F x 10) ->     (CRANK_COR_LU)
                                                                  ; Curve comparison value                             (CRANK_COR_LU)
0050A1 7F50A1 18 0B 09 10 2D              movb #$09,CrvBinCnt     ; 9 -> number of bins in the curve row or column minus 1 (CRANK_COR_LU)
0050A6 7F50A6 16 60 CE                    jsr   CRV_LU_NP         ; Jump to subroutine at CRV_LU_NP:(located in interp_BEEM488.s (CRANK_COR_LU)
                                                                      ; module)                                        (CRANK_COR_LU)
0050A9 7F50A9 7C 10 C0                    std   Crankcor          ; Copy result to Cranking Pulsewidth Correction (% x 10) (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ; - Multiply "ReqFuel"(mS x 10) by "Crankcor" (%) = (mS * 10)                    (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
0050AC 7F50AC 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (CRANK_COR_LU)
0050B1 7F50B1 CD 08 00                    ldy   #veBins_E    ; Load index register Y with address of first configurable (CRANK_COR_LU)
                                                           ; constant on buffer RAM page 1 (vebins)                    (CRANK_COR_LU)
0050B4 7F50B4 EE EA 03 EC                 ldx   $03EC,Y    ; Load Accu X with value in buffer RAM page 1 offset 1004   (CRANK_COR_LU)
                                                           ; ("ReqFuel")                                               (CRANK_COR_LU)
0050B8 7F50B8 B7 54                       tfr  X,D         ; "ReqFuel" -> Accu D                                       (CRANK_COR_LU)
0050BA 7F50BA FD 10 C0                    ldy  Crankcor    ;Cranking Pulsewidth Correction (% x 10) -> Accu Y          (CRANK_COR_LU)
0050BD 7F50BD 13                          emul             ;(D)x(Y)=Y:D "ReqFuel" * "Crankcor"                         (CRANK_COR_LU)
0050BE 7F50BE CE 00 64                        ldx  #$0064      ; Decimal 100 -> Accu X                                 (CRANK_COR_LU)
0050C1 7F50C1 11                              ediv             ;(Y:D)/(X)=Y;Rem->D ("ReqFuel" * "Crankcor" )/100       (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ; - Store the result as "FDpw"(fuel delivery pulse width)(mS x 10)               (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
0050C2 7F50C2 B7 64                           tfr   Y,D        ; ("ReqFuel" * "Crankcor" )/100 -> Accu D               (CRANK_COR_LU)
0050C4 7F50C4 7C 10 D2                        std  FDpw        ; Result -> "FDpw" (fuel delivery pulsewidth (mS x 10)  (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ; - Add "deadband and store the result as "CrankPW"(cranking injector pulsewidth)(mS x 10) (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
0050C7 7F50C7 F3 10 CC                        addd Deadband    ; (A:B)+(M:M+1)->A:B ("FDpw"+"Deadband"="CrankPW"       (CRANK_COR_LU)
0050CA 7F50CA 7C 10 D0                        std  CrankPW     ; Result -> "CrankPW" (cranking injector pulsewidth) (mS x 10) (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ; - Divide "FDpw" by 10 and store as "FD" (Fuel burn calcs have to be in mS)     (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
0050CD 7F50CD FC 10 D2                        ldd  FDpw        ; "FDpw"->Accu D (mS x 10)                              (CRANK_COR_LU)
0050D0 7F50D0 CE 00 0A                        ldx  #$000A      ; Decimal 10->Accu X                                    (CRANK_COR_LU)
0050D3 7F50D3 18 10                           idiv             ; (D)/(X)->Xrem->D ("FDpw"/10="FD")(mS)                 (CRANK_COR_LU)
0050D5 7F50D5 7E 10 D6                        stx  FD          ; Copy reslut to "FD"(mS)(Fuel burn calcs have to be in mS) (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ; - Convert the result to timer ticks in 5.12uS resolution                       (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
0050D8 7F50D8 FC 10 D0                    ldd   CrankPW    ; "CrankPW"->Accu D (cranking injector pulsewidth) (mS x 10) (CRANK_COR_LU)
0050DB 7F50DB CD 27 10                        ldy   #$2710     ; Load index register Y with decimal 10000 (for integer math) (CRANK_COR_LU)
0050DE 7F50DE 13                              emul             ;(D)x(Y)=Y:D ("ReqFuel" * "crankcor" )/100) * 10,000)   (CRANK_COR_LU)
0050DF 7F50DF CE 02 00                        ldx   #$200      ; Decimal 512 -> Accu X                                 (CRANK_COR_LU)
0050E2 7F50E2 11                          ediv             ;(Y:D)/(X)=Y;Rem->D                                         (CRANK_COR_LU)
                                                               ; ((("ReqFuel" * "crankcor" )/100) * 10,000) / 512 = "CrankPWtk" (CRANK_COR_LU)
0050E3 7F50E3 7D 10 5B                    sty   CrankPWtk  ; Copy result to "CrankPWtk" (Cranking pulse width in 5.12uS (CRANK_COR_LU)
0050E6 7F50E6 06 54 E8                    job  MainLoopEnd   ; Jump or branch to "MainLoopEnd:" (keep looping here until no
                                                                 ; longer in crank mode
0050E9 7F50E9                         RunMode:
                                      ;*****************************************************************************************
                                      ; - Calculate the delay time to start injection in 2.56uS resoluion.
                                      ;*****************************************************************************************
0050E9 7F50E9 MACRO                       INJ_DEL_CALC_256    ; Macro in tim_BPEM.s
                                      ;***************************************************************************************** (INJ_DEL_CALC_256)
                                      ; - Calculate the delay time from crankshaft trigger to start of the injector pulse in (INJ_DEL_CALC_256)
                                      ;   2.56uS resolution.                                                           (INJ_DEL_CALC_256)
                                      ;***************************************************************************************** (INJ_DEL_CALC_256)
0050E9 7F50E9 FC 10 DA                    ldd  InjDelDegx10 ; InjDelDegx10 -> Accu Y (Delay to start injection)(Degx10) (INJ_DEL_CALC_256)
0050EC 7F50EC FD 10 1F                    ldy  Degx10tk256  ;(Time for 1 degree of rotation in 2.56uS resolution x 10) (INJ_DEL_CALC_256)
0050EF 7F50EF 13                          emul              ;(D)x(Y)=Y:D "InjDelDegx10" * Degx10tk256                  (INJ_DEL_CALC_256)
0050F0 7F50F0 CE 00 64                        ldx  #$0064       ; Decimal 100 -> Accu X                                (INJ_DEL_CALC_256)
0050F3 7F50F3 11                              ediv              ;(Y:D)/(X)=Y;Rem->D ((InjDelDegx10" * Degx10tk256)/100 (INJ_DEL_CALC_256)
                                                                ; = "InjOCadd1"                                        (INJ_DEL_CALC_256)
0050F4 7F50F4 7C 10 5F                        std  InjOCadd1    ; Copy result to "InjOCadd1"                           (INJ_DEL_CALC_256)
                                      ;*****************************************************************************************
                                      ; The base value for injector pulse width calculations in mS to 0.1mS resolution is called
                                      ; "ReqFuel". It represents the pulse width reqired to achieve 14.7:1 Air/Fuel Ratio at
                                      ; 100% volumetric efficiency. The VE table contains percentage values to 0.1 percent
                                      ; resolultion and plots intake manifold pressure in KPA to 0.1KPA resolution against RPM.
                                      ; These values are part of the injector pulse width calculations for a running engine.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Look up current value in VE table (veCurr)(%x10)
                                      ;*****************************************************************************************
0050F7 7F50F7 MACRO                       VE_LU              ; Macro in injclacsBPEM.s
                                                               ; resolution)                                           (VE_LU)
                                      ;***************************************************************************************** (VE_LU)
                                      ; The base value for injector pulse width calculations in mS to 0.1mS resolution is called (VE_LU)
                                      ; "ReqFuel". It represents the pulse width reqired to achieve 14.7:1 Air/Fuel Ratio at (VE_LU)
                                      ; 100% volumetric efficiency. The VE table contains percentage values to 0.1 percent (VE_LU)
                                      ; resolultion and plots intake manifold pressure in KPA to 0.1KPA resolution against RPM. (VE_LU)
                                      ; These values are part of the injector pulse width calculations for a running engine. (VE_LU)
                                      ;***************************************************************************************** (VE_LU)
                                      ;***************************************************************************************** (VE_LU)
                                      ; - Look up current value in VE table (veCurr)(%x10)                             (VE_LU)
                                      ;***************************************************************************************** (VE_LU)
0050F7 7F50F7 FE 10 7E                    ldx   Mapx10     ; Load index register X with value in "Mapx10"(Column value Manifold (VE_LU)
                                                           ; Absolute Pressure x 10 )                                  (VE_LU)
0050FA 7F50FA FC 10 AC                    ldd   RPM        ; Load double accumulator D with value in "RPM" (Row value RPM) (VE_LU)
0050FD 7F50FD 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (VE_LU)
005102 7F5102 CD 08 00                    ldy   #veBins_E    ; Load index register Y with address of the first value in VE table (VE_LU)
                                                           ;(in RAM)                                                   (VE_LU)
005105 7F5105 16 5F 36                    jsr   3D_LOOKUP  ; Jump to subroutine at 3D_LOOKUP:                          (VE_LU)
005108 7F5108 7C 10 B4                    std   VEcurr     ; Copy result to "VEcurr"(%x10)                             (VE_LU)
                                      ;*****************************************************************************************
                                      ; The Air/Fuel Ratio of the fuel mixture affects how an engine will run. Generally
                                      ; speaking AFRs of less than ~7:1 are too rich to ignite. Ratios of greater than ~20:1 are
                                      ; too lean to ignite. Stoichiometric ratio is at ~14.7:1. This is the ratio at which all
                                      ; the fuel and all the oxygen are consumed and is best for emmisions concerns. Best power
                                      ; is obtained between ratios of ~12:1 and ~13:1. Best economy is obtained as lean as ~18:1
                                      ; in some engines. This controller runs in open loop so the AFR numbers are used as
                                      ; a tuning aid only.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Look up current value in AFR table (afrCurr)(AFRx10)
                                      ;*****************************************************************************************
00510B 7F510B MACRO                       AFR_LU             ; Macro in injclacsBPEM.s
                                      ;***************************************************************************************** (AFR_LU)
                                      ; The Air/Fuel Ratio of the fuel mixture affects how an engine will run. Generally (AFR_LU)
                                      ; speaking AFRs of less than ~7:1 are too rich to ignite. Ratios of greater than ~20:1 are (AFR_LU)
                                      ; too lean to ignite. Stoichiometric ratio is at ~14.7:1. This is the ratio at which all (AFR_LU)
                                      ; the fuel and all the oxygen are consumed and is best for emmisions concerns. Best power (AFR_LU)
                                      ; is obtained between ratios of ~12:1 and ~13:1. Best economy is obtained as lean as ~18:1 (AFR_LU)
                                      ; in some engines. This controller runs in open loop so the AFR numbers are used as (AFR_LU)
                                      ; a tuning aid only.                                                             (AFR_LU)
                                      ;***************************************************************************************** (AFR_LU)
                                      ;***************************************************************************************** (AFR_LU)
                                      ; - Look up current value in AFR table (afrCurr)(AFRx10)                         (AFR_LU)
                                      ;***************************************************************************************** (AFR_LU)
00510B 7F510B FE 10 7E                    ldx   Mapx10     ; Load index register X with value in "Mapx10"(Column value Manifold (AFR_LU)
                                                           ; Absolute Pressure x 10 )                                  (AFR_LU)
00510E 7F510E FC 10 AC                    ldd   RPM        ; Load double accumulator D with value in "RPM" (Row value RPM) (AFR_LU)
005111 7F5111 18 0B FD 00 17              movb  #(BUF_RAM_P3_START>>16),EPAGE  ; Move $FD into EPAGE                   (AFR_LU)
005116 7F5116 CD 08 00                    ldy   #afrBins_E   ; Load index register Y with address of the first value in AFR table (AFR_LU)
                                                           ;(in RAM)                                                   (AFR_LU)
005119 7F5119 16 5F 36                    jsr   3D_LOOKUP  ; Jump to subroutine at 3D_LOOKUP:                          (AFR_LU)
00511C 7F511C 7C 10 B2                    std   AFRcurr    ; Copy result to "AFRcurr"                                  (AFR_LU)
                                      ;*****************************************************************************************
                                      ; ---------------------------- Warm Up Enrichment (WUEcor)--------------------------------
                                      ;
                                      ; Warm Up Enrichment is applied until the engine is up to full operating temperature.
                                      ; "WUEcor" specifies how much fuel is added as a percentage. It is interpolated from the
                                      ; Warm Up Enrichment table which plots engine temperature in degrees F to 0.1 degree
                                      ; resoluion against percent to 0.1 percent resolution and is part of the calculations
                                      ; to determine pulse width when the engine is running.
                                      ;
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; -------------------------- After Start Enrichment (ASEcor)------------------------------
00511F 7F511F                         :
                                      ; Immediately after the engine has started it is normal to need additional fuel for a
                                      ; short period of time. "ASEcor"specifies how much fuel is added as a percentage. It is
                                      ; interpolated from the After Start Enrichment table which plots engine temperature in
                                      ; degrees F to 0.1 degree resoluion against percent to 0.1 percent resolution and is added
                                      ; to "WUEcor" as part of the calculations to determine pulse width when the engine is
                                      ; running.
                                      ;
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; ----------------------- After Start Enrichment Taper (ASErev)---------------------------
                                      ;
                                      ; After Start Enrichment is applied for a specified number of engine revolutions after
                                      ; start up. This number is interpolated from the After Start Enrichment Taper table which
                                      ; plots engine temperature in degrees F to 0.1 degree resoluion against revolutions.
                                      ; The ASE starts with the value of "ASEcor" first and is linearly interpolated down to
                                      ; zero after "ASErev" crankshaft revolutions.
                                      ;
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Determine if we require Warmup Enrichments and or After Start Enrichments
                                      ;*****************************************************************************************
00511F 7F511F 1E 10 EF 08 0A              brset  engine,ASEon,CHECK_ASE   ; If "ASEon" bit of "engine" bit field is set, branch
                                                                              ; to CHECK_ASE:
005124 7F5124 1F 10 EF 10 02              brclr  engine,WUEon,No_WUE_ASE1 ; If "WUEon" bit of "engine" bit field is clear
                                                                          ; Branch to No_WUE_ASE1: (engine is warm and ASE is
                                                                                                              ; not in progress so no enrichments are required)
005129 7F5129 20 03                       bra  CHECK_ASE                  ; branch to CHECK_ASE:
00512B 7F512B                         No_WUE_ASE1:
00512B 7F512B 06 52 02                    job No_WUE_ASE                     ; Jump or branch to No_WUE_ASE (long branch)
00512E 7F512E                         CHECK_ASE:
                                      ;*****************************************************************************************
                                      ; - WUE and or ASE is in progress so do the WUE/ASE calculations
                                      ;*****************************************************************************************
00512E 7F512E MACRO                       WUE_ASE_CALCS       ; Macro in injcalcsBPEM.s
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; ---------------------------- Warm Up Enrichment (WUEcor)-------------------------------- (WUE_ASE_CALCS)
                                      ;                                                                                (WUE_ASE_CALCS)
                                      ; Warm Up Enrichment is applied until the engine is up to full operating temperature. (WUE_ASE_CALCS)
                                      ; "WUEcor" specifies how much fuel is added as a percentage. It is interpolated from the (WUE_ASE_CALCS)
                                      ; Warm Up Enrichment table which plots engine temperature in degrees F to 0.1 degree (WUE_ASE_CALCS)
                                      ; resoluion against percent to 0.1 percent resolution and is part of the calculations (WUE_ASE_CALCS)
                                      ; to determine pulse width when the engine is running.                           (WUE_ASE_CALCS)
                                      ;                                                                                (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; -------------------------- After Start Enrichment (ASEcor)------------------------------ (WUE_ASE_CALCS)
00512E 7F512E                         :                                                                                (WUE_ASE_CALCS)
                                      ; Immediately after the engine has started it is normal to need additional fuel for a (WUE_ASE_CALCS)
                                      ; short period of time. "ASEcor"specifies how much fuel is added as a percentage. It is (WUE_ASE_CALCS)
                                      ; interpolated from the After Start Enrichment table which plots engine temperature in (WUE_ASE_CALCS)
                                      ; degrees F to 0.1 degree resoluion against percent to 0.1 percent resolution and is added (WUE_ASE_CALCS)
                                      ; to "WUEcor" as part of the calculations to determine pulse width when the engine is (WUE_ASE_CALCS)
                                      ; running.                                                                       (WUE_ASE_CALCS)
                                      ;                                                                                (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; ----------------------- After Start Enrichment Taper (ASErev)--------------------------- (WUE_ASE_CALCS)
                                      ;                                                                                (WUE_ASE_CALCS)
                                      ; After Start Enrichment is applied for a specified number of engine revolutions after (WUE_ASE_CALCS)
                                      ; start up. This number is interpolated from the After Start Enrichment Taper table which (WUE_ASE_CALCS)
                                      ; plots engine temperature in degrees F to 0.1 degree resoluion against revolutions. (WUE_ASE_CALCS)
                                      ; The ASE starts with the value of "ASEcor" first and is linearly interpolated down to (WUE_ASE_CALCS)
                                      ; zero after "ASErev" crankshaft revolutions.                                    (WUE_ASE_CALCS)
                                      ;                                                                                (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; - Look up current value in Warmup Enrichment Table (WUEcor)                    (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
00512E 7F512E 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (WUE_ASE_CALCS)
005133 7F5133 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (WUE_ASE_CALCS)
                                                                  ; ->page where the desired curve resides             (WUE_ASE_CALCS)
005139 7F5139 18 03 01 86 10 27           movw #$0186,CrvRowOfst  ; 390 -> Offset from the curve page to the curve row (WUE_ASE_CALCS)
                                                                      ; (tempTable1)(actual offset is 780              (WUE_ASE_CALCS)
00513F 7F513F 18 03 01 D4 10 29           movw #$01D4,CrvColOfst  ; 468 -> Offset from the curve page to the curve column( (WUE_ASE_CALCS)
                                                                      ; wueBins)(actual offset is 936)                 (WUE_ASE_CALCS)
005145 7F5145 18 04 10 6C 10 2B           movw Cltx10,CrvCmpVal   ; Engine Coolant Temperature (Degrees F x 10) ->     (WUE_ASE_CALCS)
                                                                  ; Curve comparison value                             (WUE_ASE_CALCS)
00514B 7F514B 18 0B 09 10 2D              movb #$09,CrvBinCnt     ; 9 -> number of bins in the curve row or column minus 1 (WUE_ASE_CALCS)
005150 7F5150 16 60 CE                    jsr   CRV_LU_NP         ; Jump to subroutine at CRV_LU_NP:(located in        (WUE_ASE_CALCS)
                                                                      ; interp_BEEM488.s module)                       (WUE_ASE_CALCS)
005153 7F5153 7C 10 BA                    std   WUEcor            ; Copy result to Warmup Enrichment Correction (% x 10) (WUE_ASE_CALCS)
005156 7F5156 1F 10 EF 08 02              brclr engine,ASEon,WUEcheck1 ; If "ASEon" bit of "engine" bit field is clear, (WUE_ASE_CALCS)
                                                                      ; branch to WUEcheck1:(ASE is finished, see if we are (WUE_ASE_CALCS)
                                                                                                      ; still in warm up mode) (WUE_ASE_CALCS)
00515B 7F515B 20 03                       bra  N0_WUEcheck_LONG_BRANCH ; Branch to N0_WUEcheck_LONG_BRANCH:            (WUE_ASE_CALCS)
00515D 7F515D                         WUEcheck1:                                                                       (WUE_ASE_CALCS)
00515D 7F515D 06 51 F7                    job   WUEcheck              ; Jump or branch to WUEcheck: (long branch)      (WUE_ASE_CALCS)
005160 7F5160                         N0_WUEcheck_LONG_BRANCH:                                                         (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; - Look up current value in Afterstart Enrichment Percentage Table (ASEcor)     (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
005160 7F5160 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (WUE_ASE_CALCS)
005165 7F5165 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (WUE_ASE_CALCS)
                                                                  ; ->page where the desired curve resides             (WUE_ASE_CALCS)
00516B 7F516B 18 03 01 90 10 27           movw #$0190,CrvRowOfst  ; 400 -> Offset from the curve page to the curve row (WUE_ASE_CALCS)
                                                                      ; (tempTable2)(actual offset is 800)             (WUE_ASE_CALCS)
005171 7F5171 18 03 01 C0 10 29           movw #$01C0,CrvColOfst  ; 448 -> Offset from the curve page to the curve column (WUE_ASE_CALCS)
                                                                      ; (asePctTable)(actual offset is 896)            (WUE_ASE_CALCS)
005177 7F5177 18 04 10 6C 10 2B           movw Cltx10,CrvCmpVal   ; Engine Coolant Temperature (Degrees F x 10) ->     (WUE_ASE_CALCS)
                                                                  ; Curve comparison value                             (WUE_ASE_CALCS)
00517D 7F517D 18 0B 09 10 2D              movb #$09,CrvBinCnt     ; 9 -> number of bins in the curve row or column minus 1 (WUE_ASE_CALCS)
005182 7F5182 16 60 CE                    jsr   CRV_LU_NP         ; Jump to subroutine at CRV_LU_NP:(located in        (WUE_ASE_CALCS)
                                                                      ; interp_BEEM488.s module)                       (WUE_ASE_CALCS)
005185 7F5185 7C 10 BC                    std   ASEcor            ; Copy result to  Afterstart Enrichmnet Correction (% x 10) (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; - Look up current value in Afterstart Enrichment Taper Table (ASErev)          (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
005188 7F5188 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (WUE_ASE_CALCS)
00518D 7F518D 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (WUE_ASE_CALCS)
                                                                  ; ->page where the desired curve resides             (WUE_ASE_CALCS)
005193 7F5193 18 03 01 90 10 27           movw #$0190,CrvRowOfst  ; 400 -> Offset from the curve page to the curve row (WUE_ASE_CALCS)
                                                                      ; (tempTable2)(actual offset is 800)             (WUE_ASE_CALCS)
005199 7F5199 18 03 01 CA 10 29           movw #$01CA,CrvColOfst  ; 458 -> Offset from the curve page to the curve column (WUE_ASE_CALCS)
                                                                      ; (aseRevTable)(actual offset is 916)            (WUE_ASE_CALCS)
00519F 7F519F 18 04 10 6C 10 2B           movw Cltx10,CrvCmpVal   ; Engine Coolant Temperature (Degrees F x 10) ->     (WUE_ASE_CALCS)
                                                                  ; Curve comparison value                             (WUE_ASE_CALCS)
0051A5 7F51A5 18 0B 09 10 2D              movb #$09,CrvBinCnt     ; 9 -> number of bins in the curve row or column minus 1 (WUE_ASE_CALCS)
0051AA 7F51AA 16 60 CE                    jsr   CRV_LU_NP         ; Jump to subroutine at CRV_LU_NP:(located in        (WUE_ASE_CALCS)
                                                                      ; interp_BEEM488.s module)                       (WUE_ASE_CALCS)
0051AD 7F51AD 7C 10 55                    std   ASErev            ; Copy result to Afterstart Enrichment Taper (revolutions) (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; Interpolate "ASEcor" as "ASErev" is decremented. ASErev is decremented every revolution (WUE_ASE_CALCS)
                                      ; in the Crank Angle Sensor interrupt in the state_BEEM488 module                (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
0051B0 7F51B0 CC 00 00                    ldd  #$0000      ; Load double accumulator with zero (final value of "ASEcyc") (WUE_ASE_CALCS)
0051B3 7F51B3 3B                          pshd             ; Push to stack (V1)                                        (WUE_ASE_CALCS)
0051B4 7F51B4 FC 10 57                    ldd  ASEcnt      ; Load double accumulator with "ASEcnt"                     (WUE_ASE_CALCS)
0051B7 7F51B7 3B                          pshd             ; Push to stack (V)                                         (WUE_ASE_CALCS)
0051B8 7F51B8 FC 10 55                    ldd  ASErev      ; Load double accumulator with (Start value of "ASErev")    (WUE_ASE_CALCS)
0051BB 7F51BB 3B                          pshd             ; Push to stack (V2)                                        (WUE_ASE_CALCS)
0051BC 7F51BC CC 00 00                    ldd  #$0000      ; Load double accumulator with zero (Low range of "ASEcor") (WUE_ASE_CALCS)
0051BF 7F51BF 3B                          pshd             ; Push to stack (Z1)                                        (WUE_ASE_CALCS)
0051C0 7F51C0 FC 10 BC                    ldd  ASEcor      ; Load double accumulator with (High range of "ASEcor")     (WUE_ASE_CALCS)
0051C3 7F51C3 3B                          pshd             ; Push to stack (Z2)                                        (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                                      ;    +--------+--------+                                         (WUE_ASE_CALCS)
                                                      ;    |        Z2       |  SP+ 0                                  (WUE_ASE_CALCS)
                                                      ;    +--------+--------+                                         (WUE_ASE_CALCS)
                                                      ;    |        Z1       |  SP+ 2                                  (WUE_ASE_CALCS)
                                                      ;    +--------+--------+                                         (WUE_ASE_CALCS)
                                                      ;    |        V2       |  SP+ 4                                  (WUE_ASE_CALCS)
                                                      ;    +--------+--------+                                         (WUE_ASE_CALCS)
                                                      ;    |        V        |  SP+ 6                                  (WUE_ASE_CALCS)
                                                      ;    +--------+--------+                                         (WUE_ASE_CALCS)
                                                      ;    |        V1       |  SP+ 8                                  (WUE_ASE_CALCS)
                                                      ;    +--------+--------+                                         (WUE_ASE_CALCS)
                                      ;                     V      V1      V2      Z1    Z2                            (WUE_ASE_CALCS)
0051C4 7F51C4 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (WUE_ASE_CALCS/2D_IPOL)
                                      ; ==========================                                                     (WUE_ASE_CALCS/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ; result: D: interpolated result                                                 (WUE_ASE_CALCS/2D_IPOL)
                                      ; SSTACK: none                                                                   (WUE_ASE_CALCS/2D_IPOL)
                                      ;         no registers are preserved                                             (WUE_ASE_CALCS/2D_IPOL)
                                      ;                                                                                (WUE_ASE_CALCS/2D_IPOL)
                                      ;    ^ V                                                                         (WUE_ASE_CALCS/2D_IPOL)
                                      ;    |                                                                           (WUE_ASE_CALCS/2D_IPOL)
                                      ;  Z2+....................*                                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;    |                    :                                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (WUE_ASE_CALCS/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (WUE_ASE_CALCS/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (WUE_ASE_CALCS/2D_IPOL)
                                      ;    |   :       :        :                                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (WUE_ASE_CALCS/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (WUE_ASE_CALCS/2D_IPOL)
                                      ;                                                                                (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
0051C4 7F51C4 EC 86                                   LDD       \1    ; load V                                         (WUE_ASE_CALCS/2D_IPOL)
0051C6 7F51C6 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (WUE_ASE_CALCS/2D_IPOL)
0051C8 7F51C8 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
0051CA 7F51CA EC 80                                   LDD       \5    ; load Z2                                        (WUE_ASE_CALCS/2D_IPOL)
0051CC 7F51CC A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
0051CE 7F51CE 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (WUE_ASE_CALCS/2D_IPOL)
0051D0 7F51D0 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
0051D2 7F51D2 EC 84                                   LDD       \3    ; load V2                                        (WUE_ASE_CALCS/2D_IPOL)
0051D4 7F51D4 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (WUE_ASE_CALCS/2D_IPOL)
0051D6 7F51D6 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (WUE_ASE_CALCS/2D_IPOL)
                                      ;*********************************************************************           (WUE_ASE_CALCS/2D_IPOL)
0051D8 7F51D8 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (WUE_ASE_CALCS/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (WUE_ASE_CALCS/2D_IPOL)
0051DA 7F51DA B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
0051DC 7F51DC E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; - Free stack space (result in D)                                               (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
0051DE 7F51DE 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (WUE_ASE_CALCS)
0051E0 7F51E0 7C 10 BC                    std   ASEcor    ; Copy result to "ASEcor" ASE correction (%)                 (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; - "WUEcor" + "ASEcor" = "WUEandASEcor" (%*10)                                  (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
0051E3 7F51E3 FC 10 BA                   ldd   WUEcor        ; "WUEcor" (%x10) -> Accu D                               (WUE_ASE_CALCS)
0051E6 7F51E6 F3 10 BC                   addd  ASEcor        ; (A:B)+(M:M+1)->A:B "WUEcor" + "ASEcor" = "WUEcor" (%*10) (WUE_ASE_CALCS)
0051E9 7F51E9 7C 10 BE                   std   WUEandASEcor  ; Copy result to "WUEandASEcor" (%*10)                    (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; - Check to see if we are finished with ASE                                     (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
0051EC 7F51EC FC 10 57                   ldd  ASEcnt     ; "ASEcnt" -> Accu D                                          (WUE_ASE_CALCS)
0051EF 7F51EF 27 02                      beq  ASEdone    ; If "ASEcnt" has been decremented to zero branch to ASEdone: (WUE_ASE_CALCS)
0051F1 7F51F1 20 04                      bra  WUEcheck   ; Branch to WUEcheck:                                         (WUE_ASE_CALCS)
0051F3 7F51F3                         ASEdone:                                                                         (WUE_ASE_CALCS)
0051F3 7F51F3 1D 10 EF 08                bclr engine,ASEon  ; Clear "ASEon" bit of "engine" bit field                  (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; - Check to see if we are finished with WUE                                     (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
0051F7 7F51F7                         WUEcheck:                                                                        (WUE_ASE_CALCS)
0051F7 7F51F7 FC 10 BA                   ldd  WUEcor        ; "WUEcor" -> Accu D                                       (WUE_ASE_CALCS)
0051FA 7F51FA 27 02                      beq  WUEdone       ; If "WUEcor" has been reduced to zero branch to WUEdone:  (WUE_ASE_CALCS)
0051FC 7F51FC 20 04                      bra  WUEandASEdone ; Branch to WUEandASEdone:                                 (WUE_ASE_CALCS)
0051FE 7F51FE                         WUEdone:                                                                         (WUE_ASE_CALCS)
0051FE 7F51FE 1D 10 EF 10                bclr engine,WUEon  ; Clear "WUEon" bit of "engine" bit field                  (WUE_ASE_CALCS)
005202 7F5202                         WUEandASEdone:        ; Finished with WUE and ASE                                (WUE_ASE_CALCS)
005202 7F5202                         No_WUE_ASE:
                                      ;*****************************************************************************************
                                      ; - When the engine is running and the throttle is opened quickly a richer mixture is
                                      ;   required for a short period of time. This additional pulse width time is called
                                      ;   Throttle Opening Enrichment. Conversly, when the engine is in over run
                                      ;   conditions no fuel is required so the injectors can be turned off, subject to
                                      ;   permissives. This condtion is call Overrun Fuel Cut.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Determine if we are in steady state, TOE mode or OFC mode and do the calculations
                                      ;   accordingly.
                                      ;*****************************************************************************************
005202 7F5202 MACRO                       TOE_OFC_CALCS       ; Macro in injcalcsBPEM.s
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - When the engine is running and the throttle is opened quickly a richer mixture is (TOE_OFC_CALCS)
                                      ;   required for a short period of time. This additional pulse width time is called (TOE_OFC_CALCS)
                                      ;   Throttle Opening Enrichment. Conversly, when the engine is in over run       (TOE_OFC_CALCS)
                                      ;   conditions no fuel is required so the injectors can be turned off, subject to (TOE_OFC_CALCS)
                                      ;   permissives. This condtion is call Overrun Fuel Cut.                         (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Check to see if the throttle is opening or if it is at steady state or closing (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
005202 7F5202                         TOE_OFC_CHK:                                                                     (TOE_OFC_CALCS)
005202 7F5202 FE 10 9E                    ldx   TpsPctx10       ; Load index register X with value in "TpsPctx10"      (TOE_OFC_CALCS)
005205 7F5205 BE 10 45                    cpx   TpsPctx10last   ; Compare with value in "TpsPctx10last"                (TOE_OFC_CALCS)
005208 7F5208 18 23 01 5E                 bls   OFC_CHK         ; If "TpsPctx10" is equal to or less than "TpsPctx10last" branch to (TOE_OFC_CALCS)
                                                                    ; OFC_CHK:(Throttle is steady or closing so check for OFC permissives) (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Current Throttle position percent - throttle position percent 100mS ago = throttle position (TOE_OFC_CALCS)
                                      ;   percent difference over time in seconds "TpsPctx10" - "TpsPctx10last" = "TpsPctDOT" (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
00520C 7F520C 18 B0 10 45                 subx  TpsPctx10last   ; (X)-(M:M-1)=>X Subtract "TpsPctx10last" from "tTpsPctx10" (TOE_OFC_CALCS)
005210 7F5210 7E 10 C2                    stx   TpsPctDOT       ; Copy result to "TpsPctDOT"                           (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
                                      ; - The throttle is opening. Check to see if it is opening at a rate greater than the threshold (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
005213 7F5213 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
005218 7F5218 CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                                ; on buffer RAM page 1 (veBins_E)                      (TOE_OFC_CALCS)
00521B 7F521B EE EA 03 D0                 ldx   $03D0,Y         ; Load Accu D with value in buffer RAM page 1 offset 976 (tpsThresh) (TOE_OFC_CALCS)
                                                                ;(TPSdot threshold)(offset = 970)($03CA)               (TOE_OFC_CALCS)
00521F 7F521F BE 10 C2                    cpx   TpsPctDOT       ; Compare "tpsThresh" with "TpsPctDOT"                 (TOE_OFC_CALCS)
005222 7F5222 18 22 01 2F                 bhi   TOE_CHK_TIME    ; If "tpsThresh" is greater than "TpsPctDOT", branch to TOE_CHK_TIME: (TOE_OFC_CALCS)
                                                                ; ("TpsPctDOT" below threshold so check if acceleration is done) (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
                                      ; - The throttle is opening at a rate greater then the threshold. Check to see if TOE is in (TOE_OFC_CALCS)
                                      ;   progress.                                                                    (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
005226 7F5226 1E 10 EF 20 29              brset engine,TOEon,TOE_CALC ; If "TOEon" bit of "engine" bit field           (TOE_OFC_CALCS)
                                                                ; is set, branch to TOE_CALC: (TOE in progress)        (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
                                      ;- The throttle is opening at a rate greater than the threshold and TOE is not in progress (TOE_OFC_CALCS)
                                      ;  so prepare to add in the enrichement.                                         (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
00522B 7F522B 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
005230 7F5230 CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                              ; on buffer RAM page 1 (veBins_E)                        (TOE_OFC_CALCS)
005233 7F5233 A6 EA 01 DE                 ldaa   $01DE,Y      ; Load Accu A with value in buffer RAM page 1 offset 478 (First element (TOE_OFC_CALCS)
                                                              ; of "TOEbins" table)(Start with first element, will determine actual (TOE_OFC_CALCS)
                                                              ; next time around)(actual offset is 956)                (TOE_OFC_CALCS)
005237 7F5237 7A 10 C7                    staa  TOEpct        ; Copy to Throttle Opening Enrichment percent(used in later calculations) (TOE_OFC_CALCS)
00523A 7F523A 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
00523F 7F523F CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                              ; on buffer RAM page 1 (veBins_E)                        (TOE_OFC_CALCS)
005242 7F5242 A6 EA 03 D2                 ldaa   $03D2,Y      ; Load Accu A with value in buffer RAM page 1 offset 978 (TOEtime_F) (TOE_OFC_CALCS)
005246 7F5246 7A 10 48                    staa  TOEtim        ; Copy to "TOEtim" (Throttle Opening Enrichment duration (TOE_OFC_CALCS)
                                                                  ; (decremented every 100 mS))                        (TOE_OFC_CALCS)
005249 7F5249 1C 10 EF 20                 bset  engine,TOEon  ; Set "TOEon" bit of "engine" variable (in TOE mode)     (TOE_OFC_CALCS)
00524D 7F524D 1D 10 EF 40                 bclr  engine,OFCon  ; Clear "OFCon" bit of "engine" variable (not in OFC mode) (TOE_OFC_CALCS)
005251 7F5251 06 53 D5                    job   OFC_LOOP      ; Jump or branch to OFC_LOOP:(fall through)              (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Calculate the cold temperature add-on enrichment "ColdAddpct" (%) from -39.72 (TOE_OFC_CALCS)
                                      ;   degrees to 179.9 degrees.                                                    (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
005254 7F5254                         TOE_CALC:                                                                        (TOE_OFC_CALCS)
005254 7F5254 FC 10 6A                    ldd  cltADC       ; "cltADC" -> D                                            (TOE_OFC_CALCS)
005257 7F5257 8C 00 93                    cpd  #$0093       ; Compare "cltADC" with decimal 147(ADC @ 179.9F)          (TOE_OFC_CALCS)
00525A 7F525A 23 02                       bls  RailColdAdd  ; If "cltADC" is lower or the same as 147, branch to RailColdAdd: (TOE_OFC_CALCS)
00525C 7F525C 20 05                       bra  DoColdAdd    ; Branch to DoColdAdd:                                     (TOE_OFC_CALCS)
00525E 7F525E                         RailColdAdd:                                                                     (TOE_OFC_CALCS)
00525E 7F525E 79 10 C5                   clr   ColdAddpct   ; Clear "ColdAddpct" (no cold adder)                       (TOE_OFC_CALCS)
005261 7F5261 20 3C                      bra   ColdAddDone  ; Branch to ColdAddDone: (skip over)                       (TOE_OFC_CALCS)
005263 7F5263                         DoColdAdd:                                                                       (TOE_OFC_CALCS)
005263 7F5263 CC 00 93                    ldd  #$0093      ; Load double accumulator with decimal 147 (ADC @ 179.9F)   (TOE_OFC_CALCS)
005266 7F5266 3B                          pshd             ; Push to stack (V1)                                        (TOE_OFC_CALCS)
005267 7F5267 FC 10 6A                    ldd  cltAdc      ; Load double accumulator with "cltAdc"                     (TOE_OFC_CALCS)
00526A 7F526A 3B                          pshd             ; Push to stack (V)                                         (TOE_OFC_CALCS)
00526B 7F526B CC 03 EB                    ldd  #$03EB      ; Load double accumulator with decimal 1003 (ADC @ -39.72F) (TOE_OFC_CALCS)
00526E 7F526E 3B                          pshd             ; Push to stack (V2)                                        (TOE_OFC_CALCS)
00526F 7F526F CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (added amount at 179.9F) (TOE_OFC_CALCS)
005272 7F5272 3B                          pshd             ; Push to stack (Z1)                                        (TOE_OFC_CALCS)
005273 7F5273 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
005278 7F5278 CD 08 00                    ldy   #veBins_E    ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                           ; on buffer RAM page 1 (veBins_E)                           (TOE_OFC_CALCS)
00527B 7F527B EC EA 03 D4                 ldd   $03D4,Y    ; Load Accu D with value in buffer RAM page 1 (ColdAdd_F)(offset 980) (TOE_OFC_CALCS)
                                                           ;(added amount at -39.72F)                                  (TOE_OFC_CALCS)
00527F 7F527F 3B                          pshd             ; Push to stack (Z2)                                        (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        Z2       |  SP+ 0                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        Z1       |  SP+ 2                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        V2       |  SP+ 4                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        V        |  SP+ 6                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        V1       |  SP+ 8                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                      ;                     V      V1      V2      Z1    Z2                            (TOE_OFC_CALCS)
005280 7F5280 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ; ==========================                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ; result: D: interpolated result                                                 (TOE_OFC_CALCS/2D_IPOL)
                                      ; SSTACK: none                                                                   (TOE_OFC_CALCS/2D_IPOL)
                                      ;         no registers are preserved                                             (TOE_OFC_CALCS/2D_IPOL)
                                      ;                                                                                (TOE_OFC_CALCS/2D_IPOL)
                                      ;    ^ V                                                                         (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |                                                                           (TOE_OFC_CALCS/2D_IPOL)
                                      ;  Z2+....................*                                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |                    :                                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (TOE_OFC_CALCS/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |   :       :        :                                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ;                                                                                (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
005280 7F5280 EC 86                                   LDD       \1    ; load V                                         (TOE_OFC_CALCS/2D_IPOL)
005282 7F5282 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (TOE_OFC_CALCS/2D_IPOL)
005284 7F5284 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
005286 7F5286 EC 80                                   LDD       \5    ; load Z2                                        (TOE_OFC_CALCS/2D_IPOL)
005288 7F5288 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
00528A 7F528A 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (TOE_OFC_CALCS/2D_IPOL)
00528C 7F528C B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
00528E 7F528E EC 84                                   LDD       \3    ; load V2                                        (TOE_OFC_CALCS/2D_IPOL)
005290 7F5290 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (TOE_OFC_CALCS/2D_IPOL)
005292 7F5292 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (TOE_OFC_CALCS/2D_IPOL)
                                      ;*********************************************************************           (TOE_OFC_CALCS/2D_IPOL)
005294 7F5294 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (TOE_OFC_CALCS/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (TOE_OFC_CALCS/2D_IPOL)
005296 7F5296 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
005298 7F5298 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Free stack space (result in D)                                               (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
00529A 7F529A 1B 8A                       leas  10,SP       ; Stack pointer -> bottom of stack                         (TOE_OFC_CALCS)
00529C 7F529C 7B 10 C5                    stab  ColdAddpct  ; Copy result to "ColdAddpct" (%)(bins are byte values)    (TOE_OFC_CALCS)
00529F 7F529F                         ColdAddDone:                                                                     (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Calculate the cold temperature multiplier enrichment "ColdMulpct" (%), from -39.72 degrees (TOE_OFC_CALCS)
                                      ;   to 179.9 degrees.                                                            (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
00529F 7F529F FC 10 6A                    ldd  cltADC       ; "cltADC" -> D                                            (TOE_OFC_CALCS)
0052A2 7F52A2 8C 00 93                    cpd  #$0093       ; Compare "cltADC" with decimal 147(ADC @ 179.9F)          (TOE_OFC_CALCS)
0052A5 7F52A5 23 02                       bls  RailColdMul  ; If "cltADC" is lower or the same as 147, branch to RailColdMul: (TOE_OFC_CALCS)
0052A7 7F52A7 20 07                       bra  DoColdMul    ; Branch to DoColdMul: (skip over)                         (TOE_OFC_CALCS)
0052A9 7F52A9                         RailColdMul:                                                                     (TOE_OFC_CALCS)
0052A9 7F52A9 18 0B 64 10 C6             movb #$64,ColdMulpct  ; Decimal 100 -> "ColdMulpct" (100% = no multiplier))   (TOE_OFC_CALCS)
0052AE 7F52AE 20 3C                      bra   ColdMulDone     ; Branch to ColdMulDone: (skip over)                    (TOE_OFC_CALCS)
0052B0 7F52B0                         DoColdMul:                                                                       (TOE_OFC_CALCS)
0052B0 7F52B0 CC 00 93                    ldd  #$0093      ; Load double accumulator with decimal 147 (ADC @ 179.9F)   (TOE_OFC_CALCS)
0052B3 7F52B3 3B                          pshd             ; Push to stack (V1)                                        (TOE_OFC_CALCS)
0052B4 7F52B4 FC 10 6A                    ldd  cltAdc      ; Load double accumulator with "cltAdc"                     (TOE_OFC_CALCS)
0052B7 7F52B7 3B                          pshd             ; Push to stack (V)                                         (TOE_OFC_CALCS)
0052B8 7F52B8 CC 03 EB                    ldd  #$03EB      ; Load double accumulator with decimal 1003 (ADC @ -39.72F) (TOE_OFC_CALCS)
0052BB 7F52BB 3B                          pshd             ; Push to stack (V2)                                        (TOE_OFC_CALCS)
0052BC 7F52BC CC 00 64                    ldd  #$0064      ; Load double accumulator with decimal 100 (multiplier amount at 179.9F) (TOE_OFC_CALCS)
                                                           ;(1.00 multiplier at 180 degrees)                           (TOE_OFC_CALCS)
0052BF 7F52BF 3B                          pshd             ; Push to stack (Z1)                                        (TOE_OFC_CALCS)
0052C0 7F52C0 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
0052C5 7F52C5 CD 08 00                    ldy   #veBins_E    ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                           ; on buffer RAM page 1 (veBins_E)                           (TOE_OFC_CALCS)
0052C8 7F52C8 EC EA 03 D6                 ldd   $03D6,Y    ; Load Accu D with value in buffer RAM page 1 "ColdMul_F"(offset 982) (TOE_OFC_CALCS)
                                                           ;(added amount at -39.72F)                                  (TOE_OFC_CALCS)
0052CC 7F52CC 3B                          pshd             ; Push to stack (Z2)                                        (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        Z2       |  SP+ 0                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        Z1       |  SP+ 2                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        V2       |  SP+ 4                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        V        |  SP+ 6                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        V1       |  SP+ 8                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                      ;                     V      V1      V2      Z1    Z2                            (TOE_OFC_CALCS)
0052CD 7F52CD MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ; ==========================                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ; result: D: interpolated result                                                 (TOE_OFC_CALCS/2D_IPOL)
                                      ; SSTACK: none                                                                   (TOE_OFC_CALCS/2D_IPOL)
                                      ;         no registers are preserved                                             (TOE_OFC_CALCS/2D_IPOL)
                                      ;                                                                                (TOE_OFC_CALCS/2D_IPOL)
                                      ;    ^ V                                                                         (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |                                                                           (TOE_OFC_CALCS/2D_IPOL)
                                      ;  Z2+....................*                                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |                    :                                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (TOE_OFC_CALCS/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |   :       :        :                                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ;                                                                                (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
0052CD 7F52CD EC 86                                   LDD       \1    ; load V                                         (TOE_OFC_CALCS/2D_IPOL)
0052CF 7F52CF A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (TOE_OFC_CALCS/2D_IPOL)
0052D1 7F52D1 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
0052D3 7F52D3 EC 80                                   LDD       \5    ; load Z2                                        (TOE_OFC_CALCS/2D_IPOL)
0052D5 7F52D5 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
0052D7 7F52D7 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (TOE_OFC_CALCS/2D_IPOL)
0052D9 7F52D9 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
0052DB 7F52DB EC 84                                   LDD       \3    ; load V2                                        (TOE_OFC_CALCS/2D_IPOL)
0052DD 7F52DD A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (TOE_OFC_CALCS/2D_IPOL)
0052DF 7F52DF B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (TOE_OFC_CALCS/2D_IPOL)
                                      ;*********************************************************************           (TOE_OFC_CALCS/2D_IPOL)
0052E1 7F52E1 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (TOE_OFC_CALCS/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (TOE_OFC_CALCS/2D_IPOL)
0052E3 7F52E3 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
0052E5 7F52E5 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Free stack space (result in D)                                               (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
0052E7 7F52E7 1B 8A                       leas  10,SP         ; Stack pointer -> bottom of stack                       (TOE_OFC_CALCS)
0052E9 7F52E9 7B 10 C6                    stab   ColdMulpct   ; Copy result to "ColdMulpct" (%) (bins are byte values) (TOE_OFC_CALCS)
0052EC 7F52EC                         ColdMulDone:                                                                     (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; First determine "TpsPctDOT" ("TpsPctx10" - "TpsPctx10last") (both updated every 100mS (TOE_OFC_CALCS)
                                      ; in rti_BEEM488.s)                                                              (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
0052EC 7F52EC FE 10 9E                   ldx   TpsPctx10         ; "TpsPctx10" -> Accu X                               (TOE_OFC_CALCS)
0052EF 7F52EF 18 B0 10 45                subx  TpsPctx10last     ; (X)-(M:M-1)=>X Subtract "TpsPctx10last" from "TpsPctx10" (TOE_OFC_CALCS)
0052F3 7F52F3 7E 10 C2                   stx   TpsPctDOT         ; Copy result to "TpsPctDOT"                          (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Look up current value in Throttle Opening Enrichment Table (TpsDOTcor)(%)(byte value) (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
0052F6 7F52F6 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
0052FB 7F52FB 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr    ; Address of the first value in VE table(in RAM)(page pointer) (TOE_OFC_CALCS)
                                                                   ; ->page where the desired curve resides            (TOE_OFC_CALCS)
005301 7F5301 18 03 01 E2 10 27           movw #$01E2,CrvRowOfst   ; 482 -> Offset from the curve page to the curve row (TOE_OFC_CALCS)
                                                                       ; (TOERates_F)(actual offset is 964)            (TOE_OFC_CALCS)
005307 7F5307 18 03 01 DE 10 29           movw #$01DE,CrvColOfst   ; 478 -> Offset from the curve page to the curve column (TOE_OFC_CALCS)
                                                                       ; (TOEBins_F)(actual offset is 956)             (TOE_OFC_CALCS)
00530D 7F530D 18 04 10 C2 10 2B           movw TpsPctDOT,CrvCmpVal ; TPS% difference over time (%/Sec)(update every 100mSec) (TOE_OFC_CALCS)
                                                                   ; -> Curve comparison value                         (TOE_OFC_CALCS)
005313 7F5313 18 0B 03 10 2D              movb #$03,CrvBinCnt      ; 3 -> number of bins in the curve row or column minus 1 (TOE_OFC_CALCS)
005318 7F5318 16 60 05                    jsr   CRV_LU_P           ; Jump to subroutine at CRV_LU_P:(located in interp_BEEM488.s module) (TOE_OFC_CALCS)
00531B 7F531B 7B 10 C4                    stab  TpsDOTcor          ; Copy result to TpsDOTcor (%)(TOE bins use byte values) (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Multiply "TpsDOTcor" by "ColdMulpct" and divide by 100                       (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
00531E 7F531E B6 10 C4                    ldaa  TpsDOTcor      ; "TpsDOTcor" -> A (%)                                  (TOE_OFC_CALCS)
005321 7F5321 F6 10 C6                    ldab  ColdMulpct     ; "ColdMulpct" -> B (%)                                 (TOE_OFC_CALCS)
005324 7F5324 12                          mul                  ; (A)x(B)->A:B (TpsDOTcor x ColdMulpct) result in D     (TOE_OFC_CALCS)
005325 7F5325 CE 00 64                    ldx   #$0064         ; Decimal 100 -> X                                      (TOE_OFC_CALCS)
005328 7F5328 18 10                       idiv                 ; (D)/(X)->(X)rem(D) ((TpsDOTcor x ColdMulpct)/100)(%)  (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Check the remainder and round up if >=5                                      (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
00532A 7F532A 8C 00 05                    cpd   #$0005         ; Compare idiv remainder with decimal 5                 (TOE_OFC_CALCS)
00532D 7F532D 2F 05                       ble   NO_ROUND_UP    ; If remainder of idiv <= 5, branch to NO_ROUND_UP:     (TOE_OFC_CALCS)
00532F 7F532F B7 50                       tfr   X,A            ; idiv result -> A                                      (TOE_OFC_CALCS)
005331 7F5331 42                          inca                 ; idiv result + 1 -> A (round up)                       (TOE_OFC_CALCS)
005332 7F5332 20 02                       bra   ADD_COLDADD    ; Branch to ADD_COLDADD:(fall through)                  (TOE_OFC_CALCS)
005334 7F5334                         NO_ROUND_UP:                                                                     (TOE_OFC_CALCS)
005334 7F5334 B7 50                       tfr   X,A            ; idiv result -> A                                      (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Add the result with "ColdAddpct". Compare the result with the current "TOEpct" and (TOE_OFC_CALCS)
                                      ;   and save the highest value as "TOEpct". This is the final TOE value(%)       (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
005336 7F5336                         ADD_COLDADD:                                                                     (TOE_OFC_CALCS)
005336 7F5336 BB 10 C5                    adda  ColdAddpct     ; (A)+(M)->(A) (("TpsDOTcor" * ColdMulpct)/100) + "ColdAddpct") (TOE_OFC_CALCS)
005339 7F5339 7A 10 FB                    staa  tmp1           ; Copy to "tmp1"(("TpsDOTcor" * ColdMulpct)/100) + "ColdAddpct") (TOE_OFC_CALCS)
00533C 7F533C B1 10 C7                    cmpa  TOEpct         ; Compare result with "TOEpct"                          (TOE_OFC_CALCS)
00533F 7F533F 25 14                       blo   TOE_CHK_TIME   ; If (A) is less than (M), branch to TOE_CHK_TIME: (result (TOE_OFC_CALCS)
                                                               ; < "TOEpct" so use this value for "TOEpct" and check if (TOE_OFC_CALCS)
                                                                                       ; acceleration is done)         (TOE_OFC_CALCS)
005341 7F5341 B6 10 FB                    ldaa  tmp1           ; "tmp1" -> A(("TpsDOTcor" * ColdMulpct)/100) + "ColdAddpct") (TOE_OFC_CALCS)
005344 7F5344 7A 10 C7                    staa  TOEpct         ; Copy result to "TOEpct"(result is higher than current (TOE_OFC_CALCS)
                                                               ; so update TOEpct with the higher value)               (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Calculate the Throttle Opening Enrichment adder for PW calculations.         (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
005347 7F5347 FC 10 B0                    ldd  reqFuel      ; "reqFuel" -> Accu D (mS x 100)                           (TOE_OFC_CALCS)
00534A 7F534A FD 10 C7                    ldy  TOEpct       ; "TOEpct" -> Accu D (% x 10)                              (TOE_OFC_CALCS)
00534D 7F534D 13                          emul              ; (D)*(Y)->Y:D "reqFuel" * "TOEpct"                        (TOE_OFC_CALCS)
00534E 7F534E CE 00 64                        ldx  #$0064       ; Decimal 100 -> Accu X                                (TOE_OFC_CALCS)
005351 7F5351 11                              ediv              ;(Y:D)/)X)->Y;Rem->D ("ReqFuel"*"TOEpct")/1000="TOEpw" (TOE_OFC_CALCS)
005352 7F5352 7D 10 C8                        sty  TOEpw        ; Result -> "TOEpw" TOE adder (mS x 100)               (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Check to see if Throttle Opening Enrichment is done.                         (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
005355 7F5355                          TOE_CHK_TIME:                                                                   (TOE_OFC_CALCS)
005355 7F5355 1E 10 EF 40 07              brset  engine,OFCon,RESET_TOE ; If Overrun Fuel Cut bit of "Engine" bit field is set, (TOE_OFC_CALCS)
                                                                        ; branch to RESET_TOE:                         (TOE_OFC_CALCS)
00535A 7F535A B6 10 48                     ldaa  TOEtim       ; "TOEtim" -> Accu A                                     (TOE_OFC_CALCS)
00535D 7F535D 27 02                            beq   RESET_TOE    ; If "TOEtim" = zero branch to RESET_TOE:(timer has timed out) (TOE_OFC_CALCS)
00535F 7F535F 20 07                            bra   TOE_LOOP     ; Branch to "TOE_LOOP:(Timer hasn't timed out yet)   (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - The throttle is no longer opening and the duration timer has timed out so clear (TOE_OFC_CALCS)
                                      ;    "TOEpct" and the "TOEon" bit of "engine" bit field.                         (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
005361 7F5361                         RESET_TOE:                                                                       (TOE_OFC_CALCS)
005361 7F5361 79 10 C7                    clr    TOEpct       ; Clear Throttle Opening Enrichment % (0% enrich)        (TOE_OFC_CALCS)
005364 7F5364 1D 10 EF 20                 bclr   engine,TOEon ; Clear "TOEon" bit of "engine" bit field                (TOE_OFC_CALCS)
005368 7F5368                         TOE_LOOP:                                                                        (TOE_OFC_CALCS)
005368 7F5368 20 6B                       job  OFC_LOOP       ; Jump or branch to OFC_LOOP:(Finished with TOE, not in OFC so (TOE_OFC_CALCS)
                                                                  ; fall through)                                      (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Overrun Fuel Cut mode                                                        (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ;                                                                                (TOE_OFC_CALCS)
                                      ; - Engine overrun occurs when the the vehicle is in motion, the throttle is closed and (TOE_OFC_CALCS)
                                      ;   the engine is turning faster than the driver wants it to be, either because of vehicle (TOE_OFC_CALCS)
                                      ;   inertia or being on a negative grade. Under these conditions there will be a slight (TOE_OFC_CALCS)
                                      ;   increase in engine braking and some fuel can be saved if the fuel injectors are not (TOE_OFC_CALCS)
                                      ;   pulsed. In order to enter OFC mode some conditions have to be met. The throttle (TOE_OFC_CALCS)
                                      ;   opening must be less than the minimum permitted opening. The engine RPM must be more (TOE_OFC_CALCS)
                                      ;   than the minimum premitted RPM. The manifold pressure must be less than the minimum (TOE_OFC_CALCS)
                                      ;   permitted manifold pressure. When these conditions are met there is a delay time (TOE_OFC_CALCS)
                                      ;   before OFC is enabled. The purpose of this is to have some hysteresis to prevent (TOE_OFC_CALCS)
                                      ;   rapid changes in modes. When any of the  conditions are not met, OFC is disabled and (TOE_OFC_CALCS)
                                      ;   will not be enabled again until all condtions are met and the delay time has expired. (TOE_OFC_CALCS)
                                      ;                                                                                (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Check to see if we have permissives for Overrun Fuel Cut at steady state or closing (TOE_OFC_CALCS)
                                      ;   throttle.                                                                    (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
00536A 7F536A                         OFC_CHK:                                                                         (TOE_OFC_CALCS)
00536A 7F536A 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
00536F 7F536F CD 08 00                    ldy   #veBins_E     ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                            ; on buffer RAM page 1 (veBins_E)                          (TOE_OFC_CALCS)
005372 7F5372 EE EA 03 DA                 ldx   $03DA,Y     ; Load X with value in buffer RAM page 1 offset 986 (OFCtps) (TOE_OFC_CALCS)
                                                            ;(Overrun Fuel Cut min TPS%)                               (TOE_OFC_CALCS)
005376 7F5376 BE 10 9E                    cpx  TpsPctx10    ; Compare it with value in "TpsPctx10"                     (TOE_OFC_CALCS)
005379 7F5379 25 52                       blo  OFC_CHK_DONE ; If (X)>(M), branch to OFC_CHK_DONE:                      (TOE_OFC_CALCS)
                                                            ;(TPS is above minimum so no fuel cut)                     (TOE_OFC_CALCS)
00537B 7F537B 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
005380 7F5380 CD 08 00                    ldy   #veBins_E     ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                            ; on buffer RAM page 1 (veBins_E)                          (TOE_OFC_CALCS)
005383 7F5383 EE EA 03 DC                 ldx   $03DC,Y     ; Load X with value in buffer RAM page 1 offset 988 (OFCrpm) (TOE_OFC_CALCS)
                                                            ;(Overrun Fuel Cut min RPM)                                (TOE_OFC_CALCS)
005387 7F5387 BE 10 AC                    cpx  RPM          ; Compare it value in RPM                                  (TOE_OFC_CALCS)
00538A 7F538A 22 41                       bhi  OFC_CHK_DONE ; If (X)<(M), branch to OFC_CHK_DONE:                      (TOE_OFC_CALCS)
                                                            ;(RPM is below minimum so no fuel cut)                     (TOE_OFC_CALCS)
00538C 7F538C 18 0B FF 00 17                  movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE               (TOE_OFC_CALCS)
005391 7F5391 CD 08 00                    ldy   #veBins_E     ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                            ; on buffer RAM page 1 (veBins_E)                          (TOE_OFC_CALCS)
005394 7F5394 EE EA 03 DE                 ldx   $03DE,Y     ; Load X with value in buffer RAM page 1 offset 990 (OFCmap) (TOE_OFC_CALCS)
                                                            ;(Overrun Fuel Cut min manifold pressure)                  (TOE_OFC_CALCS)
005398 7F5398 BE 10 7E                    cpx  Mapx10       ; Compare it to value in Manifold Absolute Pressure (KPAx10) (TOE_OFC_CALCS)
00539B 7F539B 25 30                       blo  OFC_CHK_DONE ; If (X)<(M), branch to OFC_CHK_DONE:                      (TOE_OFC_CALCS)
                                                            ;(Manifold pressure is above minimum so no fuel cut)       (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - We have permissives for Overrun Fuel Cut. Check to see if we are waiting for the OFC (TOE_OFC_CALCS)
                                      ;   timer to time out, or if OFC is already in place, or if we should start the timer for (TOE_OFC_CALCS)
                                      ;   OFC.                                                                         (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
00539D 7F539D 1E 10 EF 01 1A                  brset  engine,OFCdelon,OFC_DELAY ; If "OFCdelon" bit of "engine" bit field is set, branch (TOE_OFC_CALCS)
                                                                             ; to OFC_DELAY: (waiting for the OFC timer to time out) (TOE_OFC_CALCS)
0053A2 7F53A2 1E 10 EF 40 2E                  brset  engine,OFCon,OFC_LOOP   ; If "OFCdon" bit of "engine" bit field is set, branch (TOE_OFC_CALCS)
                                                                             ; to OFC_LOOP: (OFC is in place, waiting until (TOE_OFC_CALCS)
                                                                                                         ; permissives are no longer met)(fall through) (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - We have permissives for OFC. We are not waiting for the OFC timer to time out and OFC (TOE_OFC_CALCS)
                                      ;   is not already in place. Load "OFCdel" (Overrun Fuel Cut delay duration) with the (TOE_OFC_CALCS)
                                      ;   value in "OFCdel_F". Set the "OFCdelon" flag in "engine" bit field.          (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
0053A7 7F53A7 18 0B FF 00 17                  movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE               (TOE_OFC_CALCS)
0053AC 7F53AC CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable (TOE_OFC_CALCS)
                                                              ; constant on buffer RAM page 1 (veBins)                 (TOE_OFC_CALCS)
0053AF 7F53AF A6 EA 03 E0                 ldaa   $03E0,Y      ; Load Accu A with value in buffer RAM page 1 offset 992 (TOE_OFC_CALCS)
                                                              ; (OFCdel_F) (Overrun Fuel Cut delay time)               (TOE_OFC_CALCS)
0053B3 7F53B3 7A 10 47                    staa  OFCdel        ; Copy to "OFCdel" (Overrun Fuel Cut delay duration)(decremented (TOE_OFC_CALCS)
                                                                  ; every 100mS in rti_BPEM488.s)                      (TOE_OFC_CALCS)
0053B6 7F53B6 1C 10 EF 01                     bset  engine,OFCdelon ; Set "OFCdelon" bit of "engine" bit field         (TOE_OFC_CALCS)
0053BA 7F53BA 20 19                       bra   OFC_LOOP      ; Branch to OFC_LOOP: (fall through)                     (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - We have permissives for OFC. We are waiting for the OFC timer to time out. Check to (TOE_OFC_CALCS)
                                      ;   see if "OFCdel" (Overrun Fuel Cut delay duration) has been decremented to zero. (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
0053BC 7F53BC                         OFC_DELAY:                                                                       (TOE_OFC_CALCS)
0053BC 7F53BC B6 10 47                    ldaa OFCdel     ; "OFCdel" -> Accu A                                         (TOE_OFC_CALCS)
0053BF 7F53BF 27 02                           beq  SET_OFC    ; If "OFCdel" = zero branch to SET_OFC:                  (TOE_OFC_CALCS)
0053C1 7F53C1 20 12                       bra  OFC_LOOP   ; (Branch to OFC_LOOP: (Timer not timed out so fall through) (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - We have permissives for OFC. The OFC timer has timed out. Clear the "OFCdelon" bit and (TOE_OFC_CALCS)
                                      ;   set the "OFCon" bit of "engine bit field. In the final pulse width calculations the (TOE_OFC_CALCS)
                                      ;   "OFCon" bit of "engine" bit field will be tested. If the bit is set the"PWtk" (TOE_OFC_CALCS)
                                      ;   (injector pulsewidth time value) will be loaded with zero.                   (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
0053C3 7F53C3                         SET_OFC:                                                                         (TOE_OFC_CALCS)
0053C3 7F53C3 1D 10 EF 01                 bclr engine,OFCdelon ; Clear "OFCdelon" bit of "engine" bit field            (TOE_OFC_CALCS)
0053C7 7F53C7 1C 10 EF 40                     bset engine,OFCon  ; Set "OFCon" bit of "engine" bit field (This bit will be tested (TOE_OFC_CALCS)
                                                                 ; in the final pulse width calculations, if set the pulse width (TOE_OFC_CALCS)
                                                                                 ; will be set to zero                 (TOE_OFC_CALCS)
0053CB 7F53CB 20 08                       bra  OFC_LOOP      ; (Branch to OFC_LOOP:(keep looping until permissives are no (TOE_OFC_CALCS)
                                                                 ; longer met)                                         (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Permissives have not or no longer are being met. Clear the flags.            (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
0053CD 7F53CD                         OFC_CHK_DONE:                                                                    (TOE_OFC_CALCS)
0053CD 7F53CD 1D 10 EF 01                 bclr engine,OFCdelon  ; Clear "OFCdelon" bit of "engine" bit field           (TOE_OFC_CALCS)
0053D1 7F53D1 1D 10 EF 40                     bclr engine,OFCon     ; Clear "OFCon" bit of "engine" bit field          (TOE_OFC_CALCS)
0053D5 7F53D5                         OFC_LOOP:                                                                        (TOE_OFC_CALCS)
                                      ;*****************************************************************************************
                                      ; - Injector dead band is the time required for the injectors to open and close and must
                                      ;   be included in the pulse width time. The amount of time will depend on battery voltge.
                                      ;   Battery voltage correction for injector deadband is calculated as a linear function
                                      ;   of battery voltage from 7.2 volts to 19.2 volts with 13.2 volts being the nominal
                                      ;   operating voltage where no correction is applied.
                                      ;*****************************************************************************************
0053D5 7F53D5 MACRO                       DEADBAND_CALCS       ; Macro in injcalcsBPEM.s
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                      ; - Interpolate injector deadband at current battery voltage                     (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
0053D5 7F53D5 CC 00 48                    ldd  #$0048      ; Decimal 72 (7.2 volts) -> Accu D                          (DEADBAND_CALCS)
0053D8 7F53D8 3B                          pshd             ; Push to stack (V1)                                        (DEADBAND_CALCS)
0053D9 7F53D9 FC 10 86                    ldd  BatVx10     ; "BatVx10"(battery volts x 10) -> Accu D                   (DEADBAND_CALCS)
0053DC 7F53DC 3B                          pshd             ; Push to stack (V)                                         (DEADBAND_CALCS)
0053DD 7F53DD CC 00 C0                    ldd  #$00C0      ; Decimal 192 (19.2 volts) -> Accu D                        (DEADBAND_CALCS)
0053E0 7F53E0 3B                          pshd             ; Push to stack (V2)                                        (DEADBAND_CALCS)
0053E1 7F53E1 FC 10 49                        ldd  DdBndZ1     ;((Injector deadband at 13.2V) - (Injector deadband voltage (DEADBAND_CALCS)
                                                               ; correction * 6)) -> Accu D                            (DEADBAND_CALCS)
0053E4 7F53E4 3B                          pshd             ; Push to stack (Z1)                                        (DEADBAND_CALCS)
0053E5 7F53E5 FC 10 4A                        ldd  DdBndZ2     ;((Injector deadband at 13.2V) + (Injector deadband voltage (DEADBAND_CALCS)
                                                               ; correction * 6)) -> Accu D                            (DEADBAND_CALCS)
0053E8 7F53E8 3B                          pshd             ; Push to stack (Z2)                                        (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        Z2       |  SP+ 0                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        Z1       |  SP+ 2                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V2       |  SP+ 4                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V        |  SP+ 6                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V1       |  SP+ 8                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                      ;                     V      V1      V2      Z1    Z2                            (DEADBAND_CALCS)
0053E9 7F53E9 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ; ==========================                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ; result: D: interpolated result                                                 (DEADBAND_CALCS/2D_IPOL)
                                      ; SSTACK: none                                                                   (DEADBAND_CALCS/2D_IPOL)
                                      ;         no registers are preserved                                             (DEADBAND_CALCS/2D_IPOL)
                                      ;                                                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;    ^ V                                                                         (DEADBAND_CALCS/2D_IPOL)
                                      ;    |                                                                           (DEADBAND_CALCS/2D_IPOL)
                                      ;  Z2+....................*                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;    |                    :                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (DEADBAND_CALCS/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (DEADBAND_CALCS/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (DEADBAND_CALCS/2D_IPOL)
                                      ;    |   :       :        :                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ;                                                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
0053E9 7F53E9 EC 86                                   LDD       \1    ; load V                                         (DEADBAND_CALCS/2D_IPOL)
0053EB 7F53EB A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (DEADBAND_CALCS/2D_IPOL)
0053ED 7F53ED B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
0053EF 7F53EF EC 80                                   LDD       \5    ; load Z2                                        (DEADBAND_CALCS/2D_IPOL)
0053F1 7F53F1 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
0053F3 7F53F3 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (DEADBAND_CALCS/2D_IPOL)
0053F5 7F53F5 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
0053F7 7F53F7 EC 84                                   LDD       \3    ; load V2                                        (DEADBAND_CALCS/2D_IPOL)
0053F9 7F53F9 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (DEADBAND_CALCS/2D_IPOL)
0053FB 7F53FB B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (DEADBAND_CALCS/2D_IPOL)
                                      ;*********************************************************************           (DEADBAND_CALCS/2D_IPOL)
0053FD 7F53FD 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (DEADBAND_CALCS/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (DEADBAND_CALCS/2D_IPOL)
0053FF 7F53FF B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
005401 7F5401 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                      ; - Free stack space (result in D)                                               (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
005403 7F5403 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (DEADBAND_CALCS)
005405 7F5405 7B 10 CC                    stab  Deadband  ; Copy result to "Deadband" (Injector deadband at current battery (DEADBAND_CALCS)
                                      ;*****************************************************************************************
                                      ; - Calculate injector pulse width for a running engine "PW" (mS x 10)
                                      ;*****************************************************************************************
005408 7F5408 MACRO                       RUN_PW_CALCS       ; Macro in injcalcsBPEM.s
                                                              ; voltage) (mS x 10)                                     (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Calculate injector pulse width for a running engine "PW" (mS x 10)           (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ;barocor:      ds 2 ; Barometric Pressure Correction (% x 10) (104)              (RUN_PW_CALCS)
                                      ;matcor:       ds 2 ; Manifold Air Temperature Correction (% x 10)(108)          (RUN_PW_CALCS)
                                      ;Mapx10:       ds 2 ; Manifold Absolute Pressure (KPAx10)(update every revolution) (24) (RUN_PW_CALCS)
                                      ;Ftrmx10:      ds 2 ; Fuel Trim (% x 10)(update every mSec)(+-20%) (36)          (RUN_PW_CALCS)
                                      ;WUEandASEcor: ds 2 ; The sum of WUEcor and ASEcor (% x 10)                      (RUN_PW_CALCS)
                                      ;veCurr:       ds 2 ; Current value in VE table (% x 10) (72)                    (RUN_PW_CALCS)
                                      ;PWcalc1:      ds 2 ; PW calculations result 1                                   (RUN_PW_CALCS)
                                      ;PWcalc2:      ds 2 ; PW calculations result 2                                   (RUN_PW_CALCS)
                                      ;PWcalc3:      ds 2 ; PW calculations result 3                                   (RUN_PW_CALCS)
                                      ;PWcalc4:      ds 2 ; PW calculations result 4                                   (RUN_PW_CALCS)
                                      ;PWcalc5:      ds 2 ; PW calculations result 5                                   (RUN_PW_CALCS)
                                      ;reqFuel:      ds 2 ; Pulse width for 14.7 AFR @ 100% VE (mS x 10)               (RUN_PW_CALCS)
                                      ;PWlessTOE:    ds 2 ; Injector pulse width before "TOEpw" and "Deadband" (mS x 10) (RUN_PW_CALCS)
                                      ;TOEpw:        ds 2 ; Throttle Opening Enrichment adder (mS x 100)               (RUN_PW_CALCS)
                                      ;Deadband:     ds 2 ; injector deadband at current battery voltage mS*100        (RUN_PW_CALCS)
                                      ;FDpw:         ds 2 ; Fuel Delivery pulse width (PW - Deadband) (mS x 10)        (RUN_PW_CALCS)
                                      ;PW:           ds 2 ; Running engine injector pulsewidth (mS x 10)               (RUN_PW_CALCS)
                                      ;PWtk:         ds 2 ; Running engine injector pulsewidth (uS x 2.56)(102)        (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Method:                                                                      (RUN_PW_CALCS)
                                      ;                                                                                (RUN_PW_CALCS)
                                      ; ("barocor" * "matcor") / 1000 = "PWcalc1" (0.1% resolution)                    (RUN_PW_CALCS)
                                      ; ("Mapx10" * "Ftrmx10") / 1000 = "PWcalc2" (0.1% resolution)                    (RUN_PW_CALCS)
                                      ; ("PWcalc1" * "PWcalc2") / 1000 = "PWcalc3" (0.1% resolution)                   (RUN_PW_CALCS)
                                      ; ("WUEandASEcor" * "veCurr") / 1000 = "PWcalc4" (0.1% resolution)               (RUN_PW_CALCS)
                                      ; ("PWcalc3" * "PWcalc4") / 1000 = "PWcalc5" (0.1% resolution)                   (RUN_PW_CALCS)
                                      ; ("PWcalc5" * reqFuel") / 1000 = "PWlessTOE" (0.1mS resolution)                 (RUN_PW_CALCS)
                                      ; "PWlessTOE" + "TOEpw" = "FDpw"  (0.1mS resolution)                             (RUN_PW_CALCS)
                                      ; "FDpw" + "Deadband" = "PW"  (0.1mS resolution)                                 (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Look up current value in Barometric Correction Table (barocor)               (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
005408 7F5408 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (RUN_PW_CALCS)
00540D 7F540D 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (RUN_PW_CALCS)
                                                                  ; -> page where the desired curve resides            (RUN_PW_CALCS)
005413 7F5413 18 03 01 68 10 27           movw #$0168,CrvRowOfst  ; 360 -> Offset from the curve page to the curve row(barCorVals) (RUN_PW_CALCS)
                                                                      ; (actual offset is 720)                         (RUN_PW_CALCS)
005419 7F5419 18 03 01 71 10 29           movw #$0171,CrvColOfst  ; 369 -> Offset from the curve page to the curve column(barCorDelta) (RUN_PW_CALCS)
                                                                      ; (actual offset is 738)                         (RUN_PW_CALCS)
00541F 7F541F 18 04 10 82 10 2B           movw Barox10,CrvCmpVal  ; Barometric Pressure (KPAx10) -> Curve comparison value (RUN_PW_CALCS)
005425 7F5425 18 0B 08 10 2D              movb #$08,CrvBinCnt     ; 8 -> number of bins in the curve row or column minus 1 (RUN_PW_CALCS)
00542A 7F542A 16 60 05                    jsr   CRV_LU_P   ; Jump to subroutine at CRV_LU_P:(located in interp_BEEM488.s module) (RUN_PW_CALCS)
00542D 7F542D 7C 10 B6                    std   barocor    ; Copy result to Barometric correction (% x 10)             (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Look up current value in MAT Air Density Table (matcor)                      (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
005430 7F5430 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (RUN_PW_CALCS)
005435 7F5435 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (RUN_PW_CALCS)
                                                                  ;  ->page where the desired curve resides            (RUN_PW_CALCS)
00543B 7F543B 18 03 01 9A 10 27           movw #$019A,CrvRowOfst  ; 410 -> Offset from the curve page to the curve row(matCorrTemps2) (RUN_PW_CALCS)
                                                                      ; (actual offset is 820)                         (RUN_PW_CALCS)
005441 7F5441 18 03 01 A3 10 29           movw #$01A3,CrvColOfst  ; 419 -> Offset from the curve page to the curve column(matCorrDelta2) (RUN_PW_CALCS)
                                                                      ; (actual offset is 838)                         (RUN_PW_CALCS)
005447 7F5447 18 04 10 70 10 2B           movw Matx10,CrvCmpVal   ; Manifold Air Temperature (Degrees F x 10) ->       (RUN_PW_CALCS)
                                                                  ; Curve comparison value                             (RUN_PW_CALCS)
00544D 7F544D 18 0B 08 10 2D              movb #$08,CrvBinCnt     ; 8 -> number of bins in the curve row or column minus 1 (RUN_PW_CALCS)
005452 7F5452 16 60 CE                    jsr   CRV_LU_NP  ; Jump to subroutine at CRV_LU_NP:(located in interp_BEEM488.s module) (RUN_PW_CALCS)
005455 7F5455 7C 10 B8                    std   matcor     ; Copy result to Manifold Air Temperature Correction (% x 10) (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Calculate total corrections before Throttle Opening Enrichment and deadband. (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
005458 7F5458 FC 10 B6                    ldd  barocor      ; "barocor" -> Accu D (% x 10)                             (RUN_PW_CALCS)
00545B 7F545B FD 10 B8                    ldy  matcor       ; "matcor" -> Accu D (% x 10)                              (RUN_PW_CALCS)
00545E 7F545E 13                          emul              ; (D)*(Y)->Y:D "barocor" * "matcor"                        (RUN_PW_CALCS)
00545F 7F545F CE 03 E8                        ldx  #$03E8       ; Decimal 1000 -> Accu X                               (RUN_PW_CALCS)
005462 7F5462 11                              ediv              ;(Y:D)/)X)->Y;Rem->D ("barocor"*"matcor")/1000="PWcalc1" (RUN_PW_CALCS)
005463 7F5463 7D 10 4B                        sty  PWcalc1      ; Result -> "PWcalc1"                                  (RUN_PW_CALCS)
005466 7F5466 FC 10 7E                    ldd  Mapx10       ; "Mapx10" -> Accu D (% x 10)                              (RUN_PW_CALCS)
005469 7F5469 FD 10 8A                    ldy  Ftrmx10      ; "Ftrmx10" -> Accu D (% x 10)                             (RUN_PW_CALCS)
00546C 7F546C 13                          emul              ; (D)*(Y)->Y:D "Mapx10" * "Ftrmx10"                        (RUN_PW_CALCS)
00546D 7F546D CE 03 E8                        ldx  #$03E8       ; Decimal 1000 -> Accu X                               (RUN_PW_CALCS)
005470 7F5470 11                              ediv              ;(Y:D)/)X)->Y;Rem->D ("Mapx10"*"Ftrmx10")/1000="PWcalc2" (RUN_PW_CALCS)
005471 7F5471 7D 10 4D                        sty  PWcalc2      ; Result -> "PWcalc2"                                  (RUN_PW_CALCS)
005474 7F5474 FC 10 4B                    ldd  PWcalc1      ; "PWcalc1" -> Accu D (% x 10)                             (RUN_PW_CALCS)
005477 7F5477 FD 10 4D                    ldy  PWcalc2      ; "PWcalc2" -> Accu D (% x 10)                             (RUN_PW_CALCS)
00547A 7F547A 13                          emul              ; (D)*(Y)->Y:D "PWcalc1" * "PWcalc2"                       (RUN_PW_CALCS)
00547B 7F547B CE 03 E8                        ldx  #$03E8       ; Decimal 1000 -> Accu X                               (RUN_PW_CALCS)
00547E 7F547E 11                              ediv              ;(Y:D)/)X)->Y;Rem->D ("PWcalc1"*"PWcalc2")/1000="PWcalc3" (RUN_PW_CALCS)
00547F 7F547F 7D 10 4F                        sty  PWcalc3      ; Result -> "PWcalc3"                                  (RUN_PW_CALCS)
005482 7F5482 FC 10 BE                    ldd  WUEandASEcor ; "WUEandASEcor" -> Accu D (% x 10)                        (RUN_PW_CALCS)
005485 7F5485 FD 10 B4                    ldy  veCurr       ; "veCurr" -> Accu D (% x 10)                              (RUN_PW_CALCS)
005488 7F5488 13                          emul              ; (D)*(Y)->Y:D "WUEandASEcor" * "veCurr"                   (RUN_PW_CALCS)
005489 7F5489 CE 03 E8                        ldx  #$03E8       ; Decimal 1000 -> Accu X                               (RUN_PW_CALCS)
00548C 7F548C 11                              ediv              ;(Y:D)/)X)->Y;Rem->D ("WUEandASEcor"*"veCurr")/1000="PWcalc4" (RUN_PW_CALCS)
00548D 7F548D 7D 10 51                        sty  PWcalc4      ; Result -> "PWcalc4"                                  (RUN_PW_CALCS)
005490 7F5490 FC 10 4F                    ldd  PWcalc3      ; "PWcalc3" -> Accu D (% x 10)                             (RUN_PW_CALCS)
005493 7F5493 FD 10 51                    ldy  PWcalc4      ; "PWcalc4" -> Accu D (% x 10)                             (RUN_PW_CALCS)
005496 7F5496 13                          emul              ; (D)*(Y)->Y:D "PWcalc3" * "PWcalc4"                       (RUN_PW_CALCS)
005497 7F5497 CE 03 E8                        ldx  #$03E8       ; Decimal 1000 -> Accu X                               (RUN_PW_CALCS)
00549A 7F549A 11                              ediv              ;(Y:D)/)X)->Y;Rem->D ("PWcalc3"*"PWcalc4")/1000="PWcalc5" (RUN_PW_CALCS)
00549B 7F549B 7D 10 53                        sty  PWcalc5      ; Result -> "PWcalc5"(total corrections before Throttle Opening (RUN_PW_CALCS)
                                                                ; Enrichment and deadband)                             (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Calculate injector pulse width before Throttle Opening Enrichment pulse width and (RUN_PW_CALCS)
                                      ;   Deadband.                                                                    (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
00549E 7F549E FC 10 53                    ldd  PWcalc5      ; "PWcalc5" -> Accu D (% x 10)                             (RUN_PW_CALCS)
0054A1 7F54A1 FD 10 B0                    ldy  reqFuel      ; "reqFuel" -> Accu D (mS x 10)                            (RUN_PW_CALCS)
0054A4 7F54A4 13                          emul              ; (D)*(Y)->Y:D "PWcalc5" * "matcor"                        (RUN_PW_CALCS)
0054A5 7F54A5 CE 03 E8                        ldx  #$03E8       ; Decimal 1000 -> Accu X                               (RUN_PW_CALCS)
0054A8 7F54A8 11                              ediv              ;(Y:D)/)X)->Y;Rem->D ("PWcalc5"*"reqFuel")/1000="PWlessTOE" (RUN_PW_CALCS)
0054A9 7F54A9 7D 10 CA                        sty  PWlessTOE    ; Result -> "PWlessTOE" (mS x 10)                      (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Add the Throttle Opening Enricment pulse width and store as "FDpw"(fuel delivery (RUN_PW_CALCS)
                                      ;   pulse width)(mS x 10)                                                        (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
0054AC 7F54AC B7 64                       tfr  Y,D          ; "PWlessTOE" -> Accu D                                    (RUN_PW_CALCS)
0054AE 7F54AE F3 10 C8                        addd TOEpw        ; (A:B)+(M:M+1)->A:B ("PWlessTOE"+"TOEpw"="FDpw"       (RUN_PW_CALCS)
0054B1 7F54B1 7C 10 D2                        std  FDpw         ; Result -> "FDpw" (fuel delivery pulsewidth (mS x 10) (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Add "deadband" and store the result as "PW"(final injector pulsewidth)(mS x 10) (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
0054B4 7F54B4 F3 10 CC                        addd Deadband    ; (A:B)+(M:M+1)->A:B ("FDpw"+"Deadband"="PW"            (RUN_PW_CALCS)
0054B7 7F54B7 7C 10 D4                        std  PW          ; Result -> "PW" (final injector pulsewidth) (mS x 10)  (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Divide "FDpw" by 10 and store as "FD" (Fuel burn calcs have to be in mS)     (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
0054BA 7F54BA FC 10 D2                        ldd  FDpw        ; "FDpw"->Accu D (mS x 10)                              (RUN_PW_CALCS)
0054BD 7F54BD CE 00 0A                        ldx  #$000A      ; Decimal 10->Accu X                                    (RUN_PW_CALCS)
0054C0 7F54C0 18 10                           idiv             ; (D)/(X)->Xrem->D ("FDpw"/10="FD")(mS)                 (RUN_PW_CALCS)
0054C2 7F54C2 7E 10 D6                        stx  FD          ; Copy reslut to "FD"(mS)(Fuel burn cals have to be in mS) (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Convert "PW" to timer ticks in 2.56uS resolution.                            (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
0054C5 7F54C5 FC 10 D4                    ldd   PW         ; "PW" -> Accu D                                            (RUN_PW_CALCS)
0054C8 7F54C8 CD 27 10                        ldy   #$2710     ; Load index register Y with decimal 10000 (for integer math) (RUN_PW_CALCS)
0054CB 7F54CB 13                              emul             ;(D)x(Y)=Y:D "PW" * 10,000                              (RUN_PW_CALCS)
0054CC 7F54CC CE 01 00                        ldx   #$100      ; Decimal 256 -> Accu X                                 (RUN_PW_CALCS)
0054CF 7F54CF 11                          ediv             ;(Y:D)/(X)=Y;Rem->D "PW" * 10,000 / 256 = "PWtk"            (RUN_PW_CALCS)
0054D0 7F54D0 7D 10 5D                    sty   PWtk       ; Copy result to "PWtk" (Running engine injector pulsewidth) (RUN_PW_CALCS)
                                                               ; (uS x 2.56)                                           (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Injector duty cycle percentage is the time the injector takes to inject the fuel (RUN_PW_CALCS)
                                      ;   divided by the time available x 100. The time available is the engine cycle which is (RUN_PW_CALCS)
                                      ;   two crankshaft revolutions. It is important to know what our duty cycle is at high (RUN_PW_CALCS)
                                      ;   engine speeds and loads. 80% is considered a safe maximum. The crank angle period is (RUN_PW_CALCS)
                                      ;   measured over 72 degrees of crank rotation. In run mode the timer is set to a 2.56uS (RUN_PW_CALCS)
                                      ;   time base and the pulse width timer value is in 2.56uS resolution. The engine cycle (RUN_PW_CALCS)
                                      ;   period in 2.56uS resolution can be calculated by multiplying the period by 10, for (RUN_PW_CALCS)
                                      ;   the two revolutions in the cycle. The duty cycle percentage is calculated by (RUN_PW_CALCS)
                                      ;   dividing "PWtk" by the cycle period and dividing by 100.                     (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Calculate injector duty cycle                                                (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
0054D3 7F54D3 FC 10 5D                    ldd  PWtk          ; "PWtk" -> Accu D                                        (RUN_PW_CALCS)
0054D6 7F54D6 CD 27 10                        ldy  #$2710        ; Load index register Y with decimal 10000 (for integer math) (RUN_PW_CALCS)
0054D9 7F54D9 13                              emul               ;(D)x(Y)=Y:D "PWtk" * 10,000                          (RUN_PW_CALCS)
0054DA 7F54DA FE 10 A8                        ldx  CASprd256     ; "CASprd256"-> Accu X                                (RUN_PW_CALCS)
0054DD 7F54DD 11                          ediv               ;(Y:D)/(X)=Y;Rem->D ("PWtk"*10,000)/"CASprd256"           (RUN_PW_CALCS)
0054DE 7F54DE B7 54                           tfr  X,D           ; Result-> Accu D                                     (RUN_PW_CALCS)
0054E0 7F54E0 CE 00 64                        ldx  #$0064        ; Decimal 100 -> Accu X                               (RUN_PW_CALCS)
0054E3 7F54E3 18 10                       idiv               ; (D)/(X)->(X)rem(D) (("PWtk"*10,000)/"CASprd256")/100    (RUN_PW_CALCS)
                                                                 ; ="DutyCyclex10"                                     (RUN_PW_CALCS)
0054E5 7F54E5 7E 10 F6                    stx  DutyCyclex10  ; Copy result to "DutyCyclex10" (Injector duty cycle x 10) (RUN_PW_CALCS)
                                      ;*****************************************************************************************
                                      ; ----------------------- End Of Injector Calculations Section ---------------------------
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Increment "LoopCntr" (counter for "LoopTime")
                                      ;*****************************************************************************************
0054E8 7F54E8                         MainLoopEnd:
0054E8 7F54E8 18 72 11 03                     incw LoopCntr  ; Increment "LoopCntr"(counter for "LoopTime")
0054EC 7F54EC 06 49 C2                    job  MainLoop  ; Jump or branch to "MainLoop" (end of main loop, start again)
                                      ;*****************************************************************************************
                                      ; --------------------------------- End of Main Loop -------------------------------------
                                      ;*****************************************************************************************
0054EF 7F54EF -> $54EF                BPEM488_CODE_END                EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
0054EF 7F54EF -> $7F54EF              BPEM488_CODE_END_LIN    EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006259 7F6259                                                 ORG     BPEM488_TABS_START, BPEM488_TABS_START_LIN
006259 7F6259 -> $7F6259              BPEM488_TABS_START_LIN  EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
                                      ;*********************************************************************
                                      ; Page 1 copied into RAM on start up. All pages 1024 bytes
                                      ; VE table, ranges and other configurable constants
                                      ; veBins values are %x10, verpmBins values are RPM, vemapBins values
                                      ; are KPAx10
                                      ;*********************************************************************
006259 7F6259                         veBins_F:         ; (% X 10) (648 bytes)(offset = 0)
                                             ;ROW------------>
006259 7F6259 02 30 02 30 02 30 02 30     dw $230,$230,$230,$230,$226,$208,$1F4,$17C,$172,$168,$168,$172,$172,$172,$136,$136,$136,$136 ; C
              02 26 02 08 01 F4 01 7C 
              01 72 01 68 01 68 01 72 
              01 72 01 72 01 36 01 36 
              01 36 01 36             
                                      ;       560, 560, 560, 560, 550, 520, 500, 380, 370, 360, 360, 370, 370, 370, 310, 310, 310, 310 ; O
00627D 7F627D 02 30 02 30 02 30 02 30     dw $230,$230,$230,$230,$226,$208,$1F4,$17C,$172,$168,$168,$172,$172,$172,$136,$136,$136,$136 ; L
              02 26 02 08 01 F4 01 7C 
              01 72 01 68 01 68 01 72 
              01 72 01 72 01 36 01 36 
              01 36 01 36             
                                      ;       560, 560, 560, 560, 550, 520, 500, 380, 370, 360, 360, 370, 370, 370, 310, 310, 310, 310 ; |
0062A1 7F62A1 02 30 02 30 02 30 02 30     dw $230,$230,$230,$230,$226,$208,$1F4,$17C,$172,$168,$168,$172,$172,$172,$136,$136,$136,$136 ; |
              02 26 02 08 01 F4 01 7C 
              01 72 01 68 01 68 01 72 
              01 72 01 72 01 36 01 36 
              01 36 01 36             
                                      ;       560, 560, 560, 560, 550, 520, 500, 380, 370, 360, 360, 370, 370, 370, 310, 310, 310, 310 ; |
0062C5 7F62C5 02 30 02 30 02 30 02 30     dw $230,$230,$230,$230,$230,$208,$1F4,$1F4,$212,$230,$23A,$24E,$24E,$244,$23A,$212,$212,$212 ; |
              02 30 02 08 01 F4 01 F4 
              02 12 02 30 02 3A 02 4E 
              02 4E 02 44 02 3A 02 12 
              02 12 02 12             
                                      ;       560, 560, 560, 560, 560, 520, 500, 500, 530, 560, 570, 590, 590, 580, 570, 530, 530, 530 ; |
0062E9 7F62E9 02 44 02 44 02 44 02 44     dw $244,$244,$244,$244,$230,$208,$208,$212,$21C,$230,$23A,$24E,$276,$26C,$26C,$24E,$24E,$24E ; |
              02 30 02 08 02 08 02 12 
              02 1C 02 30 02 3A 02 4E 
              02 76 02 6C 02 6C 02 4E 
              02 4E 02 4E             
                                      ;       580, 580, 580, 580, 560, 520, 520, 530, 540, 560, 570, 590, 630, 620, 620, 590, 590, 590 ; |
00630D 7F630D 02 58 02 58 02 58 02 58     dw $258,$258,$258,$258,$244,$21C,$21C,$226,$230,$23A,$258,$26C,$26C,$26C,$26C,$26C,$26C,$26C ; V
              02 44 02 1C 02 1C 02 26 
              02 30 02 3A 02 58 02 6C 
              02 6C 02 6C 02 6C 02 6C 
              02 6C 02 6C             
                                      ;       600, 600, 600, 600, 580, 540, 540, 550, 560, 570, 600, 620, 620, 620, 620, 620, 620, 620 ;
006331 7F6331 02 F8 02 F8 02 D0 02 A8     dw $2F8,$2F8,$2D0,$2A8,$26C,$230,$23A,$244,$24E,$26C,$276,$280,$28A,$28A,$28A,$28A,$28A,$28A ;
              02 6C 02 30 02 3A 02 44 
              02 4E 02 6C 02 76 02 80 
              02 8A 02 8A 02 8A 02 8A 
              02 8A 02 8A             
                                      ;       760, 760, 720, 680, 620, 560, 570, 580, 590, 620, 630, 640, 650, 650, 650, 650, 650, 650 ;
006355 7F6355 03 0C 03 0C 02 E4 02 BC     dw $30C,$30C,$2E4,$2BC,$294,$262,$262,$262,$262,$26C,$276,$28A,$294,$294,$294,$294,$294,$294 ;
              02 94 02 62 02 62 02 62 
              02 62 02 6C 02 76 02 8A 
              02 94 02 94 02 94 02 94 
              02 94 02 94             
                                      ;       780, 780, 740, 700, 660, 610, 610, 610, 610, 620, 630, 650, 660, 660, 660, 660, 660, 660 ;
006379 7F6379 03 3E 03 3E 03 0C 02 E4     dw $33E,$33E,$30C,$2E4,$29E,$26C,$26C,$276,$280,$28A,$28A,$28A,$294,$294,$294,$294,$294,$294 ;
              02 9E 02 6C 02 6C 02 76 
              02 80 02 8A 02 8A 02 8A 
              02 94 02 94 02 94 02 94 
              02 94 02 94             
                                      ;       830, 830, 780, 740, 670, 620, 620, 630, 640, 650, 650, 650, 660, 660, 660, 660, 660, 660 ;
00639D 7F639D 03 52 03 52 03 3E 03 34     dw $352,$352,$33E,$334,$2E4,$28A,$280,$280,$28A,$294,$294,$294,$294,$294,$294,$294,$294,$294 ;
              02 E4 02 8A 02 80 02 80 
              02 8A 02 94 02 94 02 94 
              02 94 02 94 02 94 02 94 
              02 94 02 94             
                                      ;       850, 850, 830, 820, 740, 650, 640, 640, 650, 660, 660, 660, 660, 660, 660, 660, 660, 660 ;
0063C1 7F63C1 03 66 03 66 03 52 03 48     dw $366,$366,$352,$348,$2EE,$294,$28A,$28A,$294,$29E,$29E,$29E,$29E,$29E,$29E,$29E,$29E,$29E ;
              02 EE 02 94 02 8A 02 8A 
              02 94 02 9E 02 9E 02 9E 
              02 9E 02 9E 02 9E 02 9E 
              02 9E 02 9E             
                                      ;       870, 870, 850, 840, 750, 660, 650, 650, 660, 670, 670, 670, 670, 670, 670, 670, 670, 670 ;
0063E5 7F63E5 03 66 03 66 03 66 03 66     dw $366,$366,$366,$366,$2F8,$28A,$294,$294,$2A8,$2A8,$2A8,$2A8,$2A8,$2A8,$2A8,$2A8,$2A8,$2A8 ;
              02 F8 02 8A 02 94 02 94 
              02 A8 02 A8 02 A8 02 A8 
              02 A8 02 A8 02 A8 02 A8 
              02 A8 02 A8             
                                      ;       870, 870, 870, 870, 760, 650, 660, 660, 680, 680, 680, 680, 680, 680, 680, 680, 680, 680 ;
006409 7F6409 03 7A 03 7A 03 7A 03 7A     dw $37A,$37A,$37A,$37A,$316,$2BC,$29E,$29E,$2B2,$2B2,$2B2,$2B2,$2B2,$2B2,$2B2,$2B2,$2B2,$2B2 ;
              03 16 02 BC 02 9E 02 9E 
              02 B2 02 B2 02 B2 02 B2 
              02 B2 02 B2 02 B2 02 B2 
              02 B2 02 B2             
                                      ;       890, 890, 890, 890, 790, 700, 670, 670, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690 ;
00642D 7F642D 03 B6 03 B6 03 8E 03 8E     dw $3B6,$3B6,$38E,$38E,$35C,$352,$32A,$334,$348,$35C,$37A,$3A2,$3A2,$366,$366,$366,$366,$366 ;
              03 5C 03 52 03 2A 03 34 
              03 48 03 5C 03 7A 03 A2 
              03 A2 03 66 03 66 03 66 
              03 66 03 66             
                                      ;       950, 950, 910, 910, 860, 850, 810, 820, 840, 860, 890, 930, 930, 870, 870, 870, 870, 870 ;
006451 7F6451 03 CA 03 CA 03 CA 03 CA     dw $3CA,$3CA,$3CA,$3CA,$3CA,$3CA,$3E8,$406,$406,$41A,$41A,$424,$42E,$41A,$41A,$41A,$41A,$41A ;
              03 CA 03 CA 03 E8 04 06 
              04 06 04 1A 04 1A 04 24 
              04 2E 04 1A 04 1A 04 1A 
              04 1A 04 1A             
                                      ;       970, 970, 970, 970, 970, 970,1000,1030,1030,1050,1050,1060,1070,1050,1050,1050,1050,1050 ;
006475 7F6475 03 D4 03 D4 03 D4 03 D4     dw $3D4,$3D4,$3D4,$3D4,$3D4,$3D4,$3E8,$406,$410,$41A,$42E,$438,$442,$438,$438,$438,$438,$438 ;
              03 D4 03 D4 03 E8 04 06 
              04 10 04 1A 04 2E 04 38 
              04 42 04 38 04 38 04 38 
              04 38 04 38             
                                      ;       980, 980, 980, 980, 980, 980,1000,1030,1040,1050,1070,1080,1090,1080,1080,1080,1080,1080 ;
006499 7F6499 03 D4 03 D4 03 D4 03 D4     dw $3D4,$3D4,$3D4,$3D4,$3D4,$3D4,$3FC,$410,$41A,$438,$442,$456,$460,$460,$44C,$44C,$44C,$44C ;
              03 D4 03 D4 03 FC 04 10 
              04 1A 04 38 04 42 04 56 
              04 60 04 60 04 4C 04 4C 
              04 4C 04 4C             
                                      ;       980, 980, 980, 980, 980, 980,1020,1040,1050,1080,1090,1110,1120,1120,1100,1100,1100,1100 ;
0064BD 7F64BD 03 D4 03 D4 03 D4 03 D4     dw $3D4,$3D4,$3D4,$3D4,$3D4,$3D4,$3FC,$410,$41A,$438,$442,$456,$460,$460,$44C,$44C,$44C,$44C ;
              03 D4 03 D4 03 FC 04 10 
              04 1A 04 38 04 42 04 56 
              04 60 04 60 04 4C 04 4C 
              04 4C 04 4C             
                                      ;       980, 980, 980, 980, 980, 980,1020,1040,1050,1080,1090,1110,1120,1120,1100,1100,1100,1100 ;
0064E1 7F64E1                         verpmBins_F:       ; row bin(36 bytes)(offset = 648)($0288)
0064E1 7F64E1 01 90 02 71 03 52 04 33     dw $190,$271,$352,$433,$514,$5F5,$6D6,$7B7,$898,$979,$A5A,$B3B,$C1C,$CFD,$DDE,$EBF,$FA0,$1081
              05 14 05 F5 06 D6 07 B7 
              08 98 09 79 0A 5A 0B 3B 
              0C 1C 0C FD 0D DE 0E BF 
              0F A0 10 81             
                                      ; RPM   400, 625, 850,1075,1300,1525,1750,1975,2200,2425,2650,2875,3100,3325,3550,3775,4000,4225
006505 7F6505                         vemapBins_F:       ; column bins(36 bytes)(offset = 684)($02AC)
006505 7F6505 00 96 00 C8 00 FA 01 2C     dw $96,$C8,$FA,$12C,$15E,$190,$1C2,$1F4,$226,$258,$28A,$2BC,$2EE,$320,$352,$384,$3B6,$3E8
              01 5E 01 90 01 C2 01 F4 
              02 26 02 58 02 8A 02 BC 
              02 EE 03 20 03 52 03 84 
              03 B6 03 E8             
                                      ;KPAx10 150,200,250,300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950,1000
                                      ; ADC   42, 89,136, 183, 230, 277, 323, 370, 417, 464, 511, 558, 605, 652, 699, 746, 793,840
                                      ; V    .20,.43,.66, .89,1.12,1.35,1.58,1.81,2.04,2.27,2.50,2.73,2.96,3.19,3.42,3.65,3.88,4.11
006529 7F6529                         barCorVals_F:      ; 18 bytes for barometric correction values (KpA x 10)(offset = 720)($02D0)
006529 7F6529 03 16 03 34 03 52 03 70     dw $0316,$0334,$0352,$0370,$038E,$03AC,$03CA,$03E8,$0406
              03 8E 03 AC 03 CA 03 E8 
              04 06                   
                                      ;        790,  820,  850,  880,  910,  940,  970, 1000, 1030
00653B 7F653B                         barCorDelta_F:     ; 18 bytes for barometric correction  (% x 10)(offset = 738)($02E2)
00653B 7F653B 04 56 04 42 04 2E 04 24     dw $0456,$0442,$042E,$0424,$0410,$0406,$03FC,$03E8,$03DE
              04 10 04 06 03 FC 03 E8 
              03 DE                   
                                      ;       1110, 1090, 1070, 1060, 1040, 1030, 1020, 1000, 990
00654D 7F654D                         dwellvolts_F:      ; 12 bytes for dwell battery correction (volts x 10)(offset = 756)($02F4)
00654D 7F654D 00 3C 00 50 00 64 00 78     dw $003C,$0050,$0064,$0078,$008C,$00A0
              00 8C 00 A0             
                                      ;         60,   80,  100,  120,  140,  160
006559 7F6559                         dwellcorr_F:       ; 12 bytes for dwell battery correction (% x 10)(offset = 768)($0300)
006559 7F6559 13 88 09 B0 06 90 05 00     dw $1388,$09B0,$0690,$0500,$03FC,$0370
              03 FC 03 70             
                                      ;       5000, 2480, 1680, 1280, 1020,  880
006565 7F6565                         tempTable1_F:      ; 20 bytes for table common temperature values (degrees C or F x 10)(offset = 780)($030C)
006565 7F6565 FE 70 FF FE 00 02 00 C8     dw $FE70,$FFFE,$0002,$00C8,$0190,$0258,$0320,$03E8,$0514,$0708
              01 90 02 58 03 20 03 E8 
              05 14 07 08             
                                      ;       -400,   -2,    2,  200,  400,  600,  800, 1000, 1300, 1800
006579 7F6579                         tempTable2_F:      ; 20 bytes for table common temperature values (degrees C or F x 10)(offset = 800)($0320)
006579 7F6579 FF 9C FF FE 00 02 02 16     dw $FF9C,$FFFE,$0002,$0216,$02E9,$03BC,$048F,$0562,$0635,$0708
              02 E9 03 BC 04 8F 05 62 
              06 35 07 08             
                                      ;        -100,  -2,    2,  534,  745, 956, 1167, 1378, 1589, 1800
00658D 7F658D                         matCorrTemps2_F:   ; 18 bytes for MAT correction temperature (degrees C or F x 10)(offset = 820)($0334)
00658D 7F658D FE 70 FF FE 00 02 02 4E     dw $FE70,$FFFE,$0002,$024E,$035C,$046A,$0578,$0794,$09B0
              03 5C 04 6A 05 78 07 94 
              09 B0                   
                                      ;       -400,   -2,    2,  590,  860, 1130, 1400, 1940, 2480
00659F 7F659F                         matCorrDelta2_F:   ; 18 bytes for MAT correction (% x 10)(offset = 838)($0346)
00659F 7F659F 04 E9 04 7D 04 7C 03 F9     dw $04E9,$047D,$047C,$03F9,$03C7,$0399,$0370,$0327,$02EA
              03 C7 03 99 03 70 03 27 
              02 EA                   
                                      ;       1257, 1149, 1148, 1017,  967,  921,  880,  807,  746
0065B1 7F65B1                         primePWTable_F:    ; 20 bytes for priming pulse width (msec x 10)(offset = 856)($0358)
0065B1 7F65B1 02 8F 02 82 02 81 02 1D     dw $028F,$0282,$0281,$021D,$01EE,$01AB,$015D,$0121,$00E1,$009E
              01 EE 01 AB 01 5D 01 21 
              00 E1 00 9E             
                                      ;        655,  642,  641,  541,  494,  427,  349,  289,  225,  158
0065C5 7F65C5                         crankPctTable_F:   ; 20 bytes for cranking pulsewidth adder (% x 10 of reqFuel)(offset = 876)($036C)
0065C5 7F65C5 0C B2 0C 3E 0C 3A 09 C4     dw $0CB2,$0C3E,$0C3A,$09C4,$08CA,$07D0,$06D6,$05DC,$04E2,$03E8
              08 CA 07 D0 06 D6 05 DC 
              04 E2 03 E8             
                                      ;       3250, 3134, 3130, 2500, 2250, 2000, 1750, 1500, 1250, 1000
0065D9 7F65D9                         asePctTable_F:     ; 20 bytes for after start enrichment adder (% x 10)(offset = 896)($0380)
0065D9 7F65D9 02 08 01 FA 01 FA 01 AE     dw $0208,$01FA,$01FA,$01AE,$0190,$0172,$0154,$0136,$0118,$00FA
              01 90 01 72 01 54 01 36 
              01 18 00 FA             
                                      ;        520,  506,  506,  430,  400,  370,  340,  310,  280,  250
0065ED 7F65ED                         aseRevTable_F:     ; 20 bytes for after start enrichment time (engine revolutions)(offset = 916)($0394)
0065ED 7F65ED 01 5E 01 55 01 54 01 22     dw $015E,$0155,$0154,$0122,$010E,$00FA,$00E6,$00D2,$00BE,$00AA
              01 0E 00 FA 00 E6 00 D2 
              00 BE 00 AA             
                                      ;        350,  341,  340,  290,  270,  250,  230,  210,  190,  170
006601 7F6601                         wueBins_F:         ; 20 bytes for after warm up enrichment adder (% x 10)(offset = 936)($03A8)
006601 7F6601 07 6C 06 A5 06 A4 06 40     dw $076C,$06A5,$06A4,$0640,$05DC,$0578,$0514,$04B0,$044C,$03E8
              05 DC 05 78 05 14 04 B0 
              04 4C 03 E8             
                                      ;       1900, 1701, 1700, 1600, 1500, 1400, 1300, 1200, 1100, 1000
006615 7F6615                         TOEbins_F:         ; 8 bytes for Throttle Opening Enrichment adder (%)(offset = 956)($03BC)
006615 7F6615 00 14 00 19 00 1E 00 23     dw $0014,$0019,$001E,$0023
                                      ;         20,   25,   30,   35
00661D 7F661D                         TOErates_F:        ; 8 bytes for Throttle Opening Enrichment rate (TpsPctDOT x 10)(offset = 964)($03C4)
00661D 7F661D 01 F4 03 E8 09 C4 13 88     dw $01F4,$03E8,$09C4,$1388
                                      ;        500, 1000, 2500, 5000
006625 7F6625                         DdBndBase_F:       ; 2 bytes for injector deadband at 13.2V (mSec * 10)(offset = 972)($03CC)
006625 7F6625 00 5A                       dw $005A       ; 90 = .9mS
006627 7F6627                         DdBndCor_F:        ; 2 bytes for injector deadband voltage correction (mSec/V x 100)(offset = 974)($03CE)
006627 7F6627 00 12                       dw $0012       ; 18 = .18mS/V
006629 7F6629                         tpsThresh_F:       ; 2 bytes for Throttle Opening Enrichment threshold (TpsPctx10/100mS)(offset = 976)($03D0)
006629 7F6629 01 C2                       dw $01C2       ; 450 = 45% per Sec
00662B 7F662B                         TOEtime_F:         ; 2 bytes for Throttle Opening Enrich time in 100mS increments(mSx10)(offset = 978)($03D2)
00662B 7F662B 00 14                       dw $0014       ; 20 = 2mS
00662D 7F662D                         ColdAdd_F:         ; 2 bytes for Throttle Opening Enrichment cold temperature adder at -40F (%)(offset = 980)($03D4)
00662D 7F662D 00 14                       dw $0014       ; 20%
00662F 7F662F                         ColdMul_F:         ; 2 bytes for Throttle Opening Enrichment multiplyer at -40F (%)(offset = 982)($03D6)
00662F 7F662F 00 82                       dw $0082         ; 130%
006631 7F6631                         InjDelDegx10_F:    ; 2 bytes for Injection delay from trigger to start of injection (deg x 10) (offset = 984)($03D8)
006631 7F6631 00 01                       dw $0001       ; 1 = 0.1 degree
006633 7F6633                         OFCtps_F:          ; 2 bytes for Overrun Fuel Cut min TpS%x10(offset = 986)($03DA)
006633 7F6633 00 14                       dw $0014       ; 20 = 2%
006635 7F6635                         OFCrpm_F:          ; 2 bytes for Overrun Fuel Cut min RPM(offset = 988)($03DC)
006635 7F6635 03 84                       dw $0384       ; 900
006637 7F6637                         OFCmap_F:          ; 2 bytes for Overrun Fuel Cut maximum manifold pressure permissive (KPAx10)(offset = 990)($03DE)
006637 7F6637 00 FA                       dw $00FA       ; 250 = 25.0KPA
006639 7F6639                         OFCdel_F:          ; 2 bytes for Overrun Fuel Cut delay time (Sec x 10)(offset = 992)($03E0)
006639 7F6639 00 32                       dw $0032         ; 50 = 5.0Sec
00663B 7F663B                         crankingRPM_F:     ; 2 bytes for crank/run transition (RPM)(offset = 994)($03E2)
00663B 7F663B 01 5E                       dw $015E       ; 350
00663D 7F663D                         floodClear_F:      ; 2 bytes for TPS position for flood clear (% x 10)(offset = 996)($03E4)
00663D 7F663D 03 84                       dw $0384       ; 900
00663F 7F663F                         Stallcnt_F:        ; 2 bytes for no crank or stall condition counter (1mS increments) (offset = 998)($03E6)
00663F 7F663F 07 D0                       dw $07D0       ; 2000 = 2 seconds
006641 7F6641                         tpsMin_F:          ; 2 bytes for TPS calibration closed throttle ADC(offset = 1000)($03E8)
006641 7F6641 00 32                       dw $0032       ; 50
006643 7F6643                         tpsMax_F:          ; 2 bytes for TPS calibration wide open throttle ADC(offset = 1002)($03EA)
006643 7F6643 03 E8                       dw $03E8       ; 1000
006645 7F6645                         reqFuel_F:         ; 2 bytes for Pulse width for 14.7 AFR @ 100% VE (mS x 10)(offset = 1004)($03EC)
006645 7F6645 08 52                       dw $0852       ; 2130 = 21.30 mS
006647 7F6647                         enginesize_F:      ; 2 bytes for displacement of two engine cylinders (for TS reqFuel calcs only)(cc)(offset = 1006)($03EE)
006647 7F6647 06 40                       dw $640        ; 1600
006649 7F6649                         InjPrFlo_F         ; 2 bytes for Pair of injectors flow rate (L/hr x 100)(offset = 1008)($03F0)
006649 7F6649 01 90                       dw $0190       ; Decimal 400 = 40L/Hr
00664B 7F664B                         staged_pri_size_F: ; 1 byte for flow rate of 1 injector (for TS reqFuel calcs only)(cc)(offset = 1010)($03F2)
00664B 7F664B FC                          db $FC         ; 252
00664C 7F664C                         alternate_F:       ; 1 byte for injector staging bit field (for TS reqFuel calcs only)(offset = 1011)($03F3)
00664C 7F664C 00                          db $00         ; 0
00664D 7F664D                         nCylinders_F:      ; 1 byte for number of engine cylinders bit field (for TS reqFuel calcs only)(offset = 1012)($03F4)
00664D 7F664D 02                          db $02         ; 2
00664E 7F664E                         nInjectors_F:      ; 1 byte for number of injectors bit field (for TS reqFuel calcs only)(offset = 1013)($03F5)
00664E 7F664E 02                          db $02         ; 2
00664F 7F664F                         divider_F:         ; 1 byte for squirts per cycle bit field (for TS reqFuel calcs only)(offset = 1014)($03F6)
00664F 7F664F 01                          db $01         ; 1
                                      ; 1015 bytes used, 1024 - 1015 = 9 bytes left
                                      ;*********************************************************************
                                      ; Page 2 copied into RAM on start up. All pages 1024 bytes
                                      ; ST table, ranges and other configurable constants
                                      ; stBins values are degrees x10, strpmBins values are RPM,
                                      ; stmapBins values are KPAx10
                                      ;*********************************************************************
006650 7F6650                         stBins_F:         ; (Degrees X 10)(648 bytes)(offset = 0)
                                             ;ROW------------>
006650 7F6650 00 96 00 96 00 96 00 96     dw $0096,$0096,$0096,$0096,$00D2,$0154,$0154,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E ; C
              00 D2 01 54 01 54 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E             
                                      ;        150,  150,  150,  150,  210,  340,  340,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350 ; O
006674 7F6674 00 96 00 96 00 96 00 96     dw $0096,$0096,$0096,$0096,$00D2,$0154,$0154,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E ; L
              00 D2 01 54 01 54 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E             
                                      ;        150,  150,  150,  150,  210,  340,  340,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350 ; |
006698 7F6698 00 96 00 96 00 96 00 96     dw $0096,$0096,$0096,$0096,$00D2,$0154,$0154,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E ; |
              00 D2 01 54 01 54 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E             
                                      ;        150,  150,  150,  150,  210,  340,  340,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350 ; |
0066BC 7F66BC 00 96 00 96 00 96 00 96     dw $0096,$0096,$0096,$0096,$00FA,$0154,$0154,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E ; |
              00 FA 01 54 01 54 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E             
                                      ;        150,  150,  150,  150,  250,  340,  340,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350 ; |
0066E0 7F66E0 00 96 00 96 00 96 00 96     dw $0096,$0096,$0096,$0096,$00FA,$0154,$0154,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E ; |
              00 FA 01 54 01 54 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E             
                                      ;        150,  150,  150,  150,  250,  340,  340,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350 ; |
006704 7F6704 00 C8 00 C8 00 C8 00 C8     dw $00C8,$00C8,$00C8,$00C8,$00FA,$014A,$014A,$0154,$0154,$0154,$0154,$0154,$0154,$0154,$0154,$0154,$0154,$0154 ; V
              00 FA 01 4A 01 4A 01 54 
              01 54 01 54 01 54 01 54 
              01 54 01 54 01 54 01 54 
              01 54 01 54             
                                      ;        200,  200,  200,  200,  250,  330,  330,  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,  340 ;
006728 7F6728 00 E6 00 E6 01 04 01 22     dw $00E6,$00E6,$0104,$0122,$0140,$0140,$0140,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A ;
              01 40 01 40 01 40 01 4A 
              01 4A 01 4A 01 4A 01 4A 
              01 4A 01 4A 01 4A 01 4A 
              01 4A 01 4A             
                                      ;        230,  230,  260,  290,  320,  320,  320,  330,  330,  330,  330,  330,  330,  330,  330,  330,  330,  330 ;
00674C 7F674C 01 04 01 04 01 18 01 2C     dw $0104,$0104,$0118,$012C,$0140,$0140,$0140,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A ;
              01 40 01 40 01 40 01 4A 
              01 4A 01 4A 01 4A 01 4A 
              01 4A 01 4A 01 4A 01 4A 
              01 4A 01 4A             
                                      ;        260,  260,  280,  300,  320,  320,  320,  330,  330,  330,  330,  330,  330,  330,  330,  330,  330,  330 ;
006770 7F6770 00 FA 00 FA 01 0E 01 22     dw $00FA,$00FA,$010E,$0122,$0136,$0136,$0136,$0140,$0140,$0140,$0140,$0140,$0140,$0140,$0140,$0140,$0140,$0140 ;
              01 36 01 36 01 36 01 40 
              01 40 01 40 01 40 01 40 
              01 40 01 40 01 40 01 40 
              01 40 01 40             
                                      ;        250,  250,  270,  290,  310,  310,  310,  320,  320,  320,  320,  320,  320,  320,  320,  320,  320,  320 ;
006794 7F6794 00 F0 00 F0 00 FA 01 0E     dw $00F0,$00F0,$00FA,$010E,$0122,$0122,$0122,$012C,$012C,$012C,$012C,$012C,$012C,$012C,$012C,$012C,$012C,$012C ;
              01 22 01 22 01 22 01 2C 
              01 2C 01 2C 01 2C 01 2C 
              01 2C 01 2C 01 2C 01 2C 
              01 2C 01 2C             
                                      ;        240,  240,  250,  270,  290,  290,  290,  300,  300,  300,  300,  300,  300,  300,  300,  300,  300,  300 ;
0067B8 7F67B8 00 E6 00 E6 00 F0 00 FA     dw $00E6,$00E6,$00F0,$00FA,$0118,$0118,$0118,$0122,$0122,$0122,$0122,$0122,$0122,$0122,$0122,$0122,$0122,$0122 ;
              01 18 01 18 01 18 01 22 
              01 22 01 22 01 22 01 22 
              01 22 01 22 01 22 01 22 
              01 22 01 22             
                                      ;        230,  230,  240,  250,  280,  280,  280,  290,  290,  290,  290,  290,  290,  290,  290,  290,  290,  290 ;
0067DC 7F67DC 00 DC 00 DC 00 DC 00 E6     dw $00DC,$00DC,$00DC,$00E6,$00FA,$00FA,$00FA,$0104,$0104,$0104,$0104,$0104,$0104,$0104,$0104,$0104,$0104,$0104 ;
              00 FA 00 FA 00 FA 01 04 
              01 04 01 04 01 04 01 04 
              01 04 01 04 01 04 01 04 
              01 04 01 04             
                                      ;        220,  220,  220,  230,  250,  250,  250,  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,  260 ;
006800 7F6800 00 D2 00 D2 00 D2 00 DC     dw $00D2,$00D2,$00D2,$00DC,$00DC,$00DC,$00E6,$00E6,$00E6,$00F0,$00F0,$00FA,$00FA,$00FA,$00FA,$00FA,$00FA,$00FA ;
              00 DC 00 DC 00 E6 00 E6 
              00 E6 00 F0 00 F0 00 FA 
              00 FA 00 FA 00 FA 00 FA 
              00 FA 00 FA             
                                      ;        210,  210,  210,  220,  220,  220,  230,  230,  230,  240,  240,  250,  250,  250,  250,  250,  250,  250 ;
006824 7F6824 00 B4 00 B4 00 B4 00 BE     dw $00B4,$00B4,$00B4,$00BE,$00C8,$00D2,$00D2,$00DC,$00DC,$00E6,$00E6,$00F0,$00F0,$00F0,$00F0,$00F0,$00F0,$00F0 ;
              00 C8 00 D2 00 D2 00 DC 
              00 DC 00 E6 00 E6 00 F0 
              00 F0 00 F0 00 F0 00 F0 
              00 F0 00 F0             
                                      ;        180,  180,  180,  190,  200,  210,  210,  220,  220,  230,  230,  240,  240,  240,  240,  240,  240,  240 ;
006848 7F6848 00 A0 00 A0 00 A0 00 A0     dw $00A0,$00A0,$00A0,$00A0,$00A0,$00AA,$00B4,$00BE,$00C8,$00D2,$00DC,$00E6,$00E6,$00E6,$00E6,$00E6,$00E6,$00E6 ;
              00 A0 00 AA 00 B4 00 BE 
              00 C8 00 D2 00 DC 00 E6 
              00 E6 00 E6 00 E6 00 E6 
              00 E6 00 E6             
                                      ;        160,  160,  160,  160,  160,  170,  180,  190,  200,  210,  220,  230,  230,  230,  230,  230,  230,  230 ;
00686C 7F686C 00 8C 00 8C 00 8C 00 8C     dw $008C,$008C,$008C,$008C,$0096,$00A0,$00AA,$00B4,$00BE,$00C8,$00D2,$00DC,$00DC,$00DC,$00DC,$00DC,$00DC,$00DC ;
              00 96 00 A0 00 AA 00 B4 
              00 BE 00 C8 00 D2 00 DC 
              00 DC 00 DC 00 DC 00 DC 
              00 DC 00 DC             
                                      ;        140,  140,  140,  140,  150,  160,  170,  180,  190,  200,  210,  220,  220,  220,  220,  220,  220,  220 ;
006890 7F6890 00 78 00 78 00 78 00 78     dw $0078,$0078,$0078,$0078,$0082,$008C,$0096,$00A0,$00AA,$00B4,$00BE,$00C8,$00D2,$00D2,$00D2,$00D2,$00D2,$00D2 ;
              00 82 00 8C 00 96 00 A0 
              00 AA 00 B4 00 BE 00 C8 
              00 D2 00 D2 00 D2 00 D2 
              00 D2 00 D2             
                                      ;        120,  120,  120,  120,  130,  140,  150,  160,  170,  180,  190,  200,  210,  210,  210,  210,  210,  210 ;
0068B4 7F68B4 00 64 00 64 00 6E 00 78     dw $0064,$0064,$006E,$0078,$0082,$008C,$0096,$00A0,$00AA,$00B4,$00BE,$00C8,$00D2,$00D2,$00D2,$00D2,$00D2,$00D2 ;
              00 82 00 8C 00 96 00 A0 
              00 AA 00 B4 00 BE 00 C8 
              00 D2 00 D2 00 D2 00 D2 
              00 D2 00 D2             
                                      ;        100,  100,  110,  120,  130,  140,  150,  160,  170,  180,  190,  200,  210,  210,  210,  210,  210,  210 ;
0068D8 7F68D8                         strpmBins_F:       ; row bins (36 bytes)(offset = 648)($0288)
0068D8 7F68D8 01 90 02 71 03 52 04 33     dw $190,$271,$352,$433,$514,$5F5,$6D6,$7B7,$898,$979,$A5A,$B3B,$C1C,$CFD,$DDE,$EBF,$FA0,$1081
              05 14 05 F5 06 D6 07 B7 
              08 98 09 79 0A 5A 0B 3B 
              0C 1C 0C FD 0D DE 0E BF 
              0F A0 10 81             
                                      ; RPM   400, 625, 850,1075,1300,1525,1750,1975,2200,2425,2650,2875,3100,3325,3550,3775,4000,4225
0068FC 7F68FC                         stmapBins_F:       ; column bins 936 bytes)(offset = 684)($02AC)
0068FC 7F68FC 00 96 00 C8 00 FA 01 2C     dw $96,$C8,$FA,$12C,$15E,$190,$1C2,$1F4,$226,$258,$28A,$2BC,$2EE,$320,$352,$384,$3B6,$3E8
              01 5E 01 90 01 C2 01 F4 
              02 26 02 58 02 8A 02 BC 
              02 EE 03 20 03 52 03 84 
              03 B6 03 E8             
                                      ;KPAx10 150,200,250,300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950,1000
                                      ; ADC   42, 89,136, 183, 230, 277, 323, 370, 417, 464, 511, 558, 605, 652, 699, 746, 793,840
                                      ; V    .20,.43,.66, .89,1.12,1.35,1.58,1.81,2.04,2.27,2.50,2.73,2.96,3.19,3.42,3.65,3.88,4.11
006920 7F6920                         heton_F:      ; 2 bytes for High engine temperature alarm on set point (degF*10)(offset = 720)($02D0)
006920 7F6920 08 66                       dw $0866  ; Decimal 2150 = 215 degF
006922 7F6922                         hetoff_F:     ; 2 bytes for High engine temperature alarm off set point (degF*10)(offset = 722)($02D2)
006922 7F6922 08 34                       dw $0834  ; Decimal 2100 = 210 degF
006924 7F6924                         hoton_F:      ; 2 bytes for High oil temperature alarm on set point (degF*10)(offset = 724)($02D4)
006924 7F6924 08 FC                       dw $08FC  ; Decimal 2300 = 230 degF
006926 7F6926                         hotoff_F:     ; 2 bytes for High oil temperature alarm off set point (degF*10)(offset = 726)($02D6)
006926 7F6926 08 98                       dw $0898  ; Decimal 2200 = 220 degF
006928 7F6928                         hfton_F:      ; 2 bytes for High fuel temperature alarm on set point (degF*10)(offset = 728)($02D8)
006928 7F6928 08 66                       dw $0866  ; Decimal 2150 = 215 degF
00692A 7F692A                         hftoff_F:     ; 2 bytes for High fuel temperature alarm off set point (degF*10)(offset = 730)($02DA)
00692A 7F692A 08 34                       dw $0834  ; Decimal 2100 = 210 degF
00692C 7F692C                         hegton_F:      ; 2 bytes for High exhaust gas temperature alarm on set point (degF)(offset = 732)($02DC)
00692C 7F692C 04 B0                       dw $04B0   ; Decimal 1200 = 1200 degF
00692E 7F692E                         hegtoff_F:     ; 2 bytes for High exhaust gas temperature alarm off set point (deg)(offset = 734)($02DE)
00692E 7F692E 04 4C                       dw $044C   ; Decimal 1100 = 1100 degF
006930 7F6930                         lopon_F:      ; 2 bytes for Low engine oil pressure alarm on set point (psi*10)(offset = 736)($02E0)
006930 7F6930 00 64                       dw $0064  ; Decimal 100 = 10PSI
006932 7F6932                         lopoff_F:     ; 2 bytes for Low oil engine pressure alarm off set point (psi*10)(offset = 738)($02E2)
006932 7F6932 00 96                       dw $0096  ; Decimal 150 = 15PSI
006934 7F6934                         hfpon_F:      ; 2 bytes for High fuel pressure alarm on set point (psi*10)(offset = 740)($02E4)
006934 7F6934 02 26                       dw $0226  ; Decimal 550 = 55PSI
006936 7F6936                         hfpoff_F:     ; 2 bytes for High fuel pressure alarm off set point (psi*10)(offset = 742)($02E6)
006936 7F6936 01 F4                       dw $01F4  ; Decimal 500 = 50PSI
006938 7F6938                         lfpon_F:      ; 2 bytes for Low fuel pressure alarm on set point (psi*10)(offset = 744)($02E8)
006938 7F6938 01 5E                       dw $015E  ; Decimal 350 = 35PSI
00693A 7F693A                         lfpoff_F:     ; 2 bytes for Low fuel pressure alarm off set point (psi*10)(offset = 746)($02EA)
00693A 7F693A 01 90                       dw $0190  ; Decimal 400 = 40PSI
                                      ; 750 bytes used, 1024 - 750 = 274 bytes left
                                      ;*********************************************************************
                                      ; Page 3 copied into RAM on start up. All pages 1024 bytes
                                      ; AFR table, ranges and other configurable constants
                                      ; afrBins values are Air Fuel Ratio x10, afrrpmBins values are RPM,
                                      ; afrmapBins values are KPAx10
                                      ;*********************************************************************
00693C 7F693C                         afrBins_F:         ; (AFR X 100) (648 bytes)(offset = 0)
                                             ;ROW------------>
00693C 7F693C 05 14 05 78 05 78 05 78     dw  $514, $578, $578, $578, $640, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4 ; C
              06 40 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4             
                                      ;       1300, 1400, 1400, 1400, 1600, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700 ; O
006960 7F6960 05 14 05 78 05 78 05 78     dw  $514, $578, $578, $578, $640, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4 ; L
              06 40 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4             
                                      ;       1300, 1400, 1400, 1400, 1600, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700 ; |
006984 7F6984 05 14 05 78 05 78 05 78     dw  $514, $578, $578, $578, $640, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4 ; |
              06 40 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4             
                                      ;       1300, 1400, 1400, 1400, 1600, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700 ; |
0069A8 7F69A8 05 14 05 78 05 78 05 78     dw  $514, $578, $578, $578, $640, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4; |
              06 40 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4             
                                      ;       1300, 1400, 1400, 1400, 1600, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700 ; |
0069CC 7F69CC 05 14 05 78 05 78 05 78     dw  $514, $578, $578, $578, $6A4, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ; |
              06 A4 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1400, 1700, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ; |
0069F0 7F69F0 05 14 05 78 05 78 05 DC     dw  $514, $578, $578, $5DC, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ; V
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1500, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006A14 7F6A14 05 14 05 78 05 78 06 40     dw  $514, $578, $578, $640, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ;
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1600, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006A38 7F6A38 05 14 05 78 05 78 06 40     dw  $514, $578, $578, $640, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ;
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1600, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006A5C 7F6A5C 05 14 05 78 05 78 06 40     dw  $514, $578, $578, $640, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ;
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1600, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006A80 7F6A80 05 14 05 78 05 78 06 40     dw  $514, $578, $578, $640, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ;
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1640, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006AA4 7F6AA4 05 14 05 78 05 78 06 40     dw  $514, $578, $578, $640, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ;
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1600, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006AC8 7F6AC8 05 14 05 78 05 78 06 40     dw  $514, $578, $578, $640, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ;
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1600, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006AEC 7F6AEC 05 14 05 14 05 14 06 40     dw  $514, $514, $514, $640, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ;
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1300, 1300, 1600, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006B10 7F6B10 05 14 05 14 05 14 05 DC     dw  $514, $514, $514, $5DC, $640, $640, $640, $640, $640, $640, $640, $640, $640, $640, $640, $640, $640, $640 ;
              06 40 06 40 06 40 06 40 
              06 40 06 40 06 40 06 40 
              06 40 06 40 06 40 06 40 
              06 40 06 40             
                                      ;       1300, 1300, 1300, 1500, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600 ;
006B34 7F6B34 05 14 05 14 05 14 05 14     dw  $514, $514, $514, $514, $514, $514, $514, $514, $514, $514, $514, $514, $514, $514, $50A, $50A, $50A, $500 ;
              05 14 05 14 05 14 05 14 
              05 14 05 14 05 14 05 14 
              05 14 05 14 05 0A 05 0A 
              05 0A 05 00             
                                      ;       1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1290, 1290, 1290, 1280 ;
006B58 7F6B58 05 14 05 14 05 14 05 14     dw  $514, $514, $514, $514, $514, $514, $514, $50A, $50A, $50A, $500, $500, $500, $4F6, $4F6, $4F6, $4EC, $4EC ;
              05 14 05 14 05 14 05 0A 
              05 0A 05 0A 05 00 05 00 
              05 00 04 F6 04 F6 04 F6 
              04 EC 04 EC             
                                      ;       1300, 1300, 1300, 1300, 1300, 1300, 1300, 1290, 1290, 1290, 1280, 1280, 1280, 1270, 1270, 1270, 1260, 1260 ;
006B7C 7F6B7C 05 14 05 14 05 14 05 14     dw  $514, $514, $514, $514, $50A, $50A, $50A, $500, $500, $500, $4F6, $4F6, $4F6, $4EC, $4EC, $4EC, $4E2, $4E2 ;
              05 0A 05 0A 05 0A 05 00 
              05 00 05 00 04 F6 04 F6 
              04 F6 04 EC 04 EC 04 EC 
              04 E2 04 E2             
                                      ;       1300, 1300, 1300, 1300, 1290, 1290, 1290, 1280, 1280, 1280, 1270, 1270, 1270, 1260, 1260, 1260, 1250, 1250 ;
006BA0 7F6BA0 05 14 05 14 05 14 05 14     dw  $514, $514, $514, $514, $50A, $50A, $50A, $500, $500, $500, $4F6, $4F6, $4F6, $4EC, $4EC, $4EC, $4E2, $4E2 ;
              05 0A 05 0A 05 0A 05 00 
              05 00 05 00 04 F6 04 F6 
              04 F6 04 EC 04 EC 04 EC 
              04 E2 04 E2             
                                      ;       1300, 1300, 1300, 1300, 1290, 1290, 1290, 1280, 1280, 1280, 1270, 1270, 1270, 1260, 1260, 1260, 1250, 1250 ;
006BC4 7F6BC4                         afrrpmBins_F:       ; row bins (36 bytes)(offset = 648)($0288)
006BC4 7F6BC4 01 90 02 71 03 52 04 33     dw $190,$271,$352,$433,$514,$5F5,$6D6,$7B7,$898,$979,$A5A,$B3B,$C1C,$CFD,$DDE,$EBF,$FA0,$1081
              05 14 05 F5 06 D6 07 B7 
              08 98 09 79 0A 5A 0B 3B 
              0C 1C 0C FD 0D DE 0E BF 
              0F A0 10 81             
                                      ; RPM   400, 625, 850,1075,1300,1525,1750,1975,2200,2425,2650,2875,3100,3325,3550,3775,4000,4225
006BE8 7F6BE8                         afrmapBins_F:       ; column bins (36 bytes)(offset = 684)($02AC)
006BE8 7F6BE8 00 96 00 C8 00 FA 01 2C     dw $96,$C8,$FA,$12C,$15E,$190,$1C2,$1F4,$226,$258,$28A,$2BC,$2EE,$320,$352,$384,$3B6,$3E8
              01 5E 01 90 01 C2 01 F4 
              02 26 02 58 02 8A 02 BC 
              02 EE 03 20 03 52 03 84 
              03 B6 03 E8             
                                      ;KPAx10 150,200,250,300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950,1000
                                      ; ADC   42, 89,136, 183, 230, 277, 323, 370, 417, 464, 511, 558, 605, 652, 699, 746, 793,840
                                      ; V    .20,.43,.66, .89,1.12,1.35,1.58,1.81,2.04,2.27,2.50,2.73,2.96,3.19,3.42,3.65,3.88,4.11
                                      ; 720 bytes used, 1024 - 720 = 304 bytes left
006C0C 7F6C0C -> $6C0C                BPEM488_TABS_END                EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
006C0C 7F6C0C -> $7F6C0C              BPEM488_TABS_END_LIN    EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (base_BPEM488.s)                                                           *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module bundles all the BPEM488 engine controller modules into one             *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project (This module)            *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 25 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C0C 7F6C0C S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001000 0FD000                                                 ORG     BASE_VARS_START, BASE_VARS_START_LIN
001000 0FD000 -> $1000                VECTAB_VARS_START           EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001000 0FD000 -> $FD000               VECTAB_VARS_START_LIN   EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001002 0FD002                                                 ORG     VECTAB_VARS_END, VECTAB_VARS_END_LIN
001002 0FD002 -> $1002                EEEM_VARS_START         EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001002 0FD002 -> $FD002               EEEM_VARS_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001002 0FD002                                                 ORG     EEEM_VARS_END, EEEM_VARS_END_LIN
001002 0FD002 -> $1002                CLOCK_VARS_START                    EQU *     ; * Represents the current value of the paged
                                                                            ; program counter
001002 0FD002 -> $FD002               CLOCK_VARS_START_LIN        EQU @     ; @ Represents the current value of the linear
                                                                            ; program counter
001002 0FD002                                                 ORG     CLOCK_VARS_END, CLOCK_VARS_END_LIN
001002 0FD002 -> $1002                RTI_VARS_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001002 0FD002 -> $FD002               RTI_VARS_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001006 0FD006                                                 ORG     RTI_VARS_END, RTI_VARS_END_LIN
001006 0FD006 -> $1006                SCI0_VARS_START         EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
001006 0FD006 -> $FD006               SCI0_VARS_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001012 0FD012                                                 ORG     SCI0_VARS_END, SCI0_VARS_END_LIN
001012 0FD012 -> $1012                ADC0_VARS_START         EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
001012 0FD012 -> $FD012               ADC0_VARS_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001012 0FD012                                                 ORG     ADC0_VARS_END, ADC0_VARS_END_LIN
001012 0FD012 -> $1012                GPIO_VARS_START             EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001012 0FD012 -> $FD012               GPIO_VARS_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001012 0FD012                                                 ORG     GPIO_VARS_END, GPIO_VARS_END_LIN
001012 0FD012 -> $1012                ECT_VARS_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001012 0FD012 -> $FD012               ECT_VARS_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001014 0FD014                                                 ORG     ECT_VARS_END, ECT_VARS_END_LIN
001014 0FD014 -> $1014                TIM_VARS_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001014 0FD014 -> $FD014               TIM_VARS_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001014 0FD014                                                 ORG     TIM_VARS_END, TIM_VARS_END_LIN
001014 0FD014 -> $1014                STATE_VARS_START            EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001014 0FD014 -> $FD014               STATE_VARS_START_LIN    EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001025 0FD025                                                 ORG     STATE_VARS_END, STATE_VARS_END_LIN
001025 0FD025 -> $1025                INTERP_VARS_START           EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001025 0FD025 -> $FD025               INTERP_VARS_START_LIN   EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
001037 0FD037                                                 ORG     INTERP_VARS_END, INTERP_VARS_END_LIN
001037 0FD037 -> $1037                IGNCALCS_VARS_START             EQU * ; * Represents the current value of the paged
                                                                        ; program counter
001037 0FD037 -> $FD037               IGNCALCS_VARS_START_LIN     EQU @ ; @ Represents the current value of the linear
                                                                        ; program counter
001045 0FD045                                                 ORG     IGNCALCS_VARS_END, IGNCALCS_VARS_END_LIN
001045 0FD045 -> $1045                INJCALCS_VARS_START             EQU * ; * Represents the current value of the paged
                                                                        ; program counter
001045 0FD045 -> $FD045               INJCALCS_VARS_START_LIN     EQU @ ; @ Represents the current value of the linear
                                                                        ; program counter
001068 0FD068                                                 ORG     INJCALCS_VARS_END, INJCALCS_VARS_END_LIN
001068 0FD068 -> $1068                DODGETHERM_VARS_START       EQU *     ; * Represents the current value of the paged
                                                                            ; program counter
001068 0FD068 -> $FD068               DODGETHERM_VARS_START_LIN       EQU @     ; @ Represents the current value of the linear
                                                                            ; program counter
001068 0FD068                                                 ORG     DODGETHERM_VARS_END, DODGETHERM_VARS_END_LIN
001068 0FD068 -> $1068                BASE_VARS_END               EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001068 0FD068 -> $FD068               BASE_VARS_END_LIN           EQU @     ; @ Represents the current value of the linear
                                                            ; program counter
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
0054EF 7F54EF                                                 ORG     BASE_CODE_START, BASE_CODE_START_LIN
0054EF 7F54EF -> $54EF                VECTAB_CODE_START           EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
0054EF 7F54EF -> $7F54EF              VECTAB_CODE_START_LIN   EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
0057D1 7F57D1                                                 ORG     VECTAB_CODE_END, VECTAB_CODE_END_LIN
0057D1 7F57D1 -> $57D1                EEEM_CODE_START     EQU *     ; * Represents the current value of the paged
                                                                    ; program counter
0057D1 7F57D1 -> $7F57D1              EEEM_CODE_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
0057D1 7F57D1                                                 ORG     EEEM_CODE_END, EEEM_CODE_END_LIN
0057D1 7F57D1 -> $57D1                CLOCK_CODE_START            EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
0057D1 7F57D1 -> $7F57D1              CLOCK_CODE_START_LIN    EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
0057D1 7F57D1                                                 ORG     CLOCK_CODE_END, CLOCK_CODE_END_LIN
0057D1 7F57D1 -> $57D1                RTI_CODE_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
0057D1 7F57D1 -> $7F57D1              RTI_CODE_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
00582F 7F582F                                                 ORG     RTI_CODE_END, RTI_CODE_END_LIN
00582F 7F582F -> $582F                SCI0_CODE_START         EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
00582F 7F582F -> $7F582F              SCI0_CODE_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
005B17 7F5B17                                                 ORG     SCI0_CODE_END, SCI0_CODE_END_LIN
005B17 7F5B17 -> $5B17                ADC0_CODE_START         EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
005B17 7F5B17 -> $7F5B17              ADC0_CODE_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
005B17 7F5B17                                                 ORG     ADC0_CODE_END, ADC0_CODE_END_LIN
005B17 7F5B17 -> $5B17                GPIO_CODE_START     EQU *     ; * Represents the current value of the paged
                                                                    ; program counter
005B17 7F5B17 -> $7F5B17              GPIO_CODE_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
005B17 7F5B17                                                 ORG     GPIO_CODE_END, GPIO_CODE_END_LIN
005B17 7F5B17 -> $5B17                ECT_CODE_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
005B17 7F5B17 -> $7F5B17              ECT_CODE_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
005B54 7F5B54                                                 ORG     ECT_CODE_END, ECT_CODE_END_LIN
005B54 7F5B54 -> $5B54                TIM_CODE_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
005B54 7F5B54 -> $7F5B54              TIM_CODE_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
005C05 7F5C05                                                 ORG     TIM_CODE_END, TIM_CODE_END_LIN
005C05 7F5C05 -> $5C05                STATE_CODE_START            EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
005C05 7F5C05 -> $7F5C05              STATE_CODE_START_LIN    EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
005F36 7F5F36                                                 ORG     STATE_CODE_END, STATE_CODE_END_LIN
005F36 7F5F36 -> $5F36                INTERP_CODE_START           EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
005F36 7F5F36 -> $7F5F36              INTERP_CODE_START_LIN   EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
006259 7F6259                                                 ORG     INTERP_CODE_END, INTERP_CODE_END_LIN
006259 7F6259 -> $6259                IGNCALCS_CODE_START             EQU     * ; * Represents the current value of the paged
                                                                        ; program counter
006259 7F6259 -> $7F6259              IGNCALCS_CODE_START_LIN     EQU @ ; @ Represents the current value of the linear
                                                                        ; program counter
006259 7F6259                                                 ORG     IGNCALCS_CODE_END, IGNCALCS_CODE_END_LIN
006259 7F6259 -> $6259                INJCALCS_CODE_START             EQU     * ; * Represents the current value of the paged
                                                                        ; program counter
006259 7F6259 -> $7F6259              INJCALCS_CODE_START_LIN     EQU @ ; @ Represents the current value of the linear
                                                                        ; program counter
006259 7F6259                                                 ORG     INJCALCS_CODE_END, INJCALCS_CODE_END_LIN
006259 7F6259 -> $6259                DODGETHERM_CODE_START       EQU *     ; * Represents the current value of the paged
                                                                            ; program counter
006259 7F6259 -> $7F6259              DODGETHERM_CODE_START_LIN       EQU     @     ; @ Represents the current value of the linear
                                                                            ; program counter
006259 7F6259                                                 ORG     DODGETHERM_CODE_END, DODGETHERM_CODE_END_LIN
006259 7F6259 -> $6259                BASE_CODE_END               EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006259 7F6259 -> $7F6259              BASE_CODE_END_LIN           EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C0C 7F6C0C                                                 ORG     BASE_TABS_START, BASE_TABS_START_LIN
006C0C 7F6C0C -> $6C0C                VECTAB_TABS_START           EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006C0C 7F6C0C -> $7F6C0C              VECTAB_TABS_START_LIN   EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
006C0C 7F6C0C                                                 ORG     VECTAB_TABS_END, VECTAB_TABS_END_LIN
006C0C 7F6C0C -> $6C0C                EEEM_TABS_START     EQU *     ; * Represents the current value of the paged
                                                                    ; program counter
006C0C 7F6C0C -> $7F6C0C              EEEM_TABS_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
006C0C 7F6C0C                                                 ORG     EEEM_TABS_END, EEEM_TABS_END_LIN
006C0C 7F6C0C -> $6C0C                CLOCK_TABS_START            EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006C0C 7F6C0C -> $7F6C0C              CLOCK_TABS_START_LIN    EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
006C0C 7F6C0C                                                 ORG     CLOCK_TABS_END, CLOCK_TABS_END_LIN
006C0C 7F6C0C -> $6C0C                RTI_TABS_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006C0C 7F6C0C -> $7F6C0C              RTI_TABS_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
006C0C 7F6C0C                                                 ORG     RTI_TABS_END, RTI_TABS_END_LIN
006C0C 7F6C0C -> $6C0C                SCI0_TABS_START         EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
006C0C 7F6C0C -> $7F6C0C              SCI0_TABS_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
006C18 7F6C18                                                 ORG     SCI0_TABS_END, SCI0_TABS_END_LIN
006C18 7F6C18 -> $6C18                ADC0_TABS_START         EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
006C18 7F6C18 -> $7F6C18              ADC0_TABS_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
006C18 7F6C18                                                 ORG     ADC0_TABS_END, ADC0_TABS_END_LIN
006C18 7F6C18 -> $6C18                GPIO_TABS_START     EQU *     ; * Represents the current value of the paged
                                                                    ; program counter
006C18 7F6C18 -> $7F6C18              GPIO_TABS_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
006C18 7F6C18                                                 ORG     GPIO_TABS_END, GPIO_TABS_END_LIN
006C18 7F6C18 -> $6C18                ECT_TABS_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006C18 7F6C18 -> $7F6C18              ECT_TABS_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
006C18 7F6C18                                                 ORG     ECT_TABS_END, ECT_TABS_END_LIN
006C18 7F6C18 -> $6C18                TIM_TABS_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006C18 7F6C18 -> $7F6C18              TIM_TABS_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
006C18 7F6C18                                                 ORG     TIM_TABS_END, TIM_TABS_END_LIN
006C18 7F6C18 -> $6C18                STATE_TABS_START            EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006C18 7F6C18 -> $7F6C18              STATE_TABS_START_LIN    EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
006D18 7F6D18                                                 ORG     STATE_TABS_END, STATE_TABS_END_LIN
006D18 7F6D18 -> $6D18                INTERP_TABS_START           EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006D18 7F6D18 -> $7F6D18              INTERP_TABS_START_LIN   EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
006D18 7F6D18                                                 ORG     INTERP_TABS_END, INTERP_TABS_END_LIN
006D18 7F6D18 -> $6D18                IGNCALCS_TABS_START             EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
006D18 7F6D18 -> $7F6D18              IGNCALCS_TABS_START_LIN     EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
006D18 7F6D18                                                 ORG     IGNCALCS_TABS_END, IGNCALCS_TABS_END_LIN
006D18 7F6D18 -> $6D18                INJCALCS_TABS_START             EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
006D18 7F6D18 -> $7F6D18              INJCALCS_TABS_START_LIN     EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
006D18 7F6D18                                                 ORG     INJCALCS_TABS_END, INJCALCS_TABS_END_LIN
006D18 7F6D18 -> $6D18                DODGETHERM_TABS_START       EQU *     ; * Represents the current value of the paged
                                                                            ; program counter
006D18 7F6D18 -> $7F6D18              DODGETHERM_TABS_START_LIN       EQU     @     ; @ Represents the current value of the linear
                                                                            ; program counter
007516 7F7516                                                 ORG     DODGETHERM_TABS_END, DODGETHERM_TABS_END_LIN
007516 7F7516 -> $7516                BASE_TABS_END               EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
007516 7F7516 -> $7F7516              BASE_TABS_END_LIN           EQU @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (regdefs_BPEM488.s)                                                        *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module contains the 9S12XEP100 register definitions for the BPEM488 project   *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map (This module)                         *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 19 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
007516 7F7516 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port A equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0000                PORTA:       equ $0000 ; Port A Data Register (pg 108)
007516 7F7516 -> $0080                PA7:         equ $80   ; %10000000 Port A General purpose I/O data bit 7 pin #64
007516 7F7516 -> $0040                PA6:         equ $40   ; %01000000 Port A General purpose I/O data bit 6 pin #63
007516 7F7516 -> $0020                PA5:         equ $20   ; %00100000 Port A General purpose I/O data bit 5 pin #62
007516 7F7516 -> $0010                PA4:         equ $10   ; %00010000 Port A General purpose I/O data bit 4 pin #61
007516 7F7516 -> $0008                PA3:         equ $08   ; %00001000 Port A General purpose I/O data bit 3 pin #60
007516 7F7516 -> $0004                PA2:         equ $04   ; %00000100 Port A General purpose I/O data bit 2 pin #59
007516 7F7516 -> $0002                PA1:         equ $02   ; %00000010 Port A General purpose I/O data bit 1 pin #58
007516 7F7516 -> $0001                PA0:         equ $01   ; %00000001 Port A General purpose I/O data bit 0 pin #57
007516 7F7516 -> $0002                DDRA:        equ $0002 ; Port A Data Direction Register (pg 109)
                                                             ; 1 = output, 0 = HiZ input
007516 7F7516 -> $0080                DDRA7:       equ $80   ; %10000000 Port A Data Direction bit 7 pin #64
007516 7F7516 -> $0040                DDRA6:       equ $40   ; %01000000 Port A Data Direction bit 6 pin #63
007516 7F7516 -> $0020                DDRA5:       equ $20   ; %00100000 Port A Data Direction bit 5 pin #62
007516 7F7516 -> $0010                DDRA4:       equ $10   ; %00010000 Port A Data Direction bit 4 pin #61
007516 7F7516 -> $0008                DDRA3:       equ $08   ; %00001000 Port A Data Direction bit 3 pin #60
007516 7F7516 -> $0004                DDRA2:       equ $04   ; %00000100 Port A Data Direction bit 2 pin #59
007516 7F7516 -> $0002                DDRA1:       equ $02   ; %00000010 Port A Data Direction bit 1 pin #58
007516 7F7516 -> $0001                DDRA0:       equ $01   ; %00000001 Port A Data Direction bit 0 pin #57
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port B equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0001                PORTB:       equ $0001 ; Port B Data Register (pg 108)
007516 7F7516 -> $0080                PB7:         equ $80   ; %10000000 Port B General purpose I/O data bit 7 pin #31
007516 7F7516 -> $0040                PB6:         equ $40   ; %01000000 Port B General purpose I/O data bit 6 pin #30
007516 7F7516 -> $0020                PB5:         equ $20   ; %00100000 Port B General purpose I/O data bit 5 pin #29
007516 7F7516 -> $0010                PB4:         equ $10   ; %00010000 Port B General purpose I/O data bit 4 pin #28
007516 7F7516 -> $0008                PB3:         equ $08   ; %00001000 Port B General purpose I/O data bit 3 pin #27
007516 7F7516 -> $0004                PB2:         equ $04   ; %00000100 Port B General purpose I/O data bit 2 pin #26
007516 7F7516 -> $0002                PB1:         equ $02   ; %00000010 Port B General purpose I/O data bit 1 pin #25
007516 7F7516 -> $0001                PB0:         equ $01   ; %00000001 Port B General purpose I/O data bit 0 pin #24
007516 7F7516 -> $0003                DDRB:        equ $0003 ; Port B Data Direction Register (pg 109)
                                                             ; 1 = output, 0 = HiZ input
007516 7F7516 -> $0080                DDRB7:       equ $80   ; %10000000 Port B Data Direction bit 7 pin #31
007516 7F7516 -> $0040                DDRB6:       equ $40   ; %01000000 Port B Data Direction bit 6 pin #30
007516 7F7516 -> $0020                DDRB5:       equ $20   ; %00100000 Port B Data Direction bit 5 pin #29
007516 7F7516 -> $0010                DDRB4:       equ $10   ; %00010000 Port B Data Direction bit 4 pin #28
007516 7F7516 -> $0008                DDRB3:       equ $08   ; %00001000 Port B Data Direction bit 3 pin #27
007516 7F7516 -> $0004                DDRB2:       equ $04   ; %00000100 Port B Data Direction bit 2 pin #26
007516 7F7516 -> $0002                DDRB1:       equ $02   ; %00000010 Port B Data Direction bit 1 pin #25
007516 7F7516 -> $0001                DDRB0:       equ $01   ; %00000001 Port B Data Direction bit 0 pin #24
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port E equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0008                PORTE:       equ $0008 ; Port E Data Register (pg 113)
007516 7F7516 -> $0080                PE7:         equ $80   ; %10000000 Port B General purpose I/O data bit 7 pin #36
007516 7F7516 -> $0040                PE6:         equ $40   ; %01000000 Port B General purpose I/O data bit 6 pin #37
007516 7F7516 -> $0020                PE5:         equ $20   ; %00100000 Port B General purpose I/O data bit 5 pin #38
007516 7F7516 -> $0010                PE4:         equ $10   ; %00010000 Port B General purpose I/O data bit 4 pin #39
007516 7F7516 -> $0008                PE3:         equ $08   ; %00001000 Port B General purpose I/O data bit 3 pin #53
007516 7F7516 -> $0004                PE2:         equ $04   ; %00000100 Port B General purpose I/O data bit 2 pin #54
007516 7F7516 -> $0002                PE1:         equ $02   ; %00000010 Port B General purpose input data and interrupt bit 1 pin #55
007516 7F7516 -> $0001                PE0:         equ $01   ; %00000001 Port B General purpose input data and interrupt bit 0 pin #56
007516 7F7516 -> $0009                DDRE:        equ $0009 ; Port B Data Direction Register (pg 114)
                                                             ; 1 = output, 0 = HiZ input
007516 7F7516 -> $0080                DDRE7:       equ $80   ; %10000000 Port B Data Direction bit 7 pin #36
007516 7F7516 -> $0040                DDRE6:       equ $40   ; %01000000 Port B Data Direction bit 6 pin #37
007516 7F7516 -> $0020                DDRE5:       equ $20   ; %00100000 Port B Data Direction bit 5 pin #38
007516 7F7516 -> $0010                DDRE4:       equ $10   ; %00010000 Port B Data Direction bit 4 pin #39
007516 7F7516 -> $0008                DDRE3:       equ $08   ; %00001000 Port B Data Direction bit 3 pin #53
007516 7F7516 -> $0004                DDRE2:       equ $04   ; %00000100 Port B Data Direction bit 2 pin #54
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) PUCR equates
                                      ;*****************************************************************************************
007516 7F7516 -> $000C                PUCR:        equ $000C ; S12X_EBI ports, BKGD pin Pull-up Control Register (pg 114)
                                                             ; 1 = pull-up device enabled, 0 = pull-up device disabled
007516 7F7516 -> $0080                PUPKE:       equ $80   ; %10000000 Pull-up Port K Enable bit 7
007516 7F7516 -> $0040                BKPUE:       equ $40   ; %01000000 BKGD pin pull-up Enable bit 6
007516 7F7516 -> $0010                PUPEE:       equ $10   ; %00010000 Pull-up Port E Enable bit 4
007516 7F7516 -> $0008                PUPDE:       equ $08   ; %00001000 Pull-up Port D Enable bit 3
007516 7F7516 -> $0004                PUPCE:       equ $04   ; %00000100 Pull-up Port C Enable bit 2
007516 7F7516 -> $0002                PUPBE:       equ $02   ; %00000010 Pull-up Port B Enable bit 1
007516 7F7516 -> $0001                PUPAE:       equ $01   ; %00000001 Pull-up Port A Enable bit 0
                                      ;*****************************************************************************************
                                      ; - Memory Mapping Control (S12XMMCV4) equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0017                EPAGE:       equ $0017 ;EEEPROM Page Index Register (pg 203)
007516 7F7516 -> $0080                EP7:         equ $80   ; %10000000 EEPROM Page Index bit 7
007516 7F7516 -> $0040                EP6:         equ $40   ; %01000000 EEPROM Page Index bit 6
007516 7F7516 -> $0020                EP5:         equ $20   ; %00100000 EEPROM Page Index bit 5
007516 7F7516 -> $0010                EP4:         equ $10   ; %00010000 EEPROM Page Index bit 4
007516 7F7516 -> $0008                EP3:         equ $08   ; %00001000 EEPROM Page Index bit 3
007516 7F7516 -> $0004                EP2:         equ $04   ; %00000100 EEPROM Page Index bit 2
007516 7F7516 -> $0002                EP1:         equ $02   ; %00000010 EEPROM Page Index bit 1
007516 7F7516 -> $0001                EP0:         equ $01   ; %00000001 EEPROM Page Index bit 0
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) IRQCR equates
                                      ;*****************************************************************************************
007516 7F7516 -> $001E                IRQCR:       equ $001E ; IRQ Control Register (pg 119)
007516 7F7516 -> $0080                IRQE:        equ $80   ; %10000000 IRQ Select Edge Sensitive Only bit 7
007516 7F7516 -> $0040                IRQEN:       equ $40   ; %01000000 External IRQ Enable bit 6
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port K equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0032                PORTK:       equ $0032 ; Port K Data Register (pg 120)
007516 7F7516 -> $0080                PK7:         equ $80   ; %10000000 Port K general purpose I/O data bit 7 pin #108
007516 7F7516 -> $0040                PK6:         equ $40   ; %01000000 N/C
007516 7F7516 -> $0020                PK5:         equ $20   ; %00100000 Port K general purpose I/O data bit 5 pin #19
007516 7F7516 -> $0010                PK4:         equ $10   ; %00010000 Port K general purpose I/O data bit 4 pin #20
007516 7F7516 -> $0008                PK3:         equ $08   ; %00001000 Port K general purpose I/O data bit 3 pin #5
007516 7F7516 -> $0004                PK2:         equ $04   ; %00000100 Port K general purpose I/O data bit 2 pin #6
007516 7F7516 -> $0002                PK1:         equ $02   ; %00000010 Port K general purpose I/O data bit 1 pin #7
007516 7F7516 -> $0001                PK0:         equ $01   ; %00000001 Port K general purpose I/O data bit 0 pin #8
007516 7F7516 -> $0033                DDRK:        equ $0033 ; Port K Data Direction Register (pg 120)
                                                             ; 1 = output, 0 = HiZ input
007516 7F7516 -> $0080                DDRK7:       equ $80   ; %10000000 Port K Data Direction bit 7 pin #108
007516 7F7516 -> $0040                DDRK6:       equ $40   ; %01000000 N/C
007516 7F7516 -> $0020                DDRK5:       equ $20   ; %00100000 Port K Data Direction bit 5 pin #19
007516 7F7516 -> $0010                DDRK4:       equ $10   ; %00010000 Port K Data Direction bit 4 pin #20
007516 7F7516 -> $0008                DDRK3:       equ $08   ; %00001000 Port K Data Direction bit 3 pin #5
007516 7F7516 -> $0004                DDRK2:       equ $04   ; %00000100 Port K Data Direction bit 2 pin #6
007516 7F7516 -> $0002                DDRK1:       equ $02   ; %00000010 Port K Data Direction bit 1 pin #7
007516 7F7516 -> $0001                DDRK0:       equ $01   ; %00000001 Port K Data Direction bit 0 pin #8
                                      ;*****************************************************************************************
                                      ; - Enhanced Capture Timer (ECT16B8CV3) equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0040                ECT_TIOS:    equ $0040 ; Timer Input Capture/Output Compare Select Register (pg 535)
                                                             ; 1 = input capture, 0 = output compare
007516 7F7516 -> $0080                IOS7:        equ $80   ; %10000000 Input Capture or Output Compare Channel Config bit 7
007516 7F7516 -> $0040                IOS6:        equ $40   ; %01000000 Input Capture or Output Compare Channel Config bit 6
007516 7F7516 -> $0020                IOS5:        equ $20   ; %00100000 Input Capture or Output Compare Channel Config bit 5
007516 7F7516 -> $0010                IOS4:        equ $10   ; %00010000 Input Capture or Output Compare Channel Config bit 4
007516 7F7516 -> $0008                IOS3:        equ $08   ; %00001000 Input Capture or Output Compare Channel Config bit 3
007516 7F7516 -> $0004                IOS2:        equ $04   ; %00000100 Input Capture or Output Compare Channel Config bit 2
007516 7F7516 -> $0002                IOS1:        equ $02   ; %00000010 Input Capture or Output Compare Channel Config bit 1
007516 7F7516 -> $0001                IOS0:        equ $01   ; %00000001 Input Capture or Output Compare Channel Config bit 0
007516 7F7516 -> $0041                ECT_CFORC:   equ $0041 ; Timer Compare Force Register (pg 536)
007516 7F7516 -> $0080                FOC7:        equ $80   ; %10000000 Force Output Compare Action For Channel 7 bit 7
007516 7F7516 -> $0040                FOC6:        equ $40   ; %01000000 Force Output Compare Action For Channel 6 bit 6
007516 7F7516 -> $0020                FOC5:        equ $20   ; %00100000 Force Output Compare Action For Channel 5 bit 5
007516 7F7516 -> $0010                FOC4:        equ $10   ; %00010000 Force Output Compare Action For Channel 4 bit 4
007516 7F7516 -> $0008                FOC3:        equ $08   ; %00001000 Force Output Compare Action For Channel 3 bit 3
007516 7F7516 -> $0004                FOC2:        equ $04   ; %00000100 Force Output Compare Action For Channel 2 bit 2
007516 7F7516 -> $0002                FOC1:        equ $02   ; %00000010 Force Output Compare Action For Channel 1 bit 1
007516 7F7516 -> $0001                FOC0:        equ $01   ; %00000001 Force Output Compare Action For Channel 0 bit 0
007516 7F7516 -> $0042                ECT_OC7M:    equ $0042 ; Output Compare 7 Mask Register (pg 536)
007516 7F7516 -> $0080                OC7M7:       equ $80   ; %10000000 Output Compare 7 Mask bit 7
007516 7F7516 -> $0040                OC7M6:       equ $40   ; %01000000 Output Compare 7 Mask bit 6
007516 7F7516 -> $0020                OC7M5:       equ $20   ; %00100000 Output Compare 7 Mask bit 5
007516 7F7516 -> $0010                OC7M4:       equ $10   ; %00010000 Output Compare 7 Mask bit 4
007516 7F7516 -> $0008                OC7M3:       equ $08   ; %00001000 Output Compare 7 Mask bit 3
007516 7F7516 -> $0004                OC7M2:       equ $04   ; %00000100 Output Compare 7 Mask bit 2
007516 7F7516 -> $0002                OC7M1:       equ $02   ; %00000010 Output Compare 7 Mask bit 1
007516 7F7516 -> $0001                OC7M0:       equ $01   ; %00000001 Output Compare 7 Mask bit 0
007516 7F7516 -> $0043                ECT_OC7D:    equ $0043 ; Output Compare 7 Data Register (pg 537)
007516 7F7516 -> $0080                OC7D7:       equ $80   ; %10000000 Output Compare 7 Data bit 7
007516 7F7516 -> $0040                OC7D6:       equ $40   ; %01000000 Output Compare 7 Data bit 6
007516 7F7516 -> $0020                OC7D5:       equ $20   ; %00100000 Output Compare 7 Data bit 5
007516 7F7516 -> $0010                OC7D4:       equ $10   ; %00010000 Output Compare 7 Data bit 4
007516 7F7516 -> $0008                OC7D3:       equ $08   ; %00001000 Output Compare 7 Data bit 3
007516 7F7516 -> $0004                OC7D2:       equ $04   ; %00000100 Output Compare 7 Data bit 2
007516 7F7516 -> $0002                OC7D1:       equ $02   ; %00000010 Output Compare 7 Data bit 1
007516 7F7516 -> $0001                OC7D0:       equ $01   ; %00000001 Output Compare 7 Data bit 0
007516 7F7516 -> $0044                ECT_TCNTH:   equ $0044 ; Timer Count Register High (pg 537)
007516 7F7516 -> $0080                TCNT15:      equ $80   ; %10000000 Timer Count Data bit 15
007516 7F7516 -> $0040                TCNT14:      equ $40   ; %01000000 Timer Count Data bit 14
007516 7F7516 -> $0020                TCNT13:      equ $20   ; %00100000 Timer Count Data bit 13
007516 7F7516 -> $0010                TCNT12:      equ $10   ; %00010000 Timer Count Data bit 12
007516 7F7516 -> $0008                TCNT11:      equ $08   ; %00001000 Timer Count Data bit 11
007516 7F7516 -> $0004                TCNT10:      equ $04   ; %00000100 Timer Count Data bit 10
007516 7F7516 -> $0002                TCNT9:       equ $02   ; %00000010 Timer Count Data bit 9
007516 7F7516 -> $0001                TCNT8:       equ $01   ; %00000001 Timer Count Data bit 8
007516 7F7516 -> $0045                ECT_TCNTL:   equ $0045 ; Timer Count Register Low (pg 537)
007516 7F7516 -> $0080                TCNT7:       equ $80   ; %10000000 Timer Count Data bit 7
007516 7F7516 -> $0040                TCNT6:       equ $40   ; %01000000 Timer Count Data bit 6
007516 7F7516 -> $0020                TCNT5:       equ $20   ; %00100000 Timer Count Data bit 5
007516 7F7516 -> $0010                TCNT4:       equ $10   ; %00010000 Timer Count Data bit 4
007516 7F7516 -> $0008                TCNT3:       equ $08   ; %00001000 Timer Count Data bit 3
007516 7F7516 -> $0004                TCNT2:       equ $04   ; %00000100 Timer Count Data bit 2
007516 7F7516 -> $0002                TCNT1:       equ $02   ; %00000010 Timer Count Data bit 1
007516 7F7516 -> $0001                TCNT0:       equ $01   ; %00000001 Timer Count Data bit 0
007516 7F7516 -> $0046                ECT_TSCR1:   equ $0046 ; Timer System Control Register 1 (pg 538)
007516 7F7516 -> $0080                TEN:         equ $80   ; %10000000 Timer Enable bit 7
007516 7F7516 -> $0040                TSWAI:       equ $40   ; %01000000 Timer Module Stops While In Wait bit 6
007516 7F7516 -> $0020                TSFRZ:       equ $20   ; %00100000 Timer and Modulus Counter Stop While In Wait bit 5
007516 7F7516 -> $0010                TFFCA:       equ $10   ; %00010000 Timer Fast Flag Clear All bit 4
007516 7F7516 -> $0008                PRNT:        equ $08   ; %00001000 Precision Timer bit 3
007516 7F7516 -> $0047                ECT_TTOV:    equ $0047 ; Timer Toggle On Overflow Register 1 (pg 539)
007516 7F7516 -> $0080                TOV7:        equ $80   ; %10000000 Toggle on Overflow bit 7
007516 7F7516 -> $0040                TOV6:        equ $40   ; %01000000 Toggle on Overflow bit 6
007516 7F7516 -> $0020                TOV5:        equ $20   ; %00100000 Toggle on Overflow bit 5
007516 7F7516 -> $0010                TOV4:        equ $10   ; %00100000 Toggle on Overflow bit 4
007516 7F7516 -> $0008                TOV3:        equ $08   ; %00001000 Toggle on Overflow bit 3
007516 7F7516 -> $0004                TOV2:        equ $04   ; %00000100 Toggle on Overflow bit 2
007516 7F7516 -> $0002                TOV1:        equ $02   ; %00000010 Toggle on Overflow bit 1
007516 7F7516 -> $0001                TOV0:        equ $01   ; %00000001 Toggle on Overflow bit 0
007516 7F7516 -> $0048                ECT_TCTL1:   equ $0048 ; Timer Control Register 1 (pg 540)
007516 7F7516 -> $0080                OM7:         equ $80   ; %10000000 Output Mode 7 bit 7
007516 7F7516 -> $0040                OL7:         equ $40   ; %01000000 Output Level 7 bit 6
007516 7F7516 -> $0020                OM6:         equ $20   ; %00100000 Output Mode 6 bit 5
007516 7F7516 -> $0010                OL6:         equ $10   ; %0010000Output Level 6 bit 4
007516 7F7516 -> $0008                OM5:         equ $08   ; %00001000 Output Mode 5 bit 3
007516 7F7516 -> $0004                OL5:         equ $04   ; %00000100 Output Level 5 bit 2
007516 7F7516 -> $0002                OM4:         equ $02   ; %00000010 Output Mode 4 bit 1
007516 7F7516 -> $0001                OL4:         equ $01   ; %00000001 Output Level 4 bit 0
007516 7F7516 -> $0049                ECT_TCTL2:   equ $0049 ; Timer Control Register 2 (pg 540)
007516 7F7516 -> $0080                OM3:         equ $80   ; %10000000 Output Mode 3 bit 7
007516 7F7516 -> $0040                OL3:         equ $40   ; %01000000 Output Level 3 bit 6
007516 7F7516 -> $0020                OM2:         equ $20   ; %00100000 Output Mode 2 bit 5
007516 7F7516 -> $0010                OL2:         equ $10   ; %0010000Output Level 2 bit 4
007516 7F7516 -> $0008                OM1:         equ $08   ; %00001000 Output Mode 1 bit 3
007516 7F7516 -> $0004                OL1:         equ $04   ; %00000100 Output Level 1 bit 2
007516 7F7516 -> $0002                OM0:         equ $02   ; %00000010 Output Mode 0 bit 1
007516 7F7516 -> $0001                OL0:         equ $01   ; %00000001 Output Level 0 bit 0
007516 7F7516 -> $004A                ECT_TCTL3:   equ $004A ; Timer Control Register 3 (pg 541)
007516 7F7516 -> $0080                EDG7B:       equ $80   ; %10000000 Input Capture Edge Control 7B bit 7
007516 7F7516 -> $0040                EDG7A:       equ $40   ; %01000000 Input Capture Edge Control 7A bit 6
007516 7F7516 -> $0020                EDG6B:       equ $20   ; %00100000 Input Capture Edge Control 6B bit 5
007516 7F7516 -> $0010                EDG6A:       equ $10   ; %00010000 Input Capture Edge Control 6A bit 4
007516 7F7516 -> $0008                EDG5B:       equ $08   ; %00001000 Input Capture Edge Control 5B bit 3
007516 7F7516 -> $0004                EDG5A:       equ $04   ; %00000100 Input Capture Edge Control 5A bit 2
007516 7F7516 -> $0002                EDG4B:       equ $02   ; %00000010 Input Capture Edge Control 4B bit 1
007516 7F7516 -> $0001                EDG4A:       equ $01   ; %00000001 Input Capture Edge Control 4A bit 0
007516 7F7516 -> $004B                ECT_TCTL4:   equ $004B ; Timer Control Register 4 (pg 541)
007516 7F7516 -> $0080                EDG3B:       equ $80   ; %10000000 Input Capture Edge Control 3B bit 7
007516 7F7516 -> $0040                EDG3A:       equ $40   ; %01000000 Input Capture Edge Control 3A bit 6
007516 7F7516 -> $0020                EDG2B:       equ $20   ; %00100000 Input Capture Edge Control 2B bit 5
007516 7F7516 -> $0010                EDG2A:       equ $10   ; %00010000 Input Capture Edge Control 2A bit 4
007516 7F7516 -> $0008                EDG1B:       equ $08   ; %00001000 Input Capture Edge Control 1B bit 3
007516 7F7516 -> $0004                EDG1A:       equ $04   ; %00000100 Input Capture Edge Control 1A bit 2
007516 7F7516 -> $0002                EDG0B:       equ $02   ; %00000010 Input Capture Edge Control 0B bit 1
007516 7F7516 -> $0001                EDG0A:       equ $01   ; %00000001 Input Capture Edge Control 0A bit 0
007516 7F7516 -> $004C                ECT_TIE:     equ $004C ; Timer Interrupt Enable Register (pg 542)
                                                             ; 0 = interrupt disabled, 1 = interrupts enabled
007516 7F7516 -> $0080                C7I:         equ $80   ; %10000000 IC/OC "X" Interrupt Enable bit 7
007516 7F7516 -> $0040                C6I:         equ $40   ; %01000000 IC/OC "X" Interrupt Enable bit 6
007516 7F7516 -> $0020                C5I:         equ $20   ; %00100000 IC/OC "X" Interrupt Enable bit 5
007516 7F7516 -> $0010                C4I:         equ $10   ; %00010000 IC/OC "X" Interrupt Enable bit 4
007516 7F7516 -> $0008                C3I:         equ $08   ; %00001000 IC/OC "X" Interrupt Enable bit 3
007516 7F7516 -> $0004                C2I:         equ $04   ; %00000100 IC/OC "X" Interrupt Enable bit 2
007516 7F7516 -> $0002                C1I:         equ $02   ; %00000010 IC/OC "X" Interrupt Enable bit 1
007516 7F7516 -> $0001                C0I:         equ $01   ; %00000001 IC/OC "X" Interrupt Enable bit 0
007516 7F7516 -> $004D                ECT_TSCR2:   equ $004D ; Timer System Control Register 2 (pg 543)
007516 7F7516 -> $0080                TOI:         equ $80   ; %10000000 Timer Overflow Interrupt Enable bit 7
007516 7F7516 -> $0008                TCRE:        equ $08   ; %00001000 Timer Counter Register Enable bit 3
007516 7F7516 -> $0004                PR2:         equ $04   ; %00000100 Timer Prescaler Select bit 2
007516 7F7516 -> $0002                PR1:         equ $02   ; %00000010 Timer Prescaler Select bit 1
007516 7F7516 -> $0001                PR0:         equ $01   ; %00000001 Timer Prescaler Select bit 0
007516 7F7516 -> $004E                ECT_TFLG1:   equ $004E ; Main Timer Interrupt Flag 1 (pg 545)
007516 7F7516 -> $0080                C7F:         equ $80   ; %10000000 IC/OC Channel "x" Flag bit 7
007516 7F7516 -> $0040                C6F:         equ $40   ; %10000000 IC/OC Channel "x" Flag bit 6
007516 7F7516 -> $0020                C5F:         equ $20   ; %10000000 IC/OC Channel "x" Flag bit 5
007516 7F7516 -> $0010                C4F:         equ $10   ; %10000000 IC/OC Channel "x" Flag bit 4
007516 7F7516 -> $0008                C3F:         equ $08   ; %10000000 IC/OC Channel "x" Flag bit 3
007516 7F7516 -> $0004                C2F:         equ $04   ; %10000000 IC/OC Channel "x" Flag bit 2
007516 7F7516 -> $0002                C1F:         equ $02   ; %10000000 IC/OC Channel "x" Flag bit 1
007516 7F7516 -> $0001                C0F:         equ $01   ; %10000000 IC/OC Channel "x" Flag bit 0
007516 7F7516 -> $004F                ECT_TFLG2:   equ $004F ; Main Timer Interrupt Flag 2 (pg 545)
007516 7F7516 -> $0080                TOF:         equ $80   ; %10000000 Timer Overflow Flag
007516 7F7516 -> $0050                ECT_TC0H:    equ $0050 ; Timer IC/OC Register0 Hi (pg 546)
007516 7F7516 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $0051                ECT_TC0L:    equ $0051 ; Timer IC/OC Register0 Lo (pg 546)
007516 7F7516 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $0052                ECT_TC1H:    equ $0052 ; Timer IC/OC Register1 Hi (pg 546)
007516 7F7516 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $0053                ECT_TC1L:    equ $0053 ; Timer IC/OC Register1 Lo (pg 547)
007516 7F7516 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $0054                ECT_TC2H:    equ $0054 ; Timer IC/OC Register2 Hi (pg 547)
007516 7F7516 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $0055                ECT_TC2L:    equ $0055 ; Timer IC/OC Register2 Lo (pg 547)
007516 7F7516 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $0056                ECT_TC3H:    equ $0056 ; Timer IC/OC Register3 Hi (pg 547)
007516 7F7516 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $0057                ECT_TC3L:    equ $0057 ; Timer IC/OC Register3 Lo (pg 547)
007516 7F7516 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $0058                ECT_TC4H:    equ $0058 ; Timer IC/OC Register4 Hi (pg 547)
007516 7F7516 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $0059                ECT_TC4L:    equ $0059 ; Timer IC/OC Register4 Lo (pg 548)
007516 7F7516 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $005A                ECT_TC5H:    equ $005A ; Timer IC/OC Register5 Hi (pg 548)
007516 7F7516 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $005B                ECT_TC5L:    equ $005B ; Timer IC/OC Register5 Lo (pg 548)
007516 7F7516 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $005C                ECT_TC6H:    equ $005C ; Timer IC/OC Register6 Hi (pg 548)
007516 7F7516 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $005D                ECT_TC6L:    equ $005D ; Timer IC/OC Register6 Lo (pg 548)
007516 7F7516 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $005E                ECT_TC7H:    equ $005E ; Timer IC/OC Register7 Hi (pg 548)
007516 7F7516 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $005F                ECT_TC7L:    equ $005F ; Timer IC/OC Register7 Lo (pg 549)
007516 7F7516 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $0060                ECT_PACTL:    equ $0060 ; 16-Bit Pulse Accumulator Control Register (pg 549)
007516 7F7516 -> $0040                PAEN:         equ $40   ; %01000000 Pulse Accumulator System Enable(bit 6)
007516 7F7516 -> $0020                PAMOD:        equ $20   ; %00100000 Pulse Accumulator Mode(bit 5)
007516 7F7516 -> $0010                PEDGE:        equ $10   ; %00010000 Pulse Accumulator Edge Control(bit 4)
007516 7F7516 -> $0008                CLK1:         equ $08   ; %00001000 Clock Select(bit 3)
007516 7F7516 -> $0004                CLK0:         equ $04   ; %00000100 Clock Select(bit 2)
007516 7F7516 -> $0002                PAOV1:        equ $02   ; %00000010 Pulse Accumulator Overflow Interrupt Enable(bit 1)
007516 7F7516 -> $0001                PAI:          equ $01   ; %00000001 Pulse Accumulator Input Interrupt Enable(bit 0)
007516 7F7516 -> $0061                ECT_PAFLG:    equ $0061 ; Pulse Accumulator Flag Register (pg 551)
007516 7F7516 -> $0002                PAOVF:        equ $02   ; %00000010 Pulse Accumulator Overflow Flag(bit 1)
007516 7F7516 -> $0001                PAIF:         equ $01   ; %00000001 Pulse Accumulator input edge Flag(bit 0)
007516 7F7516 -> $0062                ECT_PACN3:   equ $0062 ; Pulse Accumulator Count Register 3 (pg 551)
007516 7F7516 -> $0080                PACNT15:     equ $80   ; %10000000 Pulse Accumulator Count Data bit 15
007516 7F7516 -> $0040                PACNT14:     equ $40   ; %01000000 Pulse Accumulator Count Data bit 14
007516 7F7516 -> $0020                PACNT13:     equ $20   ; %00100000 Pulse Accumulator Count Data bit 13
007516 7F7516 -> $0010                PACNT12:     equ $10   ; %00010000 Pulse Accumulator Count Data bit 12
007516 7F7516 -> $0008                PACNT11:     equ $08   ; %00001000 Pulse Accumulator Count Data bit 11
007516 7F7516 -> $0004                PACNT10:     equ $04   ; %00000100 Pulse Accumulator Count Data bit 10
007516 7F7516 -> $0002                PACNT9:      equ $02   ; %00000010 Pulse Accumulator Count Data bit 9
007516 7F7516 -> $0001                PACNT8:      equ $01   ; %00000001 Pulse Accumulator Count Data bit 8
007516 7F7516 -> $0063                ECT_PACN2:   equ $0063 ; Pulse Accumulator Count Register 2 (pg 552)
007516 7F7516 -> $0080                PACNT7:      equ $80   ; %10000000 Pulse Accumulator Count Data bit 15
007516 7F7516 -> $0040                PACNT6:      equ $40   ; %01000000 Pulse Accumulator Count Data bit 14
007516 7F7516 -> $0020                PACNT5:      equ $20   ; %00100000 Pulse Accumulator Count Data bit 13
007516 7F7516 -> $0010                PACNT4:      equ $10   ; %00010000 Pulse Accumulator Count Data bit 12
007516 7F7516 -> $0008                PACNT3:      equ $08   ; %00001000 Pulse Accumulator Count Data bit 11
007516 7F7516 -> $0004                PACNT2:      equ $04   ; %00000100 Pulse Accumulator Count Data bit 10
007516 7F7516 -> $0002                PACNT1:      equ $02   ; %00000010 Pulse Accumulator Count Data bit 9
007516 7F7516 -> $0001                PACNT`:      equ $01   ; %00000001 Pulse Accumulator Count Data bit 8
007516 7F7516 -> $0064                ECT_PACN1:   equ $0064 ; Pulse Accumulator Count Register 1 (pg 552)
007516 7F7516 -> $0080                PACNT15:     equ $80   ; %10000000 Pulse Accumulator Count Data bit 15
007516 7F7516 -> $0040                PACNT14:     equ $40   ; %01000000 Pulse Accumulator Count Data bit 14
007516 7F7516 -> $0020                PACNT13:     equ $20   ; %00100000 Pulse Accumulator Count Data bit 13
007516 7F7516 -> $0010                PACNT12:     equ $10   ; %00010000 Pulse Accumulator Count Data bit 12
007516 7F7516 -> $0008                PACNT11:     equ $08   ; %00001000 Pulse Accumulator Count Data bit 11
007516 7F7516 -> $0004                PACNT10:     equ $04   ; %00000100 Pulse Accumulator Count Data bit 10
007516 7F7516 -> $0002                PACNT9:      equ $02   ; %00000010 Pulse Accumulator Count Data bit 9
007516 7F7516 -> $0001                PACNT8:      equ $01   ; %00000001 Pulse Accumulator Count Data bit 8
007516 7F7516 -> $0065                ECT_PACN20:   equ $0065 ; Pulse Accumulator Count Register 0 (pg 552)
007516 7F7516 -> $0080                PACNT7:      equ $80   ; %10000000 Pulse Accumulator Count Data bit 15
007516 7F7516 -> $0040                PACNT6:      equ $40   ; %01000000 Pulse Accumulator Count Data bit 14
007516 7F7516 -> $0020                PACNT5:      equ $20   ; %00100000 Pulse Accumulator Count Data bit 13
007516 7F7516 -> $0010                PACNT4:      equ $10   ; %00010000 Pulse Accumulator Count Data bit 12
007516 7F7516 -> $0008                PACNT3:      equ $08   ; %00001000 Pulse Accumulator Count Data bit 11
007516 7F7516 -> $0004                PACNT2:      equ $04   ; %00000100 Pulse Accumulator Count Data bit 10
007516 7F7516 -> $0002                PACNT1:      equ $02   ; %00000010 Pulse Accumulator Count Data bit 9
007516 7F7516 -> $0001                PACNT`:      equ $01   ; %00000001 Pulse Accumulator Count Data bit 8
007516 7F7516 -> $006C                ECT_OCPD:     equ $006C ; Output Compare Pin Disconnect Register (pg 559)
007516 7F7516 -> $0080                OCPD7:        equ $80   ; %10000000 Output Compare Pin Disconnect bit 7
007516 7F7516 -> $0040                OCPD6:        equ $40   ; %01000000 Output Compare Pin Disconnect bit 6
007516 7F7516 -> $0020                OCPD5:        equ $20   ; %00100000 Output Compare Pin Disconnect bit 5
007516 7F7516 -> $0010                OCPD4:        equ $10   ; %00010000 Output Compare Pin Disconnect bit 4
007516 7F7516 -> $0008                OCPD3:        equ $08   ; %00001000 Output Compare Pin Disconnect bit 3
007516 7F7516 -> $0004                OCPD2:        equ $04   ; %00000100 Output Compare Pin Disconnect bit 2
007516 7F7516 -> $0002                OCPD1:        equ $02   ; %00000010 Output Compare Pin Disconnect bit 1
007516 7F7516 -> $0001                OCPD0:        equ $01   ; %00000001 Output Compare Pin Disconnect bit 0
007516 7F7516 -> $006E                ECT_PTPSR:   equ $006E ; Precision Timer Prescaler Select Register (pg 559)
007516 7F7516 -> $0080                PTPS7:       equ $80   ; %10000000 Precision Timer Prescaler Select bit 7
007516 7F7516 -> $0040                PTPS6:       equ $40   ; %01000000 Precision Timer Prescaler Select bit 6
007516 7F7516 -> $0020                PTPS5:       equ $20   ; %00100000 Precision Timer Prescaler Select bit 5
007516 7F7516 -> $0010                PTPS4:       equ $10   ; %00010000 Precision Timer Prescaler Select bit 4
007516 7F7516 -> $0008                PTPS3:       equ $08   ; %00001000 Precision Timer Prescaler Select bit 3
007516 7F7516 -> $0004                PTPS2:       equ $04   ; %00000100 Precision Timer Prescaler Select bit 2
007516 7F7516 -> $0002                PTPS1:       equ $02   ; %00000010 Precision Timer Prescaler Select bit 1
007516 7F7516 -> $0001                PTPS0:       equ $01   ; %00000001 Precision Timer Prescaler Select bit 0
                                      ;*****************************************************************************************
                                      ; - 1024KB Flash Module (S12XFTM1024K5V2)
                                      ;*****************************************************************************************
007516 7F7516 -> $0100                FCLKDIV:     equ $0100 ; Flash Clock Divider Register (pg 1152)
007516 7F7516 -> $0080                FDIVLD:      equ $80   ; %10000000 Clock Divider Loaded bit 7
007516 7F7516 -> $0040                FDIV6:       equ $40   ; %01000000 Clock Divider Bits bit 6
007516 7F7516 -> $0020                FDIV5:       equ $20   ; %00100000 Clock Divider Bits bit 5
007516 7F7516 -> $0010                FDIV4:       equ $10   ; %00010000 Clock Divider Bits bit 4
007516 7F7516 -> $0008                FDIV3:       equ $08   ; %00001000 Clock Divider Bits bit 3
007516 7F7516 -> $0004                FDIV2:       equ $04   ; %00000100 Clock Divider Bits bit 2
007516 7F7516 -> $0002                FDIV1:       equ $02   ; %00000010 Clock Divider Bits bit 1
007516 7F7516 -> $0001                FDIV0:       equ $01   ; %00000001 Clock Divider Bits bit 0
007516 7F7516 -> $0102                FCCOBIX:     equ $0102 ; Flash CCOB Index Register ( pg 1155)
007516 7F7516 -> $0004                CCOBIX2:     equ $04   ; %00000100 Common Command Register Index bit 2
007516 7F7516 -> $0002                CCOBIX1:     equ $02   ; %00000010 Common Command Register Index bit 1
007516 7F7516 -> $0001                CCOBIX0:     equ $01   ; %00000001 Common Command Register Index bit 0
007516 7F7516 -> $0106                FSTAT:       equ $0106 ; Flash Status Register (pg 1158)
007516 7F7516 -> $0080                CCIF:        equ $80   ; %10000000 Command Complete Interrupt Flag bit 7
007516 7F7516 -> $0020                ACCERR:      equ $20   ; %00100000 Flash Access Error Flag bit 5
007516 7F7516 -> $0010                FPVIOL:      equ $10   ; %00010000 Flash Protection Violation Flag bit 4
007516 7F7516 -> $0008                MGBUSY:      equ $08   ; %00001000 Memory Controller Busy Flag bit 3
007516 7F7516 -> $0004                RSVD:        equ $04   ; %00000100 Reserved Bit bit 2
007516 7F7516 -> $0002                MGSTAT1:     equ $02   ; %00000010 Memory Controller Command Completion Status Flag bit 1
007516 7F7516 -> $0001                MGSTAT0:     equ $01   ; %00000001 Memory Controller Command Completion Status Flag bit 0
007516 7F7516 -> $0107                FERSTAT:     equ $0107 ; Flash Error Status Register (pg 1159)
007516 7F7516 -> $0080                ERSERIF:     equ $80   ; %10000000 EEE Erase Error Interrupt Flag bit 7
007516 7F7516 -> $0020                PGMERIF:     equ $20   ; %00100000 EEE Program Error Interrupt Flag bit 5
007516 7F7516 -> $0010                EPVIOLIF:    equ $10   ; %00010000 EEE Protection Violation Interrupt Flag bit 4
007516 7F7516 -> $0008                ERSVIF1:     equ $08   ; %00001000 EEE Error Interrupt 1 Flag bit 3
007516 7F7516 -> $0004                ERSVIF0:     equ $04   ; %00000100 EEE Error Interrupt 0 Flag bit 2
007516 7F7516 -> $0002                DFDIF:       equ $02   ; %00000010 Double Bit Fault Detect Interrupt Flag bit 1
007516 7F7516 -> $0001                SFDIF:       equ $01   ; %00000001 Single Bit Fault Detect Interrupt Flag bit 0
007516 7F7516 -> $010A                FCCOBHI:     equ $010A ; Flash Common Command Object High Register (pg 1166)
007516 7F7516 -> $010B                FCCOBLO:     equ $010B ; Flash Common Command Object Low Register (pg 1166)
007516 7F7516 -> $010C                ETAGHI:      equ $010C ; EEE Tag Counter Register High (pg 1167)
007516 7F7516 -> $010D                ETAGLO:      equ $010D ; EEE Tag Counter Register Low (pg 1167)
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port T equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0240                PTT:         equ $0240 ; Port T Data Register (pg 121)
007516 7F7516 -> $0080                PT7:         equ $80   ; %10000000 Port T general purpose I/O data bit 7 pin #18
007516 7F7516 -> $0040                PT6:         equ $40   ; %01000000 Port T general purpose I/O data bit 6 pin #17
007516 7F7516 -> $0020                PT5:         equ $20   ; %00100000 Port T general purpose I/O data bit 5 pin #16
007516 7F7516 -> $0010                PT4:         equ $10   ; %00010000 Port T general purpose I/O data bit 4 pin #15
007516 7F7516 -> $0008                PT3:         equ $08   ; %00001000 Port T general purpose I/O data bit 3 pin #12
007516 7F7516 -> $0004                PT2:         equ $04   ; %00000100 Port T general purpose I/O data bit 2 pin #11
007516 7F7516 -> $0002                PT1:         equ $02   ; %00000010 Port T general purpose I/O data bit 1 pin #10
007516 7F7516 -> $0001                PT0:         equ $01   ; %00000001 Port T general purpose I/O data bit 0 pin #9
007516 7F7516 -> $0242                DDRT:        equ $0242 ; Port T Data Direction Register (pg 122)
                                                             ; 1 = output, 0 = input
007516 7F7516 -> $0080                DDRT7:       equ $80   ; %10000000 Port T data direction bit 7 pin #18
007516 7F7516 -> $0040                DDRT6:       equ $40   ; %01000000 Port T data direction bit 6 pin #17
007516 7F7516 -> $0020                DDRT5:       equ $20   ; %00100000 Port T data direction bit 5 pin #16
007516 7F7516 -> $0010                DDRT4:       equ $10   ; %00010000 Port T data direction bit 4 pin #15
007516 7F7516 -> $0008                DDRT3:       equ $08   ; %00001000 Port T data direction bit 3 pin #12
007516 7F7516 -> $0004                DDRT2:       equ $04   ; %00000100 Port T data direction bit 2 pin #11
007516 7F7516 -> $0002                DDRT1:       equ $02   ; %00000010 Port T data direction bit 1 pin #10
007516 7F7516 -> $0001                DDRT0:       equ $01   ; %00000001 Port T data direction bit 0 pin #9
007516 7F7516 -> $0244                PERT:        equ $0244 ; Port T Pull Device Enable Register (pg 123)
007516 7F7516 -> $0080                PERT7:       equ $80   ; %10000000 Port T pull Device Enable Register bit 7
007516 7F7516 -> $0040                PERT6:       equ $40   ; %01000000 Port T pull Device Enable Register bit 6
007516 7F7516 -> $0020                PERT5:       equ $20   ; %00100000 Port T pull Device Enable Register bit 5
007516 7F7516 -> $0010                PERT4:       equ $10   ; %10010000 Port T pull Device Enable Register bit 4
007516 7F7516 -> $0008                PERT3:       equ $08   ; %00001000 Port T pull Device Enable Register bit 3
007516 7F7516 -> $0004                PERT2:       equ $04   ; %00000100 Port T pull Device Enable Register bit 2
007516 7F7516 -> $0002                PERT1:       equ $02   ; %00000010 Port T pull Device Enable Register bit 1
007516 7F7516 -> $0001                PERT0:       equ $01   ; %00000001 Port T pull Device Enable Register bit 0
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port S equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0248                PTS:         equ $0248 ; Port S Data Register (pg 125)
007516 7F7516 -> $0080                PS7:         equ $80   ; %10000000 Port S general purpose I/O data bit 7 pin #96
007516 7F7516 -> $0040                PS6:         equ $40   ; %01000000 Port S general purpose I/O data bit 6 pin #95
007516 7F7516 -> $0020                PS5:         equ $20   ; %00100000 Port S general purpose I/O data bit 5 pin #94
007516 7F7516 -> $0010                PS4:         equ $10   ; %00010000 Port S general purpose I/O data bit 4 pin #93
007516 7F7516 -> $0008                PS3:         equ $08   ; %00001000 Port S general purpose I/O data bit 3 pin #92
007516 7F7516 -> $0004                PS2:         equ $04   ; %00000100 Port S general purpose I/O data bit 2 pin #91
007516 7F7516 -> $0002                PS1:         equ $02   ; %00000010 Port S general purpose I/O data bit 1 pin #90
007516 7F7516 -> $0001                PS0:         equ $01   ; %00000001 Port S general purpose I/O data bit 0 pin #89
007516 7F7516 -> $024A                DDRS:        equ $024A ; Port S Data Direction Register (pg 126)
                                                             ; 1 = output, 0 = input
007516 7F7516 -> $0080                DDRS7:       equ $80   ; %10000000 Port S data direction bit 7 pin #96
007516 7F7516 -> $0040                DDRS6:       equ $40   ; %01000000 Port S data direction bit 6 pin #95
007516 7F7516 -> $0020                DDRS5:       equ $20   ; %00100000 Port S data direction bit 5 pin #94
007516 7F7516 -> $0010                DDRS4:       equ $10   ; %00010000 Port S data direction bit 4 pin #93
007516 7F7516 -> $0008                DDRS3:       equ $08   ; %00001000 Port S data direction bit 3 pin #92
007516 7F7516 -> $0004                DDRS2:       equ $04   ; %00000100 Port S data direction bit 2 pin #91
007516 7F7516 -> $0002                DDRS1:       equ $02   ; %00000010 Port S data direction bit 1 pin #90
007516 7F7516 -> $0001                DDRS0:       equ $01   ; %00000001 Port S data direction bit 0 pin #89
007516 7F7516 -> $024D                PPSS:        equ $024D ; Port S Polarity Select Register (pg 128)
                                                             ; 1 = pull down selected, 0 = pull up selected
007516 7F7516 -> $0080                PPSS7:       equ $80   ; Port S pull device select bit 7 pin #96
007516 7F7516 -> $0040                PPSS6:       equ $40   ; Port S pull device select bit 6 pin #95
007516 7F7516 -> $0020                PPSS5:       equ $20   ; Port S pull device select bit 5 pin #94
007516 7F7516 -> $0010                PPSS4:       equ $10   ; Port S pull device select bit 4 pin #93
007516 7F7516 -> $0008                PPSS3:       equ $08   ; Port S pull device select bit 3 pin #92
007516 7F7516 -> $0004                PPSS2:       equ $04   ; Port S pull device select bit 2 pin #91
007516 7F7516 -> $0002                PPSS1:       equ $02   ; Port S pull device select bit 1 pin #90
007516 7F7516 -> $0001                PPSS0:       equ $01   ; Port S pull device select bit 0 pin #89
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port M equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0250                PTM:          equ $0250 ; Port M Data Register (pg 131)
007516 7F7516 -> $0080                PM7:          equ $80   ; %10000000 Port M general purpose I/O data bit 7 pin #87
007516 7F7516 -> $0040                PM6:          equ $40   ; %01000000 Port M general purpose I/O data bit 6 pin #88
007516 7F7516 -> $0020                PM5:          equ $20   ; %00100000 Port M general purpose I/O data bit 5 pin #100
007516 7F7516 -> $0010                PM4:          equ $10   ; %00010000 Port M general purpose I/O data bit 4 pin #101
007516 7F7516 -> $0008                PM3:          equ $08   ; %00001000 Port M general purpose I/O data bit 3 pin #102
007516 7F7516 -> $0004                PM2:          equ $04   ; %00000100 Port M general purpose I/O data bit 2 pin #103
007516 7F7516 -> $0002                PM1:          equ $02   ; %00000010 Port M general purpose I/O data bit 1 pin #104
007516 7F7516 -> $0001                PM0:          equ $01   ; %00000001 Port M general purpose I/O data bit 0 pin #105
007516 7F7516 -> $0252                DDRM:         equ $0252 ; Port M Data Direction Register (pg 132)
                                                              ; 1 = output, 0 = input
007516 7F7516 -> $0080                DDRM7:        equ $80   ; %10000000 Port M data direction bit 7 pin # 87
007516 7F7516 -> $0040                DDRM6:        equ $40   ; %01000000 Port M data direction bit 6 pin # 88
007516 7F7516 -> $0020                DDRM5:        equ $20   ; %00100000 Port M data direction bit 5 pin # 100
007516 7F7516 -> $0010                DDRM4:        equ $10   ; %00010000 Port M data direction bit 4 pin # 101
007516 7F7516 -> $0008                DDRM3:        equ $08   ; %00001000 Port M data direction bit 3 pin # 102
007516 7F7516 -> $0004                DDRM2:        equ $04   ; %00000100 Port M data direction bit 2 pin # 103
007516 7F7516 -> $0002                DDRM1:        equ $02   ; %00000010 Port M data direction bit 1 pin # 104
007516 7F7516 -> $0001                DDRM0:        equ $01   ; %00000001 Port M data direction bit 0 pin # 105
007516 7F7516 -> $0254                PERM:         equ $0254 ; Port M Pull Device Enable Register pg 134
                                                              ; 1 = pull device enabled, 0 = pull device disabled
007516 7F7516 -> $0080                PERM7:        equ $80   ; %10000000  Port M pull device enable bit 7 pin #87
007516 7F7516 -> $0040                PERM6:        equ $40   ; %01000000  Port M pull device enable bit 6 pin #88
007516 7F7516 -> $0020                PERM5:        equ $20   ; %00100000  Port M pull device enable bit 5 pin #100
007516 7F7516 -> $0010                PERM4:        equ $10   ; %00010000  Port M pull device enable bit 4 pin #101
007516 7F7516 -> $0008                PERM3:        equ $08   ; %00001000  Port M pull device enable bit 3 pin #102
007516 7F7516 -> $0004                PERM2:        equ $04   ; %00000100  Port M pull device enable bit 2 pin #103
007516 7F7516 -> $0002                PERM1:        equ $02   ; %00000010  Port M pull device enable bit 1 pin #104
007516 7F7516 -> $0001                PERM0:        equ $01   ; %00000001  Port M pull device enable bit 0 pin #105
007516 7F7516 -> $0255                PPSM:         equ $0255 ; Port M Polarity Select Register pg 135
                                                              ; 1 = pull down device, 0 = pull up device
007516 7F7516 -> $0080                PPSM7:        equ $80   ; %10000000  Port M pull device select bit 7
007516 7F7516 -> $0040                PPSM6:        equ $40   ; %01000000  Port M pull device select bit 6
007516 7F7516 -> $0020                PPSM5:        equ $20   ; %00100000  Port M pull device select bit 5
007516 7F7516 -> $0010                PPSM4:        equ $10   ; %00010000  Port M pull device select bit 4
007516 7F7516 -> $0008                PPSM3:        equ $08   ; %00001000  Port M pull device select bit 3
007516 7F7516 -> $0004                PPSM2:        equ $04   ; %00000100  Port M pull device select bit 2
007516 7F7516 -> $0002                PPSM1:        equ $02   ; %00000010  Port M pull device select bit 1
007516 7F7516 -> $0001                PPSM0:        equ $01   ; %00000001  Port M pull device select bit 0
007516 7F7516 -> $0256                WOMM:         equ $0256 ; Port M Wired-Or Mode Register pg 135
                                                              ; 1 = open drain output, 0 = push pull output
007516 7F7516 -> $0080                WOMM7:        equ $80   ; %10000000  Port M wired or mode bit 7
007516 7F7516 -> $0040                WOMM6:        equ $40   ; %01000000  Port M wired or mode bit 6
007516 7F7516 -> $0020                WOMM5:        equ $20   ; %00100000  Port M wired or mode bit 5
007516 7F7516 -> $0010                WOMM4:        equ $10   ; %00010000  Port M wired or mode bit 4
007516 7F7516 -> $0008                WOMM3:        equ $08   ; %00001000  Port M wired or mode bit 3
007516 7F7516 -> $0004                WOMM2:        equ $04   ; %00000100  Port M wired or mode bit 2
007516 7F7516 -> $0002                WOMM1:        equ $02   ; %00000010  Port M wired or mode bit 1
007516 7F7516 -> $0001                WOMM0:        equ $01   ; %00000001  Port M wired or mode bit 0
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Module Routing Register for CAN0, CAN4, SPIO0,
                                      ;   SPIO1, SPIO2
                                      ;*****************************************************************************************
007516 7F7516 -> $0257                MODRR:        equ $0257 ; Module Routing Register pg 135 see table 2-40
007516 7F7516 -> $0040                MODRR6:       equ $40   ; %01000000  Module Routing Register bit 6
007516 7F7516 -> $0020                MODRR5:       equ $20   ; %00100000  Module Routing Register bit 5
007516 7F7516 -> $0010                MODRR4:       equ $10   ; %00010000  Module Routing Register bit 4
007516 7F7516 -> $0008                MODRR3:       equ $08   ; %00001000  Module Routing Register bit 3
007516 7F7516 -> $0004                MODRR2:       equ $04   ; %00000100  Module Routing Register bit 2
007516 7F7516 -> $0002                MODRR1:       equ $02   ; %00000010  Module Routing Register bit 1
007516 7F7516 -> $0001                MODRR0:       equ $01   ; %00000001  Module Routing Register bit 0
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port P equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0258                PTP:          equ $0258 ; Port P Data Register (pg 137)
007516 7F7516 -> $0080                PP7:          equ $80   ; %10000000 Port P general purpose I/O data bit 7 pin #109
007516 7F7516 -> $0040                PP6:          equ $40   ; %01000000 Port P general purpose I/O data bit 6 pin #110
007516 7F7516 -> $0020                PP5:          equ $20   ; %00100000 Port P general purpose I/O data bit 5 pin #111
007516 7F7516 -> $0010                PP4:          equ $10   ; %00010000 Port P general purpose I/O data bit 4 pin #112
007516 7F7516 -> $0008                PP3:          equ $08   ; %00001000 Port P general purpose I/O data bit 3 pin #1
007516 7F7516 -> $0004                PP2:          equ $04   ; %00000100 Port P general purpose I/O data bit 2 pin #2
007516 7F7516 -> $0002                PP1:          equ $02   ; %00000010 Port P general purpose I/O data bit 1 pin #3
007516 7F7516 -> $0001                PP0:          equ $01   ; %00000001 Port P general purpose I/O data bit 0 pin #4
007516 7F7516 -> $025A                DDRP:         equ $025A ; Port P Data Direction Register (DDRP) pg 139
                                                             ; 1 = output, 0 = input
007516 7F7516 -> $0080                DDRP7:        equ $80   ; %10000000 Port P data direction bit 7 pin #109
007516 7F7516 -> $0040                DDRP6:        equ $40   ; %01000000 Port P data direction bit 6 pin #110
007516 7F7516 -> $0020                DDRP5:        equ $20   ; %00100000 Port P data direction bit 5 pin #111
007516 7F7516 -> $0010                DDRP4:        equ $10   ; %00010000 Port P data direction bit 4 pin #112
007516 7F7516 -> $0008                DDRP3:        equ $08   ; %00001000 Port P data direction bit 3 pin #1
007516 7F7516 -> $0004                DDRP2:        equ $04   ; %00000100 Port P data direction bit 2 pin #2
007516 7F7516 -> $0002                DDRP1:        equ $02   ; %00000010 Port P data direction bit 1 pin #3
007516 7F7516 -> $0001                DDRP0:        equ $01   ; %00000001 Port P data direction bit 0 pin #4
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port H equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0260                PTH:          equ $0260 ; Port H Data Register (pg 142)
007516 7F7516 -> $0080                PH7:          equ $80   ; %10000000 Port H general purpose I/O data bit 7 pin #32
007516 7F7516 -> $0040                PH6:          equ $40   ; %01000000 Port H general purpose I/O data bit 6 pin #33
007516 7F7516 -> $0020                PH5:          equ $20   ; %00100000 Port H general purpose I/O data bit 5 pin #34
007516 7F7516 -> $0010                PH4:          equ $10   ; %00010000 Port H general purpose I/O data bit 4 pin #35
007516 7F7516 -> $0008                PH3:          equ $08   ; %00001000 Port H general purpose I/O data bit 3 pin #49
007516 7F7516 -> $0004                PH2:          equ $04   ; %00000100 Port H general purpose I/O data bit 2 pin #50
007516 7F7516 -> $0002                PH1:          equ $02   ; %00000010 Port H general purpose I/O data bit 1 pin #51
007516 7F7516 -> $0001                PH0:          equ $01   ; %00000001 Port H general purpose I/O data bit 0 pin #52
007516 7F7516 -> $0262                DDRH:         equ $0262 ;Port H Data Direction Register (pg 144)
                                                             ; 1 = output, 0 = input
007516 7F7516 -> $0080                DDRH7:        equ $80   ; %10000000 Port H Data Direction bit 7 pin #32
007516 7F7516 -> $0040                DDRH6:        equ $40   ; %01000000 Port H Data Direction bit 6 pin #33
007516 7F7516 -> $0020                DDRH5:        equ $20   ; %00100000 Port H Data Direction bit 5 pin #34
007516 7F7516 -> $0010                DDRH4:        equ $10   ; %00010000 Port H Data Direction bit 4 pin #35
007516 7F7516 -> $0008                DDRH3:        equ $08   ; %00001000 Port H Data Direction bit 3 pin #49
007516 7F7516 -> $0004                DDRH2:        equ $04   ; %00000100 Port H Data Direction bit 2 pin #50
007516 7F7516 -> $0002                DDRH1:        equ $02   ; %00000010 Port H Data Direction bit 1 pin #51
007516 7F7516 -> $0001                DDRH0:        equ $01   ; %00000001 Port H Data Direction bit 0 pin #52
007516 7F7516 -> $0264                PERH:         equ $0264 ; Port H Pull Device Enable Register (pg 147)
                                                             ; 1 = pull device enabled, 0 = pull device disabled
007516 7F7516 -> $0080                PERH7:        equ $80   ; %10000000 Port H pull device enable bit 7 pin #32
007516 7F7516 -> $0040                PERH6:        equ $40   ; %01000000 Port H pull device enable bit 6 pin #33
007516 7F7516 -> $0020                PERH5:        equ $20   ; %00100000 Port H pull device enable bit 5 pin #34
007516 7F7516 -> $0010                PERH4:        equ $10   ; %00010000 Port H pull device enable bit 4 pin #35
007516 7F7516 -> $0008                PERH3:        equ $08   ; %00001000 Port H pull device enable bit 3 pin #49
007516 7F7516 -> $0004                PERH2:        equ $04   ; %00000100 Port H pull device enable bit 2 pin #50
007516 7F7516 -> $0002                PERH1:        equ $02   ; %00000010 Port H pull device enable bit 1 pin #51
007516 7F7516 -> $0001                PERH0:        equ $01   ; %00000001 Port H pull device enable bit 0 pin #52
007516 7F7516 -> $0265                PPSH:         equ $0265 ; Port H Polarity Select Register (pg 147)
                                                             ; 1 = rising edge and pull down
                                                             ; 0 = falling edge and pull up
007516 7F7516 -> $0080                PPSH7:        equ $80   ; %10000000 Port H Pull Device Select bit 7 pin #32
007516 7F7516 -> $0040                PPSH6:        equ $40   ; %01000000 Port H Pull Device Select bit 6 pin #33
007516 7F7516 -> $0020                PPSH5:        equ $20   ; %00100000 Port H Pull Device Select bit 5 pin #34
007516 7F7516 -> $0010                PPSH4:        equ $10   ; %00010000 Port H Pull Device Select bit 4 pin #35
007516 7F7516 -> $0008                PPSH3:        equ $08   ; %00001000 Port H Pull Device Select bit 3 pin #49
007516 7F7516 -> $0004                PPSH2:        equ $04   ; %00000100 Port H Pull Device Select bit 2 pin #50
007516 7F7516 -> $0002                PPSH1:        equ $02   ; %00000010 Port H Pull Device Select bit 1 pin #51
007516 7F7516 -> $0001                PPSH0:        equ $01   ; %00000001 Port H Pull Device Select bit 0 pin #52
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port J equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0268                PTJ:          equ $0268 ; Port J Data Register (pg 149)
007516 7F7516 -> $0080                PJ7:          equ $80   ; %10000000 Port J general purpose I/O data bit 7 pin #98
007516 7F7516 -> $0040                PJ6:          equ $40   ; %01000000 Port J general purpose I/O data bit 6 pin #99
007516 7F7516 -> $0020                PJ5:          equ $20   ; N/C
007516 7F7516 -> $0010                PJ4:          equ $10   ; N/C
007516 7F7516 -> $0008                PJ3:          equ $08   ; N/C
007516 7F7516 -> $0004                PJ2:          equ $04   ; N/C
007516 7F7516 -> $0002                PJ1:          equ $02   ; %00000010 Port J general purpose I/O data bit 1 pin #21
007516 7F7516 -> $0001                PJ0:          equ $01   ; %00000001 Port J general purpose I/O data bit 0 pin #20
007516 7F7516 -> $026A                DDRJ:         equ $026A ; Port J Data Direction Register (pg 150)
                                                              ; 1 = output, 0 = input
007516 7F7516 -> $0080                DDRJ7:        equ $80   ; %10000000 Port J data direction bit 7 pin #98
007516 7F7516 -> $0040                DDRJ6:        equ $40   ; %01000000 Port J data direction bit 6 pin #99
007516 7F7516 -> $0020                DDRJ5:        equ $20   ; %00100000 Port J data direction bit 5
007516 7F7516 -> $0010                DDRJ4:        equ $10   ; %00010000 Port J data direction bit 4
007516 7F7516 -> $0008                DDRJ3:        equ $08   ; %00001000 Port J data direction bit 3
007516 7F7516 -> $0004                DDRJ2:        equ $04   ; %00000100 Port J data direction bit 2
007516 7F7516 -> $0002                DDRJ1:        equ $02   ; %00000010 Port J data direction bit 1 pin #21
007516 7F7516 -> $0001                DDRJ0:        equ $01   ; %00000001 Port J data direction bit 0 pin #20
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port AD0 equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0270                PT0AD0:       equ $0270 ; Port AD0 Data Register 0 (pg 155)
                                                              ; ATD0 analog inputs AN[15:8] on PAD[15:8]
007516 7F7516 -> $0080                PT0AD07:      equ $80   ; %10000000 Port AD0 general purpose input/output data bit 7 pin 82
007516 7F7516 -> $0040                PT0AD06:      equ $40   ; %01000000 Port AD0 general purpose input/output data bit 6 pin 80
007516 7F7516 -> $0020                PT0AD05:      equ $20   ; %00100000 Port AD0 general purpose input/output data bit 5 pin 78
007516 7F7516 -> $0010                PT0AD04:      equ $10   ; %00010000 Port AD0 general purpose input/output data bit 4 pin 76
007516 7F7516 -> $0008                PT0AD03:      equ $08   ; %00001000 Port AD0 general purpose input/output data bit 3 pin 74
007516 7F7516 -> $0004                PT0AD02:      equ $04   ; %00000100 Port AD0 general purpose input/output data bit 2 pin 72
007516 7F7516 -> $0002                PT0AD01:      equ $02   ; %00000010 Port AD0 general purpose input/output data bit 1 pin 70
007516 7F7516 -> $0001                PT0AD00:      equ $01   ; %00000001 Port AD0 general purpose input/output data bit 0 pin 68
007516 7F7516 -> $0271                PT1AD0:       equ $0271 ; Port AD0 Data Register 1 (pg 155)
                                                              ; ATD0 analog inputs AN[7:0] on PAD[7:0]
007516 7F7516 -> $0080                PT1AD07:      equ $80   ; %10000000 Port AD0 general purpose input/output data bit 7 pin 81
007516 7F7516 -> $0040                PT1AD06:      equ $40   ; %01000000 Port AD0 general purpose input/output data bit 6 pin 79
007516 7F7516 -> $0020                PT1AD05:      equ $20   ; %00100000 Port AD0 general purpose input/output data bit 5 pin 77
007516 7F7516 -> $0010                PT1AD04:      equ $10   ; %00010000 Port AD0 general purpose input/output data bit 4 pin 75
007516 7F7516 -> $0008                PT1AD03:      equ $08   ; %00001000 Port AD0 general purpose input/output data bit 3 pin 73
007516 7F7516 -> $0004                PT1AD02:      equ $04   ; %00000100 Port AD0 general purpose input/output data bit 2 pin 71
007516 7F7516 -> $0002                PT1AD01:      equ $02   ; %00000010 Port AD0 general purpose input/output data bit 1 pin 69
007516 7F7516 -> $0001                PT1AD00:      equ $01   ; %00000001 Port AD0 general purpose input/output data bit 0 pin 67
007516 7F7516 -> $0272                DDR0AD0:      equ $0272 ; Port AD0 Data Direcction Register 0 (pg 156)
                                                              ; Data direction pins 15 through 8. 1 = output, 0 = input
007516 7F7516 -> $0080                DDR0AD07:     equ $80   ; %10000000 Port AD0 data direction bit 7
007516 7F7516 -> $0040                DDR0AD06:     equ $40   ; %01000000 Port AD0 data direction bit 6
007516 7F7516 -> $0020                DDR0AD05:     equ $20   ; %00100000 Port AD0 data direction bit 5
007516 7F7516 -> $0010                DDR0AD04:     equ $10   ; %00010000 Port AD0 data direction bit 4
007516 7F7516 -> $0008                DDR0AD03:     equ $08   ; %00001000 Port AD0 data direction bit 3
007516 7F7516 -> $0004                DDR0AD02:     equ $04   ; %00000100 Port AD0 data direction bit 2
007516 7F7516 -> $0002                DDR0AD01:     equ $02   ; %00000010 Port AD0 data direction bit 1
007516 7F7516 -> $0001                DDR0AD00:     equ $01   ; %00000001 Port AD0 data direction bit 0
007516 7F7516 -> $0273                DDR1AD0:      equ $0273 ; Port AD0 Data Direcction Register 1 (pg 156)
                                                              ; Data direction pins 7 through 0. 1 = output, 0 = input
007516 7F7516 -> $0080                DDR1AD07:     equ $80   ; %10000000 Port AD0 data direction bit 7
007516 7F7516 -> $0040                DDR1AD06:     equ $40   ; %01000000 Port AD0 data direction bit 6
007516 7F7516 -> $0020                DDR1AD05:     equ $20   ; %00100000 Port AD0 data direction bit 5
007516 7F7516 -> $0010                DDR1AD04:     equ $10   ; %00010000 Port AD0 data direction bit 4
007516 7F7516 -> $0008                DDR1AD03:     equ $08   ; %00001000 Port AD0 data direction bit 3
007516 7F7516 -> $0004                DDR1AD02:     equ $04   ; %00000100 Port AD0 data direction bit 2
007516 7F7516 -> $0002                DDR1AD01:     equ $02   ; %00000010 Port AD0 data direction bit 1
007516 7F7516 -> $0001                DDR1AD00:     equ $01   ; %00000001 Port AD0 data direction bit 0
007516 7F7516 -> $0274                RDR0AD0:      equ $0274 ; Port AD0 Reduced Drive Register 0 (pg 157)
                                                              ; Drive strength for pins 15 through 8. 1 = reduced, 0 = full
007516 7F7516 -> $0080                RDR0AD07:     equ $80   ; %10000000 Port AD0 reduced drive bit 7
007516 7F7516 -> $0040                RDR0AD06:     equ $40   ; %01000000 Port AD0 reduced drive bit 6
007516 7F7516 -> $0020                RDR0AD05:     equ $20   ; %00100000 Port AD0 reduced drive bit 5
007516 7F7516 -> $0010                RDR0AD04:     equ $10   ; %00010000 Port AD0 reduced drive bit 4
007516 7F7516 -> $0008                RDR0AD03:     equ $08   ; %00001000 Port AD0 reduced drive bit 3
007516 7F7516 -> $0004                RDR0AD02:     equ $04   ; %00000100 Port AD0 reduced drive bit 2
007516 7F7516 -> $0002                RDR0AD01:     equ $02   ; %00000010 Port AD0 reduced drive bit 1
007516 7F7516 -> $0001                RDR0AD00:     equ $01   ; %00000001 Port AD0 reduced drive bit 0
007516 7F7516 -> $0275                RDR1AD0:      equ $0275 ; Port AD0 Reduced Drive Register 1 (pg 158)
                                                              ; Drive strength for pins 7 through 0. 1 = reduced, 0 = full
007516 7F7516 -> $0080                RDR1AD07:     equ $80   ; %10000000 Port AD0 reduced drive bit 7
007516 7F7516 -> $0040                RDR1AD06:     equ $40   ; %01000000 Port AD0 reduced drive bit 6
007516 7F7516 -> $0020                RDR1AD05:     equ $20   ; %00100000 Port AD0 reduced drive bit 5
007516 7F7516 -> $0010                RDR1AD04:     equ $10   ; %00010000 Port AD0 reduced drive bit 4
007516 7F7516 -> $0008                RDR1AD03:     equ $08   ; %00001000 Port AD0 reduced drive bit 3
007516 7F7516 -> $0004                RDR1AD02:     equ $04   ; %00000100 Port AD0 reduced drive bit 2
007516 7F7516 -> $0002                RDR1AD01:     equ $02   ; %00000010 Port AD0 reduced drive bit 1
007516 7F7516 -> $0001                RDR1AD00:     equ $01   ; %00000001 Port AD0 reduced drive bit 0
007516 7F7516 -> $0276                PER0AD0:      equ $0276 ; Port AD0 Pull Up Enable Register 0 (pg 158)
                                                              ; Pull device enable for pins 15 through 8. 1 = enabled, 0 = disabled
007516 7F7516 -> $0080                PER0AD07:     equ $80   ; %00000000 Port AD0 pull device enable bit 7
007516 7F7516 -> $0040                PER0AD06:     equ $40   ; %01000000 Port AD0 pull device enable bit 6
007516 7F7516 -> $0020                PER0AD05:     equ $20   ; %00100000 Port AD0 pull device enable bit 5
007516 7F7516 -> $0010                PER0AD04:     equ $10   ; %00010000 Port AD0 pull device enable bit 4
007516 7F7516 -> $0008                PER0AD03:     equ $08   ; %00001000 Port AD0 pull device enable bit 3
007516 7F7516 -> $0004                PER0AD02:     equ $04   ; %00000100 Port AD0 pull device enable bit 2
007516 7F7516 -> $0002                PER0AD01:     equ $02   ; %00000010 Port AD0 pull device enable bit 1
007516 7F7516 -> $0001                PER0AD00:     equ $01   ; %00000001 Port AD0 pull device enable bit 0
007516 7F7516 -> $0277                PER1AD0:      equ $0277 ; Port AD0 Pull Up Enable Register 1 (pg 159)
                                                              ; Pull device enable for pins 7 through 0. 1 = enabled, 0 = disabled
007516 7F7516 -> $0080                PER1AD07:     equ $80   ; %00000000 Port AD0 pull device enable bit 7
007516 7F7516 -> $0040                PER1AD06:     equ $40   ; %01000000 Port AD0 pull device enable bit 6
007516 7F7516 -> $0020                PER1AD05:     equ $20   ; %00100000 Port AD0 pull device enable bit 5
007516 7F7516 -> $0010                PER1AD04:     equ $10   ; %00010000 Port AD0 pull device enable bit 4
007516 7F7516 -> $0008                PER1AD03:     equ $08   ; %00001000 Port AD0 pull device enable bit 3
007516 7F7516 -> $0004                PER1AD02:     equ $04   ; %00000100 Port AD0 pull device enable bit 2
007516 7F7516 -> $0002                PER1AD01:     equ $02   ; %00000010 Port AD0 pull device enable bit 1
007516 7F7516 -> $0001                PER1AD00:     equ $01   ; %00000001 Port AD0 pull device enable bit 0
                                      ;*****************************************************************************************
                                      ; - S12XE Clocks and Reset Generator (S12XECRGV1) equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0034                SYNR:        equ $0034 ; S12XECRG Synthesizer Register (pg 473)
007516 7F7516 -> $0080                VCOFRQ1:     equ $80   ; %10000000 VCO Frequency bit 7
007516 7F7516 -> $0040                VCOFRQ0:     equ $40   ; %01000000 VCO Frequency bit 6
007516 7F7516 -> $0020                SYNDIV5:     equ $20   ; %00100000 IPLL multification factor bit 5
007516 7F7516 -> $0010                SYNDIV4:     equ $10   ; %00010000 IPLL multification factor bit 5
007516 7F7516 -> $0008                SYNDIV3:     equ $08   ; %00001000 IPLL multification factor bit 5
007516 7F7516 -> $0004                SYNDIV2:     equ $04   ; %00000100 IPLL multification factor bit 5
007516 7F7516 -> $0002                SYNDIV1:     equ $02   ; %00000010 IPLL multification factor bit 5
007516 7F7516 -> $0001                SYNDIV0:     equ $01   ; %00000001 IPLL multification factor bit 5
007516 7F7516 -> $0035                REFDV:       equ $0035 ; S12XECRG Reference Divider Register (pg 474)
007516 7F7516 -> $0080                REFFRQ1:     equ $80   ; %10000000 Reference Frequency bit 7
007516 7F7516 -> $0040                REFFRQ0:     equ $40   ; %01000000 Reference Frequency bit 6
007516 7F7516 -> $0020                REFDIV5:     equ $20   ; %00100000 Reference Divider bit 5
007516 7F7516 -> $0010                REFDIV4:     equ $10   ; %00010000 Reference Divider bit 4
007516 7F7516 -> $0008                REFDIV3:     equ $08   ; %00001000 Reference Divider bit 3
007516 7F7516 -> $0004                REFDIV2:     equ $04   ; %00000100 Reference Divider bit 2
007516 7F7516 -> $0002                REFDIV1:     equ $02   ; %00000010 Reference Divider bit 1
007516 7F7516 -> $0001                REFDIV0:     equ $01   ; %00000001 Reference Divider bit 0
007516 7F7516 -> $0036                POSTDIV:     equ $0036 ; S12XECRG Post Divider Register (pg 474)
007516 7F7516 -> $0010                POSTDIV4:    equ $10   ; %00010000 Post Divider bit 4
007516 7F7516 -> $0008                POSTDIV3:    equ $08   ; %00010000 Post Divider bit 3
007516 7F7516 -> $0004                POSTDIV2:    equ $04   ; %00010000 Post Divider bit 2
007516 7F7516 -> $0002                POSTDIV1:    equ $02   ; %00010000 Post Divider bit 1
007516 7F7516 -> $0001                POSTDIV0:    equ $01   ; %00010000 Post Divider bit 0
007516 7F7516 -> $0037                CRGFLG:      equ $0037 ; S12XECRG Flags Register (pg 475)
007516 7F7516 -> $0080                RTIF:        equ $80   ; %10000000 Real Time Interrupt Flag Bit 7
007516 7F7516 -> $0040                PORF:        equ $40   ; %01000000 Power on Reset Flag Bit 6
007516 7F7516 -> $0020                LVRF:        equ $20   ; %00100000 Low Voltage Reset Flag Bit 5
007516 7F7516 -> $0010                LOCKIF:      equ $10   ; %00010000 PLL Lock Interrupt Flag Bit 4
007516 7F7516 -> $0008                LOCK:        equ $08   ; %00001000 Lock Status Bit 3
007516 7F7516 -> $0004                ILAF:        equ $04   ; %00000100 Illegal Address Reset Flag Bit 2
007516 7F7516 -> $0002                SCMIF:       equ $02   ; %00000010 Self Clock Mode Interrupt Flag Bit 1
007516 7F7516 -> $0001                SCM:         equ $01   ; %00000001 Self Clock Mode Status Bit 0
007516 7F7516 -> $0038                CRGINT:      equ $0038 ; S12XECRG Interrupt Enable Register (pg 476)
007516 7F7516 -> $0080                RTIE:        equ $80   ; %10000000 Real Time Interrupt Enable Bit 7
007516 7F7516 -> $0010                LOCKIE:      equ $10   ; %00010000 Lock Interrupt Enable Bit 4
007516 7F7516 -> $0002                SCMIE:       equ $02   ; %00000010 Self Clock Mode Interrupt Enable Bit1
007516 7F7516 -> $0039                CLKSEL:      equ $0039 ; S12XECRG Clock Select Register (pg 477)
007516 7F7516 -> $0080                PLLSEL:      equ $80   ; %10000000 PLL Select Bit 7
007516 7F7516 -> $0040                PSTP:        equ $40   ; %01000000 Pseudo Stop Bit 6
007516 7F7516 -> $0020                XCLKS:       equ $20   ; %00100000 Oscillator Configurtion Status bit 5
007516 7F7516 -> $0008                PLLWAI:      equ $08   ; %00001000 PLL Stops in Wait Mode Bit 3
007516 7F7516 -> $0002                RTIWAI:      equ $02   ; %00000010 RTI Stops in Wait Mode Bit 1
007516 7F7516 -> $0001                COPWAI:      equ $01   ; %00000001 COP Stops in Wait Mode Bit 0
007516 7F7516 -> $003A                PLLCTL:      equ $003A ; S12XECRG PLL Control Register (pg 478)
007516 7F7516 -> $0080                CME:         equ $80   ; %10000000 Clock Monitor Enable Bit 7
007516 7F7516 -> $0040                PLLON:       equ $40   ; %01000000 Phase Lock Loop On Bit 6
007516 7F7516 -> $0020                FM1:         equ $20   ; %00100000 IPLL Frequency Modulation Enable Bit 5
007516 7F7516 -> $0010                FM0:         equ $10   ; %00010000 IPLL Frequency Modulation Enable Bit 4
007516 7F7516 -> $0008                FSTWKP:      equ $08   ; %00001000 Fast Wake-up From Full Stop Bit 3
007516 7F7516 -> $0004                PRE:         equ $04   ; %00000100 RTI Enable During Pseudo Stop Bit 2
007516 7F7516 -> $0002                PCE:         equ $02   ; %00000010 COP Enable During Psuedo Stop Bit 1
007516 7F7516 -> $0001                SCME:        equ $01   ; %00000001 Self Clock Mode Enable Bit 0
007516 7F7516 -> $003B                RTICTL:      equ $003B ; S12XECRG RTI Control Register (pg 480)
007516 7F7516 -> $0080                RTDEC:       equ $80   ; %10000000 Decimal or Binary Divider Select Bit 7
007516 7F7516 -> $0040                RTR6:        equ $40   ; %01000000 Real Time Int Prscle Rate Select Bit 6
007516 7F7516 -> $0020                RTR5:        equ $20   ; %00100000 Real Time Int Prscle Rate Select Bit 5
007516 7F7516 -> $0010                RTR4:        equ $10   ; %00010000 Real Time Int Prscle Rate Select Bit 4
007516 7F7516 -> $0008                RTR3:        equ $08   ; %00001000 Real Time Int Mod Cntr Select Bit 3
007516 7F7516 -> $0004                RTR2:        equ $04   ; %00000100 Real Time Int Mod Cntr Select Bit 2
007516 7F7516 -> $0002                RTR1:        equ $02   ; %00000010 Real Time Int Mod Cntr Select Bit 1
007516 7F7516 -> $0001                RTR0:        equ $01   ; %00000001 Real Time Int Mod Cntr Select Bit 0
007516 7F7516 -> $003C                COPCTL:      equ $003C ; S12XSCRG COP Control Register (pg 482)
007516 7F7516 -> $0080                WCOP:        equ $80   ; Window COP Mode bit 7
007516 7F7516 -> $0040                RSBCK:       equ $40   ; COP and RTI Stop in Active BDM Mode bit 6
007516 7F7516 -> $0020                WRTMASK:     equ $20   ; Write Mask for WCOP and CR[2:0] bit 5
007516 7F7516 -> $0004                CR2:         equ $04   ; COP Watchdog Timer Rate Select bit 2
007516 7F7516 -> $0002                CR1:         equ $02   ; COP Watchdog Timer Rate Select bit 1
007516 7F7516 -> $0001                CR0:         equ $01   ; COP Watchdog Timer Rate Select bit 0
                                      ;*****************************************************************************************
                                      ; - Interrupt (S12XINTV2) equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0121                IVBR:        equ $0121 ; Interrupt Vector Base Register (pg 267)
007516 7F7516 -> $0080                IVB_ADDR7:   equ $80   ; %10000000 Interrupt Vector Base Address Bit 7
007516 7F7516 -> $0040                IVB_ADDR6:   equ $40   ; %01000000 Interrupt Vector Base Address Bit 6
007516 7F7516 -> $0020                IVB_ADDR5:   equ $20   ; %00100000 Interrupt Vector Base Address Bit 5
007516 7F7516 -> $0010                IVB_ADDR4:   equ $10   ; %00010000 Interrupt Vector Base Address Bit 4
007516 7F7516 -> $0008                IVB_ADDR3:   equ $08   ; %00001000 Interrupt Vector Base Address Bit 3
007516 7F7516 -> $0004                IVB_ADDR2:   equ $04   ; %00000100 Interrupt Vector Base Address Bit 2
007516 7F7516 -> $0002                IVB_ADDR1:   equ $02   ; %00000010 Interrupt Vector Base Address Bit 1
007516 7F7516 -> $0001                IVB_ADDR0:   equ $01   ; %00000001 Interrupt Vector Base Address Bit 0
007516 7F7516 -> $0126                INT_XGPRIO:  equ $0126 ; XGATE Int Priority Config Register (pg 267)
007516 7F7516 -> $0004                XILVL2:      equ $04   ; %00000100 XGATE Int Priority Level Bit 2
007516 7F7516 -> $0002                XILVL1:      equ $02   ; %00000010 XGATE Int Priority Level Bit 1
007516 7F7516 -> $0001                XILVL0:      equ $01   ; %00000001 XGATE Int Priority Level Bit 0
007516 7F7516 -> $0127                INT_CFADDR:  equ $0127 ; Int Request Config Addr Register (pg 268)
007516 7F7516 -> $0080                INT_CFADDR7: equ $80   ; %10000000 Int Req Config Data Reg Sel Bit 7
007516 7F7516 -> $0040                INT_CFADDR6: equ $40   ; %01000000 Int Req Config Data Reg Sel Bit 6
007516 7F7516 -> $0020                INT_CFADDR5: equ $20   ; %00100000 Int Req Config Data Reg Sel Bit 5
007516 7F7516 -> $0010                INT_CFADDR4: equ $10   ; %00010000 Int Req Config Data Reg Sel Bit 4
007516 7F7516 -> $0128                INT_CFDATA0: equ $0128 ; Interrupt Req Config Data Reg 0 (pg 269)
007516 7F7516 -> $0129                INT_CFDATA1: equ $0129 ; Interrupt Req Config Data Reg 1 (pg 269)
007516 7F7516 -> $012A                INT_CFDATA2: equ $012A ; Interrupt Req Config Data Reg 2 (pg 269)
007516 7F7516 -> $012B                INT_CFDATA3: equ $012B ; Interrupt Req Config Data Reg 3 (pg 269)
007516 7F7516 -> $012C                INT_CFDATA4: equ $012C ; Interrupt Req Config Data Reg 4 (pg 270)
007516 7F7516 -> $012D                INT_CFDATA5: equ $012D ; Interrupt Req Config Data Reg 5 (pg 270)
007516 7F7516 -> $012E                INT_CFDATA6: equ $012E ; Interrupt Req Config Data Reg 6 (pg 270)
007516 7F7516 -> $012F                INT_CFDATA7: equ $012F ; Interrupt Req Config Data Reg 7 (pg 270)
007516 7F7516 -> $0080                RQST:        equ $80   ; %10000000 XGATE Request Enable Bit 7
007516 7F7516 -> $0004                PRIOLVL2:    equ $04   ; %00000100 Int Requ Priority Level Bit 2
007516 7F7516 -> $0002                PRIOLVL1:    equ $02   ; %00000010 Int Requ Priority Level Bit 1
007516 7F7516 -> $0001                PRIOLVL0:    equ $01   ; %00000001 Int Requ Priority Level Bit 0
                                      ;*****************************************************************************************
                                      ; - Memory Mapping Control (S12XMMCV4) equates
                                      ;*****************************************************************************************
007516 7F7516 -> $000B                MODE:        equ $000B ; Mode Register (pg 195)
007516 7F7516 -> $0080                MODC:        equ $80   ; External mode pin #23 (MODC/BKGD) bit 7
007516 7F7516 -> $0040                MODB:        equ $40   ; External mode pin #37 (MODB/PE6) bit 6
007516 7F7516 -> $0020                MODA:        equ $20   ; External mode pin #38 (MODA/PE5) bit 5
                                      ;*****************************************************************************************
                                      ; - Analog to Digital Converter (ADC12B16V1) equates
                                      ;*****************************************************************************************
007516 7F7516 -> $02C0                ATD0CTL0:  equ $02C0 ; ATD0 Control Register 0 (pg 508)
007516 7F7516 -> $0008                WRAP3:     equ $08   ; %00001000 Wrap Around Channel Select Bit 3
007516 7F7516 -> $0004                WRAP2:     equ $04   ; %00000100 Wrap Around Channel Select Bit 2
007516 7F7516 -> $0002                WRAP1:     equ $02   ; %00000010 Wrap Around Channel Select Bit 1
007516 7F7516 -> $0001                WRAP0:     equ $01   ; %00000001 Wrap Around Channel Select Bit 0
007516 7F7516 -> $02C1                ATD0CTL1:   equ $02C1 ; ATD0 Control Register 1 (pg 509)
007516 7F7516 -> $0080                ETRIGSEL:  equ $80   ; %10000000 External Trigger Source Select Bit 7
007516 7F7516 -> $0040                SRES1:     equ $40   ; %01000000 A/D Resolution Select bit 6
007516 7F7516 -> $0020                SRES0:     equ $20   ; %00100000 A/D Resolution Select bit 5
007516 7F7516 -> $0010                SMP_DIS:   equ $10   ; %00010000 Discharge Before Sampling bit 4
007516 7F7516 -> $0008                ETRIGCH3:  equ $08   ; %00001000 External Trigger Channel Select Bit 3
007516 7F7516 -> $0004                ETRIGCH2:  equ $04   ; %00000100 External Trigger Channel Select Bit 2
007516 7F7516 -> $0002                ETRIGCH1:  equ $02   ; %00000010 External Trigger Channel Select Bit 1
007516 7F7516 -> $0001                ETRIGCH0:  equ $01   ; %00000001 External Trigger Channel Select Bit 0
007516 7F7516 -> $02C2                ATD0CTL2:   equ $02C2 ; ATD0 Control Register 2 (pg 511)
007516 7F7516 -> $0040                AFFC:      equ $40   ; %01000000 ATD Fast Flag Clear All Bit 6
007516 7F7516 -> $0020                ICLKSTP:   equ $20   ; %00100000 Internal Clock in Stop Mode bit 5
007516 7F7516 -> $0010                ETRIGLE:   equ $10   ; %00010000 External Trigger Level/Edge Control Bit 4
007516 7F7516 -> $0008                ETRIGP:    equ $08   ; %00001000 External Trigger Polarity Bit 3
007516 7F7516 -> $0004                ETRIGE:    equ $04   ; %00000100 External Trigger Mode Enable Bit 2
007516 7F7516 -> $0002                ASCIE:     equ $02   ; %00000010 ATD Seq Complete Interrupt Enable Bit 1
007516 7F7516 -> $0001                ACMPIE:    equ $01   ; %00000001  ATD Compare Interrupt Enable bit 0
007516 7F7516 -> $02C3                ATD0CTL3:   equ $02C3 ; ATD0 Control Register 3 (pg 512)
007516 7F7516 -> $0080                DJM:       equ $80   ; %10000000 Result Register Data Justification bit 7
007516 7F7516 -> $0040                S8C:       equ $40   ; %01000000 Conversion Sequence Length bit 6
007516 7F7516 -> $0020                S4C:       equ $20   ; %00100000 Conversion Sequence Length bit 5
007516 7F7516 -> $0010                S2C:       equ $10   ; %00010000 Conversion Sequence Length bit 4
007516 7F7516 -> $0008                S1C:       equ $08   ; %00001000 Conversion Sequence Length bit 3
007516 7F7516 -> $0004                FIFO:      equ $04   ; %00000100 Result Register FIFO Mode bit 2
007516 7F7516 -> $0002                FRZ1:      equ $02   ; %00000010 Background Debug Freeze Enable bit 1
007516 7F7516 -> $0001                FRZ0:      equ $01   ; %00000001 Background Debug Freeze Enable bit 0
007516 7F7516 -> $02C4                ATD0CTL4:   equ $02C4 ; ATD0 Control Register 4 (pg 514)
007516 7F7516 -> $0080                SMP2:      equ $80   ; %10000000 Sample Time Select Bit 7
007516 7F7516 -> $0040                SMP1:      equ $40   ; %01000000 Sample Time Select Bit 6
007516 7F7516 -> $0020                SMP0:      equ $20   ; %00100000 Sample Time Select Bit 5
007516 7F7516 -> $0010                PRS4:      equ $10   ; %00010000 ATD Clock Prescaler Bit 4
007516 7F7516 -> $0008                PRS3:      equ $08   ; %00001000 ATD Clock Prescaler Bit 3
007516 7F7516 -> $0004                PRS2:      equ $04   ; %00000100 ATD Clock Prescaler Bit 2
007516 7F7516 -> $0002                PRS1:      equ $02   ; %00000010 ATD Clock Prescaler Bit 1
007516 7F7516 -> $0001                PRS0:      equ $01   ; %00000001 ATD Clock Prescaler Bit 0
007516 7F7516 -> $02C5                ATD0CTL5:   equ $02C5 ; ATD0 Control Register 5 (pg 515)
007516 7F7516 -> $0040                SC:        equ $40   ; %01000000 Special Channel Conversion bit 6
007516 7F7516 -> $0020                SCAN:      equ $20   ; %00100000 Continous Conversion Sequence Mode Bit 5
007516 7F7516 -> $0010                MULT:      equ $10   ; %00010000 Multi-Channel Sample Mode Bit 4
007516 7F7516 -> $0008                CD:        equ $08   ; %00001000 Analog Input Channel Select Code Bit 3
007516 7F7516 -> $0004                CC:        equ $04   ; %00000100 Analog Input Channel Select Code Bit 2
007516 7F7516 -> $0002                CB:        equ $02   ; %00000010 Analog Input Channel Select Code Bit 1
007516 7F7516 -> $0001                CA:        equ $01   ; %00000001 Analog Input Channel Select Code Bit 0
007516 7F7516 -> $02C6                ATD0STAT0:  equ $02C6 ; ATD0 Status Register 0 (pg 517)
007516 7F7516 -> $0080                SCF:       equ $80   ; %10000000 Sequence Complete Flag Bit 7
007516 7F7516 -> $0020                ETORF:     equ $20   ; %00100000 External Trigger Overrun Flag Bit 5
007516 7F7516 -> $0010                FIFOR:     equ $10   ; %00010000 Result Register Over Run Flag Bit 4
007516 7F7516 -> $0008                CC3:       equ $08   ; %00001000 Conversion Counter Bit 3
007516 7F7516 -> $0004                CC2:       equ $04   ; %00000100 Conversion Counter Bit 2
007516 7F7516 -> $0002                CC1:       equ $02   ; %00000010 Conversion Counter Bit 1
007516 7F7516 -> $0001                CC0:       equ $01   ; %00000001 Conversion Counter Bit 0
                                      ;$02C7 reserved
007516 7F7516 -> $02C8                ATD0CMPEH: equ $02C8 ; ATD0 Compare Enable Register Hi Byte (pg 518)
007516 7F7516 -> $0080                CMPE15:   equ $80   ; Compare Enable for Conversion Number n bit 15
007516 7F7516 -> $0040                CMPE14:   equ $40   ; Compare Enable for Conversion Number n bit 14
007516 7F7516 -> $0020                CMPE13:   equ $20   ; Compare Enable for Conversion Number n bit 13
007516 7F7516 -> $0010                CMPE12:   equ $10   ; Compare Enable for Conversion Number n bit 12
007516 7F7516 -> $0008                CMPE11:   equ $08   ; Compare Enable for Conversion Number n bit 11
007516 7F7516 -> $0004                CMPE10:   equ $04   ; Compare Enable for Conversion Number n bit 10
007516 7F7516 -> $0002                CMPE9:    equ $02   ; Compare Enable for Conversion Number n bit 9
007516 7F7516 -> $0001                CMPE8:    equ $01   ; Compare Enable for Conversion Number n bit 8
007516 7F7516 -> $02C9                ATD0CMPEL: equ $02C9 ; ATD0 Compare Enable Register Lo Byte (pg 518)
007516 7F7516 -> $0080                CMPE7:    equ $80   ; Compare Enable for Conversion Number n bit 7
007516 7F7516 -> $0040                CMPE6:    equ $40   ; Compare Enable for Conversion Number n bit 6
007516 7F7516 -> $0020                CMPE5:    equ $20   ; Compare Enable for Conversion Number n bit 5
007516 7F7516 -> $0010                CMPE4:    equ $10   ; Compare Enable for Conversion Number n bit 4
007516 7F7516 -> $0008                CMPE3:    equ $08   ; Compare Enable for Conversion Number n bit 3
007516 7F7516 -> $0004                CMPE2:    equ $04   ; Compare Enable for Conversion Number n bit 2
007516 7F7516 -> $0002                CMPE1:    equ $02   ; Compare Enable for Conversion Number n bit 1
007516 7F7516 -> $0001                CMPE0:    equ $01   ; Compare Enable for Conversion Number n bit 0
007516 7F7516 -> $02CA                ATD0STAT2H: equ $02CA ; ATD0 Status Register 2 Hi Byte (pg 520)
007516 7F7516 -> $0080                CCF15:    equ $80   ; Conversion Complete Flag n bit 15
007516 7F7516 -> $0040                CCF14:    equ $40   ; Conversion Complete Flag n bit 14
007516 7F7516 -> $0020                CCF13:    equ $20   ; Conversion Complete Flag n bit 13
007516 7F7516 -> $0010                CCF12:    equ $10   ; Conversion Complete Flag n bit 12
007516 7F7516 -> $0008                CCF11:    equ $08   ; Conversion Complete Flag n bit 11
007516 7F7516 -> $0004                CCF10:    equ $04   ; Conversion Complete Flag n bit 10
007516 7F7516 -> $0002                CCF9:     equ $02   ; Conversion Complete Flag n bit 9
007516 7F7516 -> $0001                CCF8:     equ $01   ; Conversion Complete Flag n bit 8
007516 7F7516 -> $02CB                ATD0STAT2L: equ $02CB ; ATD0 Status Register 2 Lo Byte (pg 520)
007516 7F7516 -> $0080                CCF7:     equ $80   ; Conversion Complete Flag n bit 7
007516 7F7516 -> $0040                CCF6:     equ $40   ; Conversion Complete Flag n bit 6
007516 7F7516 -> $0020                CCF5:     equ $20   ; Conversion Complete Flag n bit 5
007516 7F7516 -> $0010                CCF4:     equ $10   ; Conversion Complete Flag n bit 4
007516 7F7516 -> $0008                CCF3:     equ $08   ; Conversion Complete Flag n bit 3
007516 7F7516 -> $0004                CCF2:     equ $04   ; Conversion Complete Flag n bit 2
007516 7F7516 -> $0002                CCF1:     equ $02   ; Conversion Complete Flag n bit 1
007516 7F7516 -> $0001                CCF0:     equ $01   ; Conversion Complete Flag n bit 0
007516 7F7516 -> $02CC                ATD0DIENH: equ $02CC ; ATD0 Input Enable Register Hi Byte (pg 521)
                                                          ; 1 = enable digital input buffer, 0 = disable digital input buffer
007516 7F7516 -> $0080                IEN15:    equ $80   ; %10000000 ATD Digital Input Enable on Channel Bit 7
007516 7F7516 -> $0040                IEN14:    equ $40   ; %01000000 ATD Digital Input Enable on Channel Bit 6
007516 7F7516 -> $0020                IEN13:    equ $20   ; %00100000 ATD Digital Input Enable on Channel Bit 5
007516 7F7516 -> $0010                IEN12:    equ $10   ; %00010000 ATD Digital Input Enable on Channel Bit 4
007516 7F7516 -> $0008                IEN11:    equ $08   ; %00001000 ATD Digital Input Enable on Channel Bit 3
007516 7F7516 -> $0004                IEN10:    equ $04   ; %00000100 ATD Digital Input Enable on Channel Bit 2
007516 7F7516 -> $0002                IEN9:     equ $02   ; %00000010 ATD Digital Input Enable on Channel Bit 1
007516 7F7516 -> $0001                IEN8:     equ $01   ; %00000001 ATD Digital Input Enable on Channel Bit 0
007516 7F7516 -> $02CD                ATD0DIENL: equ $02CD ; ATD0 Input Enable Register Lo Byte (pg 521)
                                                          ; 1 = enable digital input buffer, 0 = disable digital input buffer
007516 7F7516 -> $0080                IEN7:     equ $80   ; %10000000 ATD Digital Input Enable on Channel Bit 7
007516 7F7516 -> $0040                IEN6:     equ $40   ; %01000000 ATD Digital Input Enable on Channel Bit 6
007516 7F7516 -> $0020                IEN5:     equ $20   ; %00100000 ATD Digital Input Enable on Channel Bit 5
007516 7F7516 -> $0010                IEN4:     equ $10   ; %00010000 ATD Digital Input Enable on Channel Bit 4
007516 7F7516 -> $0008                IEN3:     equ $08   ; %00001000 ATD Digital Input Enable on Channel Bit 3
007516 7F7516 -> $0004                IEN2:     equ $04   ; %00000100 ATD Digital Input Enable on Channel Bit 2
007516 7F7516 -> $0002                IEN1:     equ $02   ; %00000010 ATD Digital Input Enable on Channel Bit 1
007516 7F7516 -> $0001                IEN0:     equ $01   ; %00000001 ATD Digital Input Enable on Channel Bit 0
007516 7F7516 -> $02CE                ATD0CMPHTH: equ $02CE ; ATD0 Compare Higher Than Register Hi Byte (pg 521)
007516 7F7516 -> $0080                CMPHT15:  equ $80   ; Compare Operation Higher Than Enable for conversion number n bit 15
007516 7F7516 -> $0040                CMPHT14:  equ $40   ; Compare Operation Higher Than Enable for conversion number n bit 14
007516 7F7516 -> $0020                CMPHT13:  equ $20   ; Compare Operation Higher Than Enable for conversion number n bit 13
007516 7F7516 -> $0010                CMPHT12:  equ $10   ; Compare Operation Higher Than Enable for conversion number n bit 12
007516 7F7516 -> $0008                CMPHT11:  equ $08   ; Compare Operation Higher Than Enable for conversion number n bit 11
007516 7F7516 -> $0004                CMPHT10:  equ $04   ; Compare Operation Higher Than Enable for conversion number n bit 10
007516 7F7516 -> $0002                CMPHT9:   equ $02   ; Compare Operation Higher Than Enable for conversion number n bit 9
007516 7F7516 -> $0001                CMPHT8:   equ $01   ; Compare Operation Higher Than Enable for conversion number n bit 8
007516 7F7516 -> $02CF                ATD0CMPHTL: equ $02CF ; ATD0 Compare Higher Than Register Lo Byte (pg 521)
007516 7F7516 -> $0080                CMPHT7:   equ $80   ; Compare Operation Higher Than Enable for conversion number n bit 7
007516 7F7516 -> $0040                CMPHT6:   equ $40   ; Compare Operation Higher Than Enable for conversion number n bit 6
007516 7F7516 -> $0020                CMPHT5:   equ $20   ; Compare Operation Higher Than Enable for conversion number n bit 5
007516 7F7516 -> $0010                CMPHT4:   equ $10   ; Compare Operation Higher Than Enable for conversion number n bit 4
007516 7F7516 -> $0008                CMPHT3:   equ $08   ; Compare Operation Higher Than Enable for conversion number n bit 3
007516 7F7516 -> $0004                CMPHT2:   equ $04   ; Compare Operation Higher Than Enable for conversion number n bit 2
007516 7F7516 -> $0002                CMPHT1:   equ $02   ; Compare Operation Higher Than Enable for conversion number n bit 1
007516 7F7516 -> $0001                CMPHT0:   equ $01   ; Compare Operation Higher Than Enable for conversion number n bit 0
007516 7F7516 -> $02D0                ATD0DR0H:  equ $02D0 ; ATD0 Conversion Result Register 0 Hi Byte (pg 522)
007516 7F7516 -> $02D1                ATD0DR0L:  equ $02D1 ; ATD0 Conversion Result Register 0 Lo Byte (pg 522)
007516 7F7516 -> $02D2                ATD0DR1H:  equ $02D2 ; ATD0 Conversion Result Register 1 Hi Byte (pg 522)
007516 7F7516 -> $02D3                ATD0DR1L:  equ $02D3 ; ATD0 Conversion Result Register 1 Lo Byte (pg 522)
007516 7F7516 -> $02D4                ATD0DR2H:  equ $02D4 ; ATD0 Conversion Result Register 2 Hi Byte (pg 522)
007516 7F7516 -> $02D5                ATD0DR2L:  equ $02D5 ; ATD0 Conversion Result Register 2 Lo Byte (pg 522)
007516 7F7516 -> $02D6                ATD0DR3H:  equ $02D6 ; ATD0 Conversion Result Register 3 Hi Byte (pg 522)
007516 7F7516 -> $02D7                ATD0DR3L:  equ $02D7 ; ATD0 Conversion Result Register 3 Lo Byte (pg 522)
007516 7F7516 -> $02D8                ATD0DR4H:  equ $02D8 ; ATD0 Conversion Result Register 4 Hi Byte (pg 522)
007516 7F7516 -> $02D9                ATD0DR4L:  equ $02D9 ; ATD0 Conversion Result Register 4 Lo Byte (pg 522)
007516 7F7516 -> $02DA                ATD0DR5H:  equ $02DA ; ATD0 Conversion Result Register 5 Hi Byte (pg 522)
007516 7F7516 -> $02DB                ATD0DR5L:  equ $02DB ; ATD0 Conversion Result Register 5 Lo Byte (pg 522)
007516 7F7516 -> $02DC                ATD0DR6H:  equ $02DC ; ATD0 Conversion Result Register 6 Hi Byte (pg 522)
007516 7F7516 -> $02DD                ATD0DR6L:  equ $02DD ; ATD0 Conversion Result Register 6 Lo Byte (pg 522)
007516 7F7516 -> $02DE                ATD0DR7H:  equ $02DE ; ATD0 Conversion Result Register 7 Hi Byte (pg 522)
007516 7F7516 -> $02DF                ATD0DR7L:  equ $02DF ; ATD0 Conversion Result Register 7 Lo Byte (pg 522)
007516 7F7516 -> $02E0                ATD0DR8H:  equ $02E0 ; ATD0 Conversion Result Register 8 Hi Byte (pg 522)
007516 7F7516 -> $02E1                ATD0DR8L:  equ $02E1 ; ATD0 Conversion Result Register 8 Lo Byte (pg 522)
007516 7F7516 -> $02E2                ATD0DR9H:  equ $02E2 ; ATD0 Conversion Result Register 9 Hi Byte (pg 522)
007516 7F7516 -> $02E3                ATD0DR9L:  equ $02E3 ; ATD0 Conversion Result Register 9 Lo Byte (pg 522)
007516 7F7516 -> $02E4                ATD0DR10H:  equ $02E4 ; ATD0 Conversion Result Register 10 Hi Byte (pg 522)
007516 7F7516 -> $02E5                ATD0DR10L:  equ $02E5 ; ATD0 Conversion Result Register 10 Lo Byte (pg 522)
007516 7F7516 -> $02E6                ATD0DR11H:  equ $02E6 ; ATD0 Conversion Result Register 11 Hi Byte (pg 522)
007516 7F7516 -> $02E7                ATD0DR11L:  equ $02E7 ; ATD0 Conversion Result Register 11 Lo Byte (pg 522)
007516 7F7516 -> $02E8                ATD0DR12H:  equ $02E8 ; ATD0 Conversion Result Register 12 Hi Byte (pg 522)
007516 7F7516 -> $02E9                ATD0DR12L:  equ $02E9 ; ATD0 Conversion Result Register 12 Lo Byte (pg 522)
007516 7F7516 -> $02EA                ATD0DR13H:  equ $02EA ; ATD0 Conversion Result Register 13 Hi Byte (pg 522)
007516 7F7516 -> $02EB                ATD0DR13L:  equ $02EB ; ATD0 Conversion Result Register 13 Lo Byte (pg 522)
007516 7F7516 -> $02EC                ATD0DR14H:  equ $02EC ; ATD0 Conversion Result Register 14 Hi Byte (pg 522)
007516 7F7516 -> $02ED                ATD0DR14L:  equ $02ED ; ATD0 Conversion Result Register 14 Lo Byte (pg 522)
007516 7F7516 -> $02EE                ATD0DR15H:  equ $02EE ; ATD0 Conversion Result Register 15 Hi Byte (pg 522)
007516 7F7516 -> $02EF                ATD0DR15L:  equ $02EF ; ATD0 Conversion Result Register 15 Lo Byte (pg 522)
                                      ;*****************************************************************************************
                                      ; - Serial Communications Interface (S12SCIV5) equates
                                      ;*****************************************************************************************
007516 7F7516 -> $00C8                SCI0BDH:   equ $00C8 ; SCI0 Baud Rate Register Hi Byte (pg 728)
007516 7F7516 -> $0080                IREN:      equ $80   ; %10000000 Infrared Enable Bit 7
007516 7F7516 -> $0040                TNP1:      equ $40   ; %01000000 Transmitter Narrow Pulse Bit 6
007516 7F7516 -> $0020                TNP0:      equ $20   ; %00100000 Transmitter Narrow Pulse Bit 5
007516 7F7516 -> $0010                SBR12:     equ $10   ; %00010000 SCI Baud Rate Bit 4
007516 7F7516 -> $0008                SBR11:     equ $08   ; %00001000 SCI Baud Rate Bit 3
007516 7F7516 -> $0004                SBR10:     equ $04   ; %00000100 SCI Baud Rate Bit 2
007516 7F7516 -> $0002                SBR9:      equ $02   ; %00000010 SCI Baud Rate Bit 1
007516 7F7516 -> $0001                SBR8:      equ $01   ; %00000001 SCI Baud Rate Bit 0
007516 7F7516 -> $00C9                SCI0BDL:   equ $00C9 ; SCI0 Baud Rate Register Lo Byte (pg 728
007516 7F7516 -> $0080                SBR7:      equ $80   ; %10000000 SCI Baud Rate Bit 7
007516 7F7516 -> $0040                SBR6:      equ $40   ; %01000000 SCI Baud Rate Bit 6
007516 7F7516 -> $0020                SBR5:      equ $20   ; %00100000 SCI Baud Rate Bit 5
007516 7F7516 -> $0010                SBR4:      equ $10   ; %00010000 SCI Baud Rate Bit 4
007516 7F7516 -> $0008                SBR3:      equ $08   ; %00001000 SCI Baud Rate Bit 3
007516 7F7516 -> $0004                SBR2:      equ $04   ; %00000100 SCI Baud Rate Bit 2
007516 7F7516 -> $0002                SBR1:      equ $02   ; %00000010 SCI Baud Rate Bit 1
007516 7F7516 -> $0001                SBR0:      equ $01   ; %00000001 SCI Baud Rate Bit 0
007516 7F7516 -> $00CA                SCI0CR1:   equ $00CA ; SCI0 Control Register 1 (pg 729)
007516 7F7516 -> $0080                LOOPS:     equ $80   ; %10000000 Loop Select Bit 7
007516 7F7516 -> $0040                SCISWAI:   equ $40   ; %01000000 SCI Stop in Wait Mode Bit 6
007516 7F7516 -> $0020                RSRC:      equ $20   ; %00100000 Receiver Source Bit 5
007516 7F7516 -> $0010                M:         equ $10   ; %00010000 Data Format Mode Bit 4
007516 7F7516 -> $0008                WAKE:      equ $08   ; %00001000 Wakeup Condition Bit 3
007516 7F7516 -> $0004                ILT:       equ $04   ; %00000100 Idle Line Type Bit 2
007516 7F7516 -> $0002                PE:        equ $02   ; %00000010 Parity Enable Bit 1
007516 7F7516 -> $0001                PT:        equ $01   ; %00000001 Parity Type Bit 0
007516 7F7516 -> $00CB                SCI0CR2:   equ $00CB ; SCI0 Control Register 2 (pg 734)
007516 7F7516 -> $0080                TXIE:      equ $80   ; %10000000 Transmitter Interrupt Enable Bit 7
007516 7F7516 -> $0040                TCIE:      equ $40   ; %01000000 Transmission Complete Int En Bit 6
007516 7F7516 -> $0020                RIE:       equ $20   ; %00100000 Receiver Full Interrupt Enable Bit 5
007516 7F7516 -> $0010                ILIE:      equ $10   ; %00010000 Idle Line Interrupt Enable Bit 4
007516 7F7516 -> $0008                TE:        equ $08   ; %00001000 Transmitter Enable Bit 3
007516 7F7516 -> $0004                RE:        equ $04   ; %00000100 Receiver Enable Bit 2
007516 7F7516 -> $0002                RWU:       equ $02   ; %00000010 Receiver Wakeup Bit 1
007516 7F7516 -> $0001                SBK:       equ $01   ; %00000001 Send Break Bit 0
007516 7F7516 -> $00CC                SCI0SR1:   equ $00CC ; SCI0 Status Register 1 (pg 735)
007516 7F7516 -> $0080                TDRE:      equ $80   ; %10000000 Transmit Data Register Empty Flag Bit 7
007516 7F7516 -> $0040                TC:        equ $40   ; %01000000 Transmit Complete Bit 6
007516 7F7516 -> $0020                RDRF:      equ $20   ; %00100000 Receive Data Register Full Flag Bit 5
007516 7F7516 -> $0010                IDLE:      equ $10   ; %00010000 Idle Line Flag Bit 4
007516 7F7516 -> $0008                OR:        equ $08   ; %00001000 Overrun Flag Bit 3
007516 7F7516 -> $0004                NF:        equ $04   ; %00000100 Noise Flag Bit 2
007516 7F7516 -> $0002                FE:        equ $02   ; %00000010 Framing Error Flag Bit 1
007516 7F7516 -> $0001                PF:        equ $01   ; %00000001 Parity Error Flag Bit 0
007516 7F7516 -> $00CE                SCI0DRH:   equ $00CE ; SCI0 Data Register Hi byte (pg 738)
007516 7F7516 -> $0080                R8:        equ $80   ; %10000000 bit 7
007516 7F7516 -> $0040                T8:        equ $40   ; 010000000 bit 6
007516 7F7516 -> $00CF                SCI0DRL:   equ $00CF ; SCI0 Data Register Lo Byte (pg 738)
007516 7F7516 -> $0080                R7:        equ $80   ; %10000000 Receive Bit 7
007516 7F7516 -> $0040                R6:        equ $40   ; %01000000 Receive Bit 6
007516 7F7516 -> $0020                R5:        equ $20   ; %00100000 Receive Bit 5
007516 7F7516 -> $0010                R4:        equ $10   ; %00010000 Receive Bit 4
007516 7F7516 -> $0008                R3:        equ $08   ; %00001000 Receive Bit 3
007516 7F7516 -> $0004                R2:        equ $04   ; %00000100 Receive Bit 2
007516 7F7516 -> $0002                R1:        equ $02   ; %00000010 Receive Bit 1
007516 7F7516 -> $0001                R0:        equ $01   ; %00000001 Receive Bit 0
007516 7F7516 -> $0080                T7:        equ $80   ; %10000000 Transmit Bit 7
007516 7F7516 -> $0040                T6:        equ $40   ; %01000000 Transmit Bit 6
007516 7F7516 -> $0020                T5:        equ $20   ; %00100000 Transmit Bit 5
007516 7F7516 -> $0010                T4:        equ $10   ; %00010000 Transmit Bit 4
007516 7F7516 -> $0008                T3:        equ $08   ; %00001000 Transmit Bit 3
007516 7F7516 -> $0004                T2:        equ $04   ; %00000100 Transmit Bit 2
007516 7F7516 -> $0002                T1:        equ $02   ; %00000010 Transmit Bit 1
007516 7F7516 -> $0001                T0:        equ $01   ; %00000001 Transmit Bit 0
007516 7F7516 -> $00D0                SCI1BDH:   equ $00D0 ; SCI1 Baud Rate Register Hi Byte (pg 728)
007516 7F7516 -> $0080                IREN:      equ $80   ; %10000000 Infrared Enable Bit 7
007516 7F7516 -> $0040                TNP1:      equ $40   ; %01000000 Transmitter Narrow Pulse Bit 6
007516 7F7516 -> $0020                TNP0:      equ $20   ; %00100000 Transmitter Narrow Pulse Bit 5
007516 7F7516 -> $0010                SBR12:     equ $10   ; %00010000 SCI Baud Rate Bit 4
007516 7F7516 -> $0008                SBR11:     equ $08   ; %00001000 SCI Baud Rate Bit 3
007516 7F7516 -> $0004                SBR10:     equ $04   ; %00000100 SCI Baud Rate Bit 2
007516 7F7516 -> $0002                SBR9:      equ $02   ; %00000010 SCI Baud Rate Bit 1
007516 7F7516 -> $0001                SBR8:      equ $01   ; %00000001 SCI Baud Rate Bit 0
007516 7F7516 -> $00D1                SCI1BDL:   equ $00D1 ; SCI1 Baud Rate Register Lo Byte (pg 728
007516 7F7516 -> $0080                SBR7:      equ $80   ; %10000000 SCI Baud Rate Bit 7
007516 7F7516 -> $0040                SBR6:      equ $40   ; %01000000 SCI Baud Rate Bit 6
007516 7F7516 -> $0020                SBR5:      equ $20   ; %00100000 SCI Baud Rate Bit 5
007516 7F7516 -> $0010                SBR4:      equ $10   ; %00010000 SCI Baud Rate Bit 4
007516 7F7516 -> $0008                SBR3:      equ $08   ; %00001000 SCI Baud Rate Bit 3
007516 7F7516 -> $0004                SBR2:      equ $04   ; %00000100 SCI Baud Rate Bit 2
007516 7F7516 -> $0002                SBR1:      equ $02   ; %00000010 SCI Baud Rate Bit 1
007516 7F7516 -> $0001                SBR0:      equ $01   ; %00000001 SCI Baud Rate Bit 0
007516 7F7516 -> $00D2                SCI1CR1:   equ $00D2 ; SCI1 Control Register 1 (pg 729)
007516 7F7516 -> $0080                LOOPS:     equ $80   ; %10000000 Loop Select Bit 7
007516 7F7516 -> $0040                SCISWAI:   equ $40   ; %01000000 SCI Stop in Wait Mode Bit 6
007516 7F7516 -> $0020                RSRC:      equ $20   ; %00100000 Receiver Source Bit 5
007516 7F7516 -> $0010                M:         equ $10   ; %00010000 Data Format Mode Bit 4
007516 7F7516 -> $0008                WAKE:      equ $08   ; %00001000 Wakeup Condition Bit 3
007516 7F7516 -> $0004                ILT:       equ $04   ; %00000100 Idle Line Type Bit 2
007516 7F7516 -> $0002                PE:        equ $02   ; %00000010 Parity Enable Bit 1
007516 7F7516 -> $0001                PT:        equ $01   ; %00000001 Parity Type Bit 0
007516 7F7516 -> $00D3                SCI1CR2:   equ $00D3 ; SCI1 Control Register 2 (pg 734)
007516 7F7516 -> $0080                TXIE:      equ $80   ; %10000000 Transmitter Interrupt Enable Bit 7
007516 7F7516 -> $0040                TCIE:      equ $40   ; %01000000 Transmission Complete Int En Bit 6
007516 7F7516 -> $0020                RIE:       equ $20   ; %00100000 Receiver Full Interrupt Enable Bit 5
007516 7F7516 -> $0010                ILIE:      equ $10   ; %00010000 Idle Line Interrupt Enable Bit 4
007516 7F7516 -> $0008                TE:        equ $08   ; %00001000 Transmitter Enable Bit 3
007516 7F7516 -> $0004                RE:        equ $04   ; %00000100 Receiver Enable Bit 2
007516 7F7516 -> $0002                RWU:       equ $02   ; %00000010 Receiver Wakeup Bit 1
007516 7F7516 -> $0001                SBK:       equ $01   ; %00000001 Send Break Bit 0
007516 7F7516 -> $00D4                SCI1SR1:   equ $00D4 ; SCI1 Status Register 1 (pg 735)
007516 7F7516 -> $0080                TDRE:      equ $80   ; %10000000 Transmit Data Register Empty Flag Bit 7
007516 7F7516 -> $0040                TC:        equ $40   ; %01000000 Transmit Complete Bit 6
007516 7F7516 -> $0020                RDRF:      equ $20   ; %00100000 Receive Data Register Full Flag Bit 5
007516 7F7516 -> $0010                IDLE:      equ $10   ; %00010000 Idle Line Flag Bit 4
007516 7F7516 -> $0008                OR:        equ $08   ; %00001000 Overrun Flag Bit 3
007516 7F7516 -> $0004                NF:        equ $04   ; %00000100 Noise Flag Bit 2
007516 7F7516 -> $0002                FE:        equ $02   ; %00000010 Framing Error Flag Bit 1
007516 7F7516 -> $0001                PF:        equ $01   ; %00000001 Parity Error Flag Bit 0
007516 7F7516 -> $00D6                SCI1DRH:   equ $00D6 ; SCI1 Data Register Hi byte (pg 738)
007516 7F7516 -> $0080                R8:        equ $80   ; %10000000 bit 7
007516 7F7516 -> $0040                T8:        equ $40   ; 010000000 bit 6
007516 7F7516 -> $00D7                SCI1DRL:   equ $00D7 ; SCI1 Data Register Lo Byte (pg 738)
007516 7F7516 -> $0080                R7:        equ $80   ; %10000000 Receive Bit 7
007516 7F7516 -> $0040                R6:        equ $40   ; %01000000 Receive Bit 6
007516 7F7516 -> $0020                R5:        equ $20   ; %00100000 Receive Bit 5
007516 7F7516 -> $0010                R4:        equ $10   ; %00010000 Receive Bit 4
007516 7F7516 -> $0008                R3:        equ $08   ; %00001000 Receive Bit 3
007516 7F7516 -> $0004                R2:        equ $04   ; %00000100 Receive Bit 2
007516 7F7516 -> $0002                R1:        equ $02   ; %00000010 Receive Bit 1
007516 7F7516 -> $0001                R0:        equ $01   ; %00000001 Receive Bit 0
007516 7F7516 -> $0080                T7:        equ $80   ; %10000000 Transmit Bit 7
007516 7F7516 -> $0040                T6:        equ $40   ; %01000000 Transmit Bit 6
007516 7F7516 -> $0020                T5:        equ $20   ; %00100000 Transmit Bit 5
007516 7F7516 -> $0010                T4:        equ $10   ; %00010000 Transmit Bit 4
007516 7F7516 -> $0008                T3:        equ $08   ; %00001000 Transmit Bit 3
007516 7F7516 -> $0004                T2:        equ $04   ; %00000100 Transmit Bit 2
007516 7F7516 -> $0002                T1:        equ $02   ; %00000010 Transmit Bit 1
007516 7F7516 -> $0001                T0:        equ $01   ; %00000001 Transmit Bit 0
                                      ;*****************************************************************************************
                                      ; - Serial Peripherial Interface (S12SPIV5) equates
                                      ;*****************************************************************************************
007516 7F7516 -> $00D8                SPI0CR1:   equ $00D8 ; SPI0 Control Register (page 765)
007516 7F7516 -> $0080                SPIE:      equ $80   ; %10000000 SPI Interrupt Enable Bit 7
007516 7F7516 -> $0040                SPE:       equ $40   ; %01000000 SPI System Enable Bit 6
007516 7F7516 -> $0020                SPTIE:     equ $20   ; %00100000 SPI Tansmit Interrupt Enable Bit 5
007516 7F7516 -> $0010                MSTR:      equ $10   ; %00010000 SPI Master/Slave Mode Select Bit 4
007516 7F7516 -> $0008                CPOL:      equ $08   ; %00001000 SPI Clock Polarity  Bit 3
007516 7F7516 -> $0004                CPHA:      equ $04   ; %00000100 SPI Clock Phase Bit 2
007516 7F7516 -> $0002                SSOE:      equ $02   ; %00000010 Slave Select Output Enable Bit 1
007516 7F7516 -> $0001                LSBFE:     equ $01   ; %00000001 LSB-First Enable Bit 0
007516 7F7516 -> $00D9                SPI0CR2:  equ $00D9  ; SPI0 Control Register 2 (page 766)
                                      ;U/I:     equ $80    ; %10000000 Unimplemented Bit 7
007516 7F7516 -> $0040                XFRW:     equ $40    ; %01000000 Transfer Width Bit 6
                                      ;U/I:     equ $20    ; %00100000 Unimplemented Bit 5
007516 7F7516 -> $0010                MODFN:    equ $10    ; %00010000 Mode Fault Enable Bit 4
007516 7F7516 -> $0008                BIDIROE:  equ $08    ; %00001000 Output Enable in the Bidirectionsal Mode of Opersation  Bit 3
                                      ;U/I:     equ $04    ; %00000100 Unimplemented Bit 2
007516 7F7516 -> $0002                SPISWAI:  equ $02    ; %00000010 SPI Stop in Wait Mode Bit 1
007516 7F7516 -> $0001                SPCO:     equ $01    ; %00000001 Serial Pin Control Bit 0
007516 7F7516 -> $00DA                SPI0BR:   equ $00DA  ; SPI0 Baud Rate Register (page 768)
                                      ;U/I:     equ $80    ; %10000000 Unimplemented Bit 7
007516 7F7516 -> $0040                SPPR2:    equ $40    ; %01000000 SPI Baud Rate Preselection Bit 6
007516 7F7516 -> $0020                SPPR1:    equ $20    ; %00100000 SPI Baud Rate Preselection Bit 5
007516 7F7516 -> $0010                SPPR0:    equ $10    ; %00010000 SPI Baud Rate Preselection Bit 4
                                      ;U/I:     equ $08    ; %00001000 Unimplemented  Bit 3
007516 7F7516 -> $0004                SPR2:     equ $04    ; %00000100 SPI Baud Rate Selection Bit 2
007516 7F7516 -> $0002                SPR1:     equ $02    ; %00000010 SPI Baud Rate Selection Bit 1
007516 7F7516 -> $0001                SPR0:     equ $01    ; %00000001 SPI Baud Rate Selection Bit 0
007516 7F7516 -> $00DB                SPI0SR:   equ $00DB  ; SPI0 Status Register (page 770)
007516 7F7516 -> $0080                SPIF:     equ $80    ; %10000000 SPIF Interrupt Flag Bit 7
                                      ;U/I:     equ $40    ; %01000000 Unimplemented Bit 6
007516 7F7516 -> $0020                SPTEF:    equ $20    ; %00100000 SPI Transmit Empty Interrupt Flag Bit 5
007516 7F7516 -> $0010                MODF:     equ $10    ; %00010000 Mode Fault Flag Bit 4
                                      ;U/I:     equ $08    ; %00001000 Unimplemented  Bit 3
                                      ;U/I:     equ $04    ; %00000100 Unimplemented Bit 2
                                      ;U/I:     equ $02    ; %00000010 Unimplemented Bit 1
                                      ;U/I:     equ $01    ; %00000001 Unimplemented Bit 0
007516 7F7516 -> $00DC                SPI0DRH:  equ $00DC  ; SPI0 Data Register Hi Byte(page 772)
                                      ;R15:     equ $80    ; %10000000 SPI Data Bit 15
                                      ;R14:     equ $40    ; %01000000 SPI Data Bit 14
                                      ;R13:     equ $20    ; %00100000 SPI Data Bit 13
                                      ;R12:     equ $10    ; %00010000 SPI Data Bit 12
                                      ;R11:     equ $08    ; %00001000 SPI Data Bit 11
                                      ;R10:     equ $04    ; %00000100 SPI Data Bit 10
                                      ;R9:      equ $02    ; %00000010 SPI Data Bit 9
                                      ;R8:      equ $01    ; %00000001 SPI Data Bit 8
007516 7F7516 -> $00DD                SPI0DRL:  equ $00DD  ; SPI0 Data Register Hi Byte(page 772)
                                      ;R7:      equ $80    ; %10000000 SPI Data Bit 7
                                      ;R6:      equ $40    ; %01000000 SPI Data Bit 6
                                      ;R5:      equ $20    ; %00100000 SPI Data Bit 5
                                      ;R4:      equ $10    ; %00010000 SPI Data Bit 4
                                      ;R3:      equ $08    ; %00001000 SPI Data Bit 3
                                      ;R2:      equ $04    ; %00000100 SPI Data Bit 2
                                      ;R1:      equ $02    ; %00000010 SPI Data Bit 1
                                      ;R0:      equ $01    ; %00000001 SPI Data Bit 0
007516 7F7516 -> $00F0                SPI1CR1:   equ $00F0 ; SPI1 Control Register (page 765)
007516 7F7516 -> $0080                SPIE:      equ $80   ; %10000000 SPI Interrupt Enable Bit 7
007516 7F7516 -> $0040                SPE:       equ $40   ; %01000000 SPI System Enable Bit 6
007516 7F7516 -> $0020                SPTIE:     equ $20   ; %00100000 SPI Tansmit Interrupt Enable Bit 5
007516 7F7516 -> $0010                MSTR:      equ $10   ; %00010000 SPI Master/Slave Mode Select Bit 4
007516 7F7516 -> $0008                CPOL:      equ $08   ; %00001000 SPI Clock Polarity  Bit 3
007516 7F7516 -> $0004                CPHA:      equ $04   ; %00000100 SPI Clock Phase Bit 2
007516 7F7516 -> $0002                SSOE:      equ $02   ; %00000010 Slave Select Output Enable Bit 1
007516 7F7516 -> $0001                LSBFE:     equ $01   ; %00000001 LSB-First Enable Bit 0
007516 7F7516 -> $00F1                SPI1CR2:  equ $00F1  ; SPI1 Control Register 2 (page 766)
                                      ;U/I:     equ $80    ; %10000000 Unimplemented Bit 7
007516 7F7516 -> $0040                XFRW:     equ $40    ; %01000000 Transfer Width Bit 6
                                      ;U/I:     equ $20    ; %00100000 Unimplemented Bit 5
007516 7F7516 -> $0010                MODFN:    equ $10    ; %00010000 Mode Fault Enable Bit 4
007516 7F7516 -> $0008                BIDIROE:  equ $08    ; %00001000 Output Enable in the Bidirectionsal Mode of Opersation  Bit 3
                                      ;U/I:     equ $04    ; %00000100 Unimplemented Bit 2
007516 7F7516 -> $0002                SPISWAI:  equ $02    ; %00000010 SPI Stop in Wait Mode Bit 1
007516 7F7516 -> $0001                SPCO:     equ $01    ; %00000001 Serial Pin Control Bit 0
007516 7F7516 -> $00F2                SPI1BR:   equ $00F2  ; SPI1 Baud Rate Register (page 768)
                                      ;U/I:     equ $80    ; %10000000 Unimplemented Bit 7
007516 7F7516 -> $0040                SPPR2:    equ $40    ; %01000000 SPI Baud Rate Preselection Bit 6
007516 7F7516 -> $0020                SPPR1:    equ $20    ; %00100000 SPI Baud Rate Preselection Bit 5
007516 7F7516 -> $0010                SPPR0:    equ $10    ; %00010000 SPI Baud Rate Preselection Bit 4
                                      ;U/I:     equ $08    ; %00001000 Unimplemented  Bit 3
007516 7F7516 -> $0004                SPR2:     equ $04    ; %00000100 SPI Baud Rate Selection Bit 2
007516 7F7516 -> $0002                SPR1:     equ $02    ; %00000010 SPI Baud Rate Selection Bit 1
007516 7F7516 -> $0001                SPR0:     equ $01    ; %00000001 SPI Baud Rate Selection Bit 0
007516 7F7516 -> $00F3                SPI1SR:   equ $00F3  ; SPI1 Status Register (page 770)
007516 7F7516 -> $0080                SPIF:     equ $80    ; %10000000 SPIF Interrupt Flag Bit 7
                                      ;U/I:     equ $40    ; %01000000 Unimplemented Bit 6
007516 7F7516 -> $0020                SPTEF:    equ $20    ; %00100000 SPI Transmit Empty Interrupt Flag Bit 5
007516 7F7516 -> $0010                MODF:     equ $10    ; %00010000 Mode Fault Flag Bit 4
                                      ;U/I:     equ $08    ; %00001000 Unimplemented  Bit 3
                                      ;U/I:     equ $04    ; %00000100 Unimplemented Bit 2
                                      ;U/I:     equ $02    ; %00000010 Unimplemented Bit 1
                                      ;U/I:     equ $01    ; %00000001 Unimplemented Bit 0
007516 7F7516 -> $00F4                SPI1DRH:  equ $00F4  ; SPI1 Data Register Hi Byte(page 772)
                                      ;R15:     equ $80    ; %10000000 SPI Data Bit 15
                                      ;R14:     equ $40    ; %01000000 SPI Data Bit 14
                                      ;R13:     equ $20    ; %00100000 SPI Data Bit 13
                                      ;R12:     equ $10    ; %00010000 SPI Data Bit 12
                                      ;R11:     equ $08    ; %00001000 SPI Data Bit 11
                                      ;R10:     equ $04    ; %00000100 SPI Data Bit 10
                                      ;R9:      equ $02    ; %00000010 SPI Data Bit 9
                                      ;R8:      equ $01    ; %00000001 SPI Data Bit 8
007516 7F7516 -> $00F5                SPI1DRL:  equ $00F5  ; SPI1 Data Register Hi Byte(page 772)
                                      ;R7:      equ $80    ; %10000000 SPI Data Bit 7
                                      ;R6:      equ $40    ; %01000000 SPI Data Bit 6
                                      ;R5:      equ $20    ; %00100000 SPI Data Bit 5
                                      ;R4:      equ $10    ; %00010000 SPI Data Bit 4
                                      ;R3:      equ $08    ; %00001000 SPI Data Bit 3
                                      ;R2:      equ $04    ; %00000100 SPI Data Bit 2
                                      ;R1:      equ $02    ; %00000010 SPI Data Bit 1
                                      ;R0:      equ $01    ; %00000001 SPI Data Bit 0
007516 7F7516 -> $00F8                SPI2CR1:   equ $00F8 ; SPI2 Control Register (page 765)
007516 7F7516 -> $0080                SPIE:      equ $80   ; %10000000 SPI Interrupt Enable Bit 7
007516 7F7516 -> $0040                SPE:       equ $40   ; %01000000 SPI System Enable Bit 6
007516 7F7516 -> $0020                SPTIE:     equ $20   ; %00100000 SPI Tansmit Interrupt Enable Bit 5
007516 7F7516 -> $0010                MSTR:      equ $10   ; %00010000 SPI Master/Slave Mode Select Bit 4
007516 7F7516 -> $0008                CPOL:      equ $08   ; %00001000 SPI Clock Polarity  Bit 3
007516 7F7516 -> $0004                CPHA:      equ $04   ; %00000100 SPI Clock Phase Bit 2
007516 7F7516 -> $0002                SSOE:      equ $02   ; %00000010 Slave Select Output Enable Bit 1
007516 7F7516 -> $0001                LSBFE:     equ $01   ; %00000001 LSB-First Enable Bit 0
007516 7F7516 -> $00F9                SPI2CR2:  equ $00F9  ; SPI2 Control Register 2 (page 766)
                                      ;U/I:     equ $80    ; %10000000 Unimplemented Bit 7
007516 7F7516 -> $0040                XFRW:     equ $40    ; %01000000 Transfer Width Bit 6
                                      ;U/I:     equ $20    ; %00100000 Unimplemented Bit 5
007516 7F7516 -> $0010                MODFN:    equ $10    ; %00010000 Mode Fault Enable Bit 4
007516 7F7516 -> $0008                BIDIROE:  equ $08    ; %00001000 Output Enable in the Bidirectionsal Mode of Opersation  Bit 3
                                      ;U/I:     equ $04    ; %00000100 Unimplemented Bit 2
007516 7F7516 -> $0002                SPISWAI:  equ $02    ; %00000010 SPI Stop in Wait Mode Bit 1
007516 7F7516 -> $0001                SPCO:     equ $01    ; %00000001 Serial Pin Control Bit 0
007516 7F7516 -> $00FA                SPI2BR:   equ $00FA  ; SPI2 Baud Rate Register (page 768)
                                      ;U/I:     equ $80    ; %10000000 Unimplemented Bit 7
007516 7F7516 -> $0040                SPPR2:    equ $40    ; %01000000 SPI Baud Rate Preselection Bit 6
007516 7F7516 -> $0020                SPPR1:    equ $20    ; %00100000 SPI Baud Rate Preselection Bit 5
007516 7F7516 -> $0010                SPPR0:    equ $10    ; %00010000 SPI Baud Rate Preselection Bit 4
                                      ;U/I:     equ $08    ; %00001000 Unimplemented  Bit 3
007516 7F7516 -> $0004                SPR2:     equ $04    ; %00000100 SPI Baud Rate Selection Bit 2
007516 7F7516 -> $0002                SPR1:     equ $02    ; %00000010 SPI Baud Rate Selection Bit 1
007516 7F7516 -> $0001                SPR0:     equ $01    ; %00000001 SPI Baud Rate Selection Bit 0
007516 7F7516 -> $00FB                SPI2SR:   equ $00FB  ; SPI1 Status Register (page 770)
007516 7F7516 -> $0080                SPIF:     equ $80    ; %10000000 SPIF Interrupt Flag Bit 7
                                      ;U/I:     equ $40    ; %01000000 Unimplemented Bit 6
007516 7F7516 -> $0020                SPTEF:    equ $20    ; %00100000 SPI Transmit Empty Interrupt Flag Bit 5
007516 7F7516 -> $0010                MODF:     equ $10    ; %00010000 Mode Fault Flag Bit 4
                                      ;U/I:     equ $08    ; %00001000 Unimplemented  Bit 3
                                      ;U/I:     equ $04    ; %00000100 Unimplemented Bit 2
                                      ;U/I:     equ $02    ; %00000010 Unimplemented Bit 1
                                      ;U/I:     equ $01    ; %00000001 Unimplemented Bit 0
007516 7F7516 -> $00FC                SPI2DRH:  equ $00FC  ; SPI1 Data Register Hi Byte(page 772)
                                      ;R15:     equ $80    ; %10000000 SPI Data Bit 15
                                      ;R14:     equ $40    ; %01000000 SPI Data Bit 14
                                      ;R13:     equ $20    ; %00100000 SPI Data Bit 13
                                      ;R12:     equ $10    ; %00010000 SPI Data Bit 12
                                      ;R11:     equ $08    ; %00001000 SPI Data Bit 11
                                      ;R10:     equ $04    ; %00000100 SPI Data Bit 10
                                      ;R9:      equ $02    ; %00000010 SPI Data Bit 9
                                      ;R8:      equ $01    ; %00000001 SPI Data Bit 8
007516 7F7516 -> $00FD                SPI2DRL:  equ $00FD  ; SPI1 Data Register Hi Byte(page 772)
                                      ;R7:      equ $80    ; %10000000 SPI Data Bit 7
                                      ;R6:      equ $40    ; %01000000 SPI Data Bit 6
                                      ;R5:      equ $20    ; %00100000 SPI Data Bit 5
                                      ;R4:      equ $10    ; %00010000 SPI Data Bit 4
                                      ;R3:      equ $08    ; %00001000 SPI Data Bit 3
                                      ;R2:      equ $04    ; %00000100 SPI Data Bit 2
                                      ;R1:      equ $02    ; %00000010 SPI Data Bit 1
                                      ;R0:      equ $01    ; %00000001 SPI Data Bit 0
007516 7F7516 -> $036F                PTRRR:    equ $036F   ;Port R Routing Register (page 167)
007516 7F7516 -> $0080                PTRRR7:   equ $80     ; %10000000 Port R routing bit 7
007516 7F7516 -> $0040                PTRRR6:   equ $40     ; %01000000 Port R routing bit 6
007516 7F7516 -> $0020                PTRRR5:   equ $20     ; %00100000 Port R routing bit 5
007516 7F7516 -> $0010                PTRRR4:   equ $10     ; %00010000 Port R routing bit 4
007516 7F7516 -> $0008                PTRRR3:   equ $08     ; %00001000 Port R routing bit 3
007516 7F7516 -> $0004                PTRRR2:   equ $04     ; %00000100 Port R routing bit 2
007516 7F7516 -> $0002                PTRRR1:   equ $02     ; %00000010 Port R routing bit 1
007516 7F7516 -> $0001                PTRRR0:   equ $01     ; %00000001 Port R routing bit 0
                                      ;*****************************************************************************************
                                      ; - XGATE (S12XGATEV3) equates
                                      ;*****************************************************************************************
007516 7F7516 -> $0380                XGMCTL:     equ $0380 ; XGATE Control Register (pg 359)
007516 7F7516 -> $8000                XGEM:       equ $8000 ; XGE Mask bit 15
007516 7F7516 -> $4000                XGFRZM:     equ $4000 ; XGFRZ Mask bit 14
007516 7F7516 -> $2000                XGDBGM:     equ $2000 ; XGDBG Mask bit 13
007516 7F7516 -> $1000                XGSSM:      equ $1000 ; XGSS Mask bit 12
007516 7F7516 -> $0800                XGFACTM:    equ $0800 ; XGFACT Mask bit 11
007516 7F7516 -> $0200                XGSWEFM:    equ $0200 ; XGSWEF Mask bit 10
007516 7F7516 -> $0100                XGIEM:      equ $0100 ; XGIE Mask bit 9
007516 7F7516 -> $0080                XGE:        equ $0080 ; XGATE Module Enable (Request Enable) bit 7
007516 7F7516 -> $0040                XGFRZ:      equ $0040 ; Halt XGATE in Freeze Mode bit 6
007516 7F7516 -> $0020                XGDBG:      equ $0020 ; XGATE Debug Mode bit 5
007516 7F7516 -> $0010                XGSS:       equ $0010 ; XGATE Single Step bit 4
007516 7F7516 -> $0008                XGFACT:     equ $0008 ; Fake XGATE Activity bit 3
007516 7F7516 -> $0002                XGSWEF:     equ $0002 ; XGATE Software Error Flag bit 1
007516 7F7516 -> $0001                XGIE:       equ $0001 ; XGATE interrupt Enable bit 0
007516 7F7516 -> $0382                XGCHID:     equ $0382 ; XGATE Channel ID Register (pg 361)
007516 7F7516 -> $0383                XGCHPL:     equ $0383 ; XGATE Channel Priority Level (pg 362)
007516 7F7516 -> $0385                XGISPSEL:   equ $0385 ; XGATE Initial Stack Pointer Select Register (pg 362)
007516 7F7516 -> $0386                XGVBR:      equ $0386 ; XGATE Vector Base Address Register (pg 364)
007516 7F7516 -> $0388                XGIF_7F_78: equ $0388 ; XGATE Channel Interrupt Flag Vector Ch7F to Ch78 (pg 365)
007516 7F7516 -> $0080                XGIF_7F:    equ $80   ; Ch7F interrupt Flag bit 7 (not used)
007516 7F7516 -> $0040                XGIF_7E:    equ $40   ; Ch7E interrupt Flag bit 6 (not used)
007516 7F7516 -> $0020                XGIF_7D:    equ $20   ; Ch7D interrupt Flag bit 5 (not used)
007516 7F7516 -> $0010                XGIF_7C:    equ $10   ; Ch7C interrupt Flag bit 4 (not used)
007516 7F7516 -> $0008                XGIF_7B:    equ $08   ; Ch7B interrupt Flag bit 3 (not used)
007516 7F7516 -> $0004                XGIF_7A:    equ $04   ; Ch7A interrupt Flag bit 2 (not used)
007516 7F7516 -> $0002                XGIF_79:    equ $02   ; Ch79 interrupt Flag bit 1 (not used)
007516 7F7516 -> $0001                XGIF_78:    equ $01   ; Ch78 interrupt Flag bit 0
007516 7F7516 -> $0389                XGIF_77_70: equ $0389 ; XGATE Channel Interrupt Flag Vector Ch77 to Ch70 (pg 365)
007516 7F7516 -> $0080                XGIF_77:    equ $80   ; Ch77 interrupt Flag bit 7
007516 7F7516 -> $0040                XGIF_76:    equ $40   ; Ch76 interrupt Flag bit 6
007516 7F7516 -> $0020                XGIF_75:    equ $20   ; Ch75 interrupt Flag bit 5
007516 7F7516 -> $0010                XGIF_74:    equ $10   ; Ch74 interrupt Flag bit 4
007516 7F7516 -> $0008                XGIF_73:    equ $08   ; Ch73 interrupt Flag bit 3
007516 7F7516 -> $0004                XGIF_72:    equ $04   ; Ch72 interrupt Flag bit 2
007516 7F7516 -> $0002                XGIF_71:    equ $02   ; Ch71 interrupt Flag bit 1
007516 7F7516 -> $0001                XGIF_70:    equ $01   ; Ch70 interrupt Flag bit 0
007516 7F7516 -> $038A                XGIF_6F_68: equ $038A ; XGATE Channel Interrupt Flag Vector Ch6F to Ch68 (pg 365)
007516 7F7516 -> $0080                XGIF_6F:    equ $80   ; Ch6F interrupt Flag bit 7
007516 7F7516 -> $0040                XGIF_6E:    equ $40   ; Ch6E interrupt Flag bit 6
007516 7F7516 -> $0020                XGIF_6D:    equ $20   ; Ch6D interrupt Flag bit 5
007516 7F7516 -> $0010                XGIF_6C:    equ $10   ; Ch6C interrupt Flag bit 4
007516 7F7516 -> $0008                XGIF_6B:    equ $08   ; Ch6B interrupt Flag bit 3
007516 7F7516 -> $0004                XGIF_6A:    equ $04   ; Ch6A interrupt Flag bit 2
007516 7F7516 -> $0002                XGIF_69:    equ $02   ; Ch69 interrupt Flag bit 1
007516 7F7516 -> $0001                XGIF_68:    equ $01   ; Ch68 interrupt Flag bit 0
007516 7F7516 -> $038B                XGIF_67_60: equ $038B ; XGATE Channel Interrupt Flag Vector Ch67 to Ch60 (pg 365)
007516 7F7516 -> $0080                XGIF_67:    equ $80   ; Ch67 interrupt Flag bit 7
007516 7F7516 -> $0040                XGIF_66:    equ $40   ; Ch66 interrupt Flag bit 6
007516 7F7516 -> $0020                XGIF_65:    equ $20   ; Ch65 interrupt Flag bit 5
007516 7F7516 -> $0010                XGIF_64:    equ $10   ; Ch64 interrupt Flag bit 4
007516 7F7516 -> $0008                XGIF_63:    equ $08   ; Ch63 interrupt Flag bit 3
007516 7F7516 -> $0004                XGIF_62:    equ $04   ; Ch62 interrupt Flag bit 2
007516 7F7516 -> $0002                XGIF_61:    equ $02   ; Ch61 interrupt Flag bit 1
007516 7F7516 -> $0001                XGIF_60:    equ $01   ; Ch60 interrupt Flag bit 0
007516 7F7516 -> $038C                XGIF_5F_58: equ $038C ; XGATE Channel Interrupt Flag Vector Ch5F to Ch58 (pg 365)
007516 7F7516 -> $0080                XGIF_5F:    equ $80   ; Ch5F interrupt Flag bit 7
007516 7F7516 -> $0040                XGIF_5E:    equ $40   ; Ch5E interrupt Flag bit 6
007516 7F7516 -> $0020                XGIF_5D:    equ $20   ; Ch5D interrupt Flag bit 5
007516 7F7516 -> $0010                XGIF_5C:    equ $10   ; Ch5C interrupt Flag bit 4
007516 7F7516 -> $0008                XGIF_5B:    equ $08   ; Ch5B interrupt Flag bit 3
007516 7F7516 -> $0004                XGIF_5A:    equ $04   ; Ch5A interrupt Flag bit 2
007516 7F7516 -> $0002                XGIF_59:    equ $02   ; Ch59 interrupt Flag bit 1
007516 7F7516 -> $0001                XGIF_58:    equ $01   ; Ch58 interrupt Flag bit 0
007516 7F7516 -> $038D                XGIF_57_50: equ $038D ; XGATE Channel Interrupt Flag Vector Ch57 to Ch50 (pg 365)
007516 7F7516 -> $0080                XGIF_57:    equ $80   ; Ch57 interrupt Flag bit 7
007516 7F7516 -> $0040                XGIF_56:    equ $40   ; Ch56 interrupt Flag bit 6
007516 7F7516 -> $0020                XGIF_55:    equ $20   ; Ch55 interrupt Flag bit 5
007516 7F7516 -> $0010                XGIF_54:    equ $10   ; Ch54 interrupt Flag bit 4
007516 7F7516 -> $0008                XGIF_53:    equ $08   ; Ch53 interrupt Flag bit 3
007516 7F7516 -> $0004                XGIF_52:    equ $04   ; Ch52 interrupt Flag bit 2
007516 7F7516 -> $0002                XGIF_51:    equ $02   ; Ch51 interrupt Flag bit 1
007516 7F7516 -> $0001                XGIF_50:    equ $01   ; Ch50 interrupt Flag bit 0
007516 7F7516 -> $038E                XGIF_4F_48: equ $038E ; XGATE Channel Interrupt Flag Vector Ch4F to Ch48 (pg 365)
007516 7F7516 -> $0080                XGIF_4F:    equ $80   ; Ch4F interrupt Flag bit 7
007516 7F7516 -> $0040                XGIF_4E:    equ $40   ; Ch4E interrupt Flag bit 6
007516 7F7516 -> $0020                XGIF_4D:    equ $20   ; Ch4D interrupt Flag bit 5
007516 7F7516 -> $0010                XGIF_4C:    equ $10   ; Ch4C interrupt Flag bit 4
007516 7F7516 -> $0008                XGIF_4B:    equ $08   ; Ch4B interrupt Flag bit 3
007516 7F7516 -> $0004                XGIF_4A:    equ $04   ; Ch4A interrupt Flag bit 2
007516 7F7516 -> $0002                XGIF_49:    equ $02   ; Ch49 interrupt Flag bit 1
007516 7F7516 -> $0001                XGIF_48:    equ $01   ; Ch48 interrupt Flag bit 0
007516 7F7516 -> $038F                XGIF_47_40: equ $038F ; XGATE Channel Interrupt Flag Vector Ch47 to Ch40 (pg 365)
007516 7F7516 -> $0080                XGIF_47:    equ $80   ; Ch47 interrupt Flag bit 7
007516 7F7516 -> $0040                XGIF_46:    equ $40   ; Ch46 interrupt Flag bit 6
007516 7F7516 -> $0020                XGIF_45:    equ $20   ; Ch45 interrupt Flag bit 5
007516 7F7516 -> $0010                XGIF_44:    equ $10   ; Ch44 interrupt Flag bit 4
007516 7F7516 -> $0008                XGIF_43:    equ $08   ; Ch43 interrupt Flag bit 3
007516 7F7516 -> $0004                XGIF_42:    equ $04   ; Ch42 interrupt Flag bit 2
007516 7F7516 -> $0002                XGIF_41:    equ $02   ; Ch41 interrupt Flag bit 1
007516 7F7516 -> $0001                XGIF_40:    equ $01   ; Ch40 interrupt Flag bit 0
007516 7F7516 -> $0390                XGIF_3F_38: equ $0390 ; XGATE Channel Interrupt Flag Vector Ch3F to Ch38 (pg 366)
007516 7F7516 -> $0080                XGIF_3F:    equ $80   ; Ch3F interrupt Flag bit 7
007516 7F7516 -> $0040                XGIF_3E:    equ $40   ; Ch3E interrupt Flag bit 6
007516 7F7516 -> $0020                XGIF_3D:    equ $20   ; Ch3D interrupt Flag bit 5
007516 7F7516 -> $0010                XGIF_3C:    equ $10   ; Ch3C interrupt Flag bit 4
007516 7F7516 -> $0008                XGIF_3B:    equ $08   ; Ch3B interrupt Flag bit 3
007516 7F7516 -> $0004                XGIF_3A:    equ $04   ; Ch3A interrupt Flag bit 2
007516 7F7516 -> $0002                XGIF_39:    equ $02   ; Ch39 interrupt Flag bit 1
007516 7F7516 -> $0001                XGIF_38:    equ $01   ; Ch38 interrupt Flag bit 0
007516 7F7516 -> $0391                XGIF_37_30: equ $0391 ; XGATE Channel Interrupt Flag Vector Ch37 to Ch30 (pg 366)
007516 7F7516 -> $0080                XGIF_37:    equ $80   ; Ch37 interrupt Flag bit 7
007516 7F7516 -> $0040                XGIF_36:    equ $40   ; Ch36 interrupt Flag bit 6
007516 7F7516 -> $0020                XGIF_35:    equ $20   ; Ch35 interrupt Flag bit 5
007516 7F7516 -> $0010                XGIF_34:    equ $10   ; Ch34 interrupt Flag bit 4
007516 7F7516 -> $0008                XGIF_33:    equ $08   ; Ch33 interrupt Flag bit 3
007516 7F7516 -> $0004                XGIF_32:    equ $04   ; Ch32 interrupt Flag bit 2
007516 7F7516 -> $0002                XGIF_31:    equ $02   ; Ch31 interrupt Flag bit 1
007516 7F7516 -> $0001                XGIF_30:    equ $01   ; Ch30 interrupt Flag bit 0
007516 7F7516 -> $0392                XGIF_2F_28: equ $0392 ; XGATE Channel Interrupt Flag Vector Ch2F to Ch28 (pg 366)
007516 7F7516 -> $0080                XGIF_2F:    equ $80   ; Ch2F interrupt Flag bit 7
007516 7F7516 -> $0040                XGIF_2E:    equ $40   ; Ch2E interrupt Flag bit 6
007516 7F7516 -> $0020                XGIF_2D:    equ $20   ; Ch2D interrupt Flag bit 5
007516 7F7516 -> $0010                XGIF_2C:    equ $10   ; Ch2C interrupt Flag bit 4
007516 7F7516 -> $0008                XGIF_2B:    equ $08   ; Ch2B interrupt Flag bit 3
007516 7F7516 -> $0004                XGIF_2A:    equ $04   ; Ch2A interrupt Flag bit 2
007516 7F7516 -> $0002                XGIF_29:    equ $02   ; Ch29 interrupt Flag bit 1
007516 7F7516 -> $0001                XGIF_28:    equ $01   ; Ch28 interrupt Flag bit 0
007516 7F7516 -> $0393                XGIF_27_20: equ $0393 ; XGATE Channel Interrupt Flag Vector Ch27 to Ch20 (pg 366)
007516 7F7516 -> $0080                XGIF_27:    equ $80   ; Ch27 interrupt Flag bit 7
007516 7F7516 -> $0040                XGIF_26:    equ $40   ; Ch26 interrupt Flag bit 6
007516 7F7516 -> $0020                XGIF_25:    equ $20   ; Ch25 interrupt Flag bit 5
007516 7F7516 -> $0010                XGIF_24:    equ $10   ; Ch24 interrupt Flag bit 4
007516 7F7516 -> $0008                XGIF_23:    equ $08   ; Ch23 interrupt Flag bit 3
007516 7F7516 -> $0004                XGIF_22:    equ $04   ; Ch22 interrupt Flag bit 2
007516 7F7516 -> $0002                XGIF_21:    equ $02   ; Ch21 interrupt Flag bit 1
007516 7F7516 -> $0001                XGIF_20:    equ $01   ; Ch20 interrupt Flag bit 0
007516 7F7516 -> $0394                XGIF_1F_18: equ $0394 ; XGATE Channel Interrupt Flag Vector Ch1F to Ch18 (pg 366)
007516 7F7516 -> $0080                XGIF_1F:    equ $80   ; Ch1F interrupt Flag bit 7
007516 7F7516 -> $0040                XGIF_1E:    equ $40   ; Ch1E interrupt Flag bit 6
007516 7F7516 -> $0020                XGIF_1D:    equ $20   ; Ch1D interrupt Flag bit 5
007516 7F7516 -> $0010                XGIF_1C:    equ $10   ; Ch1C interrupt Flag bit 4
007516 7F7516 -> $0008                XGIF_1B:    equ $08   ; Ch1B interrupt Flag bit 3
007516 7F7516 -> $0004                XGIF_1A:    equ $04   ; Ch1A interrupt Flag bit 2
007516 7F7516 -> $0002                XGIF_19:    equ $02   ; Ch19 interrupt Flag bit 1
007516 7F7516 -> $0001                XGIF_18:    equ $01   ; Ch18 interrupt Flag bit 0
007516 7F7516 -> $0395                XGIF_17_10: equ $0395 ; XGATE Channel Interrupt Flag Vector Ch17 to Ch10 (pg 366)
007516 7F7516 -> $0080                XGIF_17:    equ $80   ; Ch17 interrupt Flag bit 7
007516 7F7516 -> $0040                XGIF_16:    equ $40   ; Ch16 interrupt Flag bit 6
007516 7F7516 -> $0020                XGIF_15:    equ $20   ; Ch15 interrupt Flag bit 5
007516 7F7516 -> $0010                XGIF_14:    equ $10   ; Ch14 interrupt Flag bit 4
007516 7F7516 -> $0008                XGIF_13:    equ $08   ; Ch13 interrupt Flag bit 3
007516 7F7516 -> $0004                XGIF_12:    equ $04   ; Ch12 interrupt Flag bit 2
007516 7F7516 -> $0002                XGIF_11:    equ $02   ; Ch11 interrupt Flag bit 1
007516 7F7516 -> $0001                XGIF_10:    equ $01   ; Ch10 interrupt Flag bit 0
007516 7F7516 -> $0396                XGIF_0F_08: equ $0396 ; XGATE Channel Interrupt Flag Vector Ch0F to Ch08 (pg 366)
007516 7F7516 -> $0080                XGIF_0F:    equ $80   ; Ch0F interrupt Flag bit 7
007516 7F7516 -> $0040                XGIF_0E:    equ $40   ; Ch0E interrupt Flag bit 6
007516 7F7516 -> $0020                XGIF_0D:    equ $20   ; Ch0D interrupt Flag bit 5
007516 7F7516 -> $0010                XGIF_0C:    equ $10   ; Ch0C interrupt Flag bit 4 (not used)
007516 7F7516 -> $0008                XGIF_0B:    equ $08   ; Ch0B interrupt Flag bit 3 (not used)
007516 7F7516 -> $0004                XGIF_0A:    equ $04   ; Ch0A interrupt Flag bit 2 (not used)
007516 7F7516 -> $0002                XGIF_09:    equ $02   ; Ch09 interrupt Flag bit 1 (not used)
007516 7F7516 -> $0001                XGIF_08:    equ $01   ; Ch08 interrupt Flag bit 0 (not used)
007516 7F7516 -> $0397                XGIF_07_00: equ $0397 ; XGATE Channel Interrupt Flag Vector Ch07 to Ch00 (pg 366)
007516 7F7516 -> $0080                XGIF_07:    equ $80   ; Ch07 interrupt Flag bit 7 (not used)
007516 7F7516 -> $0040                XGIF_06:    equ $40   ; Ch06 interrupt Flag bit 6 (not used)
007516 7F7516 -> $0020                XGIF_05:    equ $20   ; Ch05 interrupt Flag bit 5 (not used)
007516 7F7516 -> $0010                XGIF_04:    equ $10   ; Ch04 interrupt Flag bit 4 (not used)
007516 7F7516 -> $0008                XGIF_03:    equ $08   ; Ch03 interrupt Flag bit 3 (not used)
007516 7F7516 -> $0004                XGIF_02:    equ $04   ; Ch02 interrupt Flag bit 2 (not used)
007516 7F7516 -> $0002                XGIF_01:    equ $02   ; Ch01 interrupt Flag bit 1 (not used)
007516 7F7516 -> $0001                XGIF_00:    equ $01   ; Ch00 interrupt Flag bit 0 (not used)
007516 7F7516 -> $0398                XGSWT:      equ $0398 ; XGATE Software Trigger Register (pg 367)
007516 7F7516 -> $039A                XGSEM:      equ $039A ;XGATE Semaphore Register (pg 368)
                                      ; $039C reserved
007516 7F7516 -> $039D                XGCCR:      equ $039D ; XGATE Condition Code Register (pg 369)
007516 7F7516 -> $0008                XGN:        equ $08   ; Sign flag bit 3
007516 7F7516 -> $0004                XGZ:        equ $04   ; Zero flag bit 2
007516 7F7516 -> $0002                XGV:        equ $02   ; Overflow flag bit 1
007516 7F7516 -> $0001                XGC:        equ $01   ; Carry flag bit 0
007516 7F7516 -> $039E                XGPC        equ $039E ; XGATE Program Counter Register (pg 370)
                                      ; $03A0 to $03A1 reserved
007516 7F7516 -> $03A2                XGR1:       equ $03A2 ; XGATE Register 1 (pg 370)
007516 7F7516 -> $03A4                XGR2:       equ $03A4 ; XGATE Register 2 (pg 371)
007516 7F7516 -> $03A6                XGR3:       equ $03A6 ; XGATE Register 3 (pg 371)
007516 7F7516 -> $03A8                XGR4:       equ $03A8 ; XGATE Register 4 (pg 372)
007516 7F7516 -> $03AA                XGR5:       equ $03AA ; XGATE Register 5 (pg 372)
007516 7F7516 -> $03AC                XGR6:       equ $03AC ; XGATE Register 6 (pg 373)
007516 7F7516 -> $03AE                XGR7:       equ $03AE ; XGATE Register 7 (pg 373)
                                      ;*****************************************************************************************
                                      ; - Timer module (TIM16B8CV3) equates
                                      ;*****************************************************************************************
007516 7F7516 -> $03D0                TIM_TIOS:    equ $03D0 ; Timer Input Capture/Output Compare Select Register (pg 794)
                                                             ; 1 = input capture, 0 = output compare
007516 7F7516 -> $0080                IOS7:        equ $80   ; %10000000 Input Capture or Output Compare Channel Config bit 7
007516 7F7516 -> $0040                IOS6:        equ $40   ; %01000000 Input Capture or Output Compare Channel Config bit 6
007516 7F7516 -> $0020                IOS5:        equ $20   ; %00100000 Input Capture or Output Compare Channel Config bit 5
007516 7F7516 -> $0010                IOS4:        equ $10   ; %00010000 Input Capture or Output Compare Channel Config bit 4
007516 7F7516 -> $0008                IOS3:        equ $08   ; %00001000 Input Capture or Output Compare Channel Config bit 3
007516 7F7516 -> $0004                IOS2:        equ $04   ; %00000100 Input Capture or Output Compare Channel Config bit 2
007516 7F7516 -> $0002                IOS1:        equ $02   ; %00000010 Input Capture or Output Compare Channel Config bit 1
007516 7F7516 -> $0001                IOS0:        equ $01   ; %00000001 Input Capture or Output Compare Channel Config bit 0
007516 7F7516 -> $03D1                TIM_CFORC:   equ $03D1 ; Timer Compare Force Register (pg 794)
007516 7F7516 -> $0080                FOC7:        equ $80   ; %10000000 Force output Compare Action for Channel bit 7
007516 7F7516 -> $0040                FOC6:        equ $40   ; %01000000 Force output Compare Action for Channel bit 6
007516 7F7516 -> $0020                FOC5:        equ $20   ; %00100000 Force output Compare Action for Channel bit 5
007516 7F7516 -> $0010                FOC4:        equ $10   ; %00010000 Force output Compare Action for Channel bit 4
007516 7F7516 -> $0008                FOC3:        equ $08   ; %00001000 Force output Compare Action for Channel bit 3
007516 7F7516 -> $0004                FOC2:        equ $04   ; %00000100 Force output Compare Action for Channel bit 2
007516 7F7516 -> $0002                FOC1:        equ $02   ; %00000010 Force output Compare Action for Channel bit 1
007516 7F7516 -> $0001                FOC0:        equ $01   ; %00000001 Force output Compare Action for Channel bit 0
007516 7F7516 -> $03D2                TIM_OC7M:    equ $03D2 ; Output Compare 7 Mask Register (pg 795)
007516 7F7516 -> $0080                OC7M7:       equ $80   ; %10000000 Output Compare 7 Mask bit 7
007516 7F7516 -> $0040                OC7M6:       equ $40   ; %01000000 Output Compare 7 Mask bit 6
007516 7F7516 -> $0020                OC7M5:       equ $20   ; %00100000 Output Compare 7 Mask bit 5
007516 7F7516 -> $0010                OC7M4:       equ $10   ; %00010000 Output Compare 7 Mask bit 4
007516 7F7516 -> $0008                OC7M3:       equ $08   ; %00001000 Output Compare 7 Mask bit 3
007516 7F7516 -> $0004                OC7M2:       equ $04   ; %00000100 Output Compare 7 Mask bit 2
007516 7F7516 -> $0002                OC7M1:       equ $02   ; %00000010 Output Compare 7 Mask bit 1
007516 7F7516 -> $0001                OC7M0:       equ $01   ; %00000001 Output Compare 7 Mask bit 0
007516 7F7516 -> $03D3                TIM_OC7D:    equ $03D3 ; Output Compare 7 Data Register (pg 796)
007516 7F7516 -> $0080                OC7D7:       equ $80   ; %10000000 Output Compare 7 Data bit 7
007516 7F7516 -> $0040                OC7D6:       equ $40   ; %01000000 Output Compare 7 Data bit 6
007516 7F7516 -> $0020                OC7D5:       equ $20   ; %00100000 Output Compare 7 Data bit 5
007516 7F7516 -> $0010                OC7D4:       equ $10   ; %00010000 Output Compare 7 Data bit 4
007516 7F7516 -> $0008                OC7D3:       equ $08   ; %00001000 Output Compare 7 Data bit 3
007516 7F7516 -> $0004                OC7D2:       equ $04   ; %00000100 Output Compare 7 Data bit 2
007516 7F7516 -> $0002                OC7D1:       equ $02   ; %00000010 Output Compare 7 Data bit 1
007516 7F7516 -> $0001                OC7D0:       equ $01   ; %00000001 Output Compare 7 Data bit 0
007516 7F7516 -> $03D4                TIM_TCNTH:    equ $03D4 ; Timer Count Register High (pg 796)
007516 7F7516 -> $0080                TCNT15:       equ $80   ; %10000000 Timer Count Data bit 15
007516 7F7516 -> $0040                TCNT14:       equ $40   ; %01000000 Timer Count Data bit 14
007516 7F7516 -> $0020                TCNT13:       equ $20   ; %00100000 Timer Count Data bit 13
007516 7F7516 -> $0010                TCNT12:       equ $10   ; %00010000 Timer Count Data bit 12
007516 7F7516 -> $0008                TCNT11:       equ $08   ; %00001000 Timer Count Data bit 11
007516 7F7516 -> $0004                TCNT10:       equ $04   ; %00000100 Timer Count Data bit 10
007516 7F7516 -> $0002                TCNT9:        equ $02   ; %00000010 Timer Count Data bit 9
007516 7F7516 -> $0001                TCNT8:        equ $01   ; %00000001 Timer Count Data bit 8
007516 7F7516 -> $03D5                TIM_TCNTL:    equ $03D5 ; Timer Count Register Low (pg 796)
007516 7F7516 -> $0080                TCNT7:        equ $80   ; %10000000 Timer Count Data bit 7
007516 7F7516 -> $0040                TCNT6:        equ $40   ; %01000000 Timer Count Data bit 6
007516 7F7516 -> $0020                TCNT5:        equ $20   ; %00100000 Timer Count Data bit 5
007516 7F7516 -> $0010                TCNT4:        equ $10   ; %00010000 Timer Count Data bit 4
007516 7F7516 -> $0008                TCNT3:        equ $08   ; %00001000 Timer Count Data bit 3
007516 7F7516 -> $0004                TCNT2:        equ $04   ; %00000100 Timer Count Data bit 2
007516 7F7516 -> $0002                TCNT1:        equ $02   ; %00000010 Timer Count Data bit 1
007516 7F7516 -> $0001                TCNT0:        equ $01   ; %00000001 Timer Count Data bit 0
007516 7F7516 -> $03D6                TIM_TSCR1:    equ $03D6 ; Timer System Control Register 1 (pg 797)
007516 7F7516 -> $0080                TEN:          equ $80   ; %10000000 Timer Enable bit 7
007516 7F7516 -> $0040                TSWAI:        equ $40   ; %01000000 Timer Module Stops While In Wait bit 6
007516 7F7516 -> $0020                TSFRZ:        equ $20   ; %00100000 Timer and Modulus Counter Stop While In Wait bit 5
007516 7F7516 -> $0010                TFFCA:        equ $10   ; %00010000 Timer Fast Flag Clear All bit 4
007516 7F7516 -> $0008                PRNT:         equ $08   ; %00001000 Precision Timer bit 3
007516 7F7516 -> $03D7                TIM_TTOV:     equ $03D7 ; Timer Toggle On Overflow Register 1 (pg 798)
007516 7F7516 -> $0080                TOV7:         equ $80   ; %10000000 Toggle on Overflow bit 7
007516 7F7516 -> $0040                TOV6:         equ $40   ; %01000000 Toggle on Overflow bit 6
007516 7F7516 -> $0020                TOV5:         equ $20   ; %00100000 Toggle on Overflow bit 5
007516 7F7516 -> $0010                TOV4:         equ $10   ; %00100000 Toggle on Overflow bit 4
007516 7F7516 -> $0008                TOV3:         equ $08   ; %00001000 Toggle on Overflow bit 3
007516 7F7516 -> $0004                TOV2:         equ $04   ; %00000100 Toggle on Overflow bit 2
007516 7F7516 -> $0002                TOV1:         equ $02   ; %00000010 Toggle on Overflow bit 1
007516 7F7516 -> $0001                TOV0:         equ $01   ; %00000001 Toggle on Overflow bit 0
007516 7F7516 -> $03D8                TIM_TCTL1:    equ $03D8 ; Timer Control Register 1 (pg 799)
007516 7F7516 -> $0080                OM7:          equ $80   ; %10000000 Output Mode 7 bit 7
007516 7F7516 -> $0040                OL7:          equ $40   ; %01000000 Output Level 7 bit 6
007516 7F7516 -> $0020                OM6:          equ $20   ; %00100000 Output Mode 6 bit 5
007516 7F7516 -> $0010                OL6:          equ $10   ; %0010000Output Level 6 bit 4
007516 7F7516 -> $0008                OM5:          equ $08   ; %00001000 Output Mode 5 bit 3
007516 7F7516 -> $0004                OL5:          equ $04   ; %00000100 Output Level 5 bit 2
007516 7F7516 -> $0002                OM4:          equ $02   ; %00000010 Output Mode 4 bit 1
007516 7F7516 -> $0001                OL4:          equ $01   ; %00000001 Output Level 4 bit 0
007516 7F7516 -> $03D9                TIM_TCTL2:    equ $03D9 ; Timer Control Register 2 (pg 799)
007516 7F7516 -> $0080                OM3:          equ $80   ; %10000000 Output Mode 3 bit 7
007516 7F7516 -> $0040                OL3:          equ $40   ; %01000000 Output Level 3 bit 6
007516 7F7516 -> $0020                OM2:          equ $20   ; %00100000 Output Mode 2 bit 5
007516 7F7516 -> $0010                OL2:          equ $10   ; %0010000Output Level 2 bit 4
007516 7F7516 -> $0008                OM1:          equ $08   ; %00001000 Output Mode 1 bit 3
007516 7F7516 -> $0004                OL1:          equ $04   ; %00000100 Output Level 1 bit 2
007516 7F7516 -> $0002                OM0:          equ $02   ; %00000010 Output Mode 0 bit 1
007516 7F7516 -> $0001                OL0:          equ $01   ; %00000001 Output Level 0 bit 0
007516 7F7516 -> $03DA                TIM_TCTL3:    equ $03DA ; Timer Control Register 3 (pg 800)
007516 7F7516 -> $0080                EDG7B:        equ $80   ; %10000000 Input Capture Edge Control 7B bit 7
007516 7F7516 -> $0040                EDG7A:        equ $40   ; %01000000 Input Capture Edge Control 7A bit 6
007516 7F7516 -> $0020                EDG6B:        equ $20   ; %00100000 Input Capture Edge Control 6B bit 5
007516 7F7516 -> $0010                EDG6A:        equ $10   ; %00010000 Input Capture Edge Control 6A bit 4
007516 7F7516 -> $0008                EDG5B:        equ $08   ; %00001000 Input Capture Edge Control 5B bit 3
007516 7F7516 -> $0004                EDG5A:        equ $04   ; %00000100 Input Capture Edge Control 5A bit 2
007516 7F7516 -> $0002                EDG4B:        equ $02   ; %00000010 Input Capture Edge Control 4B bit 1
007516 7F7516 -> $0001                EDG4A:        equ $01   ; %00000001 Input Capture Edge Control 4A bit 0
007516 7F7516 -> $03DB                TIM_TCTL4:    equ $03DB ; Timer Control Register 4 (pg 800)
007516 7F7516 -> $0080                EDG3B:        equ $80   ; %10000000 Input Capture Edge Control 3B bit 7
007516 7F7516 -> $0040                EDG3A:        equ $40   ; %01000000 Input Capture Edge Control 3A bit 6
007516 7F7516 -> $0020                EDG2B:        equ $20   ; %00100000 Input Capture Edge Control 2B bit 5
007516 7F7516 -> $0010                EDG2A:        equ $10   ; %00010000 Input Capture Edge Control 2A bit 4
007516 7F7516 -> $0008                EDG1B:        equ $08   ; %00001000 Input Capture Edge Control 1B bit 3
007516 7F7516 -> $0004                EDG1A:        equ $04   ; %00000100 Input Capture Edge Control 1A bit 2
007516 7F7516 -> $0002                EDG0B:        equ $02   ; %00000010 Input Capture Edge Control 0B bit 1
007516 7F7516 -> $0001                EDG0A:        equ $01   ; %00000001 Input Capture Edge Control 0A bit 0
007516 7F7516 -> $03DC                TIM_TIE:      equ $03DC ; Timer Interrupt Enable Register (pg 801)
                                                             ; 0 = interrupt disabled, 1 = interrupts enabled
007516 7F7516 -> $0080                C7I:          equ $80   ; %10000000 IC/OC "X" Interrupt Enable bit 7
007516 7F7516 -> $0040                C6I:          equ $40   ; %01000000 IC/OC "X" Interrupt Enable bit 6
007516 7F7516 -> $0020                C5I:          equ $20   ; %00100000 IC/OC "X" Interrupt Enable bit 5
007516 7F7516 -> $0010                C4I:          equ $10   ; %00010000 IC/OC "X" Interrupt Enable bit 4
007516 7F7516 -> $0008                C3I:          equ $08   ; %00001000 IC/OC "X" Interrupt Enable bit 3
007516 7F7516 -> $0004                C2I:          equ $04   ; %00000100 IC/OC "X" Interrupt Enable bit 2
007516 7F7516 -> $0002                C1I:          equ $02   ; %00000010 IC/OC "X" Interrupt Enable bit 1
007516 7F7516 -> $0001                C0I:          equ $01   ; %00000001 IC/OC "X" Interrupt Enable bit 0
007516 7F7516 -> $03DD                TIM_TSCR2:    equ $03DD ; Timer System Control Register 2 (pg 802)
007516 7F7516 -> $0080                TOI:          equ $80   ; %10000000 Timer Overflow Interrupt Enable bit 7
007516 7F7516 -> $0008                TCRE:         equ $08   ; %00001000 Timer Counter Register Enable bit 3
007516 7F7516 -> $0004                PR2:          equ $04   ; %00000100 Timer Prescaler Select bit 2
007516 7F7516 -> $0002                PR1:          equ $02   ; %00000010 Timer Prescaler Select bit 1
007516 7F7516 -> $0001                PR0:          equ $01   ; %00000001 Timer Prescaler Select bit 0
007516 7F7516 -> $03DE                TIM_TFLG1:    equ $03DE ; Main Timer Interrupt Flag 1 (pg 803)
007516 7F7516 -> $0080                C7F:          equ $80   ; %10000000 IC/OC Channel "x" Flag bit 7
007516 7F7516 -> $0040                C6F:          equ $40   ; %10000000 IC/OC Channel "x" Flag bit 6
007516 7F7516 -> $0020                C5F:          equ $20   ; %10000000 IC/OC Channel "x" Flag bit 5
007516 7F7516 -> $0010                C4F:          equ $10   ; %10000000 IC/OC Channel "x" Flag bit 4
007516 7F7516 -> $0008                C3F:          equ $08   ; %10000000 IC/OC Channel "x" Flag bit 3
007516 7F7516 -> $0004                C2F:          equ $04   ; %10000000 IC/OC Channel "x" Flag bit 2
007516 7F7516 -> $0002                C1F:          equ $02   ; %10000000 IC/OC Channel "x" Flag bit 1
007516 7F7516 -> $0001                C0F:          equ $01   ; %10000000 IC/OC Channel "x" Flag bit 0
007516 7F7516 -> $03DF                TIM_TFLG2:    equ $03DF ; Main Timer Interrupt Flag 2 (pg 803)
007516 7F7516 -> $0080                TOF:          equ $80   ; %10000000 Timer Overflow Flag
007516 7F7516 -> $03E0                TIM_TC0H:     equ $03E0 ; Timer IC/OC Register0 Hi (pg 804)
007516 7F7516 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03E1                TIM_TC0L:     equ $03E1 ; Timer IC/OC Register0 Lo (pg 804)
007516 7F7516 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03E2                TIM_TC1H:     equ $03E2 ; Timer IC/OC Register1 Hi (pg 804)
007516 7F7516 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03E3                TIM_TC1L:     equ $03E3 ; Timer IC/OC Register1 Lo (pg 804)
007516 7F7516 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03E4                TIM_TC2H:     equ $03E4 ; Timer IC/OC Register2 Hi (pg 804)
007516 7F7516 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03E5                TIM_TC2L:     equ $03E5 ; Timer IC/OC Register2 Lo (pg 804)
007516 7F7516 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03E6                TIM_TC3H:     equ $03E6 ; Timer IC/OC Register3 Hi (pg 804)
007516 7F7516 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03E7                TIM_TC3L:     equ $03E7 ; Timer IC/OC Register3 Lo (pg 804)
007516 7F7516 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03E8                TIM_TC4H:     equ $03E8 ; Timer IC/OC Register4 Hi (pg 804)
007516 7F7516 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03E9                TIM_TC4L:     equ $03E9 ; Timer IC/OC Register4 Lo (pg 804)
007516 7F7516 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03EA                TIM_TC5H:     equ $03EA ; Timer IC/OC Register5 Hi (pg 804)
007516 7F7516 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03EB                TIM_TC5L:     equ $03EB ; Timer IC/OC Register5 Lo (pg 804)
007516 7F7516 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03EC                TIM_TC6H:     equ $03EC ; Timer IC/OC Register6 Hi (pg 804)
007516 7F7516 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03ED                TIM_TC6L:     equ $03ED ; Timer IC/OC Register6 Lo (pg 804)
007516 7F7516 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03EE                TIM_TC7H:     equ $03EE ; Timer IC/OC Register6 Lo (pg 804)
007516 7F7516 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03EF                TIM_TC7L:     equ $03EF ; Timer IC/OC Register7 Lo (pg 804)
007516 7F7516 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007516 7F7516 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007516 7F7516 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007516 7F7516 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007516 7F7516 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007516 7F7516 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007516 7F7516 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007516 7F7516 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007516 7F7516 -> $03F0                TIM_PACTL:    equ $03F0 ; 16-Bit Pulse Accumulator Control Register (pg 805)
007516 7F7516 -> $0040                PAEN:         equ $40   ; %01000000 Pulse Accumulator System Enable(bit 6)
007516 7F7516 -> $0020                PAMOD:        equ $20   ; %00100000 Pulse Accumulator Mode(bit 5)
007516 7F7516 -> $0010                PEDGE:        equ $10   ; %00010000 Pulse Accumulator Edge Control(bit 4)
007516 7F7516 -> $0008                CLK1:         equ $08   ; %00001000 Clock Select(bit 3)
007516 7F7516 -> $0004                CLK0:         equ $04   ; %00000100 Clock Select(bit 2)
007516 7F7516 -> $0002                PAOV1:        equ $02   ; %00000010 Pulse Accumulator Overflow Interrupt Enable(bit 1)
007516 7F7516 -> $0001                PAI:          equ $01   ; %00000001 Pulse Accumulator Input Interrupt Enable(bit 0)
007516 7F7516 -> $03F1                TIM_PAFLG:    equ $03F1 ; Pulse Accumulator Flag Register (pg 806)
007516 7F7516 -> $0002                PAOVF:        equ $02   ; %00000010 Pulse Accumulator Overflow Flag(bit 1)
007516 7F7516 -> $0001                PAIF:         equ $01   ; %00000001 Pulse Accumulator input edge Flag(bit 0)
007516 7F7516 -> $03F2                TIM_PACNTH:   equ $03F2 ; Pulse Accumulator Count Register High (pg 807)
007516 7F7516 -> $0080                PACN15:       equ $80   ; %10000000 Pulse Accumulator Count Data bit 15
007516 7F7516 -> $0040                PACN14:       equ $40   ; %01000000 Pulse Accumulator Count Data bit 14
007516 7F7516 -> $0020                PACN13:       equ $20   ; %00100000 Pulse Accumulator Count Data bit 13
007516 7F7516 -> $0010                PACN12:       equ $10   ; %00010000 Pulse Accumulator Count Data bit 12
007516 7F7516 -> $0008                PACN11:       equ $08   ; %00001000 Pulse Accumulator Count Data bit 11
007516 7F7516 -> $0004                PACN10:       equ $04   ; %00000100 Pulse Accumulator Count Data bit 10
007516 7F7516 -> $0002                PACN9:        equ $02   ; %00000010 Pulse Accumulator Count Data bit 9
007516 7F7516 -> $0001                PACN8:        equ $01   ; %00000001 Pulse Accumulator Count Data bit 8
007516 7F7516 -> $03F3                TIM_PACNTL:   equ $03F3 ; Pulse Accumulators Count Register Low (pg 807)
007516 7F7516 -> $0080                PACN7:        equ $80   ; %10000000 Pulse Accumulator Count Data bit 7
007516 7F7516 -> $0040                PACN6:        equ $40   ; %01000000 Pulse Accumulator Count Data bit 6
007516 7F7516 -> $0020                PACN5:        equ $20   ; %00100000 Pulse Accumulator Count Data bit 5
007516 7F7516 -> $0010                PACN4:        equ $10   ; %00010000 Pulse Accumulator Count Data bit 4
007516 7F7516 -> $0008                PACN3:        equ $08   ; %00001000 Pulse Accumulator Count Data bit 3
007516 7F7516 -> $0004                PACN2:        equ $04   ; %00000100 Pulse Accumulator Count Data bit 2
007516 7F7516 -> $0002                PACN1:        equ $02   ; %00000010 Pulse Accumulator Count Data bit 1
007516 7F7516 -> $0001                PACN0:        equ $01   ; %00000001 Pulse Accumulator Count Data bit 0
                                      ;$03F4 to $03FB reserved
007516 7F7516 -> $03FC                TIM_OCPD:     equ $03FC ; Output Compare Pin Disconnect Register (pg 808)
007516 7F7516 -> $0080                OCPD7:        equ $80   ; %10000000 Output Compare Pin Disconnect bit 7
007516 7F7516 -> $0040                OCPD6:        equ $40   ; %01000000 Output Compare Pin Disconnect bit 6
007516 7F7516 -> $0020                OCPD5:        equ $20   ; %00100000 Output Compare Pin Disconnect bit 5
007516 7F7516 -> $0010                OCPD4:        equ $10   ; %00010000 Output Compare Pin Disconnect bit 4
007516 7F7516 -> $0008                OCPD3:        equ $08   ; %00001000 Output Compare Pin Disconnect bit 3
007516 7F7516 -> $0004                OCPD2:        equ $04   ; %00000100 Output Compare Pin Disconnect bit 2
007516 7F7516 -> $0002                OCPD1:        equ $02   ; %00000010 Output Compare Pin Disconnect bit 1
007516 7F7516 -> $0001                OCPD0:        equ $01   ; %00000001 Output Compare Pin Disconnect bit 0
                                      ;$03FD reserved
007516 7F7516 -> $03FE                TIM_PTPSR:    equ $03FE ; Precision Timer Prescaler Select Register (pg 808)
007516 7F7516 -> $0080                PTPS7:        equ $80   ; %10000000 Precision Timer Prescaler Select bit 7
007516 7F7516 -> $0040                PTPS6:        equ $40   ; %01000000 Precision Timer Prescaler Select bit 6
007516 7F7516 -> $0020                PTPS5:        equ $20   ; %00100000 Precision Timer Prescaler Select bit 5
007516 7F7516 -> $0010                PTPS4:        equ $10   ; %00010000 Precision Timer Prescaler Select bit 4
007516 7F7516 -> $0008                PTPS3:        equ $08   ; %00001000 Precision Timer Prescaler Select bit 3
007516 7F7516 -> $0004                PTPS2:        equ $04   ; %00000100 Precision Timer Prescaler Select bit 2
007516 7F7516 -> $0002                PTPS1:        equ $02   ; %00000010 Precision Timer Prescaler Select bit 1
007516 7F7516 -> $0001                PTPS0:        equ $01   ; %00000001 Precision Timer Prescaler Select bit 0
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (vectabs_BPEM488.s)                                                        *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    CPU vector tables for 9S12XEP100                                                   *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project(This module)  *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 25 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
007516 7F7516 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Constants -                                                                         *
                                      ;*****************************************************************************************
                                      ; - "ResetFlgs" bit field variable equates -
007516 7F7516 -> $0001                uiISR      equ $01  ; Unimplimented ISR %00000001 (set bit 0)
007516 7F7516 -> $0002                PoLvExrst  equ $02  ; Power on, Lo Volt, Ext reset  %00000010 (set bit 1)
007516 7F7516 -> $0004                Cmrst      equ $04  ; Clock Monitor reset  %00000100 (set bit 2)
007516 7F7516 -> $0008                Coprst     equ $08  ; COP reset  %00001000 (set bit 3)
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001000 0FD000                                     ORG     VECTAB_VARS_START, VECTAB_VARS_START_LIN
001000 0FD000 -> $FD000               VECTAB_VARS_START_LIN   EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
001000 0FD000                         ResetFlgs:  ds 1 ; Reset Flags bit field variable
001001 0FD001                         VecDebug:   ds 1 ; Vector Table de-bug address holder
001002 0FD002 -> $1002                VECTAB_VARS_END         EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001002 0FD002 -> $FD002               VECTAB_VARS_END_LIN     EQU     @     ; @ Represents the current value of the linear
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
0054EF 7F54EF                                                 ORG     VECTAB_CODE_START, VECTAB_CODE_START_LIN
0054EF 7F54EF -> $7F54EF              VECTAB_CODE_START_LIN   EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - Unimpimented ISRs -
                                      ;   Each ISR loads the last byte of the vector address into the variable "VecDebug"
                                      ;   and stops the code there. Use D-Bug12 to read "VecDebug" to determine which is the
                                      ;   offending vector. Then try to figure out why it happended.
                                      ;*****************************************************************************************
0054EF 7F54EF                         SPURIOUS_ISR:
0054EF 7F54EF 18 0B 10 10 01              movb #$10,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0054F4 7F54F4 20 F9                       bra  SPURIOUS_ISR    ; Keep looping here
0054F6 7F54F6                         SYS_ISR:
0054F6 7F54F6 18 0B 12 10 01              movb #$12,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0054FB 7F54FB 20 F9                       bra  SYS_ISR         ; Keep looping here
0054FD 7F54FD                         MPU_ISR:
0054FD 7F54FD 18 0B 14 10 01              movb #$14,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005502 7F5502 20 F9                       bra  MPU_ISR         ; Keep looping here
005504 7F5504                         XGSWE_ISR:
005504 7F5504 18 0B 16 10 01              movb #$16,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005509 7F5509 20 F9                       bra  XGSWE_ISR       ; Keep looping here
00550B 7F550B                         RES18_ISR
00550B 7F550B 18 0B 18 10 01              movb #$18,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005510 7F5510 20 F9                       bra  RES18_ISR       ; Keep looping here
005512 7F5512                         RES1A_ISR:
005512 7F5512 18 0B 1A 10 01              movb #$1A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005517 7F5517 20 F9                       bra  RES1A_ISR       ; Keep looping here
005519 7F5519                         RES1C_ISR:
005519 7F5519 18 0B 1C 10 01              movb #$1C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00551E 7F551E 20 F9                       bra  RES1C_ISR       ; Keep looping here
005520 7F5520                         RES1E_ISR:
005520 7F5520 18 0B 1E 10 01              movb #$1E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005525 7F5525 20 F9                       bra  RES1E_ISR       ; Keep looping here
005527 7F5527                         RES20_ISR:
005527 7F5527 18 0B 20 10 01              movb #$20,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00552C 7F552C 20 F9                       bra  RES20_ISR       ; Keep looping here
00552E 7F552E                         RES22_ISR:
00552E 7F552E 18 0B 22 10 01              movb #$22,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005533 7F5533 20 F9                       bra  RES22_ISR       ; Keep looping here
005535 7F5535                         RES24_ISR:
005535 7F5535 18 0B 24 10 01              movb #$24,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00553A 7F553A 20 F9                       bra  RES24_ISR       ; Keep looping here
00553C 7F553C                         RES26_ISR:
00553C 7F553C 18 0B 26 10 01              movb #$26,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005541 7F5541 20 F9                       bra  RES26_ISR       ; Keep looping here
005543 7F5543                         RES28_ISR:
005543 7F5543 18 0B 28 10 01              movb #$28,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005548 7F5548 20 F9                       bra  RES28_ISR       ; Keep looping here
00554A 7F554A                         RES2A_ISR:
00554A 7F554A 18 0B 2A 10 01              movb #$2A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00554F 7F554F 20 F9                       bra  RES2A_ISR       ; Keep looping here
005551 7F5551                         RES2C_ISR:
005551 7F5551 18 0B 2C 10 01              movb #$2C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005556 7F5556 20 F9                       bra  RES2C_ISR       ; Keep looping here
005558 7F5558                         RES2E_ISR:
005558 7F5558 18 0B 2E 10 01              movb #$2E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00555D 7F555D 20 F9                       bra  RES2E_ISR       ; Keep looping here
00555F 7F555F                         RES30_ISR:
00555F 7F555F 18 0B 30 10 01              movb #$30,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005564 7F5564 20 F9                       bra  RES30_ISR       ; Keep looping here
005566 7F5566                         RES32_ISR:
005566 7F5566 18 0B 32 10 01              movb #$32,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00556B 7F556B 20 F9                       bra  RES32_ISR       ; Keep looping here
00556D 7F556D                         RES34_ISR:
00556D 7F556D 18 0B 34 10 01              movb #$34,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005572 7F5572 20 F9                       bra  RES34_ISR       ; Keep looping here
005574 7F5574                         RES36_ISR:
005574 7F5574 18 0B 36 10 01              movb #$36,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005579 7F5579 20 F9                       bra  RES36_ISR       ; Keep looping here
00557B 7F557B                         RES38_ISR:
00557B 7F557B 18 0B 38 10 01              movb #$38,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005580 7F5580 20 F9                       bra  RES38_ISR       ; Keep looping here
005582 7F5582                         RES3A_ISR:
005582 7F5582 18 0B 3A 10 01              movb #$3A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005587 7F5587 20 F9                       bra  RES3A_ISR       ; Keep looping here
005589 7F5589                         ATD1COMP_ISR:
005589 7F5589 18 0B 3C 10 01              movb #$3C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00558E 7F558E 20 F9                       bra  ATD1COMP_ISR    ; Keep looping here
005590 7F5590                         ATD0COMP_ISR:
005590 7F5590 18 0B 3E 10 01              movb #$3E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005595 7F5595 20 F9                       bra  ATD0COMP_ISR    ; Keep looping here
005597 7F5597                         TIM_PAIE_ISR:
005597 7F5597 18 0B 40 10 01              movb #$40,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00559C 7F559C 20 F9                       bra  TIM_PAIE_ISR    ; Keep looping here
00559E 7F559E                         TIM_PAOV_ISR:
00559E 7F559E 18 0B 42 10 01              movb #$42,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055A3 7F55A3 20 F9                       bra  TIM_PAOV_ISR    ; Keep looping here
0055A5 7F55A5                         TIM_TOV_ISR:
0055A5 7F55A5 18 0B 44 10 01              movb #$44,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055AA 7F55AA 20 F9                       bra  TIM_TOV_ISR     ; Keep looping here
                                      ;*TIM_TC7_ISR:
                                      ;*    movb #$46,VecDebug   ; Load "VecDebug" with the last byte of the vector address  ; TIM ch7 ((D7)(87to112)(Inj5)(7&2)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC7_ISR     ; Keep looping here
                                      ;*TIM_TC6_ISR:
                                      ;*    movb #$48,VecDebug   ; Load "VecDebug" with the last byte of the vector address  ; TIM ch6 ((D1)(87to112)(Inj4)(5&8)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC6_ISR     ; Keep looping here
                                      ;*TIM_TC5_ISR:
                                      ;*    movb #$4A,VecDebug   ; Load "VecDebug" with the last byte of the vector address  ; TIM ch5 ((D6)(87to112)(Inj3)(3&6)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC5_ISR     ; Keep looping here
                                      ;*TIM_TC4_ISR:
                                      ;*    movb #$4C,VecDebug   ; Load "VecDebug" with the last byte of the vector address  ; TIM ch4 ((D3)(87to112)(Inj2)(9&4)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC4_ISR     ; Keep looping here
                                      ;*TIM_TC3_ISR:
                                      ;*    movb #$4E,VecDebug   ; Load "VecDebug" with the last byte of the vector address  ; TIM ch3 ((D1)(1to28)(Inj1)(1&10)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC3_ISR     ; Keep looping here
                                      ;*TIM_TC2_ISR:
                                      ;*    movb #$50,VecDebug   ; Load "VecDebug" with the last byte of the vector address  ; TIM ch2 ((D24)(1to28)(Ign5)(3&2)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC2_ISR     ; Keep looping here
                                      ;*TIM_TC1_ISR:
                                      ;*    movb #$52,VecDebug   ; Load "VecDebug" with the last byte of the vector address   ; TIM ch1 ((D5)(1to28)(Ign4)(4&7)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC1_ISR     ; Keep looping here
                                      ;*TIM_TC0_ISR:
                                      ;*    movb #$54,VecDebug   ; Load "VecDebug" with the last byte of the vector address  ; TIM ch0 ((D21)(1to28)(Ign3)(9&8)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC0_ISR     ; Keep looping here
0055AC 7F55AC                         SCI7_ISR:
0055AC 7F55AC 18 0B 56 10 01              movb #$56,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055B1 7F55B1 20 F9                       bra  SCI7_ISR        ; Keep looping here
0055B3 7F55B3                         PITCH7_ISR:
0055B3 7F55B3 18 0B 58 10 01              movb #$58,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055B8 7F55B8 20 F9                       bra  PITCH7_ISR      ; Keep looping here
0055BA 7F55BA                         PITCH6_ISR:
0055BA 7F55BA 18 0B 5A 10 01              movb #$5A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055BF 7F55BF 20 F9                       bra  PITCH6_ISR      ; Keep looping here
0055C1 7F55C1                         PITCH5_ISR:
0055C1 7F55C1 18 0B 5C 10 01              movb #$5C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055C6 7F55C6 20 F9                       bra  PITCH5_ISR      ; Keep looping here
0055C8 7F55C8                         PITCH4_ISR:
0055C8 7F55C8 18 0B 5E 10 01              movb #$5E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055CD 7F55CD 20 F9                       bra  PITCH4_ISR      ; Keep looping here
0055CF 7F55CF                         RES60_ISR:
0055CF 7F55CF 18 0B 60 10 01              movb #$60,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055D4 7F55D4 20 F9                       bra  RES60_ISR       ; Keep looping here
0055D6 7F55D6                         RES62_ISR:
0055D6 7F55D6 18 0B 62 10 01              movb #$62,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055DB 7F55DB 20 F9                       bra  RES62_ISR       ; Keep looping here
0055DD 7F55DD                         XGSWT7_ISR:
0055DD 7F55DD 18 0B 64 10 01              movb #$64,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055E2 7F55E2 20 F9                       bra  XGSWT7_ISR      ; Keep looping here
0055E4 7F55E4                         XGSWT6_ISR:
0055E4 7F55E4 18 0B 66 10 01              movb #$66,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055E9 7F55E9 20 F9                       bra  XGSWT6_ISR      ; Keep looping here
0055EB 7F55EB                         XGSWT5_ISR:
0055EB 7F55EB 18 0B 68 10 01              movb #$68,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055F0 7F55F0 20 F9                       bra  XGSWT5_ISR      ; Keep looping here
0055F2 7F55F2                         XGSWT4_ISR:
0055F2 7F55F2 18 0B 6A 10 01              movb #$6A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055F7 7F55F7 20 F9                       bra  XGSWT4_ISR      ; Keep looping here
0055F9 7F55F9                         XGSWT3_ISR:
0055F9 7F55F9 18 0B 6C 10 01              movb #$6C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055FE 7F55FE 20 F9                       bra  XGSWT3_ISR      ; Keep looping here
005600 7F5600                         XGSWT2_ISR:
005600 7F5600 18 0B 6E 10 01              movb #$6E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005605 7F5605 20 F9                       bra  XGSWT2_ISR      ; Keep looping here
005607 7F5607                         XGSWT1_ISR:
005607 7F5607 18 0B 70 10 01              movb #$70,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00560C 7F560C 20 F9                       bra  XGSWT1_ISR      ; Keep looping here
00560E 7F560E                         XGSWT0_ISR:
00560E 7F560E 18 0B 72 10 01              movb #$72,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005613 7F5613 20 F9                       bra  XGSWT0_ISR      ; Keep looping here
005615 7F5615                         PITCH3_ISR:
005615 7F5615 18 0B 74 10 01              movb #$74,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00561A 7F561A 20 F9                       bra  PITCH3_ISR      ; Keep looping here
00561C 7F561C                         PITCH2_ISR:
00561C 7F561C 18 0B 76 10 01              movb #$76,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005621 7F5621 20 F9                       bra  PITCH2_ISR      ; Keep looping here
005623 7F5623                         PITCH1_ISR:
005623 7F5623 18 0B 78 10 01              movb #$78,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005628 7F5628 20 F9                       bra  PITCH1_ISR      ; Keep looping here
00562A 7F562A                         PITCH0_ISR:
00562A 7F562A 18 0B 7A 10 01              movb #$7A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00562F 7F562F 20 F9                       bra  PITCH0_ISR      ; Keep looping here
005631 7F5631                         HT_ISR:
005631 7F5631 18 0B 7C 10 01              movb #$7C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005636 7F5636 20 F9                       bra  HT_ISR          ; Keep looping here
005638 7F5638                         API_ISR:
005638 7F5638 18 0B 7E 10 01              movb #$7E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00563D 7F563D 20 F9                       bra  API_ISR         ; Keep looping here
00563F 7F563F                         LVI_ISR:
00563F 7F563F 18 0B 80 10 01              movb #$80,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005644 7F5644 20 F9                       bra  LVI_ISR         ; Keep looping here
005646 7F5646                         IIC1_ISR:
005646 7F5646 18 0B 82 10 01              movb #$82,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00564B 7F564B 20 F9                       bra  IIC1_ISR        ; Keep looping here
00564D 7F564D                         SCI5_ISR:
00564D 7F564D 18 0B 84 10 01              movb #$84,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005652 7F5652 20 F9                       bra  SCI5_ISR        ; Keep looping here
005654 7F5654                         SCI4_ISR:
005654 7F5654 18 0B 86 10 01              movb #$86,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005659 7F5659 20 F9                       bra  SCI4_ISR        ; Keep looping here
00565B 7F565B                         SCI3_ISR:
00565B 7F565B 18 0B 88 10 01              movb #$88,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005660 7F5660 20 F9                       bra  SCI3_ISR        ; Keep looping here
005662 7F5662                         SCI2_ISR:
005662 7F5662 18 0B 8A 10 01              movb #$8A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005667 7F5667 20 F9                       bra  SCI2_ISR        ; Keep looping here
005669 7F5669                         PWMSDN_ISR:
005669 7F5669 18 0B 8C 10 01              movb #$8C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00566E 7F566E 20 F9                       bra  PWMSDN_ISR      ; Keep looping here
005670 7F5670                         PORTP_ISR:
005670 7F5670 18 0B 8E 10 01              movb #$8E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005675 7F5675 20 F9                       bra  PORTP_ISR       ; Keep looping here
005677 7F5677                         CAN4TX_ISR:
005677 7F5677 18 0B 90 10 01              movb #$90,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00567C 7F567C 20 F9                       bra  CAN4TX_ISR      ; Keep looping here
00567E 7F567E                         CAN4RX_ISR:
00567E 7F567E 18 0B 92 10 01              movb #$92,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005683 7F5683 20 F9                       bra  CAN4RX_ISR      ; Keep looping here
005685 7F5685                         CAN4ERR_ISR:
005685 7F5685 18 0B 94 10 01              movb #$94,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00568A 7F568A 20 F9                       bra  CAN4ERR_ISR     ; Keep looping here
00568C 7F568C                         CAN4WUP_ISR:
00568C 7F568C 18 0B 96 10 01              movb #$96,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005691 7F5691 20 F9                       bra  CAN4WUP_ISR     ; Keep looping here
005693 7F5693                         CAN3TX_ISR:
005693 7F5693 18 0B 98 10 01              movb #$98,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005698 7F5698 20 F9                       bra  CAN3TX_ISR      ; Keep looping here
00569A 7F569A                         CAN3RX_ISR:
00569A 7F569A 18 0B 9A 10 01              movb #$9A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00569F 7F569F 20 F9                       bra  CAN3RX_ISR      ; Keep looping here
0056A1 7F56A1                         CAN3ERR_ISR:
0056A1 7F56A1 18 0B 9C 10 01              movb #$9C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056A6 7F56A6 20 F9                       bra  CAN3ERR_ISR     ; Keep looping here
0056A8 7F56A8                         CAN3WUP_ISR:
0056A8 7F56A8 18 0B 9E 10 01              movb #$9E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056AD 7F56AD 20 F9                       bra  CAN3WUP_ISR     ; Keep looping here
0056AF 7F56AF                         CAN2TX_ISR:
0056AF 7F56AF 18 0B A0 10 01              movb #$A0,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056B4 7F56B4 20 F9                       bra  CAN2TX_ISR      ; Keep looping here
0056B6 7F56B6                         CAN2RX_ISR:
0056B6 7F56B6 18 0B A2 10 01              movb #$A2,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056BB 7F56BB 20 F9                       bra  CAN2RX_ISR      ; Keep looping here
0056BD 7F56BD                         CAN2ERR_ISR:
0056BD 7F56BD 18 0B A4 10 01              movb #$A4,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056C2 7F56C2 20 F9                       bra  CAN2ERR_ISR     ; Keep looping here
0056C4 7F56C4                         CAN2WUP_ISR:
0056C4 7F56C4 18 0B A6 10 01              movb #$A6,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056C9 7F56C9 20 F9                       bra  CAN2WUP_ISR     ; Keep looping here
0056CB 7F56CB                         CAN1TX_ISR:
0056CB 7F56CB 18 0B A8 10 01              movb #$A8,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056D0 7F56D0 20 F9                       bra  CAN1TX_ISR      ; Keep looping here
0056D2 7F56D2                         CAN1RX_ISR:
0056D2 7F56D2 18 0B AA 10 01              movb #$AA,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056D7 7F56D7 20 F9                       bra  CAN1RX_ISR      ; Keep looping here
0056D9 7F56D9                         CAN1ERR_ISR:
0056D9 7F56D9 18 0B AC 10 01              movb #$AC,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056DE 7F56DE 20 F9                       bra  CAN1ERR_ISR     ; Keep looping here
0056E0 7F56E0                         CAN1WUP_ISR:
0056E0 7F56E0 18 0B AE 10 01              movb #$AE,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056E5 7F56E5 20 F9                       bra  CAN1WUP_ISR     ; Keep looping here
0056E7 7F56E7                         CAN0TX_ISR:
0056E7 7F56E7 18 0B B0 10 01              movb #$B0,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056EC 7F56EC 20 F9                       bra  CAN0TX_ISR      ; Keep looping here
0056EE 7F56EE                         CAN0RX_ISR:
0056EE 7F56EE 18 0B B2 10 01              movb #$B2,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056F3 7F56F3 20 F9                       bra  CAN0RX_ISR      ; Keep looping here
0056F5 7F56F5                         CAN0ERR_ISR:
0056F5 7F56F5 18 0B B4 10 01              movb #$B4,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056FA 7F56FA 20 F9                       bra  CAN0ERR_ISR     ; Keep looping here
0056FC 7F56FC                         CAN0WUP_ISR:
0056FC 7F56FC 18 0B B6 10 01              movb #$B6,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005701 7F5701 20 F9                       bra  CAN0WUP_ISR     ; Keep looping here
005703 7F5703                         FLASH_ISR:
005703 7F5703 18 0B B8 10 01              movb #$B8,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005708 7F5708 20 F9                       bra  FLASH_ISR       ; Keep looping here
00570A 7F570A                         FLASHFLT_ISR:
00570A 7F570A 18 0B BA 10 01              movb #$BA,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00570F 7F570F 20 F9                       bra  FLASHFLT_ISR    ; Keep looping here
005711 7F5711                         SPI2_ISR:
005711 7F5711 18 0B BC 10 01              movb #$BC,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005716 7F5716 20 F9                       bra  SPI2_ISR        ; Keep looping here
005718 7F5718                         SPI1_ISR:
005718 7F5718 18 0B BE 10 01              movb #$BE,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00571D 7F571D 20 F9                       bra  SPI1_ISR        ; Keep looping here
00571F 7F571F                         IIC0_ISR:
00571F 7F571F 18 0B C0 10 01              movb #$C0,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005724 7F5724 20 F9                       bra  IIC0_ISR        ; Keep looping here
005726 7F5726                         SCI6_ISR:
005726 7F5726 18 0B C2 10 01              movb #$C2,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00572B 7F572B 20 F9                       bra  SCI6_ISR        ; Keep looping here
00572D 7F572D                         SCM_ISR:
00572D 7F572D 18 0B C4 10 01              movb #$C4,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005732 7F5732 20 F9                       bra  SCM_ISR         ; Keep looping here
005734 7F5734                         PLLLOCK_ISR:
005734 7F5734 18 0B C6 10 01              movb #$C6,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005739 7F5739 20 F9                       bra  PLLLOCK_ISR     ; Keep looping here
00573B 7F573B                         ECT_PBOV_ISR:
00573B 7F573B 18 0B C8 10 01              movb #$C8,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005740 7F5740 20 F9                       bra  ECT_PBOV_ISR    ; Keep looping here
005742 7F5742                         ECT_MODCNT_ISR:
005742 7F5742 18 0B CA 10 01              movb #$CA,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005747 7F5747 20 F9                       bra  ECT_MODCNT_ISR  ; Keep looping here
005749 7F5749                         PORTH_ISR:
005749 7F5749 18 0B CC 10 01              movb #$CC,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00574E 7F574E 20 F9                       bra  PORTH_ISR       ; Keep looping here
005750 7F5750                         PORTJ_ISR:
005750 7F5750 18 0B CE 10 01              movb #$CE,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005755 7F5755 20 F9                       bra  PORTJ_ISR       ; Keep looping here
005757 7F5757                         ATD1_ISR:
005757 7F5757 18 0B D0 10 01              movb #$D0,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00575C 7F575C 20 F9                       bra  ATD1_ISR        ; Keep looping here
00575E 7F575E                         ATD0_ISR:
00575E 7F575E 18 0B D2 10 01              movb #$D2,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005763 7F5763 20 F9                       bra  ATD0_ISR        ; Keep looping here
005765 7F5765                         SCI1_ISR:
005765 7F5765 18 0B D4 10 01              movb #$D4,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00576A 7F576A 20 F9                       bra  SCI1_ISR        ; Keep looping here
                                      ;*SCI0_ISR:
                                      ;*    movb #$D6,VecDebug   ; Load "VecDebug" with the last byte of the vector address        ; SCI0 ENABLED, CPU, level 1
                                      ;*    bra  SCI1_ISR        ; Keep looping here
00576C 7F576C                         SPI0_ISR
00576C 7F576C 18 0B D8 10 01              movb #$D8,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005771 7F5771 20 F9                       bra  SPI0_ISR        ; Keep looping here
005773 7F5773                         ECT_PAIE_ISR:
005773 7F5773 18 0B DA 10 01              movb #$DA,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005778 7F5778 20 F9                       bra  ECT_PAIE_ISR    ; Keep looping here
00577A 7F577A                         ECT_PAOV_ISR:
00577A 7F577A 18 0B DC 10 01              movb #$DC,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00577F 7F577F 20 F9                       bra  ECT_PAOV_ISR    ; Keep looping here
005781 7F5781                         ECT_TOV_ISR:
005781 7F5781 18 0B DE 10 01              movb #$DE,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005786 7F5786 20 F9                       bra  ECT_TOV_ISR     ; Keep looping here
                                      ;*ECT_TC7_ISR:
                                      ;*    movb #$E0,VecDebug   ; Load "VecDebug" with the last byte of the vector address       ; ECT ch7 (Crank) ENABLED, CPU, level 7 (Highest)
                                      ;*    bra  ECT_TC7_ISR     ; Keep looping here
                                      ;*ECT_TC6_ISR:
                                      ;*    movb #$E2,VecDebug   ; Load "VecDebug" with the last byte of the vector address      ; ECT ch6 (VSS) ENABLED, CPU, level 1
                                      ;*    bra  ECT_TC3_ISR     ; Keep looping here
                                      ;*ECT_TC5_ISR:
                                      ;*    movb #$E4,VecDebug   ; Load "VecDebug" with the last byte of the vector address      ; ECT ch5 (Cam) ENABLED, CpU level 6
                                      ;*    bra  ECT_TC5_ISR     ; Keep looping here
005788 7F5788                         ECT_TC4_ISR:
005788 7F5788 18 0B E6 10 01              movb #$E6,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00578D 7F578D 20 00                       bra  ECT_TC3_ISR     ; Keep looping here
00578F 7F578F                         ECT_TC3_ISR:
00578F 7F578F 18 0B E8 10 01              movb #$E8,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005794 7F5794 20 F9                       bra  ECT_TC3_ISR     ; Keep looping here
                                      ;*ECT_TC2_ISR:
                                      ;*    movb #$EA,VecDebug   ; Load "VecDebug" with the last byte of the vector address      ; ECT ch2 ((D8)(1to28)(Ign2)(10&5)), ENABLED, CPU level 1
                                      ;*    bra  ECT_TC2_ISR     ; Keep looping here
005796 7F5796                         ECT_TC1_ISR:
005796 7F5796 18 0B EC 10 01              movb #$EC,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00579B 7F579B 20 F9                       bra  ECT_TC1_ISR     ; Keep looping here
                                      ;*ECT_TC0_ISR:
                                      ;*    movb #$EE,VecDebug   ; Load "VecDebug" with the last byte of the vector address      ; ECT ch0 ((D7)(1to28)(Ign1)(1&6)), ENABLED, CPU level 1
                                      ;*    bra  ECT_TC0_ISR     ; Keep looping here
                                      ;*RTI_ISR
                                      ;*    movb #$F0,VecDebug   ; Load "VecDebug" with the last byte of the vector address        ; RTI ENABLED, CPU, level 1
                                      ;*    bra  RTI_ISR         ; Keep looping here
00579D 7F579D                         IRQ_ISR:
00579D 7F579D 18 0B F2 10 01              movb #$F2,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057A2 7F57A2 20 F9                       bra  IRQ_ISR         ; Keep looping here
0057A4 7F57A4                         XIRQ_ISR:
0057A4 7F57A4 18 0B F4 10 01              movb #$F4,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057A9 7F57A9 20 F9                       bra  XIRQ_ISR        ; Keep looping here
0057AB 7F57AB                         SWI_ISR:
0057AB 7F57AB 18 0B F6 10 01              movb #$F6,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057B0 7F57B0 20 F9                       bra  SWI_ISR         ; Keep looping here
0057B2 7F57B2                         TRAP_ISR:
0057B2 7F57B2 18 0B F8 10 01              movb #$F8,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057B7 7F57B7 20 F9                       bra  TRAP_ISR        ; Keep looping here
                                      ;*****************************************************************************************
                                      ; - Reset entry points -
                                      ;*****************************************************************************************
                                      ; - Power-on, Low voltage and External reset -
0057B9 7F57B9                         RESET_EXT_ENTRY:
0057B9 7F57B9 18 0B 02 10 00              movb  #PoLvExrst,ResetFlgs  ; Load "ResetFlgs" with %00000010 (set bit 1)
0057BE 7F57BE 06 40 00                    job   BPEM488_CODE_START    ; Jump or Branch to BPEM488_CODE_START: (Start of BPEM488.s)
                                      ; - Clock Monitor reset -
0057C1 7F57C1                         RESET_CM_ENTRY:
0057C1 7F57C1 18 0B 04 10 00              movb  #Cmrst,ResetFlgs      ; Load "ResetFlgs" with %00000100 (set bit 2)
0057C6 7F57C6 06 40 00                    job   BPEM488_CODE_START    ; Jump or Branch to BPEM488_CODE_START: (Start of BPEM488.s)
                                      ; - COP and user reset -
0057C9 7F57C9                         RESET_COP_ENTRY:
0057C9 7F57C9 18 0B 08 10 00              movb  #Coprst,ResetFlgs     ; Load "ResetFlgs" with %00001000 (set bit 3)
0057CE 7F57CE 06 40 00                    job   BPEM488_CODE_START    ; Jump or Branch to BPEM488_CODE_START: (Start of BPEM488.s)
0057D1 7F57D1 -> $57D1                VECTAB_CODE_END         EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
0057D1 7F57D1 -> $7F57D1              VECTAB_CODE_END_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C0C 7F6C0C                                                 ORG     VECTAB_TABS_START, VECTAB_TABS_START_LIN
006C0C 7F6C0C -> $7F6C0C              VECTAB_TABS_START_LIN   EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; - Interrupt service routines -
006C0C 7F6C0C -> $54EF                ISR_SPURIOUS    EQU SPURIOUS_ISR                ;vector base + $10
006C0C 7F6C0C -> $54F6                ISR_SYS                 EQU SYS_ISR                             ;vector base + $12
006C0C 7F6C0C -> $54FD                ISR_MPU                 EQU MPU_ISR                             ;vector base + $14
006C0C 7F6C0C -> $5504                ISR_XGSWE       EQU XGSWE_ISR                   ;vector base + $16
006C0C 7F6C0C -> $550B                ISR_RES18               EQU RES18_ISR                   ;vector base + $18
006C0C 7F6C0C -> $5512                ISR_RES1A               EQU RES1A_ISR                   ;vector base + $1A
006C0C 7F6C0C -> $5519                ISR_RES1C               EQU RES1C_ISR                   ;vector base + $1C
006C0C 7F6C0C -> $5520                ISR_RES1E               EQU RES1E_ISR                   ;vector base + $1E
006C0C 7F6C0C -> $5527                ISR_RES20               EQU RES20_ISR                   ;vector base + $20
006C0C 7F6C0C -> $552E                ISR_RES22               EQU RES22_ISR                   ;vector base + $22
006C0C 7F6C0C -> $5535                ISR_RES24               EQU RES24_ISR                   ;vector base + $24
006C0C 7F6C0C -> $553C                ISR_RES26               EQU RES26_ISR                   ;vector base + $26
006C0C 7F6C0C -> $5543                ISR_RES28               EQU RES28_ISR                   ;vector base + $28
006C0C 7F6C0C -> $554A                ISR_RES2A               EQU RES2A_ISR                   ;vector base + $2A
006C0C 7F6C0C -> $5551                ISR_RES2C               EQU RES2C_ISR                   ;vector base + $2C
006C0C 7F6C0C -> $5558                ISR_RES2E               EQU RES2E_ISR                   ;vector base + $2E
006C0C 7F6C0C -> $555F                ISR_RES30               EQU RES30_ISR                   ;vector base + $30
006C0C 7F6C0C -> $5566                ISR_RES32               EQU RES32_ISR                   ;vector base + $32
006C0C 7F6C0C -> $556D                ISR_RES34               EQU RES34_ISR                   ;vector base + $34
006C0C 7F6C0C -> $5574                ISR_RES36               EQU RES36_ISR                   ;vector base + $36
006C0C 7F6C0C -> $557B                ISR_RES38               EQU RES38_ISR                   ;vector base + $38
006C0C 7F6C0C -> $5582                ISR_RES3A               EQU RES3A_ISR                   ;vector base + $3A
006C0C 7F6C0C -> $5589                ISR_ATD1COMP    EQU ATD1COMP_ISR                ;vector base + $3C
006C0C 7F6C0C -> $5590                ISR_ATD0COMP    EQU ATD0COMP_ISR                ;vector base + $3E
006C0C 7F6C0C -> $5597                ISR_TIM_PAIE    EQU TIM_PAIE_ISR                ;vector base + $40
006C0C 7F6C0C -> $559E                ISR_TIM_PAOV    EQU TIM_PAOV_ISR                ;vector base + $42
006C0C 7F6C0C -> $55A5                ISR_TIM_TOV     EQU TIM_TOV_ISR                 ;vector base + $44
006C0C 7F6C0C -> $5BF3                ISR_TIM_TC7     EQU TIM_TC7_ISR                 ;vector base + $46    ; TIM CH 7 ((D7)(87to112)(Inj5)(7&2)) enabled
006C0C 7F6C0C -> $5BE1                ISR_TIM_TC6     EQU TIM_TC6_ISR                 ;vector base + $48    ; TIM Ch 6 ((D1)(87to112)(Inj4)(5&8)) enabled
006C0C 7F6C0C -> $5BCF                ISR_TIM_TC5     EQU TIM_TC5_ISR                 ;vector base + $4A    ; TIM Ch 5 ((D6)(87to112)(Inj3)(3&6)) enabled
006C0C 7F6C0C -> $5BBD                ISR_TIM_TC4     EQU TIM_TC4_ISR                 ;vector base + $4C    ; TIM Ch 4 ((D3)(87to112)(Inj2)(9&4)) enabled
006C0C 7F6C0C -> $5B8A                ISR_TIM_TC3     EQU TIM_TC3_ISR                 ;vector base + $4E    ; TIM Ch 3 ((D1)(1to28)(Inj1)(1&10)) enabled
006C0C 7F6C0C -> $5B78                ISR_TIM_TC2     EQU TIM_TC2_ISR                 ;vector base + $50    ; TIM Ch 2 ((D24)(1to28)(Ign5)(3&2)) enabled
006C0C 7F6C0C -> $5B66                ISR_TIM_TC1     EQU TIM_TC1_ISR                 ;vector base + $52    ; TIM Ch 1 ((D5)(1to28)(Ign4)(4&7)) enabled
006C0C 7F6C0C -> $5B54                ISR_TIM_TC0     EQU TIM_TC0_ISR                 ;vector base + $54    ; TIM Ch 0 ((D21)(1to28)(Ign3)(9&8))enabled
006C0C 7F6C0C -> $55AC                ISR_SCI7        EQU SCI7_ISR                    ;vector base + $56
006C0C 7F6C0C -> $55B3                ISR_PITCH7      EQU PITCH7_ISR                  ;vector base + $58
006C0C 7F6C0C -> $55BA                ISR_PITCH6      EQU PITCH6_ISR                  ;vector base + $5A
006C0C 7F6C0C -> $55C1                ISR_PITCH5      EQU PITCH5_ISR                  ;vector base + $5C
006C0C 7F6C0C -> $55C8                ISR_PITCH4      EQU PITCH4_ISR                  ;vector base + $5E
006C0C 7F6C0C -> $55CF                ISR_RES60               EQU RES60_ISR                   ;vector base + $60
006C0C 7F6C0C -> $55D6                ISR_RES62               EQU RES62_ISR                   ;vector base + $62
006C0C 7F6C0C -> $55DD                ISR_XGSWT7              EQU XGSWT7_ISR                  ;vector base + $64
006C0C 7F6C0C -> $55E4                ISR_XGSWT6              EQU XGSWT6_ISR                  ;vector base + $66
006C0C 7F6C0C -> $55EB                ISR_XGSWT5              EQU XGSWT5_ISR                  ;vector base + $68
006C0C 7F6C0C -> $55F2                ISR_XGSWT4              EQU XGSWT4_ISR                  ;vector base + $6A
006C0C 7F6C0C -> $55F9                ISR_XGSWT3              EQU XGSWT3_ISR                  ;vector base + $6C
006C0C 7F6C0C -> $5600                ISR_XGSWT2              EQU XGSWT2_ISR                  ;vector base + $6E
006C0C 7F6C0C -> $5607                ISR_XGSWT1              EQU XGSWT1_ISR                  ;vector base + $70
006C0C 7F6C0C -> $560E                ISR_XGSWT0              EQU XGSWT0_ISR                  ;vector base + $72     ; XGATE SW Trig 0 (RTI) DISABLED, XGATE, level 1 (used to clear RTI variables)
006C0C 7F6C0C -> $5615                ISR_PITCH3              EQU PITCH3_ISR                  ;vector base + $74
006C0C 7F6C0C -> $561C                ISR_PITCH2              EQU PITCH2_ISR                  ;vector base + $76
006C0C 7F6C0C -> $5623                ISR_PITCH1              EQU PITCH1_ISR                  ;vector base + $78
006C0C 7F6C0C -> $562A                ISR_PITCH0              EQU PITCH0_ISR                  ;vector base + $7A
006C0C 7F6C0C -> $5631                ISR_HT                  EQU HT_ISR                              ;vector base + $7C
006C0C 7F6C0C -> $5638                ISR_API                 EQU API_ISR                             ;vector base + $7E
006C0C 7F6C0C -> $563F                ISR_LVI                 EQU LVI_ISR                             ;vector base + $80
006C0C 7F6C0C -> $5646                ISR_IIC1                EQU IIC1_ISR                    ;vector base + $82
006C0C 7F6C0C -> $564D                ISR_SCI5                EQU SCI5_ISR                    ;vector base + $84
006C0C 7F6C0C -> $5654                ISR_SCI4                EQU SCI4_ISR                    ;vector base + $86
006C0C 7F6C0C -> $565B                ISR_SCI3                EQU SCI3_ISR                    ;vector base + $88
006C0C 7F6C0C -> $5662                ISR_SCI2                EQU SCI2_ISR                    ;vector base + $8A
006C0C 7F6C0C -> $5669                ISR_PWMSDN              EQU PWMSDN_ISR                  ;vector base + $8C
006C0C 7F6C0C -> $5670                ISR_PORTP               EQU PORTP_ISR                   ;vector base + $8E
006C0C 7F6C0C -> $5677                ISR_CAN4TX              EQU CAN4TX_ISR                  ;vector base + $90
006C0C 7F6C0C -> $567E                ISR_CAN4RX              EQU CAN4RX_ISR                  ;vector base + $92
006C0C 7F6C0C -> $5685                ISR_CAN4ERR             EQU CAN4ERR_ISR                 ;vector base + $94
006C0C 7F6C0C -> $568C                ISR_CAN4WUP             EQU CAN4WUP_ISR                 ;vector base + $96
006C0C 7F6C0C -> $5693                ISR_CAN3TX              EQU CAN3TX_ISR                  ;vector base + $98
006C0C 7F6C0C -> $569A                ISR_CAN3RX              EQU CAN3RX_ISR                  ;vector base + $9A
006C0C 7F6C0C -> $56A1                ISR_CAN3ERR             EQU CAN3ERR_ISR                 ;vector base + $9C
006C0C 7F6C0C -> $56A8                ISR_CAN3WUP             EQU CAN3WUP_ISR                 ;vector base + $9E
006C0C 7F6C0C -> $56AF                ISR_CAN2TX              EQU CAN2TX_ISR                  ;vector base + $A0
006C0C 7F6C0C -> $56B6                ISR_CAN2RX              EQU CAN2RX_ISR                  ;vector base + $A2
006C0C 7F6C0C -> $56BD                ISR_CAN2ERR             EQU CAN2ERR_ISR                 ;vector base + $A4
006C0C 7F6C0C -> $56C4                ISR_CAN2WUP             EQU CAN2WUP_ISR                 ;vector base + $A6
006C0C 7F6C0C -> $56CB                ISR_CAN1TX      EQU CAN1TX_ISR                  ;vector base + $A8
006C0C 7F6C0C -> $56D2                ISR_CAN1RX      EQU CAN1RX_ISR                  ;vector base + $AA
006C0C 7F6C0C -> $56D9                ISR_CAN1ERR     EQU CAN1ERR_ISR                 ;vector base + $AC
006C0C 7F6C0C -> $56E0                ISR_CAN1WUP     EQU CAN1WUP_ISR                 ;vector base + $AE
006C0C 7F6C0C -> $56E7                ISR_CAN0TX      EQU CAN0TX_ISR                  ;vector base + $B0
006C0C 7F6C0C -> $56EE                ISR_CAN0RX      EQU CAN0RX_ISR                  ;vector base + $B2
006C0C 7F6C0C -> $56F5                ISR_CAN0ERR     EQU CAN0ERR_ISR                 ;vector base + $B4
006C0C 7F6C0C -> $56FC                ISR_CAN0WUP     EQU CAN0WUP_ISR                 ;vector base + $B6
006C0C 7F6C0C -> $5703                ISR_FLASH       EQU FLASH_ISR                   ;vector base + $B8
006C0C 7F6C0C -> $570A                ISR_FLASHFLT    EQU FLASHFLT_ISR                ;vector base + $BA
006C0C 7F6C0C -> $5711                ISR_SPI2        EQU SPI2_ISR                    ;vector base + $BC
006C0C 7F6C0C -> $5718                ISR_SPI1        EQU SPI1_ISR                    ;vector base + $BE
006C0C 7F6C0C -> $571F                ISR_IIC0        EQU IIC0_ISR                    ;vector base + $C0
006C0C 7F6C0C -> $5726                ISR_SCI6        EQU SCI6_ISR                    ;vector base + $C2
006C0C 7F6C0C -> $572D                ISR_SCM                 EQU SCM_ISR                             ;vector base + $C4
006C0C 7F6C0C -> $5734                ISR_PLLLOCK             EQU PLLLOCK_ISR                 ;vector base + $C6
006C0C 7F6C0C -> $573B                ISR_ECT_PBOV    EQU ECT_PBOV_ISR                ;vector base + $C8
006C0C 7F6C0C -> $5742                ISR_ECT_MODCNT  EQU ECT_MODCNT_ISR              ;vector base + $CA
006C0C 7F6C0C -> $5749                ISR_PORTH               EQU PORTH_ISR                   ;vector base + $CC
006C0C 7F6C0C -> $5750                ISR_PORTJ               EQU PORTJ_ISR                   ;vector base + $CE
006C0C 7F6C0C -> $5757                ISR_ATD1                EQU ATD1_ISR                    ;vector base + $D0
006C0C 7F6C0C -> $575E                ISR_ATD0                EQU     ATD0_ISR                ;vector base + $D2
006C0C 7F6C0C -> $5765                ISR_SCI1                EQU SCI1_ISR                    ;vector base + $D4
006C0C 7F6C0C -> $582F                ISR_SCI0        EQU SCI0_ISR            ;vector base + $D6   ; SCI0 ENABLED, CPU, level 1
006C0C 7F6C0C -> $576C                ISR_SPI0                EQU SPI0_ISR                    ;vector base + $D8
006C0C 7F6C0C -> $5773                ISR_ECT_PAIE    EQU ECT_PAIE_ISR                ;vector base + $DA
006C0C 7F6C0C -> $577A                ISR_ECT_PAOV    EQU ECT_PAOV_ISR                ;vector base + $DC
006C0C 7F6C0C -> $5781                ISR_ECT_TOV             EQU ECT_TOV_ISR                 ;vector base + $DE
006C0C 7F6C0C -> $5C16                ISR_ECT_TC7             EQU ECT_TC7_ISR                 ;vector base + $E0   ; ECT Ch 7 (Crank) ENABLED, CPU, level 7 (Highest)
006C0C 7F6C0C -> $5B33                ISR_ECT_TC6     EQU ECT_TC6_ISR         ;vector base + $E2   ; ECT Ch 6 (VSS) ENABLED, CPU, level 1
006C0C 7F6C0C -> $5C05                ISR_ECT_TC5             EQU ECT_TC5_ISR                 ;vector base + $E4   ; ECT Ch 5 (Cam) ENABLED, CPU level 6
006C0C 7F6C0C -> $5788                ISR_ECT_TC4     EQU ECT_TC4_ISR         ;vector base + $E6
006C0C 7F6C0C -> $578F                ISR_ECT_TC3             EQU ECT_TC3_ISR                 ;vector base + $E8
006C0C 7F6C0C -> $5B25                ISR_ECT_TC2             EQU ECT_TC2_ISR                 ;vector base + $EA   ; ECT Ch 2 ((D8)(1to28)(Ign2)(10&5)) ENABLED
006C0C 7F6C0C -> $5796                ISR_ECT_TC1             EQU ECT_TC1_ISR                 ;vector base + $EC
006C0C 7F6C0C -> $5B17                ISR_ECT_TC0             EQU ECT_TC0_ISR                 ;vector base + $EE   ; ECT Ch 0 ((D7)(1to28)(Ign1)(1&6)), ENABLED,
006C0C 7F6C0C -> $57D1                ISR_RTI         EQU RTI_ISR             ;vector base + $F0   ; RTI ENABLED, CPU, level 1
006C0C 7F6C0C -> $579D                ISR_IRQ                 EQU IRQ_ISR                             ;vector base + $F2
006C0C 7F6C0C -> $57A4                ISR_XIRQ                EQU XIRQ_ISR                    ;vector base + $F4
006C0C 7F6C0C -> $57AB                ISR_SWI                 EQU SWI_ISR                             ;vector base + $F6
006C0C 7F6C0C -> $57B2                ISR_TRAP                EQU TRAP_ISR                    ;vector base + $F8
006C0C 7F6C0C -> $6C0C                VECTAB_TABS_END         EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C0C 7F6C0C -> $7F6C0C              VECTAB_TABS_END_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - 9S12XEP100 Reset Vectors. Vector base is set by Interrupt Vector
                                      ;   Base Register (IVBR). Reset sets IVBR to $FF. (Pgs 80..84)
                                      ;*****************************************************************************************
00FF10 7FFF10                                                 ORG     VECTAB_START, VECTAB_START_LIN  ; $FF10,$7FFF10
00FF10 7FFF10 54 EF                   VEC_SPURIOUS    DW      ISR_SPURIOUS        ;vector base + $10
00FF12 7FFF12 54 F6                   VEC_SYS         DW      ISR_SYS             ;vector base + $12
00FF14 7FFF14 54 FD                   VEC_MPU         DW      ISR_MPU             ;vector base + $14
00FF16 7FFF16 55 04                   VEC_XGSWE       DW      ISR_XGSWE           ;vector base + $16
00FF18 7FFF18 55 0B                   VEC_RES18               DW      ISR_RES18                   ;vector base + $18
00FF1A 7FFF1A 55 12                   VEC_RES1A               DW      ISR_RES1A                   ;vector base + $1A
00FF1C 7FFF1C 55 19                   VEC_RES1C               DW      ISR_RES1C                   ;vector base + $1C
00FF1E 7FFF1E 55 20                   VEC_RES1E               DW      ISR_RES1E                   ;vector base + $1E
00FF20 7FFF20 55 27                   VEC_RES20               DW      ISR_RES20                   ;vector base + $20
00FF22 7FFF22 55 2E                   VEC_RES22               DW      ISR_RES22                   ;vector base + $22
00FF24 7FFF24 55 35                   VEC_RES24               DW      ISR_RES24                   ;vector base + $24
00FF26 7FFF26 55 3C                   VEC_RES26               DW      ISR_RES26                   ;vector base + $26
00FF28 7FFF28 55 43                   VEC_RES28               DW      ISR_RES28                   ;vector base + $28
00FF2A 7FFF2A 55 4A                   VEC_RES2A               DW      ISR_RES2A                   ;vector base + $2A
00FF2C 7FFF2C 55 51                   VEC_RES2C               DW      ISR_RES2C                   ;vector base + $2C
00FF2E 7FFF2E 55 58                   VEC_RES2E               DW      ISR_RES2E                   ;vector base + $2E
00FF30 7FFF30 55 5F                   VEC_RES30               DW      ISR_RES30                   ;vector base + $30
00FF32 7FFF32 55 66                   VEC_RES32               DW      ISR_RES32                   ;vector base + $32
00FF34 7FFF34 55 6D                   VEC_RES34               DW      ISR_RES34                   ;vector base + $34
00FF36 7FFF36 55 74                   VEC_RES36               DW      ISR_RES36                   ;vector base + $36
00FF38 7FFF38 55 7B                   VEC_RES38               DW      ISR_RES38                   ;vector base + $38
00FF3A 7FFF3A 55 82                   VEC_RES3A               DW      ISR_RES3A                   ;vector base + $3A
00FF3C 7FFF3C 55 89                   VEC_ATD1COMP    DW      ISR_ATD1COMP            ;vector base + $3C
00FF3E 7FFF3E 55 90                   VEC_ATD0COMP    DW      ISR_ATD0COMP            ;vector base + $3E
00FF40 7FFF40 55 97                   VEC_TIM_PAIE    DW      ISR_TIM_PAIE            ;vector base + $40
00FF42 7FFF42 55 9E                   VEC_TIM_PAOV    DW      ISR_TIM_PAOV            ;vector base + $42
00FF44 7FFF44 55 A5                   VEC_TIM_TOV     DW      ISR_TIM_TOV             ;vector base + $44
00FF46 7FFF46 5B F3                   VEC_TIM_TC7     DW      ISR_TIM_TC7             ;vector base + $46
00FF48 7FFF48 5B E1                   VEC_TIM_TC6     DW      ISR_TIM_TC6             ;vector base + $48
00FF4A 7FFF4A 5B CF                   VEC_TIM_TC5     DW      ISR_TIM_TC5             ;vector base + $4A
00FF4C 7FFF4C 5B BD                   VEC_TIM_TC4     DW      ISR_TIM_TC4             ;vector base + $4C
00FF4E 7FFF4E 5B 8A                   VEC_TIM_TC3     DW      ISR_TIM_TC3             ;vector base + $4E
00FF50 7FFF50 5B 78                   VEC_TIM_TC2     DW      ISR_TIM_TC2             ;vector base + $50
00FF52 7FFF52 5B 66                   VEC_TIM_TC1     DW      ISR_TIM_TC1             ;vector base + $52
00FF54 7FFF54 5B 54                   VEC_TIM_TC0     DW      ISR_TIM_TC0             ;vector base + $54
00FF56 7FFF56 55 AC                   VEC_SCI7        DW      ISR_SCI7                ;vector base + $56
00FF58 7FFF58 55 B3                   VEC_PITCH7      DW      ISR_PITCH7              ;vector base + $58
00FF5A 7FFF5A 55 BA                   VEC_PITCH6      DW      ISR_PITCH6              ;vector base + $5A
00FF5C 7FFF5C 55 C1                   VEC_PITCH5      DW      ISR_PITCH5              ;vector base + $5C
00FF5E 7FFF5E 55 C8                   VEC_PITCH4      DW      ISR_PITCH4              ;vector base + $5E
00FF60 7FFF60 55 CF                   VEC_RES60               DW      ISR_RES60                   ;vector base + $60
00FF62 7FFF62 55 D6                   VEC_RES62               DW      ISR_RES62                   ;vector base + $62
00FF64 7FFF64 55 DD                   VEC_XGSWT7              DW      ISR_XGSWT7                  ;vector base + $64
00FF66 7FFF66 55 E4                   VEC_XGSWT6              DW      ISR_XGSWT6                  ;vector base + $66
00FF68 7FFF68 55 EB                   VEC_XGSWT5              DW      ISR_XGSWT5                  ;vector base + $68
00FF6A 7FFF6A 55 F2                   VEC_XGSWT4              DW      ISR_XGSWT4                  ;vector base + $6A
00FF6C 7FFF6C 55 F9                   VEC_XGSWT3              DW      ISR_XGSWT3                  ;vector base + $6C
00FF6E 7FFF6E 56 00                   VEC_XGSWT2              DW      ISR_XGSWT2                  ;vector base + $6E
00FF70 7FFF70 56 07                   VEC_XGSWT1              DW      ISR_XGSWT1                  ;vector base + $70
00FF72 7FFF72 56 0E                   VEC_XGSWT0              DW      ISR_XGSWT0                  ;vector base + $72
00FF74 7FFF74 56 15                   VEC_PITCH3              DW      ISR_PITCH3                  ;vector base + $74
00FF76 7FFF76 56 1C                   VEC_PITCH2              DW      ISR_PITCH2                  ;vector base + $76
00FF78 7FFF78 56 23                   VEC_PITCH1              DW      ISR_PITCH1                  ;vector base + $78
00FF7A 7FFF7A 56 2A                   VEC_PITCH0              DW      ISR_PITCH0                  ;vector base + $7A
00FF7C 7FFF7C 56 31                   VEC_HT                  DW      ISR_HT                      ;vector base + $7C
00FF7E 7FFF7E 56 38                   VEC_API                 DW      ISR_API                     ;vector base + $7E
00FF80 7FFF80 56 3F                   VEC_LVI                 DW      ISR_LVI                     ;vector base + $80
00FF82 7FFF82 56 46                   VEC_IIC1                DW      ISR_IIC1                    ;vector base + $82
00FF84 7FFF84 56 4D                   VEC_SCI5                DW      ISR_SCI5                    ;vector base + $84
00FF86 7FFF86 56 54                   VEC_SCI4                DW      ISR_SCI4                    ;vector base + $86
00FF88 7FFF88 56 5B                   VEC_SCI3                DW      ISR_SCI3                    ;vector base + $88
00FF8A 7FFF8A 56 62                   VEC_SCI2                DW      ISR_SCI2                    ;vector base + $8A
00FF8C 7FFF8C 56 69                   VEC_PWMSDN              DW      ISR_PWMSDN                  ;vector base + $8C
00FF8E 7FFF8E 56 70                   VEC_PORTP               DW      ISR_PORTP                   ;vector base + $8E
00FF90 7FFF90 56 77                   VEC_CAN4TX              DW      ISR_CAN4TX                  ;vector base + $90
00FF92 7FFF92 56 7E                   VEC_CAN4RX              DW      ISR_CAN4RX                  ;vector base + $92
00FF94 7FFF94 56 85                   VEC_CAN4ERR             DW      ISR_CAN4ERR                 ;vector base + $94
00FF96 7FFF96 56 8C                   VEC_CAN4WUP             DW      ISR_CAN4WUP                 ;vector base + $96
00FF98 7FFF98 56 93                   VEC_CAN3TX              DW      ISR_CAN3TX                  ;vector base + $98
00FF9A 7FFF9A 56 9A                   VEC_CAN3RX              DW      ISR_CAN3RX                  ;vector base + $9A
00FF9C 7FFF9C 56 A1                   VEC_CAN3ERR             DW      ISR_CAN3ERR                 ;vector base + $9C
00FF9E 7FFF9E 56 A8                   VEC_CAN3WUP             DW      ISR_CAN3WUP                 ;vector base + $9E
00FFA0 7FFFA0 56 AF                   VEC_CAN2TX              DW      ISR_CAN2TX                  ;vector base + $A0
00FFA2 7FFFA2 56 B6                   VEC_CAN2RX              DW      ISR_CAN2RX                  ;vector base + $A2
00FFA4 7FFFA4 56 BD                   VEC_CAN2ERR             DW      ISR_CAN2ERR                 ;vector base + $A4
00FFA6 7FFFA6 56 C4                   VEC_CAN2WUP             DW      ISR_CAN2WUP                 ;vector base + $A6
00FFA8 7FFFA8 56 CB                   VEC_CAN1TX      DW      ISR_CAN1TX              ;vector base + $A8
00FFAA 7FFFAA 56 D2                   VEC_CAN1RX      DW      ISR_CAN1RX              ;vector base + $AA
00FFAC 7FFFAC 56 D9                   VEC_CAN1ERR     DW      ISR_CAN1ERR             ;vector base + $AC
00FFAE 7FFFAE 56 E0                   VEC_CAN1WUP     DW      ISR_CAN1WUP             ;vector base + $AE
00FFB0 7FFFB0 56 E7                   VEC_CAN0TX      DW      ISR_CAN0TX              ;vector base + $A0
00FFB2 7FFFB2 56 EE                   VEC_CAN0RX      DW      ISR_CAN0RX              ;vector base + $B2
00FFB4 7FFFB4 56 F5                   VEC_CAN0ERR     DW      ISR_CAN0ERR             ;vector base + $B4
00FFB6 7FFFB6 56 FC                   VEC_CAN0WUP     DW      ISR_CAN0WUP             ;vector base + $B6
00FFB8 7FFFB8 57 03                   VEC_FLASH       DW      ISR_FLASH               ;vector base + $B8
00FFBA 7FFFBA 57 0A                   VEC_FLASHFLT    DW      ISR_FLASHFLT            ;vector base + $BA
00FFBC 7FFFBC 57 11                   VEC_SPI2        DW      ISR_SPI2                ;vector base + $BC
00FFBE 7FFFBE 57 18                   VEC_SPI1        DW      ISR_SPI1                ;vector base + $BE
00FFC0 7FFFC0 57 1F                   VEC_IIC0        DW      ISR_IIC0                ;vector base + $C0
00FFC2 7FFFC2 57 26                   VEC_SCI6        DW      ISR_SCI6                ;vector base + $C2
00FFC4 7FFFC4 57 2D                   VEC_SCM         DW      ISR_SCM             ;vector base + $C4
00FFC6 7FFFC6 57 34                   VEC_PLLLOCK     DW      ISR_PLLLOCK             ;vector base + $C6
00FFC8 7FFFC8 57 3B                   VEC_ECT_PBOV    DW      ISR_ECT_PBOV            ;vector base + $C8
00FFCA 7FFFCA 57 42                   VEC_ECT_MODCNT  DW      ISR_ECT_MODCNT          ;vector base + $CA
00FFCC 7FFFCC 57 49                   VEC_PORTH               DW      ISR_PORTH                   ;vector base + $CC
00FFCE 7FFFCE 57 50                   VEC_PORTJ               DW      ISR_PORTJ                   ;vector base + $CE
00FFD0 7FFFD0 57 57                   VEC_ATD1                DW      ISR_ATD1                    ;vector base + $D0
00FFD2 7FFFD2 57 5E                   VEC_ATD0                DW      ISR_ATD0                    ;vector base + $D2
00FFD4 7FFFD4 57 65                   VEC_SCI1                DW      ISR_SCI1                    ;vector base + $D4
00FFD6 7FFFD6 58 2F                   VEC_SCI0                DW      ISR_SCI0                    ;vector base + $D6
00FFD8 7FFFD8 57 6C                   VEC_SPI0                DW      ISR_SPI0                    ;vector base + $D8
00FFDA 7FFFDA 57 73                   VEC_ECT_PAIE    DW      ISR_ECT_PAIE            ;vector base + $DA
00FFDC 7FFFDC 57 7A                   VEC_ECT_PAOV    DW      ISR_ECT_PAOV            ;vector base + $DC
00FFDE 7FFFDE 57 81                   VEC_ECT_TOV             DW      ISR_ECT_TOV                 ;vector base + $DE
00FFE0 7FFFE0 5C 16                   VEC_ECT_TC7             DW      ISR_ECT_TC7                 ;vector base + $E0
00FFE2 7FFFE2 5B 33                   VEC_ECT_TC6             DW      ISR_ECT_TC6                 ;vector base + $E2
00FFE4 7FFFE4 5C 05                   VEC_ECT_TC5             DW      ISR_ECT_TC5                 ;vector base + $E4
00FFE6 7FFFE6 57 88                   VEC_ECT_TC4             DW      ISR_ECT_TC4                 ;vector base + $E6
00FFE8 7FFFE8 57 8F                   VEC_ECT_TC3             DW      ISR_ECT_TC3                 ;vector base + $E8
00FFEA 7FFFEA 5B 25                   VEC_ECT_TC2             DW      ISR_ECT_TC2                 ;vector base + $EA
00FFEC 7FFFEC 57 96                   VEC_ECT_TC1             DW      ISR_ECT_TC1                 ;vector base + $EC
00FFEE 7FFFEE 5B 17                   VEC_ECT_TC0             DW      ISR_ECT_TC0                 ;vector base + $EE
00FFF0 7FFFF0 57 D1                   VEC_RTI                 DW      ISR_RTI                     ;vector base + $F0
00FFF2 7FFFF2 57 9D                   VEC_IRQ                 DW      ISR_IRQ                     ;vector base + $F2
00FFF4 7FFFF4 57 A4                   VEC_XIRQ                DW      ISR_XIRQ                    ;vector base + $F4
00FFF6 7FFFF6 57 AB                   VEC_SWI                 DW      ISR_SWI                     ;vector base + $F6
00FFF8 7FFFF8 57 B2                   VEC_TRAP                DW      ISR_TRAP                    ;vector base + $F8
00FFFA 7FFFFA 57 C9                   VEC_RESET_COP   DW      RESET_COP_ENTRY         ;vector base + $FA
00FFFC 7FFFFC 57 C1                   VEC_RESET_CM    DW      RESET_CM_ENTRY          ;vector base + $FC
00FFFE 7FFFFE 57 B9                   VEC_RESET_EXT   DW      RESET_EXT_ENTRY         ;vector base + $FE
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (mmap_BPEM488.s)                                                           *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module performs all the necessary steps to initialize the device              *
                                      ;*    after each reset.                                                                  *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map (This module)                           *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
010000 800000 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;  Flash Memory Map:
                                      ;  -----------------
                                      ;                      S12X
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;                +-------------+ $0800
                                      ;                |/////////////|
                                      ;         RAM->+ +-------------+ $1000
                                      ;              | |  Variables  |
                                      ;       Flash->+ +-------------+ $4000
                                      ;              | |/////////////|
                                      ;              | +-------------+ $C000
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+ $FF10
                                      ;              | |   Vectors   |
                                      ;              + +-------------+
                                      ;
                                      ;  RAM Memory Map:
                                      ;  ---------------
                                      ;                      S12X
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;                +-------------+ $0800
                                      ;                |/////////////|
                                      ;         RAM->+ +-------------+ $1000
                                      ;              | |  Variables  |
                                      ;              | +-------------+
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $3F10
                                      ;              | |   Vectors   |
                                      ;              + +-------------+ $4000
                                      ;                |/////////////|
                                      ;                +-------------+
                                      ;
                                      ;*****************************************************************************************
                                      ;* - Security and Protection -                                                           *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Manually add the correct global addresses to the ORG statements and allocate the full
                                      ;   8 byte NVM phrase.
                                      ;   Method A:
                                      ;   ORG $FF08, $7F_FF08
                                      ;   DW  $FFFF   ;$FF08
                                      ;   DW  $FFFF   ;$FF0A
                                      ;   DW  $FFFF   ;$FF0C
                                      ;   DW  $FFFE   ;$FF0F
                                      ;   or Method B below:
                                      ;*****************************************************************************************
00FF08 7FFF08                                 ORG  $FF08, $7F_FF08
00FF08 7FFF08 FF FF FF FF FF FF FF FF     FILL  $FF, 8               ; Allocate the full phrase
00FF0D 7FFF0D                                 ORG   $FF0D, $7F_FF0D  ; EEE Protection Register (unprotect)
00FF0D 7FFF0D FF                          DB    $FF                  ; %11111111 (Unprotected buffer RAM EEE partition areas
                                                                     ; enabled)
00FF0F 7FFF0F                                 ORG   $FF0F, $7F_FF0F  ; Flash Security Register (unsecure)
00FF0F 7FFF0F FE                          DB    $FE                  ; %11111110 (Backdoor Key Disabled, Flash Security
                                                                     ; unsecured)
                                      ;*****************************************************************************************
                                      ;* - Constants - (Memory locations)                                                      *
                                      ;*****************************************************************************************
                                      ; - Register space -
00FF10 7FFF10 -> $0000                MMAP_REG_START      EQU $0000
00FF10 7FFF10 -> $0000                MMAP_REG_START_LIN  EQU $00_0000
00FF10 7FFF10 -> $0800                MMAP_REG_END        EQU $0800
00FF10 7FFF10 -> $0800                MMAP_REG_END_LIN    EQU $0_0800
                                      ; - EEPROM -
00FF10 7FFF10 -> $0800                MMAP_EE_START         EQU $0800
00FF10 7FFF10 -> $13F800              MMAP_EE_START_LIN     EQU $13_F800
00FF10 7FFF10 -> $1000                MMAP_EE_END           EQU $1000
00FF10 7FFF10 -> $140000              MMAP_EE_END_LIN       EQU $14_0000
00FF10 7FFF10 -> $0800                MMAP_EE_WIN_START     EQU MMAP_EE_START    ; $0800
00FF10 7FFF10 -> $0C00                MMAP_EE_WIN_END       EQU $0C00
00FF10 7FFF10 -> $0C00                MMAP_EE_FF_START      EQU MMAP_EE_WIN_END  ; $0C00
00FF10 7FFF10 -> $13FC00              MMAP_EE_FF_START_LIN  EQU $13_FC00
00FF10 7FFF10 -> $1000                MMAP_EE_FF_END        EQU MMAP_EE_END      ; $1000
00FF10 7FFF10 -> $140000              MMAP_EE_FF_END_LIN    EQU MMAP_EE_END_LIN  ; $14_0000
                                      ; - RAM -
00FF10 7FFF10 -> $1000                MMAP_RAM_START           EQU $1000
00FF10 7FFF10 -> $FD000               MMAP_RAM_START_LIN       EQU $0F_D000
00FF10 7FFF10 -> $4000                MMAP_RAM_END             EQU $4000
00FF10 7FFF10 -> $100000              MMAP_RAM_END_LIN         EQU $10_0000
00FF10 7FFF10 -> $1000                MMAP_RAM_WIN_START       EQU MMAP_RAM_START    ; $1000
00FF10 7FFF10 -> $2000                MMAP_RAM_WIN_END         EQU $2000
00FF10 7FFF10 -> $2000                MMAP_RAM_FEFF_START      EQU MMAP_RAM_WIN_END  ; $2000
00FF10 7FFF10 -> $FE000               MMAP_RAM_FEFF_START_LIN  EQU $0F_E000
00FF10 7FFF10 -> $4000                MMAP_RAM_FEFF_END        EQU MMAP_RAM_END      ; $4000
00FF10 7FFF10 -> $100000              MMAP_RAM_FEFF_END_LIN    EQU MMAP_RAM_END_LIN  ; $10_0000
                                      ; - XGATE RAM -
00FF10 7FFF10 -> $8000                MMAP_XGATE_RAM_START_XG        EQU $8000
00FF10 7FFF10 -> $F8000               MMAP_XGATE_RAM_START_LIN       EQU $0F_8000
00FF10 7FFF10 -> $10000               MMAP_XGATE_RAM_END_XG          EQU $01_0000
00FF10 7FFF10 -> $100000              MMAP_XGATE_RAM_END_LIN         EQU $10_0000
                                      ; - Flash -
00FF10 7FFF10 -> $4000                MMAP_FLASH_START          EQU $4000
00FF10 7FFF10 -> $7F4000              MMAP_FLASH_START_LIN      EQU $7F_4000
00FF10 7FFF10 -> $10000               MMAP_FLASH_END            EQU $10000
00FF10 7FFF10 -> $800000              MMAP_FLASH_END_LIN        EQU $80_0000
00FF10 7FFF10 -> $8000                MMAP_FLASH_WIN_START      EQU $8000
00FF10 7FFF10 -> $C000                MMAP_FLASH_WIN_END        EQU $C000
00FF10 7FFF10 -> $4000                MMAP_FLASH_FD_START       EQU $4000
00FF10 7FFF10 -> $7F4000              MMAP_FLASH_FD_START_LIN   EQU $7F_4000
00FF10 7FFF10 -> $8000                MMAP_FLASH_FD_END         EQU $8000
00FF10 7FFF10 -> $7F8000              MMAP_FLASH_FD_END_LIN     EQU $7F_8000
00FF10 7FFF10 -> $8000                MMAP_FLASH_FE_START       EQU $8000
00FF10 7FFF10 -> $7F8000              MMAP_FLASH_FE_START_LIN   EQU $7F_8000
00FF10 7FFF10 -> $C000                MMAP_FLASH_FE_END         EQU $C000
00FF10 7FFF10 -> $7FC000              MMAP_FLASH_FE_END_LIN     EQU $7F_C000
00FF10 7FFF10 -> $C000                MMAP_FLASH_FF_START       EQU $C000
00FF10 7FFF10 -> $7FC000              MMAP_FLASH_FF_START_LIN   EQU $7F_C000
00FF10 7FFF10 -> $10000               MMAP_FLASH_FF_END         EQU MMAP_FLASH_END      ; $10000
00FF10 7FFF10 -> $800000              MMAP_FLASH_FF_END_LIN     EQU MMAP_FLASH_END_LIN  ; $80_0000
                                      ; - XGATE Flash -
00FF10 7FFF10 -> $0800                MMAP_XG_FLASH_START_XG       EQU $0800
00FF10 7FFF10 -> $780800              MMAP_XG_FLASH_START_LIN      EQU $78_0800
00FF10 7FFF10 -> $8000                MMAP_XG_FLASH_END_XG         EQU $8000
00FF10 7FFF10 -> $788000              MMAP_XG_FLASH_END_LIN        EQU $78_8000
                                      ; - XGATE Vector table -
00FF10 7FFF10 -> $787E00              MMAP_XG_VECTAB_START_LIN     EQU MMAP_XG_FLASH_END_LIN-(4*128)  ; 4*128=512=$200 $78_8000-$200=$78_7E00
00FF10 7FFF10 -> $7E00                MMAP_XG_VECTAB_START_XG      EQU MMAP_XG_FLASH_END_XG-(4*128)   ; 4*128=512=$200 $8000-$200=$7E00
00FF10 7FFF10 -> $788000              MMAP_XG_VECTAB_END_LIN       EQU MMAP_XG_FLASH_END_LIN          ; $78_8000
00FF10 7FFF10 -> $8000                MMAP_XG_VECTAB_END_XG        EQU MMAP_XG_FLASH_END_XG           ; $8000
00FF10 7FFF10 -> $7E00                MMAP_XG_XGVBR_VALUE          EQU MMAP_XG_VECTAB_START_XG        ; $7E00
                                      ; - Vector table -
00FF10 7FFF10 -> $FF10                VECTAB_START       EQU $FF10
00FF10 7FFF10 -> $7FFF10              VECTAB_START_LIN   EQU $7F_FF10
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (eeem_BPEM488.s)                                                           *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*   EE Emulation. D-Flash was partitioned using D-Bug 12 command:                       *
                                      ;*   "PARTDF 0 4096" to use all 32k bytes D-Flash and 4k bytes buffer RAM for            *
                                      ;*   EE Emulation. The "PARTDF" command by itself displays the partition configuration   *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 23 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
00FF10 7FFF10 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ; - Oscillator frequency -
00FF10 7FFF10 -> $F42400              CLOCK_OSC_FREQ          EQU     16000000        ; 16 MHz
                                      ; - Prescaler value -
00FF10 7FFF10 -> $000F                EEEM_FDIV_VAL           EQU     (CLOCK_OSC_FREQ/1000000)-1
                                                          ; 16000000/1000000=16-1=15=$0F Ref manual pg 1151
                                      ;*****************************************************************************************
                                      ;* - Constants -                                                                         *
                                      ;*****************************************************************************************
00FF10 7FFF10 -> $FF0800              BUF_RAM_P1_START    EQU  $FF0800   ; Buffer RAM page 1 pointer(actual address 13FC00)
00FF10 7FFF10 -> $FE0800              BUF_RAM_P2_START    EQU  $FE0800   ; Buffer RAM page 2 pointer(actual address 13F800)
00FF10 7FFF10 -> $FD0800              BUF_RAM_P3_START    EQU  $FD0800   ; Buffer RAM page 3 pointer(actual address 13F400)
00FF10 7FFF10 -> $FC0800              BUF_RAM_P4_START    EQU  $FC0800   ; Buffer RAM page 4 pointer(actual address 13F000)
                                      ;*****************************************************************************************
                                      ; - Page 1 VE table, ranges and other configurable constants
                                      ;  (Copied from EE Emulation D-Flash to Buffer RAM on start up,
                                      ;  all pages 1024 bytes)
                                      ;*****************************************************************************************
FF0800 0F4800                                      ORG   BUF_RAM_P1_START ; $FF0800 (Buffer Ram page 1 pointer)
                                                                          ;(actual address 13FC00)
FF0800 0F4800                         veBins_E:          rmb $288 ; 648 bytes for VE Table (% x 10)
FF0A88 0F4A88                         verpmBins_E:       rmb $24  ; 36 bytes for VE Table RPM Bins (RPM)
FF0AAC 0F4AAC                         vemapBins_E:       rmb $24  ; 36 bytes for VE Table MAP Bins (KpA x 10)
FF0AD0 0F4AD0                         barCorVals_E:      rmb $12  ; 18 bytes for barometric correction values (KpA x 10)
FF0AE2 0F4AE2                         barCorDelta_E:     rmb $12  ; 18 bytes for barometric correction  (% x 10)
FF0AF4 0F4AF4                         dwellvolts_E:      rmb $0C  ; 12 bytes for dwell battery correction (volts x 10)
FF0B00 0F4B00                         dwellcorr_E:       rmb $0C  ; 12 bytes for dwell battery correction (% x 10)
FF0B0C 0F4B0C                         tempTable1_E:      rmb $14  ; 20 bytes for table common temperature values (degrees C or F x 10)
FF0B20 0F4B20                         tempTable2_E:      rmb $14  ; 20 bytes for table common temperature values (degrees C or F x 10)
FF0B34 0F4B34                         matCorrTemps2_E:   rmb $12  ; 18 bytes for MAT correction temperature (degrees C or F x 10)
FF0B46 0F4B46                         matCorrDelta2_E:   rmb $12  ; 18 bytes for MAT correction (% x 10)
FF0B58 0F4B58                         primePWTable_E:    rmb $14  ; 20 bytes for priming pulse width (msec x 10)
FF0B6C 0F4B6C                         crankPctTable_E:   rmb $14  ; 20 bytes for cranking pulsewidth adder (% x 10 of reqFuel)
FF0B80 0F4B80                         asePctTable_E:     rmb $14  ; 20 bytes for after start enrichment adder (% x 10)
FF0B94 0F4B94                         aseRevTable_E:     rmb $14  ; 20 bytes for after start enrichment time (engine revolutions)
FF0BA8 0F4BA8                         wueBins_E:         rmb $14  ; 20 bytes for after warm up enrichment adder (% x 10)
FF0BBC 0F4BBC                         TOEbins_E:         rmb $08  ; 8 bytes for TPS acceleration adder (%)
FF0BC4 0F4BC4                         TOErates_E:        rmb $08  ; 8 bytes for TPS acceleration rate (%/Sec x 10)
FF0BCC 0F4BCC                         DdBndBase_E:       rmb $02  ; 2 bytes for injector deadband at 13.2V (mSec * 100)
FF0BCE 0F4BCE                         DdBndCor_E:        rmb $02  ; 2 bytes for injector deadband voltage correction (mSec/V x 100)
FF0BD0 0F4BD0                         tpsThresh_E:       rmb $02  ; 2 bytes for Throttle Opening Enrichment threshold (TpsPctx10/100mS)
FF0BD2 0F4BD2                         TOEtime_E:         rmb $02  ; 2 bytes for Throttle Opening Enrich time in 100mS increments(mSx10)
FF0BD4 0F4BD4                         ColdAdd_E:         rmb $02  ; 2 bytes for Throttle Opening Enrichment cold temperature adder at -40F (%)
FF0BD6 0F4BD6                         ColdMul_E:         rmb $02  ; 2 bytes for Throttle Opening Enrichment multiplyer at -40F (%)
FF0BD8 0F4BD8                         InjDelDegx10_E:    rmb $02  ; 2 bytes for Injection delay from trigger to start of injection (deg x 10)
FF0BDA 0F4BDA                         OFCtps_E:          rmb $02  ; 2 bytes for Overrun Fuel Cut min TpS%x10
FF0BDC 0F4BDC                         OFCrpm_E:          rmb $02  ; 2 bytes for Overrun Fuel Cut min RPM
FF0BDE 0F4BDE                         OFCmap_E:          rmb $02  ; 2 bytes for Overrun Fuel Cut maximum manifold pressure permissive (KPAx10)
FF0BE0 0F4BE0                         OFCdel_E:          rmb $02  ; 2 bytes for Overrun Fuel Cut delay time (Sec x 10)
FF0BE2 0F4BE2                         crankingRPM_E:     rmb $02  ; 2 bytes for crank/run transition (RPM)
FF0BE4 0F4BE4                         floodClear_E:      rmb $02  ; 2 bytes for TPS position for flood clear (% x 10)
FF0BE6 0F4BE6                         Stallcnt_E:        rmb $02  ; 2 bytes for no crank or stall condition counter (1mS increments)
FF0BE8 0F4BE8                         tpsMin_E:          rmb $02  ; 2 bytes for TPS calibration closed throttle ADC
FF0BEA 0F4BEA                         tpsMax_E:          rmb $02  ; 2 bytes for TPS calibration wide open throttle ADC(
FF0BEC 0F4BEC                         reqFuel_E:         rmb $02  ; 2 bytes for Pulse width for 14.7 AFR @ 100% VE (mS x 10)
FF0BEE 0F4BEE                         enginesize_E:      rmb $02  ; 2 bytes for displacement of two engine cylinders (for TS reqFuel calcs only)(cc)
FF0BF0 0F4BF0                         InjPrFlo_E:        rmb $02  ; 2 bytes for Pair of injectors flow rate (L/hr x 100)
FF0BF2 0F4BF2                         staged_pri_size_E: rmb $01  ; 1 byte for flow rate of 1 injector (for TS reqFuel calcs only)(cc)
FF0BF3 0F4BF3                         alternate_E:       rmb $01  ; 1 byte for injector staging bit field (for TS reqFuel calcs only)
FF0BF4 0F4BF4                         nCylinders_E:      rmb $01  ; 1 byte for number of engine cylinders bit field (for TS reqFuel calcs only)
FF0BF5 0F4BF5                         nInjectors_E:      rmb $01  ; 1 byte for number of injectors bit field (for TS reqFuel calcs only)
FF0BF6 0F4BF6                         divider_E:         rmb $01  ; 1 byte for squirts per cycle bit field (for TS reqFuel calcs only)
                                      ;*****************************************************************************************
                                      ; - Page 2 ST table, ranges and other configurable constants
                                      ;  (Copied from EE Emulation D-Flash to Buffer RAM on start up,
                                      ;  all pages 1024 bytes)
                                      ;*****************************************************************************************
FE0800 0F4800                                      ORG   BUF_RAM_P2_START ; $FE0800 (Buffer Ram page 2 pointer)
                                                                          ;(actual address 13F800)
FE0800 0F4800                         stBins_E:     rmb $288 ; 648 bytes for ST Table
FE0A88 0F4A88                         strpmBins_E:  rmb $24  ; 36 bytes for ST Table RPM Bins
FE0AAC 0F4AAC                         stmapBins_E:  rmb $24  ; 36 bytes for ST Table MAP Bins
FE0AD0 0F4AD0                         heton_E:      rmb $02  ; 2 bytes for High engine temperature alarm on set point (degF*10)
FE0AD2 0F4AD2                         hetoff_E:     rmb $02  ; 2 bytes for High engine temperature alarm off set point (degF*10)
FE0AD4 0F4AD4                         hoton_E:      rmb $02  ; 2 bytes for High oil temperature alarm on set point (degF*10)
FE0AD6 0F4AD6                         hotoff_E:     rmb $02  ; 2 bytes for High oil temperature alarm off set point (degF*10)
FE0AD8 0F4AD8                         hfton_E:      rmb $02  ; 2 bytes for High fuel temperature alarm on set point (degF*10)
FE0ADA 0F4ADA                         hftoff_E:     rmb $02  ; 2 bytes for High fuel temperature alarm off set point (degF*10)
FE0ADC 0F4ADC                         hegton_E:     rmb $02  ; 2 bytes for High exhaust gas temperature alarm on set point (degF*10)
FE0ADE 0F4ADE                         hegtoff_E:    rmb $02  ; 2 bytes for High exhaust gas temperature alarm off set point (degF*10)
FE0AE0 0F4AE0                         lopon_E:      rmb $02  ; 2 bytes for Low engine oil pressure alarm on set point (psi*10)
FE0AE2 0F4AE2                         lopoff_E:     rmb $02  ; 2 bytes for Low oil engine pressure alarm off set point (psi*10)
FE0AE4 0F4AE4                         hfpon_E:      rmb $02  ; 2 bytes for High fuel pressure alarm on set point (psi*10)
FE0AE6 0F4AE6                         hfpoff_E:     rmb $02  ; 2 bytes for High fuel pressure alarm off set point (psi*10)
FE0AE8 0F4AE8                         lfpon_E:      rmb $02  ; 2 bytes for Low fuel pressure alarm on set point (psi*10)
FE0AEA 0F4AEA                         lfpoff_E:     rmb $02  ; 2 bytes for Low fuel pressure alarm off set point (psi*10)
                                       ;*****************************************************************************************
                                      ; - Page 3 AFR table, ranges and other configurable constants
                                      ;  (Copied from EE Emulation D-Flash to Buffer RAM on start up,
                                      ;  all pages 1024 bytes)
                                      ;*****************************************************************************************
FD0800 0F4800                                      ORG   BUF_RAM_P3_START ; $FD0800 (Buffer Ram page 3 pointer)
                                                                          ;(actual address 13F400)
FD0800 0F4800                         afrBins_E:    rmb $288 ; 648 bytes for AFR Table (0)
FD0A88 0F4A88                         afrrpmBins_E: rmb $24  ; 36 bytes for AFR Table RPM Bins (648)
FD0AAC 0F4AAC                         afrmapBins_E: rmb $24  ; 36 bytes for AFR Table MAP Bins (684)
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001002 0FD002                                     ORG     EEEM_VARS_START, EEEM_VARS_START_LIN
001002 0FD002 -> $FD002               EEEM_VARS_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; --------------------------- No variables for the module --------------------------------
001002 0FD002 -> $1002                EEEM_VARS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001002 0FD002 -> $FD002               EEEM_VARS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                                               ; of Flash Status Register is set
                                                               ;(Flash command has completed)
                                      ; - Step (5) optional!: Check for errors -
                                      ; - Error conditions: -
                                      ; "Load Data Field" command active (is not going to happen)
                                      ; D-flash not partitioned for EEE operation
                                      ; (could be checked once in your init sequence)
                                      ;    brset      FSTAT, #ACCERR, \1 ; If Flash Access Error flag is set,
                                                                     ; branch to address of error handler
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
0057D1 7F57D1                                                 ORG     EEEM_CODE_START, EEEM_CODE_START_LIN
0057D1 7F57D1 -> $7F57D1              EEEM_CODE_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ---------------------------- No code for this module -----------------------------------
0057D1 7F57D1 -> $57D1                EEEM_CODE_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
0057D1 7F57D1 -> $7F57D1              EEEM_CODE_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C0C 7F6C0C                                                 ORG     EEEM_TABS_START, EEEM_TABS_START_LIN
006C0C 7F6C0C -> $7F6C0C              EEEM_TABS_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ---------------------------- No tables for this module ---------------------------------
006C0C 7F6C0C -> $6C0C                EEEM_TABS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C0C 7F6C0C -> $7F6C0C              EEEM_TABS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (clock_BPEM488.s                                                           *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module does S12XEP100 PLL,clock related features and RTI initialization       *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features (This module)       *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 25 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C0C 7F6C0C S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001002 0FD002                                     ORG     CLOCK_VARS_START, CLOCK_VARS_START_LIN
001002 0FD002 -> $FD002               CLOCK_VARS_START_LIN    EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ----------------------------- No variables for this module ----------------------------
001002 0FD002 -> $1002                CLOCK_VARS_END          EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001002 0FD002 -> $FD002               CLOCK_VARS_END_LIN      EQU     @     ; @ Represents the current value of the linear
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
0057D1 7F57D1                                                 ORG     CLOCK_CODE_START, CLOCK_CODE_START_LIN
0057D1 7F57D1 -> $7F57D1              CLOCK_CODE_START_LIN    EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No code for this module -------------------------------
0057D1 7F57D1 -> $57D1                CLOCK_CODE_END          EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
0057D1 7F57D1 -> $7F57D1              CLOCK_CODE_END_LIN      EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C0C 7F6C0C                                                 ORG     CLOCK_TABS_START, CLOCK_TABS_START_LIN
006C0C 7F6C0C -> $7F6C0C              CLOCK_TABS_START_LIN    EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006C0C 7F6C0C -> $6C0C                CLOCK_TABS_END          EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C0C 7F6C0C -> $7F6C0C              CLOCK_TABS_END_LIN      EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (rti_BPEM488.s)                                                            *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM Engine Controller by Robert Hiebert.                         *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teachoing   *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    Real Time Interrupt time rate generator handler                                    *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler (This module)*
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 18 2020                                                                        *
                                      ;*    - BPEM version begins (work in progress)                                           *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C0C 7F6C0C S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001002 0FD002                                                 ORG     RTI_VARS_START, RTI_VARS_START_LIN
001002 0FD002 -> $FD002               RTI_VARS_START_LIN      EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - RS232 Real Time variables ordered list for Tuner Studio  (declared in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;SecH:       ds 1 ; RTI seconds count Hi byte
                                      ;SecL:       ds 1 ; RTI seconds count Lo byte
                                      ;RPM:        ds 2 ; Crankshaft Revolutions Per Minute
                                      ;TpsPctx10:  ds 2 ; Throttle Position Sensor % of travel(%x10)(update every 100mSec)
                                      ;FDsec:      ds 2 ; Fuel delivery pulse width total over 1 second (mS)
                                      ;CASprd512:  ds 2 ; Crankshaft Angle Sensor period (5.12uS time base
                                      ;CASprd256:  ds 2 ; Crankshaft Angle Sensor period (2.56uS time base
                                      ;LoopTime:   ds 2 ; Program main loop time (loops/Sec)
                                      ;engine:     ds 1 ; Engine status bit field
                                      ;engine2:    ds 1  ; Engine2 status bit field
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - "engine" equates
                                      ;*****************************************************************************************
                                      ;OFCdelon     equ  $01 ; %00000001, bit 0, 0 = OFC timer not counting down(Grn),
                                                                              ; 1 = OFC timer counting down(Red)
                                      ;crank        equ  $02 ; %00000010, bit 1, 0 = engine not cranking(Grn),
                                                                              ; 1 = engine cranking(Red)
                                      ;run          equ  $04 ; %00000100, bit 2, 0 = engine not running(Red),
                                                                              ; 1 = engine running(Grn)
                                      ;ASEon        equ  $08 ; %00001000, bit 3, 0 = not in start/warmup(Grn),
                                                                              ; 1 = in start/warmup(Red)
                                      ;WUEon        equ  $10 ; %00010000, bit 4, 0 = not in warmup(Grn),
                                                                              ; 1 = in warmup(Red)
                                      ;TOEon        equ  $20 ; %00100000, bit 5, 0 = not in TOE mode(Grn),
                                                                              ; 1 = TOE mode(Red)
                                      ;OFCon        equ  $40 ; %01000000, bit 6, 0 = not in OFC mode(Grn),
                                                                              ; 1 = in OFC mode(Red)
                                      ;FldClr       equ $80  ; %10000000, bit 7, 0 = not in flood clear mode(Grn),
                                                                              ; 1 = Flood clear mode(Red)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; "engine2" equates
                                      ;*****************************************************************************************
                                      ;base512        equ $01 ; %00000001, bit 0, 0 = 5.12uS time base off(White),
                                                                               ; 1 = 5.12uS time base on(Grn)
                                      ;base256        equ $02 ; %00000010, bit 1, 0 = 2.56uS time base off(White),
                                                                               ; 1 = 2.56uS time base on(Grn)
                                      ;eng2Bit2       equ $04 ; %00000100, bit 2, 0 = , 1 =
                                      ;eng2Bit3       equ $08 ; %00001000, bit 3, 0 = , 1 =
                                      ;eng2Bit4       equ $10 ; %00010000, bit 4, 0 = , 1 =
                                      ;eng2Bit5       equ $20 ; %00100000, bit 5, 0 = , 1 =
                                      ;eng2Bit6       equ $40 ; %01000000, bit 6, 0 = , 1 =
                                      ;eng2Bit7       equ $80 ; %10000000, bit 7, 0 = , 1 =
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Non RS232 Real Time variables (declared in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;LoopCntr:   ds 2 ; Counter for "LoopTime" (incremented every Main Loop pass)
                                      ;*****************************************************************************************
                                      ; - Non RS232 Real Time variables (declared in injcalcs_BPEM488.s)
                                      ;*****************************************************************************************
                                      ;AIOTcnt:       ds 1 ; Counter for AIOT totalizer pulse width
                                      ;OFCdel         ds 1 ; Overrun Fuel Cut delay duration (decremented every 100 mS)
                                      ;TOEtim:        ds 1 ; Throttle Opening Enrichment duration (decremented every 100 mS)
                                      ;TpsPctx10last: ds 2 ; Throttle Position Sensor percent last (%x10)(updated every 100Msec)
                                      ;FDt:           ds 2 ; Fuel Delivery pulse width total(mS) (for FDsec calcs)
                                      ;*****************************************************************************************
                                      ; - Non RS232 Real Time variables (declared in state_BPEM488.s)
                                      ;*****************************************************************************************
                                      ;Stallcnt:     ds 2 ; No crank or stall condition counter
                                      ;State:        ds 1  ; Cam-Crank state machine current state
                                      ;StateStatus:  ds 1  ; State status bit field
                                      ;ICflgs:       ds 1  ; Input Capture flags bit field
                                      ;*****************************************************************************************
                                      ; - "StateStatus" equates
                                      ;*****************************************************************************************
                                      ;Synch            equ    $01  ; %00000001, bit 0,
                                                                   ; 0 = crank position not synchronized(Red),
                                                                                               ; 1 = crank position synchronized(Grn)
                                      ;SynchLost        equ    $02  ; %00000010, bit 1, 0 = synch not lost(Grn),
                                                                   ; 1 = synch lost(Red)
                                      ;StateNew         equ    $04  ; %00000100, bit 2, 0 = no new State value,
                                                                   ; 1 = New State value
                                      ;StateStatus3     equ    $08  ; %00001000, bit 3,
                                      ;StateStatus4     equ    $10  ; %00010000, bit 4
                                      ;StateStatus5     equ    $20  ; %00100000, bit 5
                                      ;StateStatus6     equ    $40  ; %01000000, bit 6
                                      ;StateStatus7     equ    $80  ; %10000000, bit 7
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - "ICflgs" equates
                                      ;*****************************************************************************************
                                      ;RPMcalc:    equ $01   ; %00000001 (Bit 0) (Do RPM calculations flag)
                                      ;KpHcalc:    equ $02   ; %00000010 (Bit 1) (Do VSS calculations flag)
                                      ;Ch7_2nd:    equ $04   ; %00000100 (Bit 2) (Ch7 2nd edge flag)
                                      ;Ch6alt:     equ $08   ; %00001000 (Bit 3) (Ch6 alt flag)
                                      ;Ch7_3d:     equ $10   ; %00010000 (Bit 4) (Ch7 3d edge flag)
                                      ;RevMarker:  equ $20   ; %00100000 (Bit 5) (Crank revolution marker flag)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Real Time Interrupt variables - (declared in this module)
                                      ;*****************************************************************************************
001002 0FD002                         uSx125:     ds 1 ; 125 microsecond counter
001003 0FD003                         mS:         ds 1 ; 1 millisecond counter
001004 0FD004                         mSx250:     ds 1 ; 250 millisecond counter
001005 0FD005                         clock:      ds 1 ; Time rate flag marker bit field
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - "clock" equates
                                      ;*****************************************************************************************
001006 0FD006 -> $0010                ms1000:     equ $10   ; %00010000 (Bit 4) (seconds marker)
001006 0FD006 -> $0008                ms500:      equ $08   ; %00001000 (Bit 3) (500mS marker)
001006 0FD006 -> $0004                ms250:      equ $04   ; %00000100 (Bit 2) (250mS marker)
001006 0FD006 -> $0002                ms100:      equ $02   ; %00000010 (Bit 1) (100mS marker)
001006 0FD006 -> $0001                ms1:        equ $01   ; %00000001 (Bit 0) (1mS marker)
001006 0FD006 -> $1006                RTI_VARS_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001006 0FD006 -> $FD006               RTI_VARS_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
0057D1 7F57D1                                                 ORG     RTI_CODE_START, RTI_CODE_START_LIN
                                      ;*****************************************************************************************
                                      ; - RTI_ISR Interrupt Service Routine (125 uS clock tick)
                                      ; - Generate time rates:
                                      ;   125 Microseconds
                                      ;   1 Millisecond
                                      ;   100 Milliseconds
                                      ;   250 Millisecnds
                                      ;   500 Milliseconds
                                      ;   Seconds
                                      ;*****************************************************************************************
0057D1 7F57D1                         RTI_ISR:
                                      ;*****************************************************************************************
                                      ; ------------------------------ 125 Microsecond section ---------------------------------
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Increment 125 microsecond counter and check to see if it's time to do the
                                      ; Millisecond section
                                      ;*****************************************************************************************
0057D1 7F57D1                         Inc125uS:
0057D1 7F57D1 72 10 02                    inc  uSx125        ; Increment 125 Microsecond counter
0057D4 7F57D4 B6 10 02                    ldaa uSx125        ; Load accu A with value in 125 uS counter
0057D7 7F57D7 81 08                       cmpa #$08          ; Compare it with decimal 8
0057D9 7F57D9 26 50                       bne  RTI_ISR_DONE  ; If not equal, branch to RTI_ISR_DONE:
                                      ;*****************************************************************************************
                                      ; --------------------------------- Millisecond section ----------------------------------
                                      ;*****************************************************************************************
0057DB 7F57DB                         DomS:
0057DB 7F57DB 1C 10 05 01                 bset clock,ms1     ; Set "ms1" bit of "clock"
                                      ;*****************************************************************************************
                                      ; - Clear the 125 microsecond counter. Increment millisecond counter and check to see
                                      ;   if it's time to do the 100 Millisecond or 250 Millisecond section.
                                      ;*****************************************************************************************
0057DF 7F57DF 79 10 02                    clr  uSx125        ; Clear 125 Microsecond counter
0057E2 7F57E2 72 10 03                    inc  mS            ; Increment Millisecond counter
0057E5 7F57E5 B6 10 03                    ldaa mS            ; Load accu A with value in mS counter
0057E8 7F57E8 81 64                       cmpa #$64          ; Compare it with decimal 100
0057EA 7F57EA 27 06                       beq  Do100mS       ; IF Z bit of CCR is set, branch to Do100mS: (mS=100)
0057EC 7F57EC 81 FA                       cmpa #$FA          ; Compare it with decimal 250
0057EE 7F57EE 27 08                       beq  Do250mS       ; IF Z bit of CCR is set, branch to Do250mS: (mS=250)
0057F0 7F57F0 26 39                       bne  RTI_ISR_DONE  ; If not equal branch to RTI_ISR_DONE:
                                      ;*****************************************************************************************
                                      ; ------------------------------- 100 Millisecond section --------------------------------
                                      ;*****************************************************************************************
0057F2 7F57F2                         Do100mS:
0057F2 7F57F2 1C 10 05 02                bset clock,ms100    ; Set "ms100" bit of "clock" bit field
0057F6 7F57F6 20 33                      bra  RTI_ISR_DONE   ; Branch to RTI_ISR_DONE:
                                      ;*****************************************************************************************
                                      ; ----------------------------- 250 Millisecond section ----------------------------------
                                      ;*****************************************************************************************
0057F8 7F57F8                         Do250mS:
0057F8 7F57F8 1C 10 05 04                 bset clock,ms250   ; Set "ms250" bit of "clock"
                                      ;*****************************************************************************************
                                      ; - Clear the millisecond counter. Increment 250 Millisecond counter  and check to see
                                      ;   if it's time to do the "500mS" section.
                                      ;*****************************************************************************************
0057FC 7F57FC 79 10 03                    clr  mS            ; Clear Millisecond counter
0057FF 7F57FF 72 10 04                    inc  mSx250        ; Increment 250 Millisecond counter
005802 7F5802 B6 10 04                    ldaa mSx250        ; Load accu A with value in 250 mSec counter
005805 7F5805 81 02                       cmpa #$02          ; Compare with decimal 2
005807 7F5807 27 06                       beq  Do500mS       ; If the Z bit of CCR is set, branch to Do500mS:
005809 7F5809 81 04                       cmpa #$04          ; Compare with decimal 4
00580B 7F580B 27 02                       beq  Do500mS       ; If the Z bit of CCR is set,branch to Do500mS:
00580D 7F580D 20 1C                       bra  RTI_ISR_DONE  ; Branch to RTI_ISR_DONE:
                                      ;*****************************************************************************************
                                      ; ----------------------------- 500 Millisecond section ----------------------------------
                                      ;*****************************************************************************************
00580F 7F580F                         Do500mS:
00580F 7F580F 1C 10 05 08                 bset clock,ms500   ; Set "ms500" bit of "clock"
                                      ;*****************************************************************************************
                                      ; - Check to see if it's time to do the "Seconds" section
                                      ;*****************************************************************************************
005813 7F5813 B6 10 04                    ldaa mSx250        ; Load accu A with value in 250 mSec counter
005816 7F5816 81 04                       cmpa #$04          ; Compare with decimal 4
005818 7F5818 27 02                       beq  DoSec         ; If the Z bit of CCR is set, branch to DoSec:
00581A 7F581A 20 0F                       bra  RTI_ISR_DONE  ; Branch to RTI_ISR_DONE:
                                      ;*****************************************************************************************
                                      ; ---------------------------------- Seconds section -------------------------------------
                                      ;*****************************************************************************************
00581C 7F581C                         DoSec:
00581C 7F581C 1C 10 05 10                 bset clock,ms1000     ; Set "ms1000" bit of "clock"
                                      ;*****************************************************************************************
                                      ; - Clear the 250 millisecond counter. Increment "secL". Increment "secH" on roll over
                                      ;*****************************************************************************************
005820 7F5820                         IncSec:
                                      ;*****************************************************************************************
                                      ; - Flash LED2 on board 1 to 28 every second just to show that the timer is working
                                      ;*****************************************************************************************
                                      ;    ldaa  PORTB        ; Load ACC A with value in Port B
                                      ;    eora  #$08         ; Exlusive or with $00001000
                                      ;    staa   PORTB       ; Copy to Port B (toggle Bit3, LED20, board 1 to 28)
                                      ;*****************************************************************************************
005820 7F5820 79 10 04                    clr  mSx250        ; Clear 250 mSec counter
005823 7F5823 72 10 69                    inc  secL          ; Increment "Seconds" Lo byte
005826 7F5826 26 03                       bne  RTI_ISR_DONE  ; If the Z bit of CCR is clear, branch to RTI_ISR_DONE:
005828 7F5828 72 10 68                    inc  secH          ; Increment "Seconds" Hi byte
00582B 7F582B                         RTI_ISR_DONE:
00582B 7F582B 4C 37 80                    bset CRGFLG,RTIF   ; Set "RTIF" bit of "CRGFLG" to clear flag
00582E 7F582E 0B                          rti                ; Return from interrupt
                                      ;*****************************************************************************************
00582F 7F582F -> $582F                RTI_CODE_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
00582F 7F582F -> $7F582F              RTI_CODE_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C0C 7F6C0C                                                 ORG     RTI_TABS_START, RTI_TABS_START_LIN
006C0C 7F6C0C -> $7F6C0C              RTI_TABS_START_LIN      EQU     @ ; @ Represents the current value of the linear
                                                                ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006C0C 7F6C0C -> $6C0C                RTI_TABS_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C0C 7F6C0C -> $7F6C0C              RTI_TABS_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (sci0_BPEM488.s)                                                           *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    Interrupt handler for SCI0, (Communications with Tuner Studio)                     *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications (This module)    *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 25 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C0C 7F6C0C S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001006 0FD006                                     ORG     SCI0_VARS_START, SCI0_VARS_START_LIN
001006 0FD006 -> $FD006               SCI0_VARS_START_LIN     EQU     @ ; @ Represents the current value of the linear
                                                                ; program counter
                                      ;*****************************************************************************************
                                      ; - Serial Communications Interface variables
                                      ;*****************************************************************************************
001006 0FD006                         txgoalMSB:    ds 1 ; SCI number of bytes to send/rcv Hi byte
001007 0FD007                         txgoalLSB:    ds 1 ; SCI number of bytes to send/rcv Lo byte
001008 0FD008                         txcnt:        ds 2 ; SCI count of bytes sent/rcvd
00100A 0FD00A                         rxoffsetMSB:  ds 1 ; SCI offset from start of page Hi byte
00100B 0FD00B                         rxoffsetLSB:  ds 1 ; SCI offset from start of page lo byte
00100C 0FD00C                         rxmode:       ds 1 ; SCI receive mode selector
00100D 0FD00D                         txmode:       ds 1 ; SCI transmit mode selector
00100E 0FD00E                         pageID:       ds 1 ; SCI page identifier
00100F 0FD00F                         txcmnd:       ds 1 ; SCI command character identifier
001010 0FD010                         dataMSB:      ds 1 ; SCI data Most Significant Byte received
001011 0FD011                         dataLSB:      ds 1 ; SCI data Least Significant Byte received
001012 0FD012 -> $1012                SCI0_VARS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001012 0FD012 -> $FD012               SCI0_VARS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                                              ; interrpts disabled. RIE interrupts enabled.IDLE interrupts
                                                              ; disabled. Transmitter disabled, Receiver enabled, Normal
                                                              ; operation, No break characters)
                                                              ; (Transmitter and interrupt get enabled in SCI0_ISR)
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
00582F 7F582F                                                 ORG     SCI0_CODE_START, SCI0_CODE_START_LIN
00582F 7F582F -> $7F582F              SCI0_CODE_START_LIN     EQU     @ ; @ Represents the current value of the linear
                                                                ; program counter
                                      ;*****************************************************************************************
                                      ; ------------------------------ SCI Communication ---------------------------------------
                                      ;*****************************************************************************************
                                      ;
                                      ; Communication is established when the Tuner Studio sends
                                      ; a command character. The particular character sets the mode:
                                      ;
                                      ; "H" = This is the first command that Tuner Studio sends to request the
                                      ;       format of the data. It must receive the signature
                                      ;       'MShift 5.001' because the TS.ini file used with this code was
                                      ;       built from the base Megashift .ini. (QueryCommand)(1st)
                                      ; "C" = This command requests the constants. (pageReadCommand)(2nd)
                                      ;       It is sent after communication with TS has been established and
                                      ;       loads TS with all the the constant pages in RAM. It is also sent
                                      ;       when editing a particular page.
                                      ; "O" = This command requests the real time variables (ochGetCommand)(3d)
                                      ;       It is sent to update the real time variables at a selectable time rate
                                      ; "W" = This command sends an updated constant value from TS to the controller
                                      ;       (pageValueWrite). It is sent when editing configurable constants
                                      ;       one at a time. If editing only one, it is sent after the change
                                      ;       has been made and entered. If editing more than one it is sent
                                      ;       when the next constant to be changed is selected. The number of
                                      ;       bytes is either 1 for a byte value or 2 for a word value
                                      ; "B" = This command jumps to the flash burner routine (burnCommand)
                                      ;       It is sent either after pressing the "Burn" button or closing TS.
                                      ;
                                      ; NOTE! I am not using the burnCommand because I use EEEmulation to store
                                      ;       the configurable constants in buffer RAM.
                                      ;
                                      ; The commands sent to the GPIO(Megashift)are formatted "command\CAN_ID\table_ID"
                                      ;    %2i is the id/table number - 2 bytes
                                      ;    %2o is the table offset - 2 bytes
                                      ;    %2c is the number of bytes to be read/written
                                      ;    %v is the byte to be written
                                      ;
                                      ; Example: from TS comm log
                                      ; Time: 0:33.314: SENT, 7 bytes
                                      ; x72 x01 x07 x00 x38 x00 x08
                                      ; 'r',  can_id=1, table=7 (outpc), offset 38h (56 decimal), send 8 bytes
                                      ;
                                      ; NOTE! I am not using the CAN_ID
                                      ;
                                      ; The settings in the TS .ini file are:
                                      ;   queryCommand        = "H"
                                      ;   signature           = "MShift 5.001"
                                      ;   endianness          = big
                                      ;   nPages              = 3
                                      ;   pageSize            = 1024,            1024,            1024
                                      ;   pageIdentifier      = "\x01\x01",     "\x01\x02",     "\x01\x03"
                                      ;   burnCommand         = "B%2i",         "B%2i",         "B%2i"
                                      ;   pageReadCommand     = "C%2i%2o%2c",   "C%2i%2o%2c",   "C%2i%2o%2c"
                                      ;   pageValueWrite      = "W%2i%2o%2c%v", "W%2i%2o%2c%v", "W%2i%2o%2c%v"
                                      ;   pageChunkWrite      = "W%2i%2o%2c%v", "W%2i%2o%2c%v", "W%2i%2o%2c%v"
                                      ;   ochGetCommand       = "O"
                                      ;   ochBlockSize        = 58 ; This number will change as code expands
                                      ;   pageActivationDelay =  50 ; Milliseconds delay after burn command.
                                      ;   blockReadTimeout    = 200 ; Milliseconds total timeout for reading page.
                                      ;   writeBlocks         = on
                                      ;   interWriteDelay     = 10
                                      ;
                                      ; There are eight variables used in the communications code, "txgoalMSB", "txgoalLSB"
                                      ; "txcnt", "rxoffsetMSB", "rxoffsetLSB, "rxmode", "txmode", "pageID", "txcmnd", "dataMSB"
                                      ; and "dataLSB".
                                      ;
                                      ; "txgoalMSB" is the number of bytes to be sent Hi byte(8 bit)
                                      ; "txgoalLSB" is the number of bytes to be sent Lo byte(8 bit)
                                      ; "rxoffsetMSB" is the offset from start of page to a particuar value Hi byte(8 bit)
                                      ; "rxoffsetLSB" is the offset from start of page to a particuar value Lo byte(8 bit)
                                      ; "txcnt" is the running count of the number of bytes sent (16 bit)
                                      ; "rxmode" is the current receive mode (8 bit)
                                      ; "txmode" is the current transmit mode (8 bit)
                                      ; "pageID" is the page identifier (8 bit)
                                      ; "txcmnd" is the command character ID (8 bit)
                                      ; "dataMSB" is the Most Significant byte value sent from TS when
                                      ;           sending two bytes(8 bit)
                                      ; "dataLSB" is the Most Significant byte value sent from TS when
                                      ;           sending two bytes or a single byte(8 bit)
                                      ;
                                      ;
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - SCI0 Interrupt Service Routine
                                      ;   The interrupts are common to both receive and transmit. First
                                      ;   check the flags to determine which one initiated the interrupt
                                      ;   and branch accordingly.
                                      ;*****************************************************************************************
00582F 7F582F                         SCI0_ISR:
00582F 7F582F 4E CC 20 0A                 brset SCI0SR1,RDRF,RcvSCI    ; If Receive Data Register Full flag is set, branch to
                                                                       ; "RcvSCI:" (receive section)
005833 7F5833 4E CC 80 03                 brset SCI0SR1,TDRE,TxSCI_LB  ; If Transmit Data Register Empty flag is set, branch to
                                                                       ; "TxSCI_trmp:" (transmit section)
005837 7F5837 96 CC                       ldaa  SCI0SR1                ; Read SCI0CR1 to clear flags
005839 7F5839 0B                          rti                          ; Return from interrupt (sanity check)
00583A 7F583A                         TxSCI_LB:
00583A 7F583A 06 5A 99                    job   TxSCI                  ; Jump or branch to TxSCI: (long branch)
                                      ;*****************************************************************************************
                                      ; - Receive section
                                      ;*****************************************************************************************
00583D 7F583D                         RcvSCI:
00583D 7F583D 96 CC                       ldaa  SCI0SR1  ; Load accu A with value in SCI0SR1(Read SCI0SR1 to clear "RDRF" flag)
                                      ;*****************************************************************************************
                                      ; - Check the value of "rxmode" to see if we are in the middle of
                                      ;   receiveing a CAN ID, Page ID, offset, byte count or value.
                                      ;          $01 = Receiving CAN ID
                                      ;          $02 = Receiving Page ID
                                      ;          $03 = Receiving offset msb
                                      ;          $04 = Receiving offset lsb
                                      ;          $05 = Receiving data count msb
                                      ;          $06 = Receiving data count lsb
                                      ;          $07 = Receiving data
                                      ;          $08 = Receiving data lsb
                                      ;
                                      ;*****************************************************************************************
00583F 7F583F B6 10 0C                    ldaa    rxmode       ; Load accumulator with value in "rxmode"
005842 7F5842 81 01                       cmpa    #$01         ; Compare with decimal 1 (receiving CAN ID )
005844 7F5844 27 1F                       beq     RcvCanID     ; If the Z bit of CCR is set, branch to RcvCanID:
005846 7F5846 81 02                       cmpa    #$02         ; Compare with decimal 2 (receiving page ID )
005848 7F5848 27 21                       beq     RcvPageID    ; If the Z bit of CCR is set, branch to RcvPageID:
00584A 7F584A 81 03                       cmpa    #$03         ; Compare with decimal 3 (receiving offset MSB )
00584C 7F584C 27 2F                       beq     RcvOSmsb     ; If the Z bit of CCR is set, branch to RcvOSmsb:
00584E 7F584E 81 04                       cmpa    #$04         ; Compare with decimal 4 (receiving offset LSB )
005850 7F5850 27 34                       beq     RcvOSlsb     ; If the Z bit of CCR is set, branch to RcvOSlsb:
005852 7F5852 81 05                       cmpa    #$05         ; Compare with decimal 5 (receiving byte count MSB )
005854 7F5854 27 39                       beq     RcvCntmsb    ; If the Z bit of CCR is set, branch to RcvCntmsb:
005856 7F5856 81 06                       cmpa    #$06         ; Compare with decimal 6 (receiving byte count LSB )
005858 7F5858 27 3E                       beq     RcvCntlsb    ; If the Z bit of CCR is set, branch to RcvCntlsb:
00585A 7F585A 81 07                       cmpa    #$07         ; Compare with decimal 7 (receiving data byte )
00585C 7F585C 27 4C                       beq     RcvData      ; If the Z bit of CCR is set, branch to RcvData:
00585E 7F585E 81 08                       cmpa    #$08         ; Compare with decimal 7 (receiving data byte )
005860 7F5860 27 5E                       beq     RcvDataLSB   ; If the Z bit of CCR is set, branch to RcvDataLSB:
005862 7F5862 06 59 B1                    jmp     CheckTxCmnd  ; jump to CheckTxCmnd: (rxmode must be 0 or invalid)
005865 7F5865                         RcvCanID:                ; "rxmode" = 1
005865 7F5865 96 CF                       ldaa  SCI0DRL        ; Load Accu A with value in "SCI0DRL"
                                                               ; (CAN ID) not used, so just read it and get
                                                               ; ready for next byte
005867 7F5867 72 10 0C                    inc   rxmode         ; Increment "rxmode"(continue to next mode)
00586A 7F586A 0B                          rti                  ; Return from interrupt
00586B 7F586B                         RcvPageID:               ; "rxmode" = 2
00586B 7F586B 96 CF                       ldaa  SCI0DRL        ; Load Accu A with value in "SCI0DRL"
00586D 7F586D 7A 10 0E                    staa  pageID         ; Copy to "pageID"
005870 7F5870 B6 10 0F                    ldaa  txcmnd         ; Load Accu A with value in "txcmnd"
005873 7F5873 81 03                       cmpa  #$03           ; Compare with decimal 3 ("B")
005875 7F5875 18 27 01 E1                 beq   ModeB2         ; If the Z bit of CCR is set, branch to ModeB2:
005879 7F5879 72 10 0C                    inc   rxmode         ; Increment "rxmode"(continue to next mode)
00587C 7F587C 0B                          rti                  ; Return from interrupt
00587D 7F587D                         RcvOSmsb:                ; "rxmode" = 3
00587D 7F587D 96 CF                       ldaa  SCI0DRL        ; Load Accu A with value in "SCI0DRL" (Offset MSB)
00587F 7F587F 7A 10 0A                    staa  rxoffsetMSB    ; Copy to "rxoffsetMSB"
005882 7F5882 72 10 0C                    inc   rxmode         ; Increment "rxmode"(continue to next mode)
005885 7F5885 0B                          rti                  ; Return from interrupt
005886 7F5886                         RcvOSlsb:                ; "rxmode" = 4
005886 7F5886 96 CF                       ldaa  SCI0DRL        ; Load Accu A with value in "SCI0DRL" (Offset LSB)
005888 7F5888 7A 10 0B                    staa  rxoffsetLSB    ; Copy to "rxoffsetLSB"
00588B 7F588B 72 10 0C                    inc   rxmode         ; Increment "rxmode"(continue to next mode)
00588E 7F588E 0B                          rti                  ; Return from interrupt
00588F 7F588F                         RcvCntmsb:               ; "rxmode" = 5
00588F 7F588F 96 CF                       ldaa  SCI0DRL        ; Load Accu A with value in "SCI0DRL" (Byte count MSB)
005891 7F5891 7A 10 06                    staa  txgoalMSB      ; Copy to "txgoalMSB"
005894 7F5894 72 10 0C                    inc   rxmode         ; Increment "rxmode"(continue to next mode)
005897 7F5897 0B                          rti                  ; Return from interrupt
005898 7F5898                         RcvCntlsb:               ; "rxmode" = 6
005898 7F5898 96 CF                       ldaa  SCI0DRL        ; Load Accu A with value in "SCI0DRL" (Byte count LSB)
00589A 7F589A 7A 10 07                    staa  txgoalLSB      ; Copy to "txgoalLSB"
00589D 7F589D B6 10 0F                    ldaa  txcmnd         ; Load Accu A with value in "txcmnd"
0058A0 7F58A0 81 01                       cmpa  #$01           ; Compare with decimal 1 ("C")
0058A2 7F58A2 18 27 01 36                 beq   ModeC2         ; If the Z bit of CCR is set, branch to ModeC2:
0058A6 7F58A6 72 10 0C                    inc   rxmode         ; Increment "rxmode"(continue to next mode)
0058A9 7F58A9 0B                          rti                  ; Return from interrupt (ready to receive next byte)
0058AA 7F58AA                         RcvData:                 ; "rxmode" = 7
                                      ;*****************************************************************************************
                                      ; - If we are here we must be in "W" mode and receiving either one or
                                      ;   two bytes, depending on the byte count.
                                      ;*****************************************************************************************
0058AA 7F58AA FC 10 06                    ldd  txgoalMSB      ; Load double accumulator with value in
                                                              ; "txgoalMSB:txgoalLSB"
0058AD 7F58AD 8C 00 02                    cpd  #$0002         ; Compare with decimal 2
0058B0 7F58B0 27 05                       beq  RcvDataMSB     ; If equal branch to RcvDataMSB:
0058B2 7F58B2 8C 00 01                    cpd  #$0001         ; Compare with decimal 1
0058B5 7F58B5 27 09                       beq  RcvDataLSB     ; If equal branch to RcvDataLSB:
0058B7 7F58B7                         RcvDataMSB:
                                      ;**********************************************************************
                                      ; - De-Bug LED   FUEL PUMP!!!!                                        *
                                      ;     bset  PORTB, PB0   ; Set bit0, Port B (LED9, board 1 to 28)     *
                                      ;**********************************************************************
0058B7 7F58B7 96 CF                       ldaa  SCI0DRL       ; Load Accu A with value in "SCI0DRL"(data byte)
0058B9 7F58B9 7A 10 10                    staa  dataMSB       ; Copy to "dataMSB"
0058BC 7F58BC 72 10 0C                    inc   rxmode        ; Increment "rxmode"(continue to next mode)
0058BF 7F58BF 0B                          rti                 ; Return from subroutine
0058C0 7F58C0                         RcvDataLSB:             ; "rxmode" = 8
                                      ;**********************************************************************
                                      ; - De-Bug LED                                                        *
                                      ;     bset  PORTB, PB1   ; Set Bit1, Port B (LED23, board 1 to 28)    *
                                      ;**********************************************************************
0058C0 7F58C0 D6 CF                       ldab  SCI0DRL       ; Load Accu B with value in "SCI0DRL"(data byte)
0058C2 7F58C2 7B 10 11                    stab  dataLSB       ; Copy to "dataLSB"
0058C5 7F58C5 B6 10 0E                    ldaa  pageID        ; Load accu A with value in "pageID"
0058C8 7F58C8 81 01                       cmpa  #$01          ; Compare with decimal 1 (send page 1)
0058CA 7F58CA 27 0A                       beq   StorePg1      ; If the Z bit of CCR is set, branch to StorePg1:
0058CC 7F58CC 81 02                       cmpa  #$02          ; Compare with decimal 2 (send page 2)
0058CE 7F58CE 27 4B                       beq   StorePg2      ; If the Z bit of CCR is set, branch to StorePg2:
0058D0 7F58D0 81 03                       cmpa  #$03          ; Compare with decimal 3 (send page 3)
0058D2 7F58D2 18 27 00 86                 beq   StorePg3      ; If the Z bit of CCR is set, branch to StorePg3:
0058D6 7F58D6                         StorePg1:
0058D6 7F58D6 MACRO                         EEEM_ENABLE   ; Enable EEPROM Emulation Macro
                                                                          ; with $0F (FCLK=1MHz)                       (EEEM_ENABLE)
                                      ; - Enable EE Emulation -                                                        (EEEM_ENABLE)
                                      ; args:   1: branch address of error handler (optional)                          (EEEM_ENABLE)
                                      ; result: none                                                                   (EEEM_ENABLE)
                                      ; SSTACK: none                                                                   (EEEM_ENABLE)
                                      ;         X, Y, and D are preserved                                              (EEEM_ENABLE)
                                      ; - Step (1): Set FCCOBIX -                                                      (EEEM_ENABLE)
0058D6 7F58D6 79 01 02                    clr    FCCOBIX    ; Clear Flash CCOB Index Register                          (EEEM_ENABLE)
                                      ; - Step (2): Enter parameters into FCCOB -                                      (EEEM_ENABLE)
0058D9 7F58D9 18 0B 13 01 0A              movb   #$13, FCCOBHI  ; Move %00010011 into Flash Common Command Register    (EEEM_ENABLE)
                                                                ; Hi byte (Flash command enable EEEPROM Emulation)     (EEEM_ENABLE)
                                      ;     movb   #$13, FCCOBLO                                                       (EEEM_ENABLE)
                                      ; - Step (3): Launch command -                                                   (EEEM_ENABLE)
0058DE 7F58DE 18 0B B0 01 06              movb #(CCIF|ACCERR|FPVIOL), FSTAT ; Move $B0 (%10110000) into Flash Status Register (EEEM_ENABLE)
                                                                            ;( Write 1s to Command Complete Interrupt  (EEEM_ENABLE)
                                                                            ; flag, Flash Access Error Flag and Flash  (EEEM_ENABLE)
                                                                            ; Protection Violation Flag to clear flags) (EEEM_ENABLE)
                                      ; - Step (4): Wait until command is executed -                                   (EEEM_ENABLE)
0058E3 7F58E3 1F 01 06 80 FB              brclr       FSTAT, #CCIF, *  ; Loop until Command Complete Interrupt         (EEEM_ENABLE)
0058E8 7F58E8 FC 10 06                    ldd  txgoalMSB      ; Load double accumulator with value in
                                                              ; "txgoalMSB:txgoalLSB"
0058EB 7F58EB 8C 00 02                    cpd  #$0002         ; Compare with decimal 2
0058EE 7F58EE 27 05                       beq  StorePg1Wd     ; If equal branch to StorePg1Wd:
0058F0 7F58F0 8C 00 01                    cpd  #$0001         ; Compare with decimal 1
0058F3 7F58F3 27 13                       beq  StorePg1Bt     ; If equal branch to StorePg1Bt:
0058F5 7F58F5                         StorePg1Wd:
                                      ;**********************************************************************
                                      ; - De-Bug LED                                                        *
                                      ;     bset  PORTB, PB2   ; Set Bit1, Port B (LED4, board 1 to 28)     *
                                      ;**********************************************************************
0058F5 7F58F5 FE 10 0A                    ldx   rxoffsetMSB  ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
0058F8 7F58F8 FC 10 10                    ldd   dataMSB      ; Load double accu D with value in "dataMSB:dataLSB"
0058FB 7F58FB 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
005900 7F5900 6C E2 08 00                 std   veBins_E,x     ; Copy "W" data word to "veBins_E" offset in index register X
005904 7F5904 18 20 00 93                 bra   StoreDone    ; Branch to StoreDone:
005908 7F5908                         StorePg1Bt:
                                      ;**********************************************************************
                                      ; - De-Bug LED                                                        *
                                      ;     bset  PORTB, PB4   ; Set bit0, Port B (LED10, board 1 to 28)    *
                                      ;**********************************************************************
005908 7F5908 FE 10 0A                    ldx   rxoffsetMSB  ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
00590B 7F590B B6 10 11                    ldaa  dataLSB      ; Load accu A with value in "dataLSB"
00590E 7F590E 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
005913 7F5913 6A E2 08 00                 staa  veBins_E,x     ; Copy "W" data byte to "veBins_E" offset in index register X
005917 7F5917 18 20 00 80                 bra   StoreDone    ; Branch to StoreDone:
00591B 7F591B                         StorePg2:
00591B 7F591B MACRO                         EEEM_ENABLE   ; Enable EEPROM Emulation Macro
                                                                          ; with $0F (FCLK=1MHz)                       (EEEM_ENABLE)
                                      ; - Enable EE Emulation -                                                        (EEEM_ENABLE)
                                      ; args:   1: branch address of error handler (optional)                          (EEEM_ENABLE)
                                      ; result: none                                                                   (EEEM_ENABLE)
                                      ; SSTACK: none                                                                   (EEEM_ENABLE)
                                      ;         X, Y, and D are preserved                                              (EEEM_ENABLE)
                                      ; - Step (1): Set FCCOBIX -                                                      (EEEM_ENABLE)
00591B 7F591B 79 01 02                    clr    FCCOBIX    ; Clear Flash CCOB Index Register                          (EEEM_ENABLE)
                                      ; - Step (2): Enter parameters into FCCOB -                                      (EEEM_ENABLE)
00591E 7F591E 18 0B 13 01 0A              movb   #$13, FCCOBHI  ; Move %00010011 into Flash Common Command Register    (EEEM_ENABLE)
                                                                ; Hi byte (Flash command enable EEEPROM Emulation)     (EEEM_ENABLE)
                                      ;     movb   #$13, FCCOBLO                                                       (EEEM_ENABLE)
                                      ; - Step (3): Launch command -                                                   (EEEM_ENABLE)
005923 7F5923 18 0B B0 01 06              movb #(CCIF|ACCERR|FPVIOL), FSTAT ; Move $B0 (%10110000) into Flash Status Register (EEEM_ENABLE)
                                                                            ;( Write 1s to Command Complete Interrupt  (EEEM_ENABLE)
                                                                            ; flag, Flash Access Error Flag and Flash  (EEEM_ENABLE)
                                                                            ; Protection Violation Flag to clear flags) (EEEM_ENABLE)
                                      ; - Step (4): Wait until command is executed -                                   (EEEM_ENABLE)
005928 7F5928 1F 01 06 80 FB              brclr       FSTAT, #CCIF, *  ; Loop until Command Complete Interrupt         (EEEM_ENABLE)
00592D 7F592D FC 10 06                    ldd  txgoalMSB     ; Load double accumulator with value in "txgoalMSB:txgoalLSB"
005930 7F5930 8C 00 02                    cpd  #$0002        ; Compare with decimal 2
005933 7F5933 27 05                       beq  StorePg2Wd    ; If equal branch to StorePg2Wd:
005935 7F5935 8C 00 01                    cpd  #$0001        ; Compare with decimal 1
005938 7F5938 27 11                       beq  StorePg2Bt    ; If equal branch to StorePg2Bt:
00593A 7F593A                         StorePg2Wd:
00593A 7F593A FE 10 0A                    ldx   rxoffsetMSB  ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
00593D 7F593D FC 10 10                    ldd   dataMSB      ; Load double accu D with value in "dataMSB:dataLSB"
005940 7F5940 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE
005945 7F5945 6C E2 08 00                 std   stBins_E,x     ; Copy "W" data word to "stBins_E" offset in index register X
005949 7F5949 20 50                       bra   StoreDone    ; Branch to StoreDone:
00594B 7F594B                         StorePg2Bt:
00594B 7F594B FE 10 0A                    ldx   rxoffsetMSB  ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
00594E 7F594E B6 10 11                    ldaa  dataLSB      ; Load accu A with value in "dataLSB"
005951 7F5951 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE
005956 7F5956 6A E2 08 00                 staa  stBins_E,x     ; Copy "W" data byte to "stBins_E" offset in index register X
00595A 7F595A 20 3F                       bra   StoreDone    ; Branch to StoreDone:
00595C 7F595C                         StorePg3:
00595C 7F595C MACRO                         EEEM_ENABLE   ; Enable EEPROM Emulation Macro
                                                                          ; with $0F (FCLK=1MHz)                       (EEEM_ENABLE)
                                      ; - Enable EE Emulation -                                                        (EEEM_ENABLE)
                                      ; args:   1: branch address of error handler (optional)                          (EEEM_ENABLE)
                                      ; result: none                                                                   (EEEM_ENABLE)
                                      ; SSTACK: none                                                                   (EEEM_ENABLE)
                                      ;         X, Y, and D are preserved                                              (EEEM_ENABLE)
                                      ; - Step (1): Set FCCOBIX -                                                      (EEEM_ENABLE)
00595C 7F595C 79 01 02                    clr    FCCOBIX    ; Clear Flash CCOB Index Register                          (EEEM_ENABLE)
                                      ; - Step (2): Enter parameters into FCCOB -                                      (EEEM_ENABLE)
00595F 7F595F 18 0B 13 01 0A              movb   #$13, FCCOBHI  ; Move %00010011 into Flash Common Command Register    (EEEM_ENABLE)
                                                                ; Hi byte (Flash command enable EEEPROM Emulation)     (EEEM_ENABLE)
                                      ;     movb   #$13, FCCOBLO                                                       (EEEM_ENABLE)
                                      ; - Step (3): Launch command -                                                   (EEEM_ENABLE)
005964 7F5964 18 0B B0 01 06              movb #(CCIF|ACCERR|FPVIOL), FSTAT ; Move $B0 (%10110000) into Flash Status Register (EEEM_ENABLE)
                                                                            ;( Write 1s to Command Complete Interrupt  (EEEM_ENABLE)
                                                                            ; flag, Flash Access Error Flag and Flash  (EEEM_ENABLE)
                                                                            ; Protection Violation Flag to clear flags) (EEEM_ENABLE)
                                      ; - Step (4): Wait until command is executed -                                   (EEEM_ENABLE)
005969 7F5969 1F 01 06 80 FB              brclr       FSTAT, #CCIF, *  ; Loop until Command Complete Interrupt         (EEEM_ENABLE)
00596E 7F596E FC 10 06                    ldd  txgoalMSB     ; Load double accumulator with value in "txgoalMSB:txgoalLSB"
005971 7F5971 8C 00 02                    cpd  #$0002        ; Compare with decimal 2
005974 7F5974 27 05                       beq  StorePg3Wd    ; If equal branch to StorePg3Wd:
005976 7F5976 8C 00 01                    cpd  #$0001        ; Compare with decimal 1
005979 7F5979 27 11                       beq  StorePg3Bt    ; If equal branch to StorePg3Bt:
00597B 7F597B                         StorePg3Wd:
00597B 7F597B FE 10 0A                    ldx   rxoffsetMSB  ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
00597E 7F597E FC 10 10                    ldd   dataMSB      ; Load double accu D with value in "dataMSB:dataLSB"
005981 7F5981 18 0B FD 00 17              movb  #(BUF_RAM_P3_START>>16),EPAGE  ; Move $FD into EPAGE
005986 7F5986 6C E2 08 00                 std   afrBins_E,x    ; Copy "W" data word to "afrBins_E" offset in index register X
00598A 7F598A 20 0F                       bra   StoreDone    ; Branch to StoreDone:
00598C 7F598C                         StorePg3Bt:
00598C 7F598C FE 10 0A                    ldx   rxoffsetMSB  ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
00598F 7F598F B6 10 11                    ldaa  dataLSB      ; Load accu A with value in "dataLSB"
005992 7F5992 18 0B FD 00 17              movb  #(BUF_RAM_P3_START>>16),EPAGE  ; Move $FD into EPAGE
005997 7F5997 6A E2 08 00                 staa  afrBins_E,x    ; Copy "W" data byte to "afrBins_E" offset in index register X
00599B 7F599B                         StoreDone:
00599B 7F599B 79 10 0C                    clr   rxmode       ; Clear "rxmode"
00599E 7F599E 79 10 0F                    clr   txcmnd       ; Clear "txcmnd"
0059A1 7F59A1 79 10 0E                    clr   pageID       ; Clear "pageID"
0059A4 7F59A4 18 79 10 10                 clrw  dataMSB      ; Clear "dataMSB:dataLSB"
0059A8 7F59A8 18 79 10 0A                 clrw  rxoffsetMSB  ; Clear "rxoffsetMSB:rxoffsetLSB"
0059AC 7F59AC 18 79 10 06                 clrw  txgoalMSB    ; Clear "txgoalMSB:txgoalLSB"
0059B0 7F59B0 0B                          rti                ; Return from interrupt
                                      ;*****************************************************************************************
                                      ; - "txcmnd" is the command character identifier
                                      ;    $01 = "C"
                                      ;    $02 = "W"
                                      ;    $03 = "B"
                                      ;*****************************************************************************************
0059B1 7F59B1                         CheckTxCmnd:
0059B1 7F59B1 96 CF                       ldaa  SCI0DRL    ; Load accu A with value in SCI0DRL(get the command byte)
0059B3 7F59B3 81 48                       cmpa  #$48       ; Compare with ASCII "H"
0059B5 7F59B5 18 27 00 AB                 beq   ModeH      ; If equal branch to "ModeH:"(QueryCommand)
0059B9 7F59B9 81 4F                       cmpa  #$4F       ; Compare with ASCII "O"
0059BB 7F59BB 18 27 00 BD                 beq   ModeO      ; If equal branch to "ModeO:"(ochGetCommand)
0059BF 7F59BF 81 43                       cmpa  #$43       ; Compare with ASCII "C"
0059C1 7F59C1 27 0E                       beq   ModeC1     ; If equal branch to "ModeC1:"(pageReadCommand)
0059C3 7F59C3 81 57                       cmpa  #$57       ; Compare it with decimal 87 = ASCII "W"
0059C5 7F59C5 27 7D                       beq   ModeW1     ; If the Z bit of CCR is set, branch to Mode_W1:
                                                           ;(receive new VE or constant byte value and store in offset location)
                                                           ;(pageValueWrite or pageChunkWrite)
0059C7 7F59C7 81 42                       cmpa  #$42       ; Compare it with decimal 66 = ASCII "B"
0059C9 7F59C9 18 27 00 82                 beq   ModeB1     ; If the Z bit of CCR is set, branch to ModeB1:(jump to flash burner
                                                           ; routine and burn VE, ST, AFR/constant values in RAM into flash)
0059CD 7F59CD 18 20 00 C7                 bra   RcvSCIDone ; Branch to "RcvSCIDone:"
0059D1 7F59D1                         ModeC1:
                                      ;**********************************************************************
                                      ; - De-Bug LED                                                        *
                                      ;     bset  PORTK, PK1   ; Set Bit1, Port K (LED6, board 1 to 28)     *
                                      ;**********************************************************************
                                      ;*****************************************************************************************
                                      ; - Load "rxmode" and "txcmnd" with appropriate values to get ready
                                      ;   to receive additional command information
                                      ;*****************************************************************************************
0059D1 7F59D1 18 0B 01 10 0C              movb  #$01,rxmode   ; Load "rxmode" with "Receiving CAN ID mode"
0059D6 7F59D6 18 0B 01 10 0F              movb  #$01,txcmnd   ; Load "txcmnd" with "Command character "C" ID"
0059DB 7F59DB 0B                          rti                 ; Return from interrupt
0059DC 7F59DC                         ModeC2:
0059DC 7F59DC 79 10 0C                    clr   rxmode        ; Clear "rxmode"
0059DF 7F59DF 79 10 0F                    clr   txcmnd        ; Clear "txcmnd"
0059E2 7F59E2 B6 10 0E                    ldaa  pageID        ; Load accu A with value in "pageID"
0059E5 7F59E5 81 01                       cmpa  #$01          ; Compare with decimal 1 (send page 1)
0059E7 7F59E7 27 08                       beq   StartPg1      ; If the Z bit of CCR is set, branch to StartPg1:
0059E9 7F59E9 81 02                       cmpa  #$02          ; Compare with decimal 2 (send page 2)
0059EB 7F59EB 27 21                       beq   StartPg2      ; If the Z bit of CCR is set, branch to StartPg2:
0059ED 7F59ED 81 03                       cmpa  #$03          ; Compare with decimal 3 (send page 3)
0059EF 7F59EF 27 38                       beq   StartPg3      ; If the Z bit of CCR is set, branch to StartPg3:
0059F1 7F59F1                         StartPg1:
0059F1 7F59F1 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
0059F6 7F59F6 FE 10 0A                    ldx   rxoffsetMSB   ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
                                                              ;(Page 1 offset)
0059F9 7F59F9 A6 E2 08 00                 ldaa  veBins_E,X      ; Load Accu "A" with value in "veBins, offset in "rxoffsetMSB:rxoffsetLSB"
                                      ;*    ldaa  veBins        ; Load accu A with first value at "veBins_E"
0059FD 7F59FD 5A CF                       staa  SCI0DRL       ; Copy to SCI0DRL (first byte to send)
0059FF 7F59FF 18 03 00 00 10 08           movw  #$0000,txcnt  ; Clear "txcnt"
005A05 7F5A05 18 0B 03 10 0D              movb  #$03,txmode   ; Load "txmode" with decimal 3
005A0A 7F5A0A 18 20 00 84                 bra   DoTx          ; Branch to "DoTx:" (start transmission)
005A0E 7F5A0E                         StartPg2:
005A0E 7F5A0E 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE
005A13 7F5A13 FE 10 0A                    ldx   rxoffsetMSB   ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
                                                              ;(Page 2 offset)
005A16 7F5A16 A6 E2 08 00                 ldaa  stBins_E,X      ; Load Accu "A" with value in "stBins_E, offset in "rxoffsetMSB:rxoffsetLSB"
                                      ;*    ldaa  stBins        ; Load accu A with first value at "stBins"
005A1A 7F5A1A 5A CF                       staa  SCI0DRL       ; Copy to SCI0DRL (first byte to send)
005A1C 7F5A1C 18 03 00 00 10 08           movw  #$0000,txcnt  ; Clear "txcnt"
005A22 7F5A22 18 0B 04 10 0D              movb  #$04,txmode   ; Load "txmode" with decimal 4
005A27 7F5A27 20 69                       bra   DoTx          ; Branch to "DoTx:" (start transmission)
005A29 7F5A29                         StartPg3:
005A29 7F5A29 18 0B FD 00 17              movb  #(BUF_RAM_P3_START>>16),EPAGE  ; Move $FD into EPAGE
005A2E 7F5A2E FE 10 0A                    ldx   rxoffsetMSB   ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
                                                              ;(Page 3 offset)
005A31 7F5A31 A6 E2 08 00                 ldaa  afrBins_E,X     ; Load Accu "A" with value in "afrBins_E, offset in "rxoffsetMSB:rxoffsetLSB"
                                      ;*    ldaa  afrBins       ; Load accu A with first value at "afrBins"
005A35 7F5A35 5A CF                       staa  SCI0DRL       ; Copy to SCI0DRL (first byte to send)
005A37 7F5A37 18 03 00 00 10 08           movw  #$0000,txcnt  ; Clear "txcnt"
005A3D 7F5A3D 18 0B 05 10 0D              movb  #$05,txmode   ; Load "txmode" with decimal 5
005A42 7F5A42 20 4E                       bra   DoTx          ; Branch to "DoTx:" (start transmission)
005A44 7F5A44                         ModeW1:
                                      ;**********************************************************************
                                      ; - De-Bug LED                                                        *
                                      ;     bset  PORTK, PK5   ; Set Bit5, Port K (LED3, board 1 to 28)     *
                                      ;**********************************************************************
                                      ;*****************************************************************************************
                                      ; - Load "rxmode" and "txcmnd" with appropriate values to get ready
                                      ;   to receive additional command information
                                      ;*****************************************************************************************
005A44 7F5A44 18 0B 01 10 0C              movb  #$01,rxmode   ; Load "rxmode" with "Receiving CAN ID mode"
005A49 7F5A49 18 0B 02 10 0F              movb  #$02,txcmnd   ; Load "txcmnd" with "Command character "W" ID"
005A4E 7F5A4E 0B                          rti                 ; Return from interrupt
005A4F 7F5A4F                         ModeB1:
                                      ;**********************************************************************
                                      ; - De-Bug LED                                                        *
                                      ;     bset PORTK, PK4    ; Set bit4 Port K (LED19, board 1 to 28)     *
                                      ;**********************************************************************
                                      ;*****************************************************************************************
                                      ; - Load "rxmode" and "txcmnd" with appropriate values to get ready
                                      ;   to receive additional command information
                                      ;*****************************************************************************************
005A4F 7F5A4F 18 0B 01 10 0C              movb  #$01,rxmode   ; Load "rxmode" with "Receiving CAN ID mode"
005A54 7F5A54 18 0B 03 10 0F              movb  #$03,txcmnd   ; Load "txcmnd" with "Command character "B" ID"
005A59 7F5A59 0B                          rti                 ; Return from interrupt
005A5A 7F5A5A                         ModeB2
005A5A 7F5A5A 79 10 0E                    clr   pageID        ; Clear "pageID"
005A5D 7F5A5D 79 10 0C                    clr   rxmode        ; Clear "rxmode"
005A60 7F5A60 79 10 0F                    clr   txcmnd        ; Clear "txcmnd"
                                      ; No code for this yet
005A63 7F5A63 0B                          rti                 ; Return from interrupt
005A64 7F5A64                         ModeH:
                                      ;**********************************************************************
                                      ; - De-Bug LED
                                      ;**********************************************************************
                                      ;      bset  PORTK, PK3   ; Set Bit3 (LED2, board 1 to 28)            *
                                      ;**********************************************************************
005A64 7F5A64 B6 6C 0C                    ldaa  Signature        ; Load accu A with value at "Signature"
005A67 7F5A67 5A CF                       staa  SCI0DRL          ; Copy to SCI0DRL (first byte to send)
005A69 7F5A69 18 03 00 00 10 08           movw  #$0000,txcnt     ; Clear "txcnt"
005A6F 7F5A6F 18 03 00 0C 10 06           movw  #$000C,txgoalMSB ; Load "txgoalMSB:txgoaLSB" with decimal 12(number of bytes to send)
005A75 7F5A75 18 0B 01 10 0D              movb  #$01,txmode      ; Load "txmode" with decimal 1
005A7A 7F5A7A 20 16                       bra   DoTx             ; Branch to "DoTx:" (start transmission)
005A7C 7F5A7C                         ModeO:
                                      ;**********************************************************************
                                      ; - De-Bug LED
                                      ;**********************************************************************
                                      ; - De-Bug LED
                                      ;     ldaa  PORTK        ; Load ACC A with value in Port K            *
                                      ;     eora  #$01         ; Exclusive or with $00000001                *
                                      ;     staa   PORTK       ; Copy to Port K (toggle Bit0)               *
                                      ;                        ; LED22, board 1 to 28)                      *
                                      ;**********************************************************************
                                      ;**********************************************************************
                                      ; - De-Bug LED
                                      ;     ldaa  PORTK        ; Load ACC A with value in Port K            *
                                      ;     eora  #$80         ; Exclusive or with $10000000                *
                                      ;     staa   PORTK       ; Copy to Port K (toggle Bit7)               *
                                                              ; LED2, board 87 to 112)                      *
                                      ;**********************************************************************
005A7C 7F5A7C B6 10 68                    ldaa  secH             ; Load accu A with value at "secH"
005A7F 7F5A7F 5A CF                       staa  SCI0DRL          ; Copy to SCI0DRL (first byte to send)
005A81 7F5A81 18 03 00 00 10 08           movw  #$0000,txcnt     ; Clear "txcnt"
005A87 7F5A87 18 03 00 93 10 06           movw  #$0093,txgoalMSB ; Load "txgoalMSB:txgoalLSB" with decimal 147(number of bytes to send) REAL TIME VARIABLES HERE!!!!!!!!
005A8D 7F5A8D 18 0B 02 10 0D              movb  #$02,txmode      ; Load "txmode" with decimal 2
005A92 7F5A92                         DoTx:
005A92 7F5A92 4C CB 80                    bset  SCI0CR2,TXIE  ; Set Transmitter Interrupt Enable bit,
005A95 7F5A95 4C CB 08                    bset  SCI0CR2,TE    ; Set Transmitter Enable bit
005A98 7F5A98                         RcvSCIDone:
005A98 7F5A98 0B                          rti                 ; Return from interrupt
                                      ;*****************************************************************************************
                                      ; - Transmit section
                                      ;*****************************************************************************************
005A99 7F5A99                         TxSCI:
005A99 7F5A99 96 CC                       ldaa  SCI0SR1  ; Load accu A with value in SCI0SR1(Read SCI0SR1 to clear "TDRE" flag)
005A9B 7F5A9B FE 10 08                    ldx   txcnt    ; Load Index Register X with value in "txcnt"
005A9E 7F5A9E 08                          inx            ; Increment Index Register X
005A9F 7F5A9F 7E 10 08                    stx   txcnt    ; Copy new value to "txcnt"
005AA2 7F5AA2 B6 10 0D                    ldaa  txmode   ; Load accu A with value in "txmode"
005AA5 7F5AA5 27 57                       beq   TxDone   ; If "txmode" = 0 branch to "TxDone:" (sanity check)
                                      ;*****************************************************************************************
                                      ; - Check the value of "txmode" to see if we are in the middle of
                                      ;   sending value bytes.
                                      ;          $01 = Sending Signature bytes
                                      ;          $02 = Sending real time variables
                                      ;          $03 = Sending constants page 1
                                      ;          $04 = Sending constants page 2
                                      ;          $05 = Sending constants page 3
                                      ;
                                      ;*****************************************************************************************
005AA7 7F5AA7 81 01                       cmpa  #$01         ; Compare with $01
005AA9 7F5AA9 27 12                       beq   SendSig      ; If equal branch to "SendSig:"
005AAB 7F5AAB 81 02                       cmpa  #$02         ; Compare with $02
005AAD 7F5AAD 27 14                       beq   SendVars     ; If equal branch to "SendVars:"
005AAF 7F5AAF 81 03                       cmpa  #$03         ; Compare with $03
005AB1 7F5AB1 27 16                       beq   SendPg1      ; If equal branch to "SendPg1:"
005AB3 7F5AB3 81 04                       cmpa  #$04         ; Compare with $04
005AB5 7F5AB5 27 21                       beq   SendPg2      ; If equal branch to "SendPg2:"
005AB7 7F5AB7 81 05                       cmpa  #$05         ; Compare with $05
005AB9 7F5AB9 27 2C                       beq   SendPg3      ; If equal branch to "SendPg3"
005ABB 7F5ABB 20 41                       bra   TxDone       ; Branch to "TxDone:" (sanity check)
005ABD 7F5ABD                         SendSig:               ; "txmode" = 1
005ABD 7F5ABD A6 E2 6C 0C                 ldaa  Signature,X  ; Load accu A with value at "Signature:", offset in "X" register
005AC1 7F5AC1 20 31                       bra   ContTx       ; Branch to "ContTx:"(continue TX process)
005AC3 7F5AC3                         SendVars:              ; "txmode" = 2
005AC3 7F5AC3 A6 E2 10 68                 ldaa  secH,X       ; Load accu A with value at "secH:" offset in "X" register.
005AC7 7F5AC7 20 2B                       bra   ContTx       ; Branch to "ContTX:" (continue TX process)
005AC9 7F5AC9                         SendPg1:               ; "txmode" = 3
005AC9 7F5AC9 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
                                      ;*    ldaa  veBins,X     ; Load accu A with value at "veBins:", offset in "X" register
005ACE 7F5ACE CC 08 00                    ldd   #veBins_E      ; Load double accumulator D with address of "veBins_E"
005AD1 7F5AD1 F3 10 0A                    addd  rxoffsetMSB  ; (A:B)+(M:M+1)->A:B Add the address of "veBins_E" with the offset
                                                             ; value to get the effective address of the byte to be sent
005AD4 7F5AD4 A6 E6                       ldaa  D,X          ; Load Accu A with value in the effective address
005AD6 7F5AD6 20 1C                       bra   ContTx       ; Branch to "ContTx:" (continue TX process)
005AD8 7F5AD8                         SendPg2:               ; "txmode" = 4
005AD8 7F5AD8 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE
                                      ;*    ldaa  stBins,X     ; Load accu A with value at "stBins:", offset in "X" register
005ADD 7F5ADD CC 08 00                    ldd   #stBins_E      ; Load double accumulator D with address of "stBins_E"
005AE0 7F5AE0 F3 10 0A                    addd  rxoffsetMSB  ; (A:B)+(M:M+1)->A:B Add the address of "stBins_E" with the offset
                                                             ; value to get the effective address of the byte to be sent
005AE3 7F5AE3 A6 E6                       ldaa  D,X          ; Load Accu A with value in the effective address
005AE5 7F5AE5 20 0D                       bra   ContTx       ; Branch to "ContTx:" (continue TX process)
005AE7 7F5AE7                         SendPg3:               ; "txmode" = 5
005AE7 7F5AE7 18 0B FD 00 17              movb  #(BUF_RAM_P3_START>>16),EPAGE  ; Move $FD into EPAGE
                                      ;*    ldaa  afrBins,X    ; Load accu A with value at "afrBins:", offset in "X" register
005AEC 7F5AEC CC 08 00                    ldd   #afrBins_E      ; Load double accumulator D with address of "afrBins_E"
005AEF 7F5AEF F3 10 0A                    addd  rxoffsetMSB  ; (A:B)+(M:M+1)->A:B Add the address of "afrBins_E" with the offset
                                                             ; value to get the effective address of the byte to be sent
005AF2 7F5AF2 A6 E6                       ldaa  D,X          ; Load Accu A with value in the effective address
005AF4 7F5AF4                         ContTx:
005AF4 7F5AF4 5A CF                       staa  SCI0DRL      ; Copy value in accu A into SCI0DRL (next byte to send)
005AF6 7F5AF6 FD 10 08                    ldy   txcnt        ; Load Index Register Y with value in "txcnt"
005AF9 7F5AF9 BD 10 06                    cpy   txgoalMSB    ; Compare value to "txgoalMSB:txgoalLSB"
005AFC 7F5AFC 26 18                       bne   ByteDone     ; If the Z bit of CCR is not set, branch to "ByteDone:"
                                                             ;(not finished yet)
005AFE 7F5AFE                         TxDone:
005AFE 7F5AFE 18 03 00 00 10 08           movw  #$0000,txcnt     ; Clear "txcnt"
005B04 7F5B04 18 03 00 00 10 06           movw  #$0000,txgoalMSB ; Clear "txgoalMSB:txgoalLSB"
005B0A 7F5B0A 79 10 0D                    clr   txmode           ; Clear "txmode"
005B0D 7F5B0D 79 10 0E                    clr   pageID           ; Clear "pageID"
005B10 7F5B10 4D CB 80                    bclr  SCI0CR2,TXIE     ; Clear Transmitter Interrupt Enable bit
                                                                 ;(disable TDRE interrupt)
005B13 7F5B13 4D CB 08                    bclr  SCI0CR2,TE       ; Clear Transmitter Enable bit (disable transmitter)
005B16 7F5B16                         ByteDone:
005B16 7F5B16 0B                          rti                    ; Return from interrupt
                                      ;*****************************************************************************************
005B17 7F5B17 -> $5B17                SCI0_CODE_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
005B17 7F5B17 -> $7F5B17              SCI0_CODE_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C0C 7F6C0C                                                 ORG     SCI0_TABS_START, SCI0_TABS_START_LIN
006C0C 7F6C0C -> $7F6C0C              SCI0_TABS_START_LIN     EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
006C0C 7F6C0C                         Signature:
006C0C 7F6C0C 4D 53 68 69 66 74 20 35     fcc 'MShift 5.001' ; ASCII string (Tuner Studio MUST have this)
              2E 30 30 31             
006C18 7F6C18 -> $6C18                SCI0_TABS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C18 7F6C18 -> $7F6C18              SCI0_TABS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (adc0_BPEM488EM488.s)                                                      *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    ADC0 interrupt handler                                                             *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)(This module)                        *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 17 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C18 7F6C18 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001012 0FD012                                     ORG     ADC0_VARS_START, ADC0_VARS_START_LIN
001012 0FD012 -> $FD012               ADC0_VARS_START_LIN     EQU   @ ; @ Represents the current value of the linear
                                                                  ; program counter
                                      ;*****************************************************************************************
                                      ; - RS232 Real Time Variables - (declared in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;cltAdc:       ds 2 ; RV15 10 bit ADC AN00 Engine Coolant Temperature ADC(offset=2)
                                      ;Cltx10:       ds 2 ; Engine Coolant Temperature (Degrees F x 10)(offset=4)
                                      ;matAdc:       ds 2 ; RV14 10 bit ADC AN01 Manifold Air Temperature ADC(offset=6)
                                      ;Matx10:       ds 2 ; Manifold Air Temperature (Degrees F x 10)(offset=8)
                                      ;eftAdc:       ds 2 ; RV13 10 bit ADC AN02 Engine Fuel Temperature ADC(offset=10)
                                      ;Eftx10:       ds 2 ; Engine Fuel Temperature (Degrees F x 10)(offset=12)
                                      ;eotAdc:       ds 2 ; RV12 10 bit ADC AN03 Engine Oil Temperature ADC(offset=14)
                                      ;Eotx10:       ds 2 ; Engine Oil Temperature (Degrees F x 10)(offset=16)
                                      ;RV11Adc:      ds 2 ; RV11 10 bit ADC AN04(19)(offset=18)
                                      ;mapAdc:       ds 2 ; RV10 10 bit ADC AN05 Manifold Absolute Pressure ADC(offset=20)
                                      ;Mapx10:       ds 2 ; Manifold Absolute Pressure (KPAx10)(offset=22)
                                      ;baroAdc:      ds 2 ; RV9 10 bit ADC AN06 Barometric Pressure ADC(offset=24)
                                      ;Barox10:      ds 2 ; Barometric Pressure (KPAx10)(offset=26)
                                      ;batAdc:       ds 2 ; Battery Voltage 10 bit ADC AN07(offset=28)
                                      ;BatVx10:      ds 2 ; Battery Voltage (Volts x 10)(offset=30)
                                      ;ftrmAdc:      ds 2 ; RV8 10 bit ADC AN08 Fuel Trim ADC(offset=32)
                                      ;Ftrmx10:      ds 2 ; Fuel Trim (% x 10)(+-20%)(offset=34)
                                      ;itrmAdc:      ds 2 ; RV7 10 bit ADC AN09 Ignition Trim ADC(offset=36)
                                      ;Itrmx10:      ds 2 ; Ignition Trim (degrees x 10)+-20 degrees) (offset=38)
                                      ;egtAdc:       ds 2 ; RV6 10 bit ADC AN10 Exhaust Gas Temperature ADC(offset=40)
                                      ;Egt:          ds 2 ; Exhaust Gas Temperature (degrees F)(offset=42)
                                      ;eopAdc:       ds 2 ; RV5 10 bit ADC AN11 Engine Oil Pressure ADC(offset=44)
                                      ;Eopx10:       ds 2 ; Engine Oil Pressure (PSI x 10)(offset=46)
                                      ;efpAdc:       ds 2 ; RV4 10 bit ADC AN12 Engine Fuel Pressure ADC(offset=48)
                                      ;Efpx10:       ds 2 ; Engine Fuel Pressure (PSI x 10)(offset=50)
                                      ;tpsADC:       ds 2 ; RV3 10 bit ADC AN13 Throttle Position Sensor ADC (exact for TS)(offset=52)
                                      ;TpsPctx10:    ds 2 ; Throttle Position Sensor % of travel(%x10)(update every 100mSec)(offset=54)
                                      ;iacAdc:       ds 2 ; RV2 10 bit ADC AN14 Idle Air Control ADC(offset=56)
                                      ;egoAdc:       ds 2 ; RV1 10 bit ADC AN15 Exhaust Gas Oxygen ADC(offset=58)
                                      ;afr1x10:      ds 2 ; Air Fuel Ratio for gasoline (AFRx10)(exact for TS)(60)
                                      ;PortAbits:    ds 1  ; Port A status bit field(offset=128)
                                      ;alarmbits:    ds 1  ; Alarm status bit field(offset=137)
                                      ;engine2:      ds 1  ; Engine2 status bit field(offset=136)
                                      ;*****************************************************************************************
                                      ; "engine2" equates
                                      ;*****************************************************************************************
                                      ;base512        equ $01 ; %00000001, bit 0, 0 = 5.12uS time base off(White),
                                                                               ; 1 = 5.12uS time base on(Grn)
                                      ;base256        equ $02 ; %00000010, bit 1, 0 = 2.56uS time base off(White),
                                                                               ; 1 = 2.56uS time base on(Grn)
                                      ;AudAlrm        equ $04 ; %00000100, bit 2, 0 = Audible Alarm on(Grn),
                                                                               ; 1 = Audible Alarm off(Red)
                                      ;eng2Bit3       equ $08 ; %00001000, bit 3, 0 = , 1 =
                                      ;eng2Bit4       equ $10 ; %00010000, bit 4, 0 = , 1 =
                                      ;eng2Bit5       equ $20 ; %00100000, bit 5, 0 = , 1 =
                                      ;eng2Bit6       equ $40 ; %01000000, bit 6, 0 = , 1 =
                                      ;eng2Bit7       equ $80 ; %10000000, bit 7, 0 = , 1 =
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; "alarmbits" equates
                                      ;*****************************************************************************************
                                      ;LOP        equ $01 ; %00000001, bit 0, 0 = No low oil pressure(Grn),
                                                                            ;1 = Low oil pressure(Red)
                                      ;HOT        equ $02 ; %00000010, bit 1, 0 = No high oil temperature(Grn),
                                                                            ;1 = High oil temperature(Red)
                                      ;HET        equ $04 ; %00000100, bit 2, 0 = No high coolant temperature(Grn),
                                                                            ;1 = High coolant temperature(Red)
                                      ;HEGT       equ $08 ; %00001000, bit 3, 0 = No high exhaust temperature(Grn),
                                                                            ;1 = High exhaust temperatrue(Red)
                                      ;HFT        equ $10 ; %00010000, bit 4, 0 = No high fuel temperature(Grn),
                                                                            ;1 = High fuel temperature(Red)
                                      ;LFP        equ $20 ; %00100000, bit 5, 0 = No Low fuel pressure(Grn),
                                                                            ;1 = Low fuel pressure(Red)
                                      ;HFP        equ $40 ; %01000000, bit 6, 0 = No high fuel pressure(Grn),
                                                                            ;1 = High fuel pressure(Red)
                                      ;Bit7       equ $80 ; %10000000, bit 7, 0 = , 1 =
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; PortAbits: Port A status bit field (PORTA)
                                      ;*****************************************************************************************
                                      ;SW7on57to82  equ  $01 ;(PA0)%00000001, bit 0
                                      ;SW3on57to82  equ  $02 ;(PA1)%00000010, bit 1
                                      ;SW6on57to82  equ  $04 ;(PA2)%00000100, bit 2
                                      ;Ftrimen      equ  $08 ;(PA3)%00001000, bit 3, SW2on57to82, 0 = Fuel trim disabled(Grn),
                                                                                                ;1 = Fuel trim enabled(Red)
                                      ;Itrimen      equ  $10 ;(PA4)%00010000, bit 4, SW5on57to82, 0 = Ign trim disabled(Grn),
                                                                                                ;1 = Ign trim enabled(Red)
                                      ;SW1on57to82  equ  $20 ;(PA5)%00100000, bit 5
                                      ;RunLoad      equ  $40 ;(PA6)%01000000, bit 6, SW2 on CPU, 0 = EEM load enabled(Red),
                                                                                               ;1 = EEMload not enabled(Grn)
                                      ;SW4on57to82  equ  $80 ;(PA7)%10000000, bit 7
                                      ;*****************************************************************************************
                                      ;Port B
                                      ;EngAlarm   equ $20 ;(PB5)%00100000, bit 5, D1on29to56, 0 = Alarm Relay off,
                                                                                            ; 1 = Alarm Relay on
                                      ;Port E
                                      ;AudAlrmSil equ $08 ;(PE3)%00001000, bit 3, SW5on29to56, 0 = No Audible Alarm Silence
                                                                                             ; 1 = Audible Alarm Silence
                                      ;*****************************************************************************************
001012 0FD012 -> $1012                ADC0_VARS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001012 0FD012 -> $FD012               ADC0_VARS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005B17 7F5B17                                                 ORG     ADC0_CODE_START, ADC0_CODE_START_LIN
005B17 7F5B17 -> $7F5B17              ADC0_CODE_START_LIN        EQU  @   ; @ Represents the current value of the linear
                                                                      ; program counter
                                      ;----------------------------- No code for this module ----------------------------------
005B17 7F5B17 -> $5B17                ADC0_CODE_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
005B17 7F5B17 -> $7F5B17              ADC0_CODE_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C18 7F6C18                                                 ORG     ADC0_TABS_START, ADC0_TABS_START_LIN
006C18 7F6C18 -> $7F6C18              ADC0_TABS_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006C18 7F6C18 -> $6C18                ADC0_TABS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C18 7F6C18 -> $7F6C18              ADC0_TABS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (gpio_BPEM488.s                                                            *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module Initializes all ports                                                  *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports (This module)                       *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 17 2020                                                                      *
                                      ;*    - BEPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C18 7F6C18 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001012 0FD012                                     ORG     GPIO_VARS_START, GPIO_VARS_START_LIN
001012 0FD012 -> $FD012               GPIO_VARS_START_LIN     EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ----------------------------- No variables for this module ----------------------------
001012 0FD012 -> $1012                GPIO_VARS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001012 0FD012 -> $FD012               GPIO_VARS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                      ;    ldaa   PORTB    ; Load Accu A with value in Port B (LED9 board 1 to 28)
                                      ;    anda   #$03     ; Bitwise "AND" Accu A with %00000011 (clear bits 0 and 1)
                                      ;    staa   PORTB    ; Copy to Port B  (clear bits 0 and 1)
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005B17 7F5B17                                                 ORG     GPIO_CODE_START, GPIO_CODE_START_LIN
005B17 7F5B17 -> $7F5B17              GPIO_CODE_START_LIN     EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No code for this module -------------------------------
005B17 7F5B17 -> $5B17                GPIO_CODE_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
005B17 7F5B17 -> $7F5B17              GPIO_CODE_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C18 7F6C18                                                 ORG     GPIO_TABS_START, GPIO_TABS_START_LIN
006C18 7F6C18 -> $7F6C18              GPIO_TABS_START_LIN     EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006C18 7F6C18 -> $6C18                GPIO_TABS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C18 7F6C18 -> $7F6C18              GPIO_TABS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (ect_BPEM488.s)                                                            *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    Enhanced Capture Timer on Port T interrupt handler.                                *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 17 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C18 7F6C18 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001012 0FD012                                                 ORG     ECT_VARS_START, ECT_VARS_START_LIN
001012 0FD012 -> $FD012               ECT_VARS_START_LIN      EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - RS232 variables - (declared in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;CASprd512:    ds 2 ; Crankshaft Angle Sensor period (5.12uS time base
                                      ;CASprd256:    ds 2 ; Crankshaft Angle Sensor period (2.56uS time base
                                      ;VSSprd:       ds 2 ; Vehicle Speed Sensor period
                                      ;RPM:          ds 2 ; Crankshaft Revolutions Per Minute
                                      ;KPH:          ds 2 ; Vehicle speed (KpH x 10)
                                      ;engine:       ds 1 ; Engine status bit field
                                      ;*****************************************************************************************
                                      ; - "engine" Engine status bit field
                                      ;*****************************************************************************************
                                      ;OFCdelon     equ  $01 ; %00000001, bit 0, 0 = OFC timer not counting down(Grn),
                                                                              ; 1 = OFC timer counting down(Red)
                                      ;crank        equ  $02 ; %00000010, bit 1, 0 = engine not cranking(Grn),
                                                                              ; 1 = engine cranking(Red)
                                      ;run          equ  $04 ; %00000100, bit 2, 0 = engine not running(Red),
                                                                              ; 1 = engine running(Grn)
                                      ;ASEon        equ  $08 ; %00001000, bit 3, 0 = not in start/warmup(Grn),
                                                                              ; 1 = in start/warmup(Red)
                                      ;WUEon        equ  $10 ; %00010000, bit 4, 0 = not in warmup(Grn),
                                                                              ; 1 = in warmup(Red)
                                      ;TOEon        equ  $20 ; %00100000, bit 5, 0 = not in TOE mode(Grn),
                                                                              ; 1 = TOE mode(Red)
                                      ;OFCon        equ  $40 ; %01000000, bit 6, 0 = not in OFC mode(Grn),
                                                                              ; 1 = in OFC mode(Red)
                                      ;FldClr       equ $80  ; %10000000, bit 7, 0 = not in flood clear mode(Grn),
                                                                              ; 1 = Flood clear mode(Red)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Non RS32 variables - (declared in state_BPEM488.s)
                                      ;*****************************************************************************************
                                      ;RevCntr:     ds 1  ; Counter for "Revmarker" flag
                                      ;ICflgs:      ds 1  ; Input Capture flags bit field
                                      ;*****************************************************************************************
                                      ; - "ICflgs" equates
                                      ;*****************************************************************************************
                                      ;RPMcalc:    equ $01   ; %00000001 (Bit 0) (Do RPM calculations flag)
                                      ;KpHcalc:    equ $02   ; %00000010 (Bit 1) (Do VSS calculations flag)
                                      ;Ch7_2nd:    equ $04   ; %00000100 (Bit 2) (Ch7 2nd edge flag)
                                      ;Ch6alt:     equ $08   ; %00001000 (Bit 3) (Ch6 alt flag)
                                      ;Ch7_3d:     equ $10   ; %00010000 (Bit 4) (Ch7 3d edge flag)
                                      ;RevMarker:  equ $20   ; %00100000 (Bit 5) (Crank revolution marker flag)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Non RS32 variables - (declared in igncalcs_BPEM488.s)
                                      ;*****************************************************************************************
                                      ;IgnOCadd1:      ds 2 ; First ignition output compare adder (5.12uS or 2.56uS res)
                                      ;IgnOCadd2:      ds 2 ; Second ignition output compare adder(5.12uS or 2.56uS res)
                                      ;*****************************************************************************************
                                      ; - Non RS32 variables - (declared in This module)
                                      ;*****************************************************************************************
001012 0FD012                         VSS1st:      ds 2  ; VSS input capture rising edge 1st time stamp (5.12uS or 2.56uS res)
                                      ;*****************************************************************************************
001014 0FD014 -> $1014                ECT_VARS_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001014 0FD014 -> $FD014               ECT_VARS_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                                              ; (Will trigger an interrupt after the delay time)(LED off)
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005B17 7F5B17                                                 ORG     ECT_CODE_START, ECT_CODE_START_LIN
005B17 7F5B17                         ECT_TC0_ISR:
                                      ;*****************************************************************************************
                                      ; - ECT ch0 Interrupt Service Routine (for (D7)(1to28)(Ign1)(1&6) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005B17 7F5B17 4C 49 02                    bset ECT_TCTL2,Bit1    ; Clear Ch0 output line to zero on compare
005B1A 7F5B1A 4D 49 01                    bclr ECT_TCTL2,Bit0    ; Clear Ch0 output line to zero on compare
005B1D 7F5B1D DC 44                       ldd  ECT_TCNTH         ; Contents of Timer Count Register-> Accu D
005B1F 7F5B1F F3 10 43                    addd IgnOCadd2         ; Add "IgnOCadd2" (dwell time)
005B22 7F5B22 5C 50                       std  ECT_TC0H          ; Copy result to Timer IC/OC register 0 (Start OC operation)
                                                                 ; (coil on for dwell time)(LED on)
005B24 7F5B24 0B                          rti                    ; Return from Interrupt
                                      ;*****************************************************************************************
                                      ; - NOTE! ECT_TC1_ISR is not enabled
                                      ;*****************************************************************************************
005B25 7F5B25                         ECT_TC2_ISR:
                                      ;*****************************************************************************************
                                      ; - ECT ch2 Interrupt Service Routine (for (D8)(1to28)(Ign2)(10&5) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005B25 7F5B25 4C 49 20                    bset ECT_TCTL2,Bit5    ; Clear Ch2 output line to zero on compare
005B28 7F5B28 4D 49 10                    bclr ECT_TCTL2,Bit4    ; Clear Ch2 output line to zero on compare
005B2B 7F5B2B DC 44                       ldd  ECT_TCNTH         ; Contents of Timer Count Register-> Accu D
005B2D 7F5B2D F3 10 43                    addd IgnOCadd2         ; Add "IgnOCadd2" (dwell time))
005B30 7F5B30 5C 54                       std  ECT_TC2H          ; Copy result to Timer IC/OC register 2(Start OC operation)
                                                                 ; (coil on for dwell time)(LED on)
005B32 7F5B32 0B                          rti                    ; Return from Interrupt
                                      ;*****************************************************************************************
                                      ; - NOTE! ECT_TC3_ISR is not enabled
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - NOTE! ECT_TC4_ISR is not enabled
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - NOTE! ECT_TC5_ISR (camshaft position sensor) is handled in state_BEEM488.s module)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - ECT ch6 Interrupt Service Routine (for VSS calculations)
                                      ;*****************************************************************************************
005B33 7F5B33                         ECT_TC6_ISR:
                                      ;*****************************************************************************************
                                      ; - Get two consecutive rising edge signals for vehicle speed and
                                      ;   calculate the period. KPH calculations are done in the main loop
                                      ;*****************************************************************************************
005B33 7F5B33 1E 10 24 08 0B              brset ICflgs,Ch6alt,VSS2 ; If "Ch6alt" bit of "ICflgs" is set, branch to "VSS2:"
005B38 7F5B38 DC 5C                       ldd  ECT_TC6H            ; Load accu D with value in "ECT_TC6H"
005B3A 7F5B3A 7C 10 12                    std  VSS1st              ; Copy to "VSS1st"
005B3D 7F5B3D 1C 10 24 08                 bset ICflgs,Ch6alt       ; Set "Ch6alt" bit of "ICflgs"
005B41 7F5B41 20 10                       bra  ECT6_ISR_Done       ; Branch to "ECT6_ISR_Done:"
005B43 7F5B43                         VSS2:
005B43 7F5B43 DC 5C                       ldd  ECT_TC6H       ; Load accu D with value in "ECT_TC6H"
005B45 7F5B45 B3 10 12                    subd VSS1st         ; Subtract (A:B)-(M:M+1)=>A:B "VSS1st" from value in "ECT_TC6H"
005B48 7F5B48 7C 10 AA                    std  VSSprd         ; Copy result to "VSSprd"
005B4B 7F5B4B 1D 10 24 08                 bclr ICflgs,Ch6alt  ; Clear "Ch6alt" bit of "ICflgs"
005B4F 7F5B4F 1C 10 24 02                 bset ICflgs,KPHcalc ; Set "KPHcalc" bit of "ICflgs"
005B53 7F5B53                         ECT6_ISR_Done:
005B53 7F5B53 0B                          rti                ; Return from Interrupt
                                      ;*****************************************************************************************
                                      ; - NOTE! ECT_TC7_ISR (crankshaft position sensor) is handled in state_BEEM488.s module)
                                      ;*****************************************************************************************
005B54 7F5B54 -> $5B54                ECT_CODE_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
005B54 7F5B54 -> $7F5B54              ECT_CODE_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                                                    ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C18 7F6C18                                                 ORG     ECT_TABS_START, ECT_TABS_START_LIN
006C18 7F6C18 -> $7F6C18              ECT_TABS_START_LIN      EQU     @ ; @ Represents the current value of the linear
                                                                ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006C18 7F6C18 -> $6C18                ECT_TABS_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C18 7F6C18 -> $7F6C18              ECT_TABS_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (tim_BPEM488.s                                                             *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BEEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    Timer module for Ignition and injector control on Port P                           *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 17 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C18 7F6C18 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001014 0FD014                                     ORG     TIM_VARS_START, TIM_VARS_START_LIN
001014 0FD014 -> $FD014               TIM_VARS_START_LIN      EQU     @ ; @ Represents the current value of the linear
                                                                ; program counter
                                      ;*****************************************************************************************
                                      ; - RS232 variables - (declared in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;FD:           ds 2 ; Fuel Delivery pulse width (mS)
                                      ;*****************************************************************************************
                                      ; - Non RS232 variables - (declared in injcalcs_BPEM488.s)
                                      ;*****************************************************************************************
                                      ;InjOCadd1      ds 2 ; First injector output compare adder (5.12uS res or 2.56uS res)
                                      ;InjOCadd2      ds 2 ; Second injector output compare adder (5.12uS res or 2.56uS res)
                                      ;FDt:           ds 2 ; Fuel Delivery pulse width total(mS) (for FDsec calcs)
                                      ;FDcnt:         ds 2 ; Fuel delivery pulse width total(ms)(for totalizer pulse on rollover)
                                      ;AIOTcnt:       ds 1 ; Counter for AIOT totalizer pulse width
                                      ;*****************************************************************************************
                                      ; - Non RS232 variables - (declared in igncalcs_BPEM488.s)
                                      ;*****************************************************************************************
                                      ;IgnOCadd1:      ds 2 ; First ignition output compare adder (5.12uS or 2.56uS res)
                                      ;IgnOCadd2:      ds 2 ; Second ignition output compare adder(5.12uS or 2.56uS res)
001014 0FD014 -> $1014                TIM_VARS_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001014 0FD014 -> $FD014               TIM_VARS_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                                              ; (Will trigger an interrupt after the delay time)(LED off)
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005B54 7F5B54                                                 ORG     TIM_CODE_START, TIM_CODE_START_LIN
005B54 7F5B54 -> $7F5B54              TIM_CODE_START_LIN      EQU     @ ; @ Represents the current value of the linear
                                                                ; program counter
                                      ;*****************************************************************************************
                                      ; - In the INIT_TIM macro, Port T PT0, PT2 and all Port P pins are set as outputs with
                                      ;   initial setting low. To control both the ignition and injector drivers two interrupts
                                      ;   are required for each ignition or injection event. At the appropriate crank angle and
                                      ;   cam phase an interrupt is triggered. In this ISR routine the channel output compare
                                      ;   register is loaded with the delay value from trigger time to the time desired to
                                      ;   energise the coil or injector and the channel interrupt is enabled. When the output
                                      ;   compare matches, the pin is commanded high and the timer channel interrupt is triggered.
                                      ;   The output compare register is then loaded with the value to keep the coil or injector
                                      ;   energised, and the channel interrupt is disabled. When the output compare matches, the
                                      ;   pin is commanded low to fire the coil or de-energise the injector.
                                      ;*****************************************************************************************
005B54 7F5B54                         TIM_TC0_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch1 Interrupt Service Routine (for (D21)(1to28)(Ign3)(9&8) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005B54 7F5B54 1C 03 D9 02                 bset TIM_TCTL2,Bit1    ; Clear Ch0 output line to zero on compare
005B58 7F5B58 1D 03 D9 01                 bclr TIM_TCTL2,Bit0    ; Clear Ch0 output line to zero on compare
005B5C 7F5B5C FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005B5F 7F5B5F F3 10 43                    addd IgnOCadd2         ; Add "IgnOCadd2" (dwell time)
005B62 7F5B62 7C 03 E0                    std  TIM_TC0H          ; Copy result to Timer IC/OC register 1 (Start OC operation)
                                                                 ; (coil on for dwell time)(LED on)
005B65 7F5B65 0B                          rti                    ; Return from Interrupt
005B66 7F5B66                         TIM_TC1_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch1 Interrupt Service Routine (for (D5)(1to28)(Ign4)(4&7) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005B66 7F5B66 1C 03 D9 08                 bset TIM_TCTL2,Bit3    ; Clear Ch1 output line to zero on compare
005B6A 7F5B6A 1D 03 D9 04                 bclr TIM_TCTL2,Bit2    ; Clear Ch1 output line to zero on compare
005B6E 7F5B6E FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005B71 7F5B71 F3 10 43                    addd IgnOCadd2         ; Add "IgnOCadd2" (dwell time))
005B74 7F5B74 7C 03 E2                    std  TIM_TC1H          ; Copy result to Timer IC/OC register 1 (Start OC operation)
                                                                 ; (coil on for dwell time)(LED on)
005B77 7F5B77 0B                          rti                    ; Return from Interrupt
005B78 7F5B78                         TIM_TC2_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch2 Interrupt Service Routine (for (D24)(1to28)(Ign5)(3&2) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005B78 7F5B78 1C 03 D9 20                 bset TIM_TCTL2,Bit5    ; Clear Ch2 output line to zero on compare
005B7C 7F5B7C 1D 03 D9 10                 bclr TIM_TCTL2,Bit4    ; Clear Ch2 output line to zero on compare
005B80 7F5B80 FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005B83 7F5B83 F3 10 43                    addd IgnOCadd2         ; Add "IgnOCadd2" (dwell time)
005B86 7F5B86 7C 03 E4                    std  TIM_TC2H          ; Copy result to Timer IC/OC register 2 (Start OC operation)
                                                                 ; (coil on for dwell time)(LED on)
005B89 7F5B89 0B                          rti                    ; Return from Interrupt
005B8A 7F5B8A                         TIM_TC3_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch3 Interrupt Service Routine (for (D1)(1to28)(Inj1)(1&10) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005B8A 7F5B8A 1C 03 D9 80                 bset TIM_TCTL2,Bit7    ; Clear Ch3 output line to zero on compare
005B8E 7F5B8E 1D 03 D9 40                 bclr TIM_TCTL2,Bit6    ; Clear Ch3 output line to zero on compare
005B92 7F5B92 FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005B95 7F5B95 F3 10 61                    addd InjOCadd2         ; Add "InjOCadd2" (injector pulse width)
005B98 7F5B98 7C 03 E6                    std  TIM_TC3H          ; Copy result to Timer IC/OC register 3 (Start OC operation)
                                                                 ; (Should result in LED on for ~3 to ~25 mS)
                                      ;***********************************************************************************************
                                      ; - Update Fuel Delivery Pulse Width Total so the results can be used by Tuner Studio and
                                      ;   Shadow Dash to calculate current fuel burn.
                                      ;***********************************************************************************************
005B9B 7F5B9B FC 10 D6                    ldd  FD     ; "FD"->Accu D (fuel delivery pulsewidth)(mS)
005B9E 7F5B9E F3 10 63                        addd FDt    ; (A:B)+(M:M+1)->A:B (fuel delivery pulsewidth + fuel delivery pulsewidth total)
005BA1 7F5BA1 7C 10 63                        std  FDt    ; Copy result to "FDt" (mS)
                                      ;***********************************************************************************************
                                      ; - Update the Fuel Delivery counter so that on roll over (65535mS)a pulsed signal can be sent to the
                                      ;   to the totalizer(open collector output)
                                      ;***********************************************************************************************
005BA4 7F5BA4 FC 10 D6                    ldd  FD             ; "FD"->Accu D (fuel delivery pulsewidth)(mS)
005BA7 7F5BA7 F3 10 65                        addd FDcnt          ; (A:B)+(M:M+1)->A:B (fuel delivery pulsewidth + fuel delivery counter)
005BAA 7F5BAA 25 05                       bcs  Totalizer1     ; If the cary bit of CCR is set, branch to Totalizer1: ("FDcnt"
                                                                  ;  rollover, pulse the totalizer)
005BAC 7F5BAC 7C 10 65                        std  FDcnt          ; Copy the result to "FDcnt" (update "FDcnt")
005BAF 7F5BAF 20 0B                       bra  TotalizerDone1 ; Branch to TotalizerDone1:
005BB1 7F5BB1                         Totalizer1:
005BB1 7F5BB1 7C 10 65                        std  FDcnt          ; Copy the result to "FDcnt" (update "FDcnt")
005BB4 7F5BB4 4C 01 40                    bset PORTB,AIOT     ; Set "AIOT" pin on Port B (PB6)(start totalizer pulse)
005BB7 7F5BB7 86 03                           ldaa #$03           ; Decimal 3->Accu A (3 mS)
005BB9 7F5BB9 7A 10 67                    staa AIOTcnt        ; Copy to "AIOTcnt" ( counter for totalizer pulse width,
                                                                  ; decremented every mS)
005BBC 7F5BBC                         TotalizerDone1:
005BBC 7F5BBC 0B                          rti                 ; Return from Interrupt
005BBD 7F5BBD                         TIM_TC4_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch4 Interrupt Service Routine (for(D3)(87to112)(Inj2)(9&4) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005BBD 7F5BBD 1C 03 D8 02                 bset TIM_TCTL1,Bit1    ; Clear Ch4 output line to zero on compare
005BC1 7F5BC1 1D 03 D8 01                 bclr TIM_TCTL1,Bit0    ; Clear Ch4 output line to zero on compare
005BC5 7F5BC5 FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005BC8 7F5BC8 F3 10 61                    addd InjOCadd2         ; Add "InjOCadd2" (injector pulse width)
005BCB 7F5BCB 7C 03 E8                    std  TIM_TC4H          ; Copy result to Timer IC/OC register 4(Start OC operation)
                                                                 ; (Should result in LED on for ~3 to ~25 mS)
005BCE 7F5BCE 0B                          rti                    ; Return from Interrupt
005BCF 7F5BCF                         TIM_TC5_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch5 Interrupt Service Routine (for(D6)(87to112)(Inj3)(3&6) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005BCF 7F5BCF 1C 03 D8 08                 bset TIM_TCTL1,Bit3    ; Clear Ch5 output line to zero on compare
005BD3 7F5BD3 1D 03 D8 04                 bclr TIM_TCTL1,Bit2    ; Clear Ch5 output line to zero on compare
005BD7 7F5BD7 FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005BDA 7F5BDA F3 10 61                    addd InjOCadd2         ; Add "InjOCadd2" (injector pulse width)
005BDD 7F5BDD 7C 03 EA                    std  TIM_TC5H          ; Copy result to Timer IC/OC register 5(Start OC operation)
                                                                 ; (Should result in LED on for ~3 to ~25 mS)
005BE0 7F5BE0 0B                          rti                    ; Return from Interrupt
005BE1 7F5BE1                         TIM_TC6_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch6 Interrupt Service Routine (for(D1)(87to112)(Inj4)(5&8) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005BE1 7F5BE1 1C 03 D8 20                 bset TIM_TCTL1,Bit5    ; Clear Ch6 output line to zero on compare
005BE5 7F5BE5 1D 03 D8 10                 bclr TIM_TCTL1,Bit4    ; Clear Ch6 output line to zero on compare
005BE9 7F5BE9 FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005BEC 7F5BEC F3 10 61                    addd InjOCadd2         ; Add "InjOCadd2" (injector pulse width)
005BEF 7F5BEF 7C 03 EC                    std  TIM_TC6H          ; Copy result to Timer IC/OC register 6(Start OC operation)
                                                                 ; (Should result in LED on for ~3 to ~25 mS)
005BF2 7F5BF2 0B                          rti                    ; Return from Interrupt
005BF3 7F5BF3                         TIM_TC7_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch7 Interrupt Service Routine (for(D7)(87to112)(Inj5)(7&2) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005BF3 7F5BF3 1C 03 D8 80                 bset TIM_TCTL1,Bit7    ; Clear Ch7 output line to zero on compare
005BF7 7F5BF7 1D 03 D8 40                 bclr TIM_TCTL1,Bit6    ; Clear Ch7 output line to zero on compare
005BFB 7F5BFB FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005BFE 7F5BFE F3 10 61                    addd InjOCadd2         ; Add "InjOCadd2" (injector pulse width)
005C01 7F5C01 7C 03 EE                    std  TIM_TC7H          ; Copy result to Timer IC/OC register(Start OC operation)
                                                                 ; (Should result in LED on for ~3 to ~25 mS)
005C04 7F5C04 0B                          rti                    ; Return from Interrupt
005C05 7F5C05 -> $5C05                TIM_CODE_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
005C05 7F5C05 -> $7F5C05              TIM_CODE_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C18 7F6C18                                                 ORG     TIM_TABS_START, TIM_TABS_START_LIN
006C18 7F6C18 -> $7F6C18              TIM_TABS_START_LIN      EQU     @ ; @ Represents the current value of the linear
                                                                ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006C18 7F6C18 -> $6C18                TIM_TABS_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C18 7F6C18 -> $7F6C18              TIM_TABS_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (state_BPEM488.s)                                                          *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module contains code for the state machine to determine crankshaft position   *
                                      ;*    and camshaft phase                                                                 *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 13 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C18 7F6C18 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001014 0FD014                                    ORG     STATE_VARS_START, STATE_VARS_START_LIN
001014 0FD014 -> $FD014               STATE_VARS_START_LIN    EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - RS232 variables - (declared in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;CASprd512:   ds 2  ; Period between CAS2nd and CAS3d (5.12uS res)
                                      ;CASprd256:   ds 2  ; Period between CAS2nd and CAS3d (2.56uS res)
                                      ;engine:      ds 1  ; Engine status bit field
                                      ;engine2:      ds 1  ; Engine2 status bit field
                                      ;*****************************************************************************************
                                      ; - "engine" Engine status bit field
                                      ;*****************************************************************************************
                                      ;OFCdelon     equ  $01 ; %00000001, bit 0, 0 = OFC timer not counting down(Grn),
                                                                              ; 1 = OFC timer counting down(Red)
                                      ;crank        equ  $02 ; %00000010, bit 1, 0 = engine not cranking(Grn),
                                                                              ; 1 = engine cranking(Red)
                                      ;run          equ  $04 ; %00000100, bit 2, 0 = engine not running(Red),
                                                                              ; 1 = engine running(Grn)
                                      ;ASEon        equ  $08 ; %00001000, bit 3, 0 = not in start/warmup(Grn),
                                                                              ; 1 = in start/warmup(Red)
                                      ;WUEon        equ  $10 ; %00010000, bit 4, 0 = not in warmup(Grn),
                                                                              ; 1 = in warmup(Red)
                                      ;TOEon        equ  $20 ; %00100000, bit 5, 0 = not in TOE mode(Grn),
                                                                              ; 1 = TOE mode(Red)
                                      ;OFCon        equ  $40 ; %01000000, bit 6, 0 = not in OFC mode(Grn),
                                                                              ; 1 = in OFC mode(Red)
                                      ;FldClr       equ $80  ; %10000000, bit 7, 0 = not in flood clear mode(Grn),
                                                                              ; 1 = Flood clear mode(Red)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; "engine2" equates
                                      ;*****************************************************************************************
                                      ;base512        equ $01 ; %00000001, bit 0, 0 = 5.12uS time base off(White),
                                                                               ; 1 = 5.12uS time base on(Grn)
                                      ;base256        equ $02 ; %00000010, bit 1, 0 = 2.56uS time base off(White),
                                                                               ; 1 = 2.56uS time base on(Grn)
                                      ;eng2Bit2       equ $04 ; %00000100, bit 2, 0 = , 1 =
                                      ;eng2Bit3       equ $08 ; %00001000, bit 3, 0 = , 1 =
                                      ;eng2Bit4       equ $10 ; %00010000, bit 4, 0 = , 1 =
                                      ;eng2Bit5       equ $20 ; %00100000, bit 5, 0 = , 1 =
                                      ;eng2Bit6       equ $40 ; %01000000, bit 6, 0 = , 1 =
                                      ;eng2Bit7       equ $80 ; %10000000, bit 7, 0 = , 1 =
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - RS232 variables - (declared in injcalcs_BPEM488.s)
                                      ;*****************************************************************************************
                                      ;ASErev:        ds 2 ; Afterstart Enrichment Taper (revolutions)
                                      ;ASEcnt:        ds 2 ; Counter value for ASE taper
                                      ;StateStatus:   ds 1 ; State status bit field
                                      ;*****************************************************************************************
                                      ; - "StateStatus" equates
                                      ;*****************************************************************************************
                                      ;Synch            equ    $01  ; %00000001, bit 0,
                                                                   ; 0 = crank position not synchronized(Red),
                                                                                               ; 1 = crank position synchronized(Grn)
                                      ;SynchLost        equ    $02  ; %00000010, bit 1, 0 = synch not lost(Grn),
                                                                   ; 1 = synch lost(Red)
                                      ;StateNew         equ    $04  ; %00000100, bit 2, 0 = no new State value,
                                                                   ; 1 = New State value
                                      ;StateStatus3     equ    $08  ; %00001000, bit 3,
                                      ;StateStatus4     equ    $10  ; %00010000, bit 4
                                      ;StateStatus5     equ    $20  ; %00100000, bit 5
                                      ;StateStatus6     equ    $40  ; %01000000, bit 6
                                      ;StateStatus7     equ    $80  ; %10000000, bit 7
                                      ;*****************************************************************************************
                                      ; - State machine variables - (declared in this module)
                                      ;*****************************************************************************************
001014 0FD014                         State:        ds 1  ; Cam-Crank state machine current state
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Input capture variables - (declared in this module)
                                      ;*****************************************************************************************
001015 0FD015                         CAS1sttk:    ds 2  ; CAS input capture rising edge 1st time stamp ((5.12uS or 2.56uS res)
001017 0FD017                         CAS2ndtk:    ds 2  ; CAS input capture rising edge 2nd time stamp (5.12uS or 2.56uS res)
001019 0FD019                         CASprd1tk:   ds 2  ; Period between CAS1st and CAS2nd (5.12uS or 2.56uS res)
00101B 0FD01B                         CASprd2tk:   ds 2  ; Period between CAS2nd and CAS3d ((5.12uS or 2.56uS res)
00101D 0FD01D                         Degx10tk512: ds 2  ; Time to rotate crankshaft 1 degree in 5.12uS resolution x 10
00101F 0FD01F                         Degx10tk256: ds 2  ; Time to rotate crankshaft 1 degree in 2.56uS resolution x 10
001021 0FD021                         RevCntr:     ds 1  ; Counter for "Revmarker" flag
001022 0FD022                         Stallcnt:    ds 2  ; No crank or stall condition counter (1mS increments)
001024 0FD024                         ICflgs:      ds 1  ; Input Capture flags bit field
                                      ;*****************************************************************************************
                                      ; - "ICflgs" equates
                                      ;*****************************************************************************************
001025 0FD025 -> $0001                RPMcalc:    equ $01   ; %00000001 (Bit 0) (Do RPM calculations flag)
001025 0FD025 -> $0002                KpHcalc:    equ $02   ; %00000010 (Bit 1) (Do VSS calculations flag)
001025 0FD025 -> $0004                Ch7_2nd:    equ $04   ; %00000100 (Bit 2) (Ch7 2nd edge flag)
001025 0FD025 -> $0008                Ch6alt:     equ $08   ; %00001000 (Bit 3) (Ch6 alt flag)
001025 0FD025 -> $0010                Ch7_3d:     equ $10   ; %00010000 (Bit 4) (Ch7 3d edge flag)
001025 0FD025 -> $0020                RevMarker:  equ $20   ; %00100000 (Bit 5) (Crank revolution marker flag)
                                      ;*****************************************************************************************
001025 0FD025 -> $1025                STATE_VARS_END          EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001025 0FD025 -> $FD025               STATE_VARS_END_LIN      EQU     @     ; @ Represents the current value of the linear
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005C05 7F5C05                                                 ORG     STATE_CODE_START, STATE_CODE_START_LIN
005C05 7F5C05 -> $7F5C05              STATE_CODE_START_LIN    EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - The camshaft position sensor and the crankshaft position sensor are both hall
                                      ;   effect gear tooth sensors. They read notched wheels on their repsective shafts.
                                      ;   When the sensor senses a notch its output pin goes to ground. The BPEM simulator
                                      ;   input from the sensor is the LED circuit of an opto isolator. When the LED in the
                                      ;   opto is powered it biases the output transistor on so the timer channel pin sees a
                                      ;   rising edge, which triggers an interrupt event. The state machine uses these events
                                      ;   to de-code the signals to determine crankshaft position and camshaft phase. Any
                                      ;   event that does not fall into the mechanical order of events triggers an error.
                                      ;   An error will disable ignition and fuel injection until a positive lock on crankshaft
                                      ;   position and camshaft phase is re-established.
                                      ;*****************************************************************************************
005C05 7F5C05                         ECT_TC5_ISR:
                                      ;*****************************************************************************************
                                      ; - ECT_TC5_ISR Interrupt Service Routine (Camshaft sensor notch)
                                      ;   Event = 0
                                      ;*****************************************************************************************
005C05 7F5C05 DE 5A                       ldx    ECT_TC5H         ; Read ECT_TC5H to clear the flag
005C07 7F5C07 CE 6C 18                    ldx    #StateLookup     ; Load index register X with the address of "TableLookup"
005C0A 7F5C0A F6 10 14                    ldab   State            ; Load Accu B with the contents of "State"
005C0D 7F5C0D 58                          aslb                    ; Shift Accu B 1 place to the left
005C0E 7F5C0E CA 00                       orab   #$00             ; Bit wise inclusive OR Accu B with 0
005C10 7F5C10 A6 E5                       ldaa   B,X              ; Load Accu A with the contents of "TableLookup", offset in
                                                                  ; Accu B (9 bit constant offset indexed addressing)
005C12 7F5C12 7A 10 14                    staa   State            ; Copy to "State"
005C15 7F5C15 0B                          rti                     ; Return from interrupt
005C16 7F5C16                         ECT_TC7_ISR:
                                      ;*****************************************************************************************
                                      ; - ECT_TC7_ISR Interrupt Service Routine (Crankshaft sensor notch)
                                      ;   Event = 1
                                      ;*****************************************************************************************
005C16 7F5C16 DE 5E                       ldx    ECT_TC7H              ; Read ECT_TC7H to clear the flag
005C18 7F5C18 CE 6C 18                    ldx    #StateLookup     ; Load index register X with the address of "TableLookup"
005C1B 7F5C1B F6 10 14                    ldab   State            ; Load Accu B with the contents of "State"
005C1E 7F5C1E 58                          aslb                    ; Shift Accu B 1 place to the left
005C1F 7F5C1F CA 01                       orab   #$01             ; Bit wise inclusive OR Accu B with 1
005C21 7F5C21 A6 E5                       ldaa   B,X              ; Load Accu A with the contents of "TableLookup", offset in
                                                                  ; Accu B (9 bit constant offset indexed addressing)
005C23 7F5C23 7A 10 14                    staa   State            ; Copy to "State"
005C26 7F5C26 81 46                       cmpa    #$46            ; Compare with decimal 70 (Error)
005C28 7F5C28 27 06                       beq     State_Error     ; If "State" = $46, branch to State_Error:
005C2A 7F5C2A 81 67                       cmpa    #$67            ; Compare with decimal 103
005C2C 7F5C2C 2F 21                       ble     NoLock          ; If "State" =< $67, branch to NoLock:
005C2E 7F5C2E 2E 11                       bgt     SynchLock       ; If "State" is > $67, branch to Synchlock:
005C30 7F5C30                         State_Error:
                                      ;*****************************************************************************************
                                      ; - If we get here we have experienced an unexpected cam or crank input and have lost lock.
                                      ;   No more spark or injection events until lock has been re-established.
                                      ;*****************************************************************************************
005C30 7F5C30 79 10 14                    clr   State                     ; Clear "State"
005C33 7F5C33 1C 10 F3 02                 bset  StateStatus,SynchLost     ; Set "SynchLost" bit of "StateStatus" variable (bit1)
005C37 7F5C37 1D 10 F3 01                 bclr  StateStatus,Synch         ; Clear "Synch " bit of "StateStatus" variable (bit0)
005C3B 7F5C3B 1D 10 F3 04                 bclr  StateStatus,StateNew      ; Clear "StateNew " bit of "StateStatus" variable (bit2)
005C3F 7F5C3F 20 1A                       bra   STATE_STATUS_done         ; Branch to STATE_STATUS_done:
005C41 7F5C41                         SynchLock:
                                      ;*****************************************************************************************
                                      ; - If we get here we have either just reached one of the four possible lock points, or
                                      ;    we are already in the synch loop.
                                      ;*****************************************************************************************
005C41 7F5C41 1C 10 F3 01                 bset  StateStatus,Synch        ; Set "Synch " bit of "StateStatus" variable (bit0)
005C45 7F5C45 1C 10 F3 04                 bset  StateStatus,StateNew     ; Set "StateNew" bit of "StateStatus" variable (bit2)
005C49 7F5C49 1D 10 F3 02                 bclr  StateStatus,SynchLost    ; Clear "SynchLost" bit of "StateStatus" variable (bit1)
005C4D 7F5C4D 20 0C                       bra   STATE_STATUS_done        ; Branch to STATE_STATUS_done:
005C4F 7F5C4F                         NoLock:
                                      ;*****************************************************************************************
                                      ; - If we get here we have the state machine is still looking for a synch lock.
                                      ;*****************************************************************************************
005C4F 7F5C4F 1D 10 F3 01                 bclr  StateStatus,Synch        ; Clear "Synch" bit of "StateStatus" variable (bit0)
005C53 7F5C53 1D 10 F3 02                 bclr  StateStatus,SynchLost    ; Clear "SynchLost" bit of "StateStatus" variable (bit1)
005C57 7F5C57 1D 10 F3 04                 bclr  StateStatus,StateNew     ; Clear "StateNew" bit of "StateStatus" variable (bit 2)
005C5B 7F5C5B                         STATE_STATUS_done:
                                      ;*****************************************************************************************
                                      ; - Get three consecutive rising edge signals for engine RPM and
                                      ;   calculate the period. This period is for one fifth of a revolution (72 degrees).
                                      ;   RPM, Ignition and  Fuel calculations are done in the main loop.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Reload stall counter with compare value. Stall check is done in the main loop every
                                      ;   mSec. "Stallcnt" is decremented every mSec and reloaded at every crank signal.
                                      ;*****************************************************************************************
005C5B 7F5C5B 18 0B FF 00 17                  movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
005C60 7F5C60 CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable
                                                              ; constant on buffer RAM page 1 (vebins)
005C63 7F5C63 EC EA 03 E6                 ldd   $03E6,Y       ; Load Accu A with value in buffer RAM page 1 offset 998
                                                              ; "Stallcnt" (stall counter)(offset = 998)
005C67 7F5C67 7C 10 22                    std  Stallcnt       ; Copy to "Stallcnt" (no crank or stall condition counter)
                                                              ; (1mS increments)
005C6A 7F5C6A 1E 10 24 04 12              brset ICflgs,Ch7_2nd,CAS_2nd ; If "Ch7_2nd" bit of "ICflgs" is set, branch to "CAS_2nd:"
005C6F 7F5C6F 1E 10 24 10 24              brset ICflgs,Ch7_3d,CAS_3d   ; If "Ch7_3d" bit of "ICflgs" is set, branch to "CAS_3d:"
005C74 7F5C74 DC 5E                       ldd   ECT_TC7H               ; Load accu D with value in "ECT_TC7H"
005C76 7F5C76 7C 10 15                    std   CAS1sttk               ; Copy to "CAS1sttk"
005C79 7F5C79 1C 10 24 04                 bset  ICflgs,Ch7_2nd         ; Set "Ch7_2nd" bit of "ICflgs"
005C7D 7F5C7D 18 20 00 B0                 bra   CASDone                ; Branch to CASDone:
005C81 7F5C81                         CAS_2nd:
005C81 7F5C81 DC 5E                       ldd   ECT_TC7H        ; Load accu D with value in "ECT_TC7H"
005C83 7F5C83 7C 10 17                    std   CAS2ndtk        ; Copy to "CAS2ndtk"
005C86 7F5C86 B3 10 15                    subd  CAS1sttk        ; Subtract (A:B)-(M:M+1)=>A:B "CAS1sttk" from value in "ECT_TC7H"
005C89 7F5C89 7C 10 19                    std   CASprd1tk       ; Copy result to "CASprd1tk"
005C8C 7F5C8C 1D 10 24 04                 bclr  ICflgs,Ch7_2nd  ; Clear "Ch7_2nd" bit of "ICflgs"
005C90 7F5C90 1C 10 24 10                 bset  ICflgs,Ch7_3d   ; Set "Ch7_3d" bit of "ICflgs"
005C94 7F5C94 18 20 00 99                 bra   CASDone         ; Branch to CASDone:
005C98 7F5C98                         CAS_3d:
005C98 7F5C98 DC 5E                       ldd   ECT_TC7H        ; Load accu D with value in "ECT_TC7H"
005C9A 7F5C9A B3 10 17                    subd  CAS2ndtk        ; Subtract (A:B)-(M:M+1)=>A:B "CAS2ndtk" from value in "ECT_TC7H"
005C9D 7F5C9D 7C 10 1B                    std   CASprd2tk       ; Copy result to "CASprd2tk"
005CA0 7F5CA0 F3 10 19                    addd  CASprd1tk       ; (A:B)+(M:M+1)_->A:B "CASprd2tk" + "CASprd1tk" = "CASprdtk"
005CA3 7F5CA3 1D 10 24 10                 bclr  ICflgs,Ch7_3d   ; Clear "Ch7_3d" bit of "ICflgs"
                                      ;*****************************************************************************************
                                      ; - All calculations that use the Crank Angle Sensor period need to know what the
                                      ;   resolution is. The timers are initalized with a 5.12uS resoluion but switched to
                                      ;   2.56uS resolution when the engine tranistions from crank mode to run mode.
                                      ;*****************************************************************************************
005CA7 7F5CA7 1E 10 EF 04 17              brset engine,run,CAS256 ; If "run" bit of "engine" bit field is set branch to
                                                                    ; CAS256:
005CAC 7F5CAC 7C 10 A6                    std   CASprd512       ; Copy result to "CASprd512" (CAS period in 5.12uS resolution)
                                      ;******************************************************************************************
                                      ; - Convert Crank Angle Sensor period (5.12uS res)to degrees x 10 of rotation (for 1 tenth
                                      ;   of a degree resolution calculations).("Degx10tk512")
                                      ;******************************************************************************************
005CAF 7F5CAF CE 00 48                    ldx   #$0048         ; Decimal 72 -> X
005CB2 7F5CB2 18 10                       idiv                 ; (D)/(X)->(X)rem(D) (CASprd512/72)
005CB4 7F5CB4 B7 54                       tfr   X,D            ; Copy result in "X" to "D"
005CB6 7F5CB6 CD 00 0A                        ldy   #$000A         ; Decimal 10 -> Accu Y
005CB9 7F5CB9 13                              emul                 ; (D)*(Y)->Y:D result * 10 = "Degx10tk512"
005CBA 7F5CBA 7C 10 1D                        std   Degx10tk512    ; Copy result to "Degx10tk512"
005CBD 7F5CBD 18 79 10 1F                     clrw  Degx10tk256    ; Clear "Degx10tk256"
005CC1 7F5CC1 20 15                           bra   CASprdDone     ; Branch to CASprdDone:
005CC3 7F5CC3                         CAS256:
005CC3 7F5CC3 7C 10 A8                    std   CASprd256      ; Copy result to "CASprd256" (CAS period in 2.56uS resolution)
                                      ;******************************************************************************************
                                      ; - Convert Crank Angle Sensor period (2.56uS res)to degrees x 10 of rotation (for 1 tenth
                                      ;   of a degree resolution calculations).("Degx10tk256")
                                      ;******************************************************************************************
005CC6 7F5CC6 CE 00 48                    ldx   #$0048         ; Decimal 72 -> X
005CC9 7F5CC9 18 10                       idiv                 ; (D)/(X)->(X)rem(D) (CASprd256/72)
005CCB 7F5CCB B7 54                       tfr   X,D            ; Copy result in "X" to "D"
005CCD 7F5CCD CD 00 0A                        ldy   #$000A         ; Decimal 10 -> Accu Y
005CD0 7F5CD0 13                              emul                 ; (D)*(Y)->Y:D result * 10 = "Degx10tk256"
005CD1 7F5CD1 7C 10 1F                        std   Degx10tk256    ; Copy result to "Degx10tk256"
005CD4 7F5CD4 18 79 10 1D                 clrw  Degx10tk512    ; Clear "Degx10tk512"
005CD8 7F5CD8                         CASprdDone:
                                      ;*****************************************************************************************
                                      ; - Determine if the engine is cranking or running. The timer is initialized with a
                                      ;   5.12uS time base and the engine status bit field "engine" is cleared on power up.
                                      ;   "Spantk" will roll over at ~85 RPM with a 5.12uS base and at ~169 RPM with a
                                      ;   2.56uS base. The time base is switched from 5.12uS to 2.56uS at ~300 RPM which should
                                      ;   be at a speed when the engine is running. Engine speed can drop to as low as ~169 RPM
                                      ;   before ignition calculations cannot be done. It is not likely that the engine will
                                      ;   continue to run at this speed and will stall. Stall detection is done in the main
                                      ;   loop if the period between crank sensor signals is greater than ~2 seconds.
                                      ;*****************************************************************************************
005CD8 7F5CD8 1E 10 EF 04 50              brset  engine,run,CASprdOK ; If "run" bit of "engine" bit field is set branch to
                                                                    ; CASDone:
005CDD 7F5CDD FC 10 A6                    ldd   CASprd512       ; "CASprd512"-> Accu D (CAS period in 5.12uS resolution)
005CE0 7F5CE0 8C 1E 84                        cpd   #$1E84          ; Compare with decimal 7812 ("CASprdtk" for 300 RPM @5.12uS
                                                                    ; time base)
005CE3 7F5CE3 22 28                           bhi   StillCranking   ; Period is greater than that for 300 RPM so engine is still
                                                                    ; cranking. Branch to StillCranking:
005CE5 7F5CE5 20 00                       bra   SwitchToRun     ; Branch to SwitchToRun:
005CE7 7F5CE7                         SwitchToRun:
005CE7 7F5CE7 18 0B 7F 00 6E              movb #$7F,ECT_PTPSR   ; Load ECT_PTPSR with %01111111
                                                                ; (prescale 128, 2.56us resolution,
                                                                ; max period 167.7696ms)
005CEC 7F5CEC 18 0B 7F 03 FE              movb #$7F,TIM_PTPSR   ; (TIM_PTPSR equ $03FE) Load TIM_PTPSR with %01111111
                                                                ; (prescale 128, 2.56us resolution,
                                                                ; max period 167.7696ms)
005CF1 7F5CF1 1C 10 EF 04                 bset  engine,run      ; Set "run" bit of "engine" variable
005CF5 7F5CF5 1D 10 EF 02                 bclr  engine,crank    ; Clear "crank" bit of "engine" variable
005CF9 7F5CF9 1D 10 F0 01                 bclr engine2,base512  ; Clear the "base512" bit of "engine" bit field
005CFD 7F5CFD 1C 10 F0 02                 bset engine2,base256  ; Set the "base256" bit of "engine" bit field
005D01 7F5D01 18 79 10 A6                 clrw  CASprd512       ; Clear "CASprd512"
005D05 7F5D05 MACRO                           FUEL_PUMP_AND_ASD_ON  ; Energise fuel pump and ASD Relay (macro in gpio_BEEM.s)
                                                            ; with %00010000 (PS4 pull down,                           (FUEL_PUMP_AND_ASD_ON)
                                                            ; PS7,6,5,3,2,1,0 pull up)                                 (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ; - Initialize Port T. Enhanced Capture Channels IOC7-IOC0. pg 527               (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT0(P9) - IOC0 OC0 LED red  (D7)(1to28)(Ign1)(1&6)   (output, low)                * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT1(P10) - IOC1 IC1 (CASc)(Tooth decoder)(input,  pull-down) VR sensor P9         * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT2(P11) - IOC2 OC2 LED red  (D8)(1to28)(Ign2)(10&5)  (output, low)               * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT3(P12) - IOC3 IC3 (VSSb)(Vehicle Speed)(input,  pull-down) VR sensor P10        * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT4(P15) - IOC4 IC4 (CASa)(RPM)          (input,  pull-down) Volt to Freq U1      * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT5(P16) - IOC5 IC5 (CASd)(Tooth decoder)(input,  pull-down) gear tooth K2 Cam    * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT6(P17) - IOC6 IC6 (VSSa)(Vehicle Speed)(input,  pull-down) Volt to Freq U2      * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT7(P18) - IoC7 IC7 (CASb)(Tooth decoder)(input,  pull-down) gear tooth K3 Crank  * (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ;* - NOTE! Port T is initialized in ect_BEEM.s                                   (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ; - Energise the Fuel pump relay and the Emergency Shutdown relay on Port B Bit0 and Bit1 (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
005D05 7F5D05 4C 01 01                    bset  PORTB,FuelPump  ; Set "FuelPump" pin on Port B(LED9 board 1 to 28)     (FUEL_PUMP_AND_ASD_ON)
005D08 7F5D08 4C 01 02                        bset  PORTB,ASDRelay  ; Set "ASDRelay" pin on Port B(LED23 board 1 to 28) (FUEL_PUMP_AND_ASD_ON)
005D0B 7F5D0B 20 20                           bra   CASprdOK        ; Branch to CASprdOK:
005D0D 7F5D0D                         StillCranking:
005D0D 7F5D0D 18 0B FF 00 6E              movb #$FF,ECT_PTPSR   ; Load ECT_PTPSR with %11111111
                                                                ; (prescale 256, 5.12us resolution,
                                                                ; max period 335.5ms)
005D12 7F5D12 18 0B FF 03 FE              movb #$FF,TIM_PTPSR   ; Load TIM_PTPSR with %11111111
                                                                ; (prescale 256, 5.12us resolution,
                                                                ; max period 335.5ms)
005D17 7F5D17 1D 10 EF 04                 bclr engine,run       ; Clear "run" bit of "engine" variable
005D1B 7F5D1B 1C 10 EF 02                 bset engine,crank     ; Set "crank" bit of "engine" variable
005D1F 7F5D1F 1C 10 F0 01                 bset engine2,base512  ; Set the "base512" bit of "engine" bit field
005D23 7F5D23 1D 10 F0 02                 bclr engine2,base256  ; Clear the "base256" bit of "engine" bit field
005D27 7F5D27 MACRO                           FUEL_PUMP_AND_ASD_ON  ; Energise fuel pump and ASD Relay (macro in gpio_BEEM.s)
                                                            ; with %00010000 (PS4 pull down,                           (FUEL_PUMP_AND_ASD_ON)
                                                            ; PS7,6,5,3,2,1,0 pull up)                                 (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ; - Initialize Port T. Enhanced Capture Channels IOC7-IOC0. pg 527               (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT0(P9) - IOC0 OC0 LED red  (D7)(1to28)(Ign1)(1&6)   (output, low)                * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT1(P10) - IOC1 IC1 (CASc)(Tooth decoder)(input,  pull-down) VR sensor P9         * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT2(P11) - IOC2 OC2 LED red  (D8)(1to28)(Ign2)(10&5)  (output, low)               * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT3(P12) - IOC3 IC3 (VSSb)(Vehicle Speed)(input,  pull-down) VR sensor P10        * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT4(P15) - IOC4 IC4 (CASa)(RPM)          (input,  pull-down) Volt to Freq U1      * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT5(P16) - IOC5 IC5 (CASd)(Tooth decoder)(input,  pull-down) gear tooth K2 Cam    * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT6(P17) - IOC6 IC6 (VSSa)(Vehicle Speed)(input,  pull-down) Volt to Freq U2      * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT7(P18) - IoC7 IC7 (CASb)(Tooth decoder)(input,  pull-down) gear tooth K3 Crank  * (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ;* - NOTE! Port T is initialized in ect_BEEM.s                                   (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ; - Energise the Fuel pump relay and the Emergency Shutdown relay on Port B Bit0 and Bit1 (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
005D27 7F5D27 4C 01 01                    bset  PORTB,FuelPump  ; Set "FuelPump" pin on Port B(LED9 board 1 to 28)     (FUEL_PUMP_AND_ASD_ON)
005D2A 7F5D2A 4C 01 02                        bset  PORTB,ASDRelay  ; Set "ASDRelay" pin on Port B(LED23 board 1 to 28) (FUEL_PUMP_AND_ASD_ON)
005D2D 7F5D2D                         CASprdOK:
005D2D 7F5D2D 1C 10 24 01                 bset  ICflgs,RPMcalc  ; Set "RPMcalc" bit of "ICflgs"
005D31 7F5D31                         CASDone:
                                      ;******************************************************************************************
                                      ; - Rev counter -
                                      ;   Used to decrement "ASErev" every revolution  (count down counter for ASE taper)
                                      ;******************************************************************************************
005D31 7F5D31                         DoRevCntr:
005D31 7F5D31 B6 10 21                    ldaa  RevCntr        ; Load Accu A with value in "RevCntr"
005D34 7F5D34 81 09                       cmpa  #$09           ; Compare with decimal 9
005D36 7F5D36 27 24                       beq   CAS1           ; If equal branch to CAS1: (First CAS signal)
005D38 7F5D38 81 08                       cmpa  #$08           ; Compare with decimal 8
005D3A 7F5D3A 27 28                       beq   CAS2           ; If equal branch to CAS2: (Second CAS signal)
005D3C 7F5D3C 81 07                       cmpa  #$07           ; Compare with decimal 7
005D3E 7F5D3E 27 29                       beq   CAS3           ; If equal branch to CAS3: (Third CAS signal)
005D40 7F5D40 81 06                       cmpa  #$06           ; Compare with decimal 6
005D42 7F5D42 27 2A                       beq   CAS4           ; If equal branch to CAS4: (Forth CAS signal)
005D44 7F5D44 81 05                       cmpa  #$05           ; Compare with decimal 5
005D46 7F5D46 27 2B                       beq   CAS5           ; If equal branch to CAS5: (Fifth CAS signal)
005D48 7F5D48 81 04                       cmpa  #$04           ; Compare with decimal 4
005D4A 7F5D4A 27 2C                       beq   CAS6           ; If equal branch to CAS6: (Sixth CAS signal)
005D4C 7F5D4C 81 03                       cmpa  #$03           ; Compare with decimal 3
005D4E 7F5D4E 27 2D                       beq   CAS7           ; If equal branch to CAS7: (Seventh CAS signal)
005D50 7F5D50 81 02                       cmpa  #$02           ; Compare with decimal 2
005D52 7F5D52 27 2E                       beq   CAS8           ; If equal branch to CAS8: (Eighth CAS signal)
005D54 7F5D54 81 01                       cmpa  #$01           ; Compare with decimal 1
005D56 7F5D56 27 2F                       beq   CAS9           ; If equal branch to CAS9: (Nineth CAS signal)
005D58 7F5D58 81 00                       cmpa  #$00           ; Compare with zero
005D5A 7F5D5A 27 30                       beq   CAS10          ; If equal branch to CAS10: (Tenth CAS signal)
005D5C 7F5D5C                         CAS1:
005D5C 7F5D5C 73 10 55                    dec   ASErev           ; Decrement "ASErev"(countdown value for ASE taper)
005D5F 7F5D5F 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now eight)
005D62 7F5D62 20 31                       bra   RevCntrDone      ; Branch to RevCntrDone:
005D64 7F5D64                         CAS2:
005D64 7F5D64 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now seven)
005D67 7F5D67 20 2C                       bra   RevCntrDone      ; Branch to RevCntrDone:
005D69 7F5D69                         CAS3:
005D69 7F5D69 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now six)
005D6C 7F5D6C 20 27                       bra   RevCntrDone      ; Branch to RevCntrDone:
005D6E 7F5D6E                         CAS4:
005D6E 7F5D6E 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now five)
005D71 7F5D71 20 22                       bra   RevCntrDone      ; Branch to RevCntrDone:
005D73 7F5D73                         CAS5:
005D73 7F5D73 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now four)
005D76 7F5D76 20 1D                       bra   RevCntrDone      ; Branch to RevCntrDone:
005D78 7F5D78                         CAS6:
005D78 7F5D78 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now three)
005D7B 7F5D7B 20 18                       bra   RevCntrDone      ; Branch to RevCntrDone:
005D7D 7F5D7D                         CAS7:
005D7D 7F5D7D 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now two)
005D80 7F5D80 20 13                       bra   RevCntrDone      ; Branch to RevCntrDone:
005D82 7F5D82                         CAS8:
005D82 7F5D82 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now one)
005D85 7F5D85 20 0E                       bra   RevCntrDone      ; Branch to RevCntrDone:
005D87 7F5D87                         CAS9:
005D87 7F5D87 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now zero)
005D8A 7F5D8A 20 09                       bra   RevCntrDone      ; Branch to RevCntrDone:
005D8C 7F5D8C                         CAS10:
005D8C 7F5D8C 1C 10 24 20                 bset  ICflgs,RevMarker ; Set "RevMarker" flag of "ICflags" bit field
005D90 7F5D90 18 0B 09 10 21              movb  #$09,RevCntr     ; Load "RevCntr" with decimal 9(We have 10 CAS signals so the
                                                                 ; crank has turned 1 revolution, reset the counter to nine)
005D95 7F5D95                         RevCntrDone:
                                      ;*****************************************************************************************
                                      ; - "State" event handlers
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; CT3/T1 – Synchronization point, no event.
                                      ; CT3/T2 – Start timer for ignition #1, waste #6
                                      ; CT3/T3 - Start timer for ignition #10, waste #5
                                      ; CT3/T4 – Start injection pulse for #3 & #6
                                      ; CT4/T5 - Synchronization point, no event.
                                      ; CT4/T6 - Start timer for ignition #9, waste #8
                                      ; CT4/T7 - Start timer for ignition #4, waste #7
                                      ; CT4/T8 - Start injection pulse for #5 & #8
                                      ; CT4/T9 – No event.
                                      ; CT4/T10 - Start timer for ignition #3, waste #2
                                      ; CT4/T1 – Synchronization point, start timer for ignition #6, waste #1
                                      ; CT4/T2 - Start injection pulse for #7 & #2
                                      ; CT4/T3 - No event.
                                      ; CT4/T4 - Start timer for ignition #5, waste #10
                                      ; CT1/T5 - Synchronization point, start timer for ignition #8, waste #9
                                      ; CT1/T6 - Start injection pulse for #1 & #10
                                      ; CT1/T7 - No event.
                                      ; CT1/T8 - Start timer for ignition #7, waste #4
                                      ; CT1/T9 - Start timer for ignition #2, waste #3
                                      ; CT1/T10 - Start injection pulse for #9 & #4
                                      ; Repeat
                                      ; Ignition timers start 150 degrees BTDC on compression. Injectors start pulse width
                                      ; when the intake valve just begins to open on odd cylinders, and 54 degrees before the
                                      ; intake valve starts to open on even cylinders.
                                      ;*****************************************************************************************
005D95 7F5D95 B6 10 14                    ldaa    State           ; Load accu A with value in "State"
005D98 7F5D98 81 7D                       cmpa    #$7D            ; Compare with decimal 125 (CT3/T1)
005D9A 7F5D9A 27 6E                       beq     Notch_CT3_T1    ; If the Z bit of CCR is set, branch to Notch_CT3_T1:
005D9C 7F5D9C 81 6F                       cmpa    #$6F            ; Compare with decimal 111 (CT3/T2)
005D9E 7F5D9E 27 6D                       beq     Notch_CT3_T2    ; If the Z bit of CCR is set, branch to Notch_CT3_T2:
005DA0 7F5DA0 81 70                       cmpa    #$70            ; Compare with decimal 112 (CT3/T3)
005DA2 7F5DA2 27 79                       beq     Notch_CT3_T3    ; If the Z bit of CCR is set, branch to Notch_CT3_T3:
005DA4 7F5DA4 81 71                       cmpa    #$71            ; Compare with decimal 113 (CT3/T4)
005DA6 7F5DA6 18 27 00 83                 beq     Notch_CT3_T4    ; If the Z bit of CCR is set, branch to Notch_CT3_T4:
005DAA 7F5DAA 81 7F                       cmpa    #$7F            ; Compare with decimal 127 (CT4/T5)
005DAC 7F5DAC 18 27 00 91                 beq     Notch_CT4_T5    ; If the Z bit of CCR is set, branch to Notch_CT4_T5:
005DB0 7F5DB0 81 7B                       cmpa    #$7B            ; Compare with decimal 123 (CT4/T6)
005DB2 7F5DB2 18 27 00 8E                 beq     Notch_CT4_T6    ; If the Z bit of CCR is set, branch to Notch_CT4/T6:
005DB6 7F5DB6 81 7A                       cmpa    #$7A            ; Compare with decimal 122 (CT4/T7)
005DB8 7F5DB8 18 27 00 9C                 beq     Notch_CT4_T7    ; If the Z bit of CCR is set, branch to Notch_CT4_T7:
005DBC 7F5DBC 81 79                       cmpa    #$79            ; Compare with decimal 121 (CT4/T8)
005DBE 7F5DBE 18 27 00 AA                 beq     Notch_CT4_T8    ; If the Z bit of CCR is set, branch to Notch_CT4_T8:
005DC2 7F5DC2 81 78                       cmpa    #$78            ; Compare with decimal 120 (CT4/T9)
005DC4 7F5DC4 18 27 00 B8                 beq     Notch_CT4_T9    ; If the Z bit of CCR is set, branch to Notch_CT4_T9:
005DC8 7F5DC8 81 77                       cmpa    #$77            ; Compare with decimal 119 (CT4/T10)
005DCA 7F5DCA 18 27 00 B5                 beq     Notch_CT4_T10   ; If the Z bit of CCR is set, branch to Notch_CT4_T10:
005DCE 7F5DCE 81 7E                       cmpa    #$7E            ; Compare with decimal 126 (CT4/T1)
005DD0 7F5DD0 18 27 00 C3                 beq     Notch_CT4_T1    ; If the Z bit of CCR is set, branch to Notch_CT4_T1:
005DD4 7F5DD4 81 76                       cmpa    #$76            ; Compare with decimal 118 (CT4/T2)
005DD6 7F5DD6 18 27 00 CD                 beq     Notch_CT4_T2    ; If the Z bit of CCR is set, branch to Notch_CT4_T2:
005DDA 7F5DDA 81 75                       cmpa    #$75            ; Compare with decimal 117 (CT4/T3)
005DDC 7F5DDC 18 27 00 DB                 beq     Notch_CT4_T3    ; If the Z bit of CCR is set, branch to Notch_CT4_T3:
005DE0 7F5DE0 81 74                       cmpa    #$74            ; Compare with decimal 116 (CT4/T4)
005DE2 7F5DE2 18 27 00 D8                 beq     Notch_CT4_T4    ; If the Z bit of CCR is set, branch to Notch_CT4_T4:
005DE6 7F5DE6 81 7C                       cmpa    #$7C            ; Compare with decimal 124 (CT1/T5)
005DE8 7F5DE8 18 27 00 E2                 beq     Notch_CT1_T5    ; If the Z bit of CCR is set, branch to Notch_CT1_T5:
005DEC 7F5DEC 81 68                       cmpa    #$68            ; Compare with decimal 104 (CT1/T6)
005DEE 7F5DEE 18 27 00 F0                 beq     Notch_CT1_T6    ; If the Z bit of CCR is set, branch to Notch_CT1_T6:
005DF2 7F5DF2 81 69                       cmpa    #$69            ; Compare with decimal 105 (CT1/T7)
005DF4 7F5DF4 18 27 00 FE                 beq     Notch_CT1_T7    ; If the Z bit of CCR is set, branch to Notch_CT1_T7:
005DF8 7F5DF8 81 6A                       cmpa    #$6A            ; Compare with decimal 106 (CT1/T8)
005DFA 7F5DFA 18 27 00 FB                 beq     Notch_CT1_T8    ; If the Z bit of CCR is set, branch to Notch_CT1_T8:
005DFE 7F5DFE 81 6B                       cmpa    #$6B            ; Compare with decimal 107 (CT1/T9)
005E00 7F5E00 18 27 01 09                 beq     Notch_CT1_T9    ; If the Z bit of CCR is set, branch to Notch_CT1_T9:
005E04 7F5E04 81 6C                       cmpa    #$6C            ; Compare with decimal 108 (CT1/T10)
005E06 7F5E06 18 27 01 17                 beq     Notch_CT1_T10   ; If the Z bit of CCR is set, branch to Notch_CT1_T10:
005E0A 7F5E0A                         Notch_CT3_T1:
                                      ;*****************************************************************************************
                                      ; - This is one of 4 Synchronization points but no event happens
                                      ;*****************************************************************************************
005E0A 7F5E0A 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E0D 7F5E0D                         Notch_CT3_T2:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #1 cylinder. Start the hardware timer to delay the
                                      ;   coil dwell for spark #1, waste #6 if we are in run mode.
                                      ;*****************************************************************************************
005E0D 7F5E0D MACRO                       FIRE_IGN1                 ; macro in Tim_BPEM488.s
                                      ;***************************************************************************************** (FIRE_IGN1)
                                      ; - PT0(P9) - IOC0 OC0 LED red  (D7)(1to28)(Ign1)(1&6) Control                   (FIRE_IGN1)
                                      ;***************************************************************************************** (FIRE_IGN1)
                                      ;***************************************************************************************** (FIRE_IGN1)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN1)
                                      ;***************************************************************************************** (FIRE_IGN1)
005E0D 7F5E0D 4C 49 02                    bset ECT_TCTL2,Bit1 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN1)
005E10 7F5E10 4C 49 01                    bset ECT_TCTL2,Bit0 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN1)
005E13 7F5E13 DC 44                       ldd  ECT_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN1)
005E15 7F5E15 F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN1)
005E18 7F5E18 5C 50                       std  ECT_TC0H       ; Copy result to Timer IC/OC register 0 (Start OC operation) (FIRE_IGN1)
005E1A 7F5E1A 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E1D 7F5E1D                         Notch_CT3_T3:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #10 cylinder. Start the hardware timer to delay the coil
                                      ;   coil dwell for spark #10, waste #5 if we are in run mode.
                                      ;*****************************************************************************************
005E1D 7F5E1D MACRO                       FIRE_IGN2                 ; macro in Tim_BEEM488.s
                                                              ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
                                      ; - PT2(P11) - IOC2 OC2 LED red  (D8)(1to28)(Ign2)(10&5) Control                 (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
005E1D 7F5E1D 4C 49 20                    bset ECT_TCTL2,Bit5 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN2)
005E20 7F5E20 4C 49 10                    bset ECT_TCTL2,Bit4 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN2)
005E23 7F5E23 DC 44                       ldd  ECT_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN2)
005E25 7F5E25 F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN2)
005E28 7F5E28 5C 54                       std  ECT_TC2H       ; Copy result to Timer IC/OC register 2 (Start OC operation) (FIRE_IGN2)
005E2A 7F5E2A 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E2D 7F5E2D                         Notch_CT3_T4:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 6 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #3 cylinder and 60 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #6 cylinder. #3 intake valve is just sstarting to open
                                      ;   and #6 intake valve is 54 degrees before it will start to open. Start the pulse
                                      ;   width for injectors 3&6.
                                      ;*****************************************************************************************
005E2D 7F5E2D MACRO                       FIRE_INJ3                 ; Macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
                                      ; - PP5(P111) - TIM1 OC5 (D6)(87to112)(Inj3)(3&6) Control                        (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
005E2D 7F5E2D 1C 03 D8 04                 bset TIM_TCTL1,Bit2 ; Set Ch5 output line to 1 on compare                    (FIRE_INJ3)
005E31 7F5E31 1C 03 D8 08                 bset TIM_TCTL1,Bit3 ; Set Ch5 output line to 1 on compare                    (FIRE_INJ3)
005E35 7F5E35 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ3)
005E38 7F5E38 F3 10 5F                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ3)
005E3B 7F5E3B 7C 03 EA                    std  TIM_TC5H       ; Copy result to Timer IC/OC register 5 (Start OC operation) (FIRE_INJ3)
005E3E 7F5E3E 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E41 7F5E41                         Notch_CT4_T5:
                                      ;*****************************************************************************************
                                      ; - This is one of 4 Synchronization points but no event happens
                                      ;*****************************************************************************************
005E41 7F5E41 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E44 7F5E44                         Notch_CT4_T6:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #9 cylinder. Start the hardware timer to delay the
                                      ;   coil dwell for spark #9, waste #8 if we are in run mode.
                                      ;*****************************************************************************************
005E44 7F5E44 MACRO                       FIRE_IGN3                 ; macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
                                      ; - PP0(P4) - TIM1 OC0 (D21)(1to28)(Ign3)(9&8) Control                           (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
005E44 7F5E44 1C 03 D9 02                 bset TIM_TCTL2,Bit1 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN3)
005E48 7F5E48 1C 03 D9 01                 bset TIM_TCTL2,Bit0 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN3)
005E4C 7F5E4C FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN3)
005E4F 7F5E4F F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN3)
005E52 7F5E52 7C 03 E0                    std  TIM_TC0H       ; Copy result to Timer IC/OC register 0 (Start OC operation) (FIRE_IGN3)
005E55 7F5E55 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E58 7F5E58                         Notch_CT4_T7:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #4 cylinder. Start the hardware timer to delay the coil
                                      ;   coil dwell for spark #4, waste #7 if we are in run mode.
                                      ;*****************************************************************************************
005E58 7F5E58 MACRO                       FIRE_IGN4                 ; macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
                                      ; - PP1(P3) - TIM1 OC1 (D5)(1to28)(Ign4)(4&7) Control                            (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
005E58 7F5E58 1C 03 D9 08                 bset TIM_TCTL2,Bit3 ; Set Ch1 output line to 1 on compare                    (FIRE_IGN4)
005E5C 7F5E5C 1C 03 D9 04                 bset TIM_TCTL2,Bit2 ; Set Ch1 output line to 1 on compare                    (FIRE_IGN4)
005E60 7F5E60 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN4)
005E63 7F5E63 F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN4)
005E66 7F5E66 7C 03 E2                    std  TIM_TC1H       ; Copy result to Timer IC/OC register 1 (Start OC operation) (FIRE_IGN4)
005E69 7F5E69 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E6C 7F5E6C                         Notch_CT4_T8:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 6 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #5 cylinder and 60 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #8 cylinder. #5 intake valve is just sstarting to open
                                      ;   and #8 intake valve is 54 degrees before it will start to open. Start the pulse
                                      ;   width for injectors 5&8.
                                      ;*****************************************************************************************
005E6C 7F5E6C MACRO                       FIRE_INJ4                 ; Macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
                                      ; - PP6(P110) - TIM1 OC6 (D1)(87to112)(Inj4)(5&8) Control                        (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
005E6C 7F5E6C 1C 03 D8 10                 bset TIM_TCTL1,Bit4 ; Set Ch6 output line to 1 on compare                    (FIRE_INJ4)
005E70 7F5E70 1C 03 D8 20                 bset TIM_TCTL1,Bit5 ; Set Ch6 output line to 1 on compare                    (FIRE_INJ4)
005E74 7F5E74 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ4)
005E77 7F5E77 F3 10 5F                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ4)
005E7A 7F5E7A 7C 03 EC                    std  TIM_TC6H       ; Copy result to Timer IC/OC register 6 (Start OC operation) (FIRE_INJ4)
005E7D 7F5E7D 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E80 7F5E80                         Notch_CT4_T9:
                                      ;*****************************************************************************************
                                      ; - No event
                                      ;*****************************************************************************************
005E80 7F5E80 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E83 7F5E83                         Notch_CT4_T10:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #3 cylinder. Start the hardware timer to delay the .
                                      ;   coil dwell for spark #3, waste #2 if we are in run mode.
                                      ;*****************************************************************************************
005E83 7F5E83 MACRO                       FIRE_IGN5                 ; macro in Tim_BPEM488.s
                                                              ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
                                      ; - PP2(P2) - TIM1 OC2 (D24)(1to28)(Ign5)(3&2) Control                           (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
005E83 7F5E83 1C 03 D9 20                 bset TIM_TCTL2,Bit5 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN5)
005E87 7F5E87 1C 03 D9 10                 bset TIM_TCTL2,Bit4 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN5)
005E8B 7F5E8B FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN5)
005E8E 7F5E8E F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN5)
005E91 7F5E91 7C 03 E4                    std  TIM_TC2H       ; Copy result to Timer IC/OC register 2 (Start OC operation) (FIRE_IGN5)
005E94 7F5E94 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E97 7F5E97                         Notch_CT4_T1:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #6 cylinder. Start the hardware timer to delay the
                                      ;   coil dwell for spark #6, waste #1 if we are in run mode.
                                      ;*****************************************************************************************
005E97 7F5E97 MACRO                       FIRE_IGN1                 ; macro in Tim_BPEM488.s
                                      ;***************************************************************************************** (FIRE_IGN1)
                                      ; - PT0(P9) - IOC0 OC0 LED red  (D7)(1to28)(Ign1)(1&6) Control                   (FIRE_IGN1)
                                      ;***************************************************************************************** (FIRE_IGN1)
                                      ;***************************************************************************************** (FIRE_IGN1)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN1)
                                      ;***************************************************************************************** (FIRE_IGN1)
005E97 7F5E97 4C 49 02                    bset ECT_TCTL2,Bit1 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN1)
005E9A 7F5E9A 4C 49 01                    bset ECT_TCTL2,Bit0 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN1)
005E9D 7F5E9D DC 44                       ldd  ECT_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN1)
005E9F 7F5E9F F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN1)
005EA2 7F5EA2 5C 50                       std  ECT_TC0H       ; Copy result to Timer IC/OC register 0 (Start OC operation) (FIRE_IGN1)
005EA4 7F5EA4 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005EA7 7F5EA7                         Notch_CT4_T2:
                                      ;*****************************************************************************************
                                      ; - If we are here it is 1 of 4 synchronization points and the crankshaft is at 6 degrees
                                      ;   before top dead centre on the exhaust/intake strokes for #7 cylinder and 60 degrees
                                      ;   before top dead centre on the exhaust/intake strokes for #2 cylinder. #5 intake valve
                                      ;   is just starting to open and #8 intake valve is 54 degrees before it will start to
                                      ;   open. Start the pulse width for injectors 7&2.
                                      ;*****************************************************************************************
005EA7 7F5EA7 MACRO                       FIRE_INJ5                 ; Macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
                                      ; - PP7(P109) - TIM1 OC7 (D7)(87to112)(Inj5)(7&2) Control                        (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
005EA7 7F5EA7 1C 03 D8 80                 bset TIM_TCTL1,Bit7 ; Set Ch7 output line to 1 on compare                    (FIRE_INJ5)
005EAB 7F5EAB 1C 03 D8 40                 bset TIM_TCTL1,Bit6 ; Set Ch7 output line to 1 on compare                    (FIRE_INJ5)
005EAF 7F5EAF FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ5)
005EB2 7F5EB2 F3 10 5F                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ5)
005EB5 7F5EB5 7C 03 EE                    std  TIM_TC7H       ; Copy result to Timer IC/OC register 7(Start OC operation) (FIRE_INJ5)
005EB8 7F5EB8 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005EBB 7F5EBB                         Notch_CT4_T3:
                                      ;*****************************************************************************************
                                      ; - No event
                                      ;*****************************************************************************************
005EBB 7F5EBB 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005EBE 7F5EBE                         Notch_CT4_T4:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #5 cylinder. Start the hardware timer to delay the
                                      ;   coil dwell for spark #5, waste #10 if we are in run mode.
                                      ;*****************************************************************************************
005EBE 7F5EBE MACRO                       FIRE_IGN2                 ; macro in Tim_BPEM488.s
                                                              ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
                                      ; - PT2(P11) - IOC2 OC2 LED red  (D8)(1to28)(Ign2)(10&5) Control                 (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
005EBE 7F5EBE 4C 49 20                    bset ECT_TCTL2,Bit5 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN2)
005EC1 7F5EC1 4C 49 10                    bset ECT_TCTL2,Bit4 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN2)
005EC4 7F5EC4 DC 44                       ldd  ECT_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN2)
005EC6 7F5EC6 F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN2)
005EC9 7F5EC9 5C 54                       std  ECT_TC2H       ; Copy result to Timer IC/OC register 2 (Start OC operation) (FIRE_IGN2)
005ECB 7F5ECB 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005ECE 7F5ECE                         Notch_CT1_T5:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #8 cylinder. Start the hardware timer to delay the
                                      ;   coil dwell for spark #8, waste #9 if we are in run mode.
                                      ;*****************************************************************************************
005ECE 7F5ECE MACRO                       FIRE_IGN3                 ; macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
                                      ; - PP0(P4) - TIM1 OC0 (D21)(1to28)(Ign3)(9&8) Control                           (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
005ECE 7F5ECE 1C 03 D9 02                 bset TIM_TCTL2,Bit1 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN3)
005ED2 7F5ED2 1C 03 D9 01                 bset TIM_TCTL2,Bit0 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN3)
005ED6 7F5ED6 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN3)
005ED9 7F5ED9 F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN3)
005EDC 7F5EDC 7C 03 E0                    std  TIM_TC0H       ; Copy result to Timer IC/OC register 0 (Start OC operation) (FIRE_IGN3)
005EDF 7F5EDF 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005EE2 7F5EE2                         Notch_CT1_T6:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 6 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #1 cylinder and 60 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #1 cylinder. #10 intake valve is just starting to open
                                      ;   and #8 intake valve is 54 degrees before it will start to open. Start the pulse
                                      ;   width for injectors 1&10.
                                      ;*****************************************************************************************
005EE2 7F5EE2 MACRO                       FIRE_INJ1                 ; Macro in Tim_BPEM488.s
                                      ;***************************************************************************************** (FIRE_INJ1)
                                      ; - PP3(P1) - TIM1 OC3 (D1)(1to28)(Inj1)(1&10) Control                           (FIRE_INJ1)
                                      ;***************************************************************************************** (FIRE_INJ1)
                                      ;***************************************************************************************** (FIRE_INJ1)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ1)
                                      ;***************************************************************************************** (FIRE_INJ1)
005EE2 7F5EE2 1C 03 D9 80                 bset TIM_TCTL2,Bit7 ; Set Ch3 output line to 1 on compare                    (FIRE_INJ1)
005EE6 7F5EE6 1C 03 D9 40                 bset TIM_TCTL2,Bit6 ; Set Ch3 output line to 1 on compare                    (FIRE_INJ1)
005EEA 7F5EEA FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ1)
005EED 7F5EED F3 10 5F                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ1)
005EF0 7F5EF0 7C 03 E6                    std  TIM_TC3H       ; Copy result to Timer IC/OC register 3 (Start OC operation) (FIRE_INJ1)
005EF3 7F5EF3 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005EF6 7F5EF6                         Notch_CT1_T7:
                                      ;*****************************************************************************************
                                      ; - No event
                                      ;*****************************************************************************************
005EF6 7F5EF6 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005EF9 7F5EF9                         Notch_CT1_T8:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #7 cylinder. Start the hardware timer to delay the
                                      ;   coil dwell for spark #7, waste #4 if we are in run mode.
                                      ;*****************************************************************************************
005EF9 7F5EF9 MACRO                       FIRE_IGN4                 ; macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
                                      ; - PP1(P3) - TIM1 OC1 (D5)(1to28)(Ign4)(4&7) Control                            (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
005EF9 7F5EF9 1C 03 D9 08                 bset TIM_TCTL2,Bit3 ; Set Ch1 output line to 1 on compare                    (FIRE_IGN4)
005EFD 7F5EFD 1C 03 D9 04                 bset TIM_TCTL2,Bit2 ; Set Ch1 output line to 1 on compare                    (FIRE_IGN4)
005F01 7F5F01 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN4)
005F04 7F5F04 F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN4)
005F07 7F5F07 7C 03 E2                    std  TIM_TC1H       ; Copy result to Timer IC/OC register 1 (Start OC operation) (FIRE_IGN4)
005F0A 7F5F0A 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005F0D 7F5F0D                         Notch_CT1_T9:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #2 cylinder. Start the hardware timer to delay the
                                      ;   coil dwell for spark #2, waste #3 if we are in run mode.
                                      ;*****************************************************************************************
005F0D 7F5F0D MACRO                       FIRE_IGN5                 ; macro in Tim_BPEM488.s
                                                              ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
                                      ; - PP2(P2) - TIM1 OC2 (D24)(1to28)(Ign5)(3&2) Control                           (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
005F0D 7F5F0D 1C 03 D9 20                 bset TIM_TCTL2,Bit5 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN5)
005F11 7F5F11 1C 03 D9 10                 bset TIM_TCTL2,Bit4 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN5)
005F15 7F5F15 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN5)
005F18 7F5F18 F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN5)
005F1B 7F5F1B 7C 03 E4                    std  TIM_TC2H       ; Copy result to Timer IC/OC register 2 (Start OC operation) (FIRE_IGN5)
005F1E 7F5F1E 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005F21 7F5F21                         Notch_CT1_T10:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 6 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #9 cylinder and 60 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #4 cylinder. #9 intake valve is just starting to open
                                      ;   and #4 intake valve is 54 degrees before it will start to open. Start the pulse
                                      ;   width for injectors 9&4.
                                      ;*****************************************************************************************
005F21 7F5F21 MACRO                       FIRE_INJ2                 ; Macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
                                      ; - PP4(P112) - TIM1 OC4 (D3)(87to112)(Inj2)(9&4) Control                        (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
005F21 7F5F21 1C 03 D8 01                 bset TIM_TCTL1,Bit0 ; Set Ch4 output line to 1 on compare                    (FIRE_INJ2)
005F25 7F5F25 1C 03 D8 02                 bset TIM_TCTL1,Bit1 ; Set Ch4 output line to 1 on compare                    (FIRE_INJ2)
005F29 7F5F29 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ2)
005F2C 7F5F2C F3 10 5F                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ2)
005F2F 7F5F2F 7C 03 E8                    std  TIM_TC4H       ; Copy result to Timer IC/OC register 4 (Start OC operation) (FIRE_INJ2)
005F32 7F5F32 06 5F 35                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005F35 7F5F35                         StateHandlersDone:
005F35 7F5F35 0B                          rti                  ; Return from interrupt
                                      ;**********************************************************************
005F36 7F5F36 -> $5F36                STATE_CODE_END          EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
005F36 7F5F36 -> $7F5F36              STATE_CODE_END_LIN      EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C18 7F6C18                                                 ORG     STATE_TABS_START, STATE_TABS_START_LIN
006C18 7F6C18 -> $7F6C18              STATE_TABS_START_LIN    EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; Lookup table for Dodge V10 Cam/Crank decoding
006C18 7F6C18                         StateLookup:
006C18 7F6C18 0B 0A 0C 46 0D 01 0E 02      db     $0B,$0A,$0C,$46,$0D,$01,$0E,$02,$0F,$03,$10,$04,$11,$05,$12,$06,
              0F 03 10 04 11 05 12 06 
006C28 7F6C28 13 07 14 08 15 09 16 17      db     $13,$07,$14,$08,$15,$09,$16,$17,$46,$7C,$46,$7C,$46,$7C,$46,$7C,
              46 7C 46 7C 46 7C 46 7C 
006C38 7F6C38 18 7C 19 7C 1B 1A 1C 1D      db     $18,$7C,$19,$7C,$1B,$1A,$1C,$1D,$1F,$1E,$21,$20,$46,$7D,$46,$22,
              1F 1E 21 20 46 7D 46 22 
006C48 7F6C48 46 7D 46 7D 46 23 46 7D      db     $46,$7D,$46,$7D,$46,$23,$46,$7D,$46,$7D,$46,$24,$46,$25,$46,$7D,
              46 7D 46 24 46 25 46 7D 
006C58 7F6C58 46 26 46 7D 46 27 46 28      db     $46,$26,$46,$7D,$46,$27,$46,$28,$46,$29,$46,$2A,$46,$2B,$46,$2C,
              46 29 46 2A 46 2B 46 2C 
006C68 7F6C68 46 2D 46 2E 46 2F 46 30      db     $46,$2D,$46,$2E,$46,$2F,$46,$30,$32,$31,$46,$33,$46,$34,$46,$35,
              32 31 46 33 46 34 46 35 
006C78 7F6C78 46 36 46 37 46 7F 46 38      db     $46,$36,$46,$37,$46,$7F,$46,$38,$46,$39,$46,$3A,$46,$3B,$3C,$7E,
              46 39 46 3A 46 3B 3C 7E 
006C88 7F6C88 3D 7E 3E 7E 3F 7E 40 7E      db     $3D,$7E,$3E,$7E,$3F,$7E,$40,$7E,$41,$46,$42,$46,$43,$46,$44,$46,
              41 46 42 46 43 46 44 46 
006C98 7F6C98 45 46 46 7D 46 7D 46 7D      db     $45,$46,$46,$7D,$46,$7D,$46,$7D,$46,$7D,$46,$7D,$46,$46,$46,$46,
              46 7D 46 7D 46 46 46 46 
006CA8 7F6CA8 46 46 46 46 46 46 46 46      db     $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,
              46 46 46 46 46 46 46 46 
006CB8 7F6CB8 46 46 46 46 46 46 46 46      db     $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,
              46 46 46 46 46 46 46 46 
006CC8 7F6CC8 46 46 46 46 46 46 46 46      db     $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,
              46 46 46 46 46 46 46 46 
006CD8 7F6CD8 46 46 46 46 46 46 46 46      db     $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,
              46 46 46 46 46 46 46 46 
006CE8 7F6CE8 46 69 46 6A 46 6B 46 6C      db     $46,$69,$46,$6A,$46,$6B,$46,$6C,$6D,$46,$6E,$46,$46,$7D,$46,$70,
              6D 46 6E 46 46 7D 46 70 
006CF8 7F6CF8 46 71 72 46 46 7F 46 7C      db     $46,$71,$72,$46,$46,$7F,$46,$7C,$73,$46,$46,$74,$46,$75,$46,$7E,
              73 46 46 74 46 75 46 7E 
006D08 7F6D08 46 77 46 78 46 79 46 7A      db     $46,$77,$46,$78,$46,$79,$46,$7A,$46,$68,$46,$6F,$46,$76,$46,$7B,
              46 68 46 6F 46 76 46 7B 
006D18 7F6D18 -> $6D18                STATE_TABS_END          EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006D18 7F6D18 -> $7F6D18              STATE_TABS_END_LIN      EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (interp_BPEM488.s)                                                          *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    2D table interpolation Macro and 3D table interpolation subroutine                 *
                                      ;*    Author Dirk Heisswolf                                                              *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros (This module)           *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    Ma5 25 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006D18 7F6D18 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Constants -                                                                         *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - 3DLUT table parameters for VE, ST and AFR 3D tables. Page is set in main loop when
                                      ;   calling a specific table
                                      ;*****************************************************************************************
006D18 7F6D18 -> $0012                3DLUT_ROW_COUNT             EQU $12   ; Number of rows in table ($12=18)
006D18 7F6D18 -> $0012                3DLUT_COL_COUNT             EQU $12   ; Number of columns in table ($12=18)
006D18 7F6D18 -> $0288                3DLUT_ROW_BIN_OFFSET    EQU     2*(3DLUT_ROW_COUNT*3DLUT_COL_COUNT)
                                                                        ; Row bin offset from start of table ($288=648)
006D18 7F6D18 -> $02AC                3DLUT_COL_BIN_OFFSET    EQU     3DLUT_ROW_BIN_OFFSET+(2*3DLUT_ROW_COUNT)
                                                                        ; Column bin offset from start of table ($2AC=684)
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001025 0FD025                                     ORG     INTERP_VARS_START, INTERP_VARS_START_LIN
001025 0FD025 -> $FD025               INTERP_VARS_START_LIN   EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - 2D Lookup variables - (declared in this module)
                                      ;*****************************************************************************************
001025 0FD025                         CrvPgPtr:   ds 2 ; Pointer to the page where the desired curve resides
001027 0FD027                         CrvRowOfst: ds 2 ; Offset from the curve page to the curve row
001029 0FD029                         CrvColOfst: ds 2 ; Offset from the curve page to the curve column
00102B 0FD02B                         CrvCmpVal:  ds 2 ; Curve comparison value for interpolation
00102D 0FD02D                         CrvBinCnt:  ds 1 ; Number of bins in the curve row or column minus 1
00102E 0FD02E                         IndexNum:   ds 1 ; Position in the row or column of the curve comparison value
00102F 0FD02F                         CrvRowHi:   ds 2 ; Curve row high boundry value for interpolation
001031 0FD031                         CrvRowLo:   ds 2 ; Curve row low boundry value for interpolation
001033 0FD033                         CrvColHi:   ds 2 ; Curve column high boundry value for interpolation
001035 0FD035                         CrvColLo:   ds 2 ; Curve column low boundry value for interpolation
                                      ;*****************************************************************************************
001037 0FD037 -> $1037                INTERP_VARS_END         EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001037 0FD037 -> $FD037               INTERP_VARS_END_LIN     EQU     @     ; @ Represents the current value of the linear
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005F36 7F5F36                                                 ORG     INTERP_CODE_START, INTERP_CODE_START_LIN
005F36 7F5F36 -> $7F5F36              INTERP_CODE_START_LIN   EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - Suboutines -
                                      ;*****************************************************************************************
                                      ; -Look-up value in 3D Table -
                                      ; =========================
                                      ; args:   D: row value
                                      ;         X: column value
                                      ;         Y: table pointer
                                      ; result: D: look-up value
                                      ; SSTACK:  bytes
                                      ;         X and Y are preserved
                                      ;*****************************************************************************************
005F36 7F5F36 -> $5F36                3D_LOOKUP:   EQU        *
                                      ;*****************************************************************************************
                                      ; - Save registers (row value in D, column value in X, table pointer
                                      ;   in Y)
                                      ;*****************************************************************************************
005F36 7F5F36 35                                      PSHY                                    ;save table pointer
005F37 7F5F37 34                                      PSHX                                    ;save column value
005F38 7F5F38 3B                                      PSHD                                    ;save row value
                                      ;*****************************************************************************************
                                                      ;    +--------+--------+
                                                      ;    |    row value    |  SP+ 0 ($3FF8)
                                                      ;    +--------+--------+
                                                      ;    |  column value   |  SP+ 2 ($3FFA)
                                                      ;    +--------+--------+
                                                      ;    |  table pointer  |  SP+ 4 ($3FFC)
                                                      ;    +--------+--------+
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Determine upper and lower column bin entry (column value in X,
                                      ;   table pointer in Y)
                                      ;*****************************************************************************************
005F39 7F5F39 19 EA 02 AC                             LEAY 3DLUT_COL_BIN_OFFSET,Y   ; Column bin pointer -> Y
                                                                            ;($2AC=684)
005F3D 7F5F3D C6 22                           LDAB #(2*(3DLUT_ROW_COUNT-1)) ; Lower column bin offset -> B
                                                                            ;($22=34)
005F3F 7F5F3F 18 0F                           TBA                                     ; Lower  offset -> A (start at $22=34)
005F41 7F5F41 AE EC                           CPX      A,Y            ; Compare column value against current bin
                                                                  ; value
005F43 7F5F43 2C 10                           BGE  3D_LOOKUP_2A   ; First iteration, if equal to or greater
                                                                  ; than current bin value, rail high, upper
                                                                  ; and lower bin offsets the same
005F45 7F5F45                         3D_LOOKUP_1:
005F45 7F5F45 18 0F                           TBA                                     ; Lower  offset -> A
005F47 7F5F47 AE EC                           CPX      A,Y            ; Compare column value against current bin
                                                                  ; value
005F49 7F5F49 2C 08                                   BGE      3D_LOOKUP_2    ; Branch if column value is greater than
                                                                  ; or equal to current bin value
                                                                  ;(match found)
005F4B 7F5F4B 53                                      DECB                ; Decrement bin offset low byte
005F4C 7F5F4C 04 31 F6                                DBNE B,3D_LOOKUP_1  ; Decrement bin offset Hi byte and loop
                                                                  ; back if not zero
005F4F 7F5F4F 18 0F                                   TBA                                     ; Column value too low, no match found,
                                                                  ; rail low, make lower and upper bin
                                                                  ; offsets the same)
005F51 7F5F51 20 02                           BRA   3D_LOOKUP_2A
                                      ;*****************************************************************************************
                                      ; - Increment lower offset to make upper offset
                                      ;*****************************************************************************************
005F53 7F5F53                         3D_LOOKUP_2:
005F53 7F5F53 42                              INCA                ; Increment lower offset Lo byte
005F54 7F5F54 42                              INCA                ; Increment lower offset Hi byte to make
                                                                  ; upper offset in "A"
                                      ;*****************************************************************************************
                                      ; - Push upper and lower column value (upper column bin offset in A,
                                      ;   lower column bin offset in B, column bin pointer in Y)
                                      ;*****************************************************************************************
005F55 7F5F55                         3D_LOOKUP_2A:
005F55 7F5F55 18 02 ED AE                     MOVW B,Y, 2,-SP     ; Push lower column value onto stack
005F59 7F5F59 18 02 EC AE                             MOVW A,Y, 2,-SP     ; Push upper column value onto stack
                                      ;*****************************************************************************************
                                                      ;    +--------+--------+
                                                      ;    | upper col value |  SP+ 0 ($3FF4)
                                                      ;    +--------+--------+
                                                      ;    | lower col value |  SP+ 2 ($3FF6)
                                                      ;    +--------+--------+
                                                      ;    |    row value    |  SP+ 4 ($3FF8)
                                                      ;    +--------+--------+
                                                      ;    |  column value   |  SP+ 6 ($3FFA)
                                                      ;    +--------+--------+
                                                      ;    |  table pointer  |  SP+ 8 ($3FFC)
                                                      ;    +--------+--------+
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Push upper and lower row pointer (upper colum bin offset in A,
                                      ;   lower column bin offset in B)
                                      ;*****************************************************************************************
005F5D 7F5F5D B7 05                                   TFR  A, X             ; Save upper colum bin offset in XL
005F5F 7F5F5F 86 12                                   LDAA #3DLUT_COL_COUNT ; Multiply lower column bin offset
                                                                    ; column count ($12=18)
005F61 7F5F61 12                                      MUL                   ; (A)x(B)->A:B
005F62 7F5F62 E3 88                                   ADDD 8,SP             ; Add table pointer
005F64 7F5F64 3B                                      PSHD                  ; Push lower row pointer onto the stack
005F65 7F5F65 B7 51                                   TFR      X,B              ; Restore upper colum bin offset
005F67 7F5F67 86 12                                   LDAA #3DLUT_COL_COUNT ; Multiply lower column bin offset
                                                                    ; Column count ($12=18)
005F69 7F5F69 12                                      MUL                   ; (A)x(B)->A:B (test 18*6=108)
005F6A 7F5F6A E3 8A                                   ADDD (8+2),SP         ; Add table pointer
005F6C 7F5F6C 3B                                      PSHD                  ; Push upper row pointer onto the stack
                                      ;*****************************************************************************************
                                                      ;    +--------+--------+
                                                      ;    |  upper row ptr  |  SP+ 0 ($3FF0)
                                                      ;    +--------+--------+
                                                      ;    |  lower row ptr  |  SP+ 2 ($3FF2)
                                                      ;    +--------+--------+
                                                      ;    | upper col value |  SP+ 4 ($3FF4)
                                                      ;    +--------+--------+
                                                      ;    | lower col value |  SP+ 6 ($3FF6)
                                                      ;    +--------+--------+
                                                      ;    |    row value    |  SP+ 8 ($3FF8)
                                                      ;    +--------+--------+
                                                      ;    |  column value   |  SP+10 ($3FFA)
                                                      ;    +--------+--------+
                                                      ;    |  table pointer  |  SP+12 ($3FFC)
                                                      ;    +--------+--------+
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Determine upper and lower row bin entry (column value in X,
                                      ;   table pointer in Y)
                                      ;*****************************************************************************************
005F6D 7F5F6D ED 8C                                   LDY      12,SP                    ; Table pointer -> Y
005F6F 7F5F6F 19 EA 02 88                             LEAY 3DLUT_ROW_BIN_OFFSET,Y   ; Row bin pointer -> Y($288=648)
005F73 7F5F73 C6 22                           LDAB #(2*(3DLUT_ROW_COUNT-1)) ; Lower row bin offset -> B
                                                                            ;($22=34)
005F75 7F5F75 EE 88                           LDX  8,SP                     ; Row value -> X
005F77 7F5F77 18 0F                           TBA                ; Lower offset -> A (start at $22=34)
005F79 7F5F79 AE EC                           CPX     A,Y                ; Compare row value against current bin value
005F7B 7F5F7B 2C 10                           BGE 3D_LOOKUP_4A   ; First iteration, if equal to or greater
                                                                 ; than current bin value, rail high, upper
                                                                 ; and lower bin offsets the same
005F7D 7F5F7D                         3D_LOOKUP_3:
005F7D 7F5F7D 18 0F                           TBA                    ; Lower  offset -> A
005F7F 7F5F7F AE EC                           CPX      A,Y           ; Compare column value against current bin
                                                                 ; value
005F81 7F5F81 2C 08                                   BGE     3D_LOOKUP_4    ; Branch if column value is greater than
                                                                 ; or equal to current bin value
                                                                 ;(match found)
005F83 7F5F83 53                                      DECB               ; Decrement bin offset low byte
005F84 7F5F84 04 31 F6                                DBNE B,3D_LOOKUP_3 ; Decrement bin offset Hi byte and loop
                                                                 ; back if not zero
005F87 7F5F87 18 0F                                   TBA                    ; Column value too low, no match found,
                                                                 ; rail low, make lower and upper bin
                                                                 ; offsets the same)
005F89 7F5F89 20 02                           bra   3D_LOOKUP_4A
                                      ;*****************************************************************************************
                                      ; - Increment lower offset to make upper offset
                                      ;*****************************************************************************************
005F8B 7F5F8B                         3D_LOOKUP_4:
005F8B 7F5F8B 42                              INCA                ; Increment lower offset Lo byte
005F8C 7F5F8C 42                              INCA                ; Increment lower offset Hi byte to make
                                                                  ; upper offset in "A"
                                      ;*****************************************************************************************
                                      ; - Push upper and lower row value (upper row bin offset in A,
                                      ;   lower row bin offset in B, row bin pointer in Y)
                                      ;*****************************************************************************************
005F8D 7F5F8D                         3D_LOOKUP_4A:
005F8D 7F5F8D 18 02 ED AE                     MOVW    B,Y, 2,-SP  ; Push lower row value onto stack
005F91 7F5F91 18 02 EC AE                             MOVW    A,Y, 2,-SP  ; Push upper row value onto stack
                                      ;*****************************************************************************************
                                                      ;    +--------+--------+
                                                      ;    | upper row value |  SP+ 0 ($3FFC)
                                                      ;    +--------+--------+
                                                      ;    | lower row value |  SP+ 2 ($3FEE)
                                                      ;    +--------+--------+
                                                      ;    |  upper row ptr  |  SP+ 4 ($3FF0)
                                                      ;    +--------+--------+
                                                      ;    |  lower row ptr  |  SP+ 6 ($3FF2)
                                                      ;    +--------+--------+
                                                      ;    | upper col value |  SP+ 8 ($3FF4)
                                                      ;    +--------+--------+
                                                      ;    | lower col value |  SP+10 ($3FF6)
                                                      ;    +--------+--------+
                                                      ;    |    row value    |  SP+12 ($3FF8)
                                                      ;    +--------+--------+
                                                      ;    |  column value   |  SP+14 ($3FFA)
                                                      ;    +--------+--------+
                                                      ;    |  table pointer  |  SP+16 ($3FFC)
                                                      ;    +--------+--------+
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Read Zhh, Zhl, Zlh, and Zll from look-up table
                                      ;  (upper row bin offset in A, lower row bin offset in B)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                                      ;
                                                      ;   lower                  upper
                                                      ;    row         row        row
                                                      ;   value       value      value
                                                      ;     .           .          .         lower
                                                      ;   ..0......................o.........column
                                                      ;     .Zll        .Zl        .Zlh      value
                                                      ;     .           .          .
                                                      ;     .           .          .
                                                      ;   ...................................column
                                                      ;     .           .Z         .         value
                                                      ;     .           .          .
                                                      ;     .           .          .         upper
                                                      ;   ..o......................o.........column
                                                      ;     .Zhl        .Zh        .Zhh      value
                                                      ;
                                      ;*****************************************************************************************
005F95 7F5F95 ED 84                                   LDY      4,SP       ; Upper row pointer -> Y
005F97 7F5F97 EE 86                                   LDX  6,SP       ; Lower row pointer -> X
005F99 7F5F99 18 02 E5 AE                             MOVW B,X, 2,-SP ; Push Zll
005F9D 7F5F9D 18 02 E4 AE                             MOVW A,X, 2,-SP ; Push Zlh
005FA1 7F5FA1 18 02 ED AE                             MOVW B,Y, 2,-SP ; Push Zhl
005FA5 7F5FA5 18 02 EC AE                             MOVW A,Y, 2,-SP ; Push Zhh
                                      ;*****************************************************************************************
                                                      ;    +--------+--------+
                                                      ;    |       Zhh       |  SP+ 0 ($3FE4)
                                                      ;    +--------+--------+
                                                      ;    |       Zhl       |  SP+ 2 ($3FE6)
                                                      ;    +--------+--------+
                                                      ;    |       Zlh       |  SP+ 4 ($3FE8)
                                                      ;    +--------+--------+
                                                      ;    |       Zll       |  SP+ 6 ($3FEA)
                                                      ;    +--------+--------+
                                                      ;    | upper row value |  SP+ 8 ($3FEC)
                                                      ;    +--------+--------+
                                                      ;    | lower row value |  SP+10 ($3FEE)
                                                      ;    +--------+--------+
                                                      ;    |  upper row ptr  |  SP+12 ($3FF0)
                                                      ;    +--------+--------+
                                                      ;    |  lower row ptr  |  SP+14 ($3FF2)
                                                      ;    +--------+--------+
                                                      ;    | upper col value |  SP+16 ($3FF4)
                                                      ;    +--------+--------+
                                                      ;    | lower col value |  SP+18 ($3FF6)
                                                      ;    +--------+--------+
                                                      ;    |    row value    |  SP+20 ($3FF8)
                                                      ;    +--------+--------+
                                                      ;    |  column value   |  SP+22 ($3FFA)
                                                      ;    +--------+--------+
                                                      ;    |  table pointer  |  SP+24 ($3FFC)
                                                      ;    +--------+--------+
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Determine Zl
                                      ;*****************************************************************************************
                                      ;                         V       V1      V2      Z1     Z2
005FA9 7F5FA9 MACRO                                   2D_IPOL (20,SP), (10,SP), (8,SP), (6,SP), (4,SP)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (2D_IPOL)
                                      ; ==========================                                                     (2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (2D_IPOL)
                                      ; result: D: interpolated result                                                 (2D_IPOL)
                                      ; SSTACK: none                                                                   (2D_IPOL)
                                      ;         no registers are preserved                                             (2D_IPOL)
                                      ;                                                                                (2D_IPOL)
                                      ;    ^ V                                                                         (2D_IPOL)
                                      ;    |                                                                           (2D_IPOL)
                                      ;  Z2+....................*                                                      (2D_IPOL)
                                      ;    |                    :                                                      (2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (2D_IPOL)
                                      ;    |   :       :        :                                                      (2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (2D_IPOL)
                                      ;    |   V1      V        V2                                                     (2D_IPOL)
                                      ;                                                                                (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FA9 7F5FA9 EC F0 14                                LDD       \1    ; load V                                         (2D_IPOL)
005FAC 7F5FAC A3 8A                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (2D_IPOL)
005FAE 7F5FAE B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FB0 7F5FB0 EC 84                                   LDD       \5    ; load Z2                                        (2D_IPOL)
005FB2 7F5FB2 A3 86                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FB4 7F5FB4 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (2D_IPOL)
005FB6 7F5FB6 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FB8 7F5FB8 EC 88                                   LDD       \3    ; load V2                                        (2D_IPOL)
005FBA 7F5FBA A3 8A                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (2D_IPOL)
005FBC 7F5FBC B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (2D_IPOL)
                                      ;*********************************************************************           (2D_IPOL)
005FBE 7F5FBE 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (2D_IPOL)
005FC0 7F5FC0 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FC2 7F5FC2 E3 86                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (2D_IPOL)
005FC4 7F5FC4 3B                                      PSHD     ; Push Zl onto stack
                                      ;*****************************************************************************************
                                                      ;    +--------+--------+
                                                      ;    |       Zl        |  SP+ 0 ($3FE2)
                                                      ;    +--------+--------+
                                                      ;    |       Zhh       |  SP+ 2 ($3FE4)
                                                      ;    +--------+--------+
                                                      ;    |       Zhl       |  SP+ 4 ($3FE6)
                                                      ;    +--------+--------+
                                                      ;    |       Zlh       |  SP+ 6 ($3FE8)
                                                      ;    +--------+--------+
                                                      ;    |       Zll       |  SP+ 8 ($3FEA)
                                                      ;    +--------+--------+
                                                      ;    | upper row value |  SP+10 ($3FEC)
                                                      ;    +--------+--------+
                                                      ;    | lower row value |  SP+12 ($3FEE)
                                                      ;    +--------+--------+
                                                      ;    |  upper row ptr  |  SP+14 ($3FF0)
                                                      ;    +--------+--------+
                                                      ;    |  lower row ptr  |  SP+16 ($3FF2)
                                                      ;    +--------+--------+
                                                      ;    | upper col value |  SP+18 ($3FF4)
                                                      ;    +--------+--------+
                                                      ;    | lower col value |  SP+20 ($3FF6)
                                                      ;    +--------+--------+
                                                      ;    |    row value    |  SP+22 ($3FF8)
                                                      ;    +--------+--------+
                                                      ;    |  column value   |  SP+24 ($3FFA)
                                                      ;    +--------+--------+
                                                      ;    |  table pointer  |  SP+26 ($3FFC)
                                                      ;    +--------+--------+
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Determine Zh
                                      ;*****************************************************************************************
                                      ;                         V       V1       V2      Z1     Z2
005FC5 7F5FC5 MACRO                                   2D_IPOL (22,SP), (12,SP), (10,SP), (4,SP), (2,SP)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (2D_IPOL)
                                      ; ==========================                                                     (2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (2D_IPOL)
                                      ; result: D: interpolated result                                                 (2D_IPOL)
                                      ; SSTACK: none                                                                   (2D_IPOL)
                                      ;         no registers are preserved                                             (2D_IPOL)
                                      ;                                                                                (2D_IPOL)
                                      ;    ^ V                                                                         (2D_IPOL)
                                      ;    |                                                                           (2D_IPOL)
                                      ;  Z2+....................*                                                      (2D_IPOL)
                                      ;    |                    :                                                      (2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (2D_IPOL)
                                      ;    |   :       :        :                                                      (2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (2D_IPOL)
                                      ;    |   V1      V        V2                                                     (2D_IPOL)
                                      ;                                                                                (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FC5 7F5FC5 EC F0 16                                LDD       \1    ; load V                                         (2D_IPOL)
005FC8 7F5FC8 A3 8C                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (2D_IPOL)
005FCA 7F5FCA B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FCC 7F5FCC EC 82                                   LDD       \5    ; load Z2                                        (2D_IPOL)
005FCE 7F5FCE A3 84                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FD0 7F5FD0 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (2D_IPOL)
005FD2 7F5FD2 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FD4 7F5FD4 EC 8A                                   LDD       \3    ; load V2                                        (2D_IPOL)
005FD6 7F5FD6 A3 8C                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (2D_IPOL)
005FD8 7F5FD8 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (2D_IPOL)
                                      ;*********************************************************************           (2D_IPOL)
005FDA 7F5FDA 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (2D_IPOL)
005FDC 7F5FDC B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FDE 7F5FDE E3 84                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (2D_IPOL)
005FE0 7F5FE0 3B                                      PSHD     ; Push Zh onto stack
                                      ;*****************************************************************************************
                                                      ;    +--------+--------+
                                                      ;    |       Zh        |  SP+ 0 ($3FE0)
                                                      ;    +--------+--------+
                                                      ;    |       Zl        |  SP+ 2 ($3FE2)
                                                      ;    +--------+--------+
                                                      ;    |       Zhh       |  SP+ 4 ($3FE4)
                                                      ;    +--------+--------+
                                                      ;    |       Zhl       |  SP+ 6 ($3FE6)
                                                      ;    +--------+--------+
                                                      ;    |       Zlh       |  SP+ 8 ($3FE8)
                                                      ;    +--------+--------+
                                                      ;    |       Zll       |  SP+10 ($3FEA)
                                                      ;    +--------+--------+
                                                      ;    | upper row value |  SP+12 ($3FEC)
                                                      ;    +--------+--------+
                                                      ;    | lower row value |  SP+14 ($3FEE)
                                                      ;    +--------+--------+
                                                      ;    |  upper row ptr  |  SP+16 ($3FF0)
                                                      ;    +--------+--------+
                                                      ;    |  lower row ptr  |  SP+18 ($3FF2)
                                                      ;    +--------+--------+
                                                      ;    | upper col value |  SP+20 ($3FF4)
                                                      ;    +--------+--------+
                                                      ;    | lower col value |  SP+22 ($3FF6)
                                                      ;    +--------+--------+
                                                      ;    |    row value    |  SP+24 ($3FF8)
                                                      ;    +--------+--------+
                                                      ;    |  column value   |  SP+26 ($3FFA)
                                                      ;    +--------+--------+
                                                      ;    |  table pointer  |  SP+28 ($3FFC)
                                                      ;    +--------+--------+
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Determine Z
                                      ;*****************************************************************************************
                                      ;                         V       V1        V2      Z1     Z2
005FE1 7F5FE1 MACRO                                   2D_IPOL (26,SP), (22,SP), (20,SP), (2,SP), (0,SP)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (2D_IPOL)
                                      ; ==========================                                                     (2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (2D_IPOL)
                                      ; result: D: interpolated result                                                 (2D_IPOL)
                                      ; SSTACK: none                                                                   (2D_IPOL)
                                      ;         no registers are preserved                                             (2D_IPOL)
                                      ;                                                                                (2D_IPOL)
                                      ;    ^ V                                                                         (2D_IPOL)
                                      ;    |                                                                           (2D_IPOL)
                                      ;  Z2+....................*                                                      (2D_IPOL)
                                      ;    |                    :                                                      (2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (2D_IPOL)
                                      ;    |   :       :        :                                                      (2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (2D_IPOL)
                                      ;    |   V1      V        V2                                                     (2D_IPOL)
                                      ;                                                                                (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FE1 7F5FE1 EC F0 1A                                LDD       \1    ; load V                                         (2D_IPOL)
005FE4 7F5FE4 A3 F0 16                                SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (2D_IPOL)
005FE7 7F5FE7 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FE9 7F5FE9 EC 80                                   LDD       \5    ; load Z2                                        (2D_IPOL)
005FEB 7F5FEB A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FED 7F5FED 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (2D_IPOL)
005FEF 7F5FEF B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FF1 7F5FF1 EC F0 14                                LDD       \3    ; load V2                                        (2D_IPOL)
005FF4 7F5FF4 A3 F0 16                                SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (2D_IPOL)
005FF7 7F5FF7 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (2D_IPOL)
                                      ;*********************************************************************           (2D_IPOL)
005FF9 7F5FF9 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (2D_IPOL)
005FFB 7F5FFB B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FFD 7F5FFD E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (2D_IPOL)
                                      ;*****************************************************************************************
                                      ; - Free stack space (result in D)
                                      ;*****************************************************************************************
005FFF 7F5FFF 1B F0 1A                                LEAS 26,SP   ; Stack pointer -> bottom of stack
                                      ;*****************************************************************************************
                                      ; - Restore registers (result in D)
                                      ;*****************************************************************************************
006002 7F6002 30                                      PULX   ; Pull index register X from stack
006003 7F6003 31                                      PULY   ; Pull index register Y from stack
                                      ;*****************************************************************************************
                                      ; - Done (result in D)
                                      ;*****************************************************************************************
006004 7F6004 3D                                      RTS   ; Return from subroutine
                                      ;*****************************************************************************************
                                      ; ------------------------------ Linear Interpolation - 2D -------------------------------
                                      ; Graph Plot
                                      ;    |
                                      ;  Z2+....................*
                                      ;    |                    :
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)
                                      ;    |           :        :        Z = Z1 + --------------
                                      ;  Z1+...*       :        :                    (V2-V1)
                                      ;    |   :       :        :
                                      ;   -+---+-------+--------+---
                                      ;    |   V1      V        V2
006005 7F6005 -> $6005                CRV_LU_P:   EQU *
                                      ;*****************************************************************************************
                                      ; - This subroutine calculates the interpolated value of a 2D curve with an X axis that
                                      ;   starts with positive values and ends with positive values.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - First, determine the position in the row of the comparison value for
                                      ;   interpolation (IndexNum). Position in the column will be the same as the position
                                      ;   in the row. Determine the row high and low boundary values.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set up the process to find the interpolated curve value by determining the values
                                      ;   of the first bins in the row and column. Clear the index number variable.
                                      ;*****************************************************************************************
006005 7F6005 MACRO                       CRV_SETUP       ; Macro this module
                                      ;***************************************************************************************** (CRV_SETUP)
                                      ; - Set up the process to find the interpolated curve value by determining the values (CRV_SETUP)
                                      ;   of the first bins in the row and column. Clear the index number variable.    (CRV_SETUP)
                                      ;***************************************************************************************** (CRV_SETUP)
006005 7F6005 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (CRV_SETUP)
006008 7F6008 FC 10 27                    ldd  CrvRowOfst   ; Offset from the curve page to the curve row -> D         (CRV_SETUP)
00600B 7F600B 19 EE                       leay D,Y          ; Curve row pointer -> Y                                   (CRV_SETUP)
00600D 7F600D 18 05 EE 10 31              movw D,Y,CrvRowLo ; Copy to curve row low boundry value for interpolation    (CRV_SETUP)
006012 7F6012 18 05 EE 10 2F              movw D,Y,CrvRowHi ; Copy to curve row high boundry value for interpolation   (CRV_SETUP)
                                                            ; (start with low and high row bin values equal            (CRV_SETUP)
006017 7F6017 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (CRV_SETUP)
00601A 7F601A FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (CRV_SETUP)
00601D 7F601D 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (CRV_SETUP)
00601F 7F601F 18 05 EE 10 35              movw D,Y,CrvColLo ; Copy to curve row column boundry value for interpolation (CRV_SETUP)
006024 7F6024 18 05 EE 10 33              movw D,Y,CrvColHi ; Copy to curve column high boundry value for interpolation (CRV_SETUP)
                                                            ; (start with low and high column bin values equal         (CRV_SETUP)
006029 7F6029 79 10 2E                    clr   IndexNum    ; Position in the row or column of the curve comparison value (CRV_SETUP)
                                      ;*****************************************************************************************
                                      ; - Check to see if CrvCmpVal is =< CrvRowLo. if it is rail low with CrvColLo in Accu D
                                      ;*****************************************************************************************
00602C 7F602C FE 10 2B                    ldx  CrvCmpVal    ; Curve compare value -> X
00602F 7F602F BE 10 31                    cpx  CrvRowLo     ; Compare curve compare value with curve low boundary
006032 7F6032 23 02                       bls  RailLowPos   ; If CrvCmpVal is the same or less than CrvRowLo branch to RailLowPos:
006034 7F6034 20 04                       bra  ReEntCrvPos  ; Branch to ReEntCrvPos:
006036 7F6036                         RailLowPos:
006036 7F6036 FC 10 35                    ldd  CrvColLo    ; Curve column low boundary value -> D
006039 7F6039 3D                          rts              ; Return from subroutine (Rail low, no interpolation required)
                                      ;*****************************************************************************************
                                      ; - Both CrvRowLo and CrvCmpVal are positive. CrvCmpVal is the greater than CrvRowLo.
                                      ;   Determine the value of CrvRowHi
                                      ;*****************************************************************************************
00603A 7F603A                         ReEntCrvPos:
00603A 7F603A 72 10 2E                    inc  IndexNum     ; Increment position in the row or column of the curve comparison
                                                            ; value
00603D 7F603D 18 04 10 2F 10 31           movw CrvRowHi,CrvRowLo ; Curve row high boundry value -> curve row low boundry value
006043 7F6043 18 72 10 27                 incw CrvRowOfst   ; Increment Offset from the curve page to the curve row
006047 7F6047 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y
00604A 7F604A FC 10 27                    ldd  CrvRowOfst   ; Incremented offset from the curve page to the curve row -> D
00604D 7F604D 19 EE                       leay D,Y          ; Curve row pointer -> Y
00604F 7F604F 18 05 EE 10 2F              movw D,Y,CrvRowHi ; Copy to curve row high boundry value for interpolation
                                                            ; (holds the contents of the incremented row bin)
                                      ;*****************************************************************************************
                                      ; - CrvRowLo, CrvCmpVal and CrvRowHi are all positive. CrvCmpVal is the greater than CrvRowLo.
                                      ;   Now see if CrvRowHi is greater than CrvCmpVal. If it is, we have the index number,
                                      ;   if it is not, loop back to increment to the next bin and check again.
                                      ;*****************************************************************************************
006054 7F6054 FE 10 2F                    ldx  CrvRowHi     ; Curve row high boundary -> X
006057 7F6057 BE 10 2B                    cpx  CrvCmpVal    ; Compare curve curve row high boundary with curve compare value
00605A 7F605A 24 08                       bhs  GotNumPos    ; If contents of incremented row bin is greater than or equal to
                                                            ; curve compareson value then branch to GotNumPos:
00605C 7F605C B6 10 2E                    ldaa IndexNum     ; Incremented position in the row or column of the curve comparison
                                                            ; value for interpolation -> A
00605F 7F605F B1 10 2D                    cmpa CrvBinCnt    ; Compare Incremented position in the row or column of the curve
                                                            ; comparison value for interpolation with number of bins in the curve
                                                            ; row or column minus 1
006062 7F6062 26 D6                       bne  ReEntCrvPos  ; If (A)-(M) if IndexNum does not = CrvBinCnt then branch to
                                                            ; ReEntCrvPos:
006064 7F6064                         GotNumPos:
                                      ;*****************************************************************************************
                                      ; - CrvRowLo, CrvCmpVal and CrvRowHi are all positive. CrvCmpVal is the greater than
                                      ;   CrvRowLo. CrvRowHi is greater than or equal to CrvCmpVal so we must have our index
                                      ;   number.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Using the index number determine the column high and low boundary values
                                      ;*****************************************************************************************
006064 7F6064 MACRO                      COL_BOUNDARYS     ; Macro this module
                                                            ; for interpolation (start with zero)                      (COL_BOUNDARYS)
                                      ;***************************************************************************************** (COL_BOUNDARYS)
                                      ; - Using the index number determine the column high and low boundary values     (COL_BOUNDARYS)
                                      ;***************************************************************************************** (COL_BOUNDARYS)
006064 7F6064 FE 10 29                    ldx  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
006067 7F6067 F6 10 2E                    ldab IndexNum     ; IndexNum -> B                                            (COL_BOUNDARYS)
00606A 7F606A 1A E5                       abx               ;(B)+(X)->X Pointer to indexed column bin                  (COL_BOUNDARYS)
00606C 7F606C 7E 10 29                    stx  CrvColOfst   ; Result to CrvColOfst (now points to indexed column bin)  (COL_BOUNDARYS)
00606F 7F606F FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (COL_BOUNDARYS)
006072 7F6072 FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
006075 7F6075 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (COL_BOUNDARYS)
006077 7F6077 18 05 EE 10 33              movw D,Y,CrvColHi ; Copy to curve column high boundry value for interpolation (COL_BOUNDARYS)
00607C 7F607C 18 73 10 29                 decw CrvColOfst   ; Decrement offset from the curve page to the curve column (COL_BOUNDARYS)
006080 7F6080 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (COL_BOUNDARYS)
006083 7F6083 FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
006086 7F6086 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (COL_BOUNDARYS)
006088 7F6088 18 05 EE 10 35              movw D,Y,CrvColLo ; Copy to curve column low boundry value for interpolation (COL_BOUNDARYS)
00608D 7F608D FC 10 35                    ldd  CrvColLo     ; CrvColLo -> D                                            (COL_BOUNDARYS)
                                      ;*****************************************************************************************
                                      ; - Do the interpolation or rail high and exit subroutine
                                      ;*****************************************************************************************
006090 7F6090 MACRO                      CRV_INTERP       ; Macro this module
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Do the interpolation or rail high and exit subroutine                        (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
006090 7F6090 FE 10 2B                    ldx  CrvCmpVal    ; Curve row comparison value -> X                          (CRV_INTERP)
006093 7F6093 BE 10 2F                    cpx  CrvRowHi     ; Compare row comparison value with curve row high boundry value (CRV_INTERP)
006096 7F6096 25 04                       blo  DoInterp     ; If Curve row comparison value is < curve row high boundry value (CRV_INTERP)
                                                            ; branch to DoInterp:                                      (CRV_INTERP)
006098 7F6098 FC 10 33                    ldd  CrvColHi     ; Curve column high boundry value -> D (result railed high) (CRV_INTERP)
00609B 7F609B 3D                          rts               ; Return from subroutine (CrvCmpVal is equal to or higher than (CRV_INTERP)
                                                            ; CrvRowHi so no need to interpolate. Rail high with CrvColHi in D (CRV_INTERP)
00609C 7F609C                         DoInterp:                                                                        (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Save interpolation values to stack                                           (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
00609C 7F609C FE 10 2B                    ldx  CrvCmpVal    ; Curve row comparison value -> X                          (CRV_INTERP)
00609F 7F609F 34                          pshx              ; Save to stack                                            (CRV_INTERP)
0060A0 7F60A0 FE 10 2F                    ldx  CrvRowHi     ; Curve row high boundry value -> X                        (CRV_INTERP)
0060A3 7F60A3 34                          pshx              ; Save to stack                                            (CRV_INTERP)
0060A4 7F60A4 FE 10 31                    ldx  CrvRowLo     ; Curve row low boundry value -> X                         (CRV_INTERP)
0060A7 7F60A7 34                          pshx              ; Save to stack                                            (CRV_INTERP)
0060A8 7F60A8 FE 10 33                    ldx  CrvColHi     ; Curve column high boundry value -> X                     (CRV_INTERP)
0060AB 7F60AB 34                          pshx              ; Save to stack                                            (CRV_INTERP)
0060AC 7F60AC FE 10 35                    ldx  CrvColLo     ; Curve column low boundry value -> X                      (CRV_INTERP)
0060AF 7F60AF 34                          pshx              ; Save to stack                                            (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | col lo boundary |  SP+ 0 ($3FF4)(Z1)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | col hi boundary |  SP+ 2 ($3FF6)(Z2)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | row lo boundary |  SP+ 4 ($3FF8)(V1)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | row hi boundary |  SP+ 6 ($3FFA)(V2)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    |    CrvCmpVal    |  SP+ 8 ($3FFC)(V)                                   (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Determine Z                                                                  (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ;                     V       V1      V2      Z1     Z2                          (CRV_INTERP)
0060B0 7F60B0 MACRO                                   2D_IPOL (8,SP), (4,SP), (6,SP), (0,SP), (2,SP)                   (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CRV_INTERP/2D_IPOL)
                                      ; ==========================                                                     (CRV_INTERP/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CRV_INTERP/2D_IPOL)
                                      ; SSTACK: none                                                                   (CRV_INTERP/2D_IPOL)
                                      ;         no registers are preserved                                             (CRV_INTERP/2D_IPOL)
                                      ;                                                                                (CRV_INTERP/2D_IPOL)
                                      ;    ^ V                                                                         (CRV_INTERP/2D_IPOL)
                                      ;    |                                                                           (CRV_INTERP/2D_IPOL)
                                      ;  Z2+....................*                                                      (CRV_INTERP/2D_IPOL)
                                      ;    |                    :                                                      (CRV_INTERP/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CRV_INTERP/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CRV_INTERP/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CRV_INTERP/2D_IPOL)
                                      ;    |   :       :        :                                                      (CRV_INTERP/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CRV_INTERP/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CRV_INTERP/2D_IPOL)
                                      ;                                                                                (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
0060B0 7F60B0 EC 88                                   LDD       \1    ; load V                                         (CRV_INTERP/2D_IPOL)
0060B2 7F60B2 A3 84                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CRV_INTERP/2D_IPOL)
0060B4 7F60B4 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
0060B6 7F60B6 EC 82                                   LDD       \5    ; load Z2                                        (CRV_INTERP/2D_IPOL)
0060B8 7F60B8 A3 80                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
0060BA 7F60BA 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CRV_INTERP/2D_IPOL)
0060BC 7F60BC B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
0060BE 7F60BE EC 86                                   LDD       \3    ; load V2                                        (CRV_INTERP/2D_IPOL)
0060C0 7F60C0 A3 84                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CRV_INTERP/2D_IPOL)
0060C2 7F60C2 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CRV_INTERP/2D_IPOL)
                                      ;*********************************************************************           (CRV_INTERP/2D_IPOL)
0060C4 7F60C4 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CRV_INTERP/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CRV_INTERP/2D_IPOL)
0060C6 7F60C6 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
0060C8 7F60C8 E3 80                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Free stack space (result in D)                                               (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
0060CA 7F60CA 1B 88                       leas 8,SP   ; Stack pointer -> bottom of stack                               (CRV_INTERP)
0060CC 7F60CC 30                          pulx        ; Pull index register X from stack                               (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Done (result in D)                                                           (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
0060CD 7F60CD 3D                         rts   ; Return from subroutine                                                (CRV_INTERP)
                                      ;*****************************************************************************************
0060CE 7F60CE -> $60CE                CRV_LU_NP:   EQU        *
                                      ;*****************************************************************************************
                                      ; - This subroutine calculates the interpolated value of a 2D curve with an X axis that
                                      ;   starts with negative values and ends with positive values. The X axis MUST have
                                      ;   -0.2 (65534) and +0.2 (2) together some place in the row for the code to work.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - First, determine the position in the row of the comparison value for
                                      ;   interpolation (IndexNum). Position in the column will be the same as the position
                                      ;   in the row. Determine the row high and low boundary values.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set up the process to find the interpolated curve value by determining the values
                                      ;   of the first bins in the row and column. Clear the index number variable.
                                      ;*****************************************************************************************
0060CE 7F60CE MACRO                       CRV_SETUP       ; Macro this module
                                      ;***************************************************************************************** (CRV_SETUP)
                                      ; - Set up the process to find the interpolated curve value by determining the values (CRV_SETUP)
                                      ;   of the first bins in the row and column. Clear the index number variable.    (CRV_SETUP)
                                      ;***************************************************************************************** (CRV_SETUP)
0060CE 7F60CE FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (CRV_SETUP)
0060D1 7F60D1 FC 10 27                    ldd  CrvRowOfst   ; Offset from the curve page to the curve row -> D         (CRV_SETUP)
0060D4 7F60D4 19 EE                       leay D,Y          ; Curve row pointer -> Y                                   (CRV_SETUP)
0060D6 7F60D6 18 05 EE 10 31              movw D,Y,CrvRowLo ; Copy to curve row low boundry value for interpolation    (CRV_SETUP)
0060DB 7F60DB 18 05 EE 10 2F              movw D,Y,CrvRowHi ; Copy to curve row high boundry value for interpolation   (CRV_SETUP)
                                                            ; (start with low and high row bin values equal            (CRV_SETUP)
0060E0 7F60E0 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (CRV_SETUP)
0060E3 7F60E3 FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (CRV_SETUP)
0060E6 7F60E6 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (CRV_SETUP)
0060E8 7F60E8 18 05 EE 10 35              movw D,Y,CrvColLo ; Copy to curve row column boundry value for interpolation (CRV_SETUP)
0060ED 7F60ED 18 05 EE 10 33              movw D,Y,CrvColHi ; Copy to curve column high boundry value for interpolation (CRV_SETUP)
                                                            ; (start with low and high column bin values equal         (CRV_SETUP)
0060F2 7F60F2 79 10 2E                    clr   IndexNum    ; Position in the row or column of the curve comparison value (CRV_SETUP)
                                      ;*****************************************************************************************
                                      ; - CrvRowLo is negative. Now check CrvCmpVal for negative number.
                                      ;*****************************************************************************************
0060F5 7F60F5 FE 10 2B                    ldx  CrvCmpVal    ; Curve comparison value -> X
0060F8 7F60F8 18 84 80 00                 andx #$8000       ; Logical AND X with %1000 0000 0000 0000 (CCR N bit set of MSB of
                                                            ; result is set)
0060FC 7F60FC 2B 03                       bmi  CmpValNeg    ; If N bit of CCR is set, branch to CmpValNeg:
                                                            ;(CrvCmpVal is negative)
0060FE 7F60FE 06 61 A2                    job  CmpValPos    ; Jump or branch to CmpValPos: (CrvCmpVal is positive)
006101 7F6101                         CmpValNeg:
                                      ;*****************************************************************************************
                                      ; - Both CrvRowLo and CrvCmpVal are negative. Now see if CrvCmpVal is the same or less than
                                      ;   than CrvRowLo. If it is, rail low at the value of the first column bin. If it is not,
                                      ;   it must be greater than CrvRowLo, so loop back to do the next iteration.
                                      ;*****************************************************************************************
006101 7F6101 FE 10 2B                    ldx  CrvCmpVal    ; Curve compare value -> X
006104 7F6104 BE 10 31                    cpx  CrvRowLo     ; Compare curve compare value with curve low boundary
006107 7F6107 23 02                       bls  RailLowNeg   ; If CrvCmpVal is the same or less than CrvRowLo branch to RailLowNeg:
006109 7F6109 20 04                       bra  ReEntCrvNeg1 ; Branch to ReEntCrvNeg1:
00610B 7F610B                         RailLowNeg:
00610B 7F610B FC 10 35                    ldd  CrvColLo    ; Curve column low boundary value -> D
00610E 7F610E 3D                          rts              ; Return from subroutine(Rail low with CrvColLo in Accur D,
                                                           ; no interpolation required)
                                      ;*****************************************************************************************
                                      ; - Both CrvRowLo and CrvCmpVal are negative. CrvCmpVal is the greater than CrvRowLo.
                                      ;   Determine the value of CrvRowHi
                                      ;*****************************************************************************************
00610F 7F610F                         ReEntCrvNeg1:
00610F 7F610F 72 10 2E                    inc  IndexNum     ; Increment position in the row or column of the curve comparison
                                                            ; value
006112 7F6112 18 04 10 2F 10 31           movw CrvRowHi,CrvRowLo ; Curve row high boundry value -> curve row low boundry value
006118 7F6118 18 72 10 27                 incw CrvRowOfst   ; Increment Offset from the curve page to the curve row
00611C 7F611C FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y
00611F 7F611F FC 10 27                    ldd  CrvRowOfst   ; Incremented offset from the curve page to the curve row -> D
006122 7F6122 19 EE                       leay D,Y          ; Curve row pointer -> Y
006124 7F6124 18 05 EE 10 2F              movw D,Y,CrvRowHi ; Copy to curve row high boundry value for interpolation
                                                            ; (holds the contents of the incremented row bin)
006129 7F6129                         RowHiNeg1:
                                      ;*****************************************************************************************
                                      ; - CrvRowLo, CrvRowHi and CrvCmpVal are all negative. CrvCmpVal is the greater than
                                      ;   CrvRowLo. Now see if CrvRowHi is greater than CrvCmpVal. If it is, we have the index
                                      ;   number, if it is not, loop back to increment to the next bin and check again.
                                      ;*****************************************************************************************
006129 7F6129 EE EE                       ldx  D,Y          ; Contents of incremented row bin -> X
00612B 7F612B BE 10 2B                    cpx  CrvCmpVal    ; Compare Contents of incremented row bin with curve comparison value
00612E 7F612E 24 08                       bhs  RowHiNeg2    ; If contents of incremented row bin is greater than or equal to
                                                            ; curve compareson value then branch to RowHiNeg2:
006130 7F6130 B6 10 2E                    ldaa IndexNum     ; Incremented position in the row or column of the curve comparison
                                                            ; value for interpolation -> A
006133 7F6133 B1 10 2D                    cmpa CrvBinCnt    ; Compare Incremented position in the row or column of the curve
                                                            ; comparison value for interpolation with number of bins in the curve
                                                            ; row or column minus 1
006136 7F6136 26 D7                       bne  ReEntCrvNeg1 ; If (A)-(M) if IndexNum does not = CrvBinCnt then branch to
                                                            ; ReEntCrvNeg1:
006138 7F6138                         RowHiNeg2:
                                      ;*****************************************************************************************
                                      ; - Using the index number determine the column high and low boundary values
                                      ;*****************************************************************************************
006138 7F6138 MACRO                      COL_BOUNDARYS     ; Macro this module
                                                            ; for interpolation (start with zero)                      (COL_BOUNDARYS)
                                      ;***************************************************************************************** (COL_BOUNDARYS)
                                      ; - Using the index number determine the column high and low boundary values     (COL_BOUNDARYS)
                                      ;***************************************************************************************** (COL_BOUNDARYS)
006138 7F6138 FE 10 29                    ldx  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
00613B 7F613B F6 10 2E                    ldab IndexNum     ; IndexNum -> B                                            (COL_BOUNDARYS)
00613E 7F613E 1A E5                       abx               ;(B)+(X)->X Pointer to indexed column bin                  (COL_BOUNDARYS)
006140 7F6140 7E 10 29                    stx  CrvColOfst   ; Result to CrvColOfst (now points to indexed column bin)  (COL_BOUNDARYS)
006143 7F6143 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (COL_BOUNDARYS)
006146 7F6146 FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
006149 7F6149 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (COL_BOUNDARYS)
00614B 7F614B 18 05 EE 10 33              movw D,Y,CrvColHi ; Copy to curve column high boundry value for interpolation (COL_BOUNDARYS)
006150 7F6150 18 73 10 29                 decw CrvColOfst   ; Decrement offset from the curve page to the curve column (COL_BOUNDARYS)
006154 7F6154 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (COL_BOUNDARYS)
006157 7F6157 FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
00615A 7F615A 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (COL_BOUNDARYS)
00615C 7F615C 18 05 EE 10 35              movw D,Y,CrvColLo ; Copy to curve column low boundry value for interpolation (COL_BOUNDARYS)
006161 7F6161 FC 10 35                    ldd  CrvColLo     ; CrvColLo -> D                                            (COL_BOUNDARYS)
                                      ;*****************************************************************************************
                                      ; - Do the interpolation or rail high and exit subroutine
                                      ;*****************************************************************************************
006164 7F6164 MACRO                      CRV_INTERP       ; Macro this module
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Do the interpolation or rail high and exit subroutine                        (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
006164 7F6164 FE 10 2B                    ldx  CrvCmpVal    ; Curve row comparison value -> X                          (CRV_INTERP)
006167 7F6167 BE 10 2F                    cpx  CrvRowHi     ; Compare row comparison value with curve row high boundry value (CRV_INTERP)
00616A 7F616A 25 04                       blo  DoInterp     ; If Curve row comparison value is < curve row high boundry value (CRV_INTERP)
                                                            ; branch to DoInterp:                                      (CRV_INTERP)
00616C 7F616C FC 10 33                    ldd  CrvColHi     ; Curve column high boundry value -> D (result railed high) (CRV_INTERP)
00616F 7F616F 3D                          rts               ; Return from subroutine (CrvCmpVal is equal to or higher than (CRV_INTERP)
                                                            ; CrvRowHi so no need to interpolate. Rail high with CrvColHi in D (CRV_INTERP)
006170 7F6170                         DoInterp:                                                                        (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Save interpolation values to stack                                           (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
006170 7F6170 FE 10 2B                    ldx  CrvCmpVal    ; Curve row comparison value -> X                          (CRV_INTERP)
006173 7F6173 34                          pshx              ; Save to stack                                            (CRV_INTERP)
006174 7F6174 FE 10 2F                    ldx  CrvRowHi     ; Curve row high boundry value -> X                        (CRV_INTERP)
006177 7F6177 34                          pshx              ; Save to stack                                            (CRV_INTERP)
006178 7F6178 FE 10 31                    ldx  CrvRowLo     ; Curve row low boundry value -> X                         (CRV_INTERP)
00617B 7F617B 34                          pshx              ; Save to stack                                            (CRV_INTERP)
00617C 7F617C FE 10 33                    ldx  CrvColHi     ; Curve column high boundry value -> X                     (CRV_INTERP)
00617F 7F617F 34                          pshx              ; Save to stack                                            (CRV_INTERP)
006180 7F6180 FE 10 35                    ldx  CrvColLo     ; Curve column low boundry value -> X                      (CRV_INTERP)
006183 7F6183 34                          pshx              ; Save to stack                                            (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | col lo boundary |  SP+ 0 ($3FF4)(Z1)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | col hi boundary |  SP+ 2 ($3FF6)(Z2)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | row lo boundary |  SP+ 4 ($3FF8)(V1)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | row hi boundary |  SP+ 6 ($3FFA)(V2)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    |    CrvCmpVal    |  SP+ 8 ($3FFC)(V)                                   (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Determine Z                                                                  (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ;                     V       V1      V2      Z1     Z2                          (CRV_INTERP)
006184 7F6184 MACRO                                   2D_IPOL (8,SP), (4,SP), (6,SP), (0,SP), (2,SP)                   (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CRV_INTERP/2D_IPOL)
                                      ; ==========================                                                     (CRV_INTERP/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CRV_INTERP/2D_IPOL)
                                      ; SSTACK: none                                                                   (CRV_INTERP/2D_IPOL)
                                      ;         no registers are preserved                                             (CRV_INTERP/2D_IPOL)
                                      ;                                                                                (CRV_INTERP/2D_IPOL)
                                      ;    ^ V                                                                         (CRV_INTERP/2D_IPOL)
                                      ;    |                                                                           (CRV_INTERP/2D_IPOL)
                                      ;  Z2+....................*                                                      (CRV_INTERP/2D_IPOL)
                                      ;    |                    :                                                      (CRV_INTERP/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CRV_INTERP/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CRV_INTERP/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CRV_INTERP/2D_IPOL)
                                      ;    |   :       :        :                                                      (CRV_INTERP/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CRV_INTERP/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CRV_INTERP/2D_IPOL)
                                      ;                                                                                (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
006184 7F6184 EC 88                                   LDD       \1    ; load V                                         (CRV_INTERP/2D_IPOL)
006186 7F6186 A3 84                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CRV_INTERP/2D_IPOL)
006188 7F6188 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
00618A 7F618A EC 82                                   LDD       \5    ; load Z2                                        (CRV_INTERP/2D_IPOL)
00618C 7F618C A3 80                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
00618E 7F618E 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CRV_INTERP/2D_IPOL)
006190 7F6190 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
006192 7F6192 EC 86                                   LDD       \3    ; load V2                                        (CRV_INTERP/2D_IPOL)
006194 7F6194 A3 84                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CRV_INTERP/2D_IPOL)
006196 7F6196 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CRV_INTERP/2D_IPOL)
                                      ;*********************************************************************           (CRV_INTERP/2D_IPOL)
006198 7F6198 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CRV_INTERP/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CRV_INTERP/2D_IPOL)
00619A 7F619A B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
00619C 7F619C E3 80                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Free stack space (result in D)                                               (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
00619E 7F619E 1B 88                       leas 8,SP   ; Stack pointer -> bottom of stack                               (CRV_INTERP)
0061A0 7F61A0 30                          pulx        ; Pull index register X from stack                               (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Done (result in D)                                                           (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
0061A1 7F61A1 3D                         rts   ; Return from subroutine                                                (CRV_INTERP)
                                      ;**************************************************************************************
0061A2 7F61A2                         CmpValPos:
                                      ;*****************************************************************************************
                                      ; - CrvCmpVal is positive. Starting at the beginning of the row, loop through until the
                                      ;   first positive value is found.
                                      ;*****************************************************************************************
0061A2 7F61A2                         PosFind:
0061A2 7F61A2 72 10 2E                    inc  IndexNum     ; Increment position in the row or column of the curve comparison
                                                            ; value
0061A5 7F61A5 18 04 10 2F 10 31           movw CrvRowHi,CrvRowLo ; Curve row high boundry value -> curve row low boundry value
0061AB 7F61AB 18 72 10 27                 incw CrvRowOfst   ; Increment Offset from the curve page to the curve row
0061AF 7F61AF FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y
0061B2 7F61B2 FC 10 27                    ldd  CrvRowOfst   ; Incremented offset from the curve page to the curve row -> D
0061B5 7F61B5 19 EE                       leay D,Y          ; Curve row pointer -> Y
0061B7 7F61B7 18 05 EE 10 2F              movw D,Y,CrvRowHi ; Copy to curve row high boundry value for interpolation
                                                            ; (holds the contents of the incremented row bin)
0061BC 7F61BC FE 10 2F                    ldx  CrvRowHi     ; Curve row high boundry value -> X
0061BF 7F61BF 18 84 80 00                 andx #$8000       ; Logical AND X with %1000 0000 0000 0000 (CCR N bit set of MSB of
                                                            ; result is set)
0061C3 7F61C3 2B DD                       bmi  PosFind      ; If N bit of CCR is set, branch to PosFind: (CrvRowHi is negative
                                                            ; so loop back until the first positive value is found)
                                      ;*****************************************************************************************
                                      ; - CrvCmpVal is positive. We have found the first positive row value so all other row
                                      ;   values will be positive.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Both CrvRowLo and CrvCmpVal are positive. CrvCmpVal is the greater than CrvRowLo.
                                      ;   Determine the value of CrvRowHi
                                      ;*****************************************************************************************
0061C5 7F61C5                         ReEntCrvPos1:
0061C5 7F61C5 72 10 2E                    inc  IndexNum     ; Increment position in the row or column of the curve comparison
                                                            ; value
0061C8 7F61C8 18 04 10 2F 10 31           movw CrvRowHi,CrvRowLo ; Curve row high boundry value -> curve row low boundry value
0061CE 7F61CE 18 72 10 27                 incw CrvRowOfst   ; Increment Offset from the curve page to the curve row
0061D2 7F61D2 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y
0061D5 7F61D5 FC 10 27                    ldd  CrvRowOfst   ; Incremented offset from the curve page to the curve row -> D
0061D8 7F61D8 19 EE                       leay D,Y          ; Curve row pointer -> Y
0061DA 7F61DA 18 05 EE 10 2F              movw D,Y,CrvRowHi ; Copy to curve row high boundry value for interpolation
                                                            ; (holds the contents of the incremented row bin)
                                      ;*****************************************************************************************
                                      ; - CrvRowLo, CrvCmpVal and CrvRowHi are all positive. CrvCmpVal is the greater than CrvRowLo.
                                      ;   Now see if CrvRowHi is greater than CrvCmpVal. If it is, we have the index number,
                                      ;   if it is not, loop back to increment to the next bin and check again.
                                      ;*****************************************************************************************
0061DF 7F61DF FE 10 2F                    ldx  CrvRowHi     ; Curve row high boundary -> X
0061E2 7F61E2 BE 10 2B                    cpx  CrvCmpVal    ; Compare curve curve row high boundary with curve compare value
0061E5 7F61E5 24 08                       bhs  GotNumPos1    ; If contents of incremented row bin is greater than or equal to
                                                            ; curve compareson value then branch to GotNumPos:
0061E7 7F61E7 B6 10 2E                    ldaa IndexNum     ; Incremented position in the row or column of the curve comparison
                                                            ; value for interpolation -> A
0061EA 7F61EA B1 10 2D                    cmpa CrvBinCnt    ; Compare Incremented position in the row or column of the curve
                                                            ; comparison value for interpolation with number of bins in the curve
                                                            ; row or column minus 1
0061ED 7F61ED 26 D6                       bne  ReEntCrvPos1  ; If (A)-(M) if IndexNum does not = CrvBinCnt then branch to
                                                            ; ReEntCrvPos1:
0061EF 7F61EF                         GotNumPos1:
                                      ;*****************************************************************************************
                                      ; - CrvRowLo, CrvCmpVal and CrvRowHi are all positive. CrvCmpVal is the greater than
                                      ;   CrvRowLo. CrvRowHi is greater than or equal to CrvCmpVal so we must have our index
                                      ;   number.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Using the index number determine the column high and low boundary values
                                      ;*****************************************************************************************
0061EF 7F61EF MACRO                      COL_BOUNDARYS     ; Macro this module
                                                            ; for interpolation (start with zero)                      (COL_BOUNDARYS)
                                      ;***************************************************************************************** (COL_BOUNDARYS)
                                      ; - Using the index number determine the column high and low boundary values     (COL_BOUNDARYS)
                                      ;***************************************************************************************** (COL_BOUNDARYS)
0061EF 7F61EF FE 10 29                    ldx  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
0061F2 7F61F2 F6 10 2E                    ldab IndexNum     ; IndexNum -> B                                            (COL_BOUNDARYS)
0061F5 7F61F5 1A E5                       abx               ;(B)+(X)->X Pointer to indexed column bin                  (COL_BOUNDARYS)
0061F7 7F61F7 7E 10 29                    stx  CrvColOfst   ; Result to CrvColOfst (now points to indexed column bin)  (COL_BOUNDARYS)
0061FA 7F61FA FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (COL_BOUNDARYS)
0061FD 7F61FD FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
006200 7F6200 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (COL_BOUNDARYS)
006202 7F6202 18 05 EE 10 33              movw D,Y,CrvColHi ; Copy to curve column high boundry value for interpolation (COL_BOUNDARYS)
006207 7F6207 18 73 10 29                 decw CrvColOfst   ; Decrement offset from the curve page to the curve column (COL_BOUNDARYS)
00620B 7F620B FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (COL_BOUNDARYS)
00620E 7F620E FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
006211 7F6211 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (COL_BOUNDARYS)
006213 7F6213 18 05 EE 10 35              movw D,Y,CrvColLo ; Copy to curve column low boundry value for interpolation (COL_BOUNDARYS)
006218 7F6218 FC 10 35                    ldd  CrvColLo     ; CrvColLo -> D                                            (COL_BOUNDARYS)
                                      ;*****************************************************************************************
                                      ; - Do the interpolation or rail high and exit subroutine
                                      ;*****************************************************************************************
00621B 7F621B MACRO                      CRV_INTERP       ; Macro this module
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Do the interpolation or rail high and exit subroutine                        (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
00621B 7F621B FE 10 2B                    ldx  CrvCmpVal    ; Curve row comparison value -> X                          (CRV_INTERP)
00621E 7F621E BE 10 2F                    cpx  CrvRowHi     ; Compare row comparison value with curve row high boundry value (CRV_INTERP)
006221 7F6221 25 04                       blo  DoInterp     ; If Curve row comparison value is < curve row high boundry value (CRV_INTERP)
                                                            ; branch to DoInterp:                                      (CRV_INTERP)
006223 7F6223 FC 10 33                    ldd  CrvColHi     ; Curve column high boundry value -> D (result railed high) (CRV_INTERP)
006226 7F6226 3D                          rts               ; Return from subroutine (CrvCmpVal is equal to or higher than (CRV_INTERP)
                                                            ; CrvRowHi so no need to interpolate. Rail high with CrvColHi in D (CRV_INTERP)
006227 7F6227                         DoInterp:                                                                        (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Save interpolation values to stack                                           (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
006227 7F6227 FE 10 2B                    ldx  CrvCmpVal    ; Curve row comparison value -> X                          (CRV_INTERP)
00622A 7F622A 34                          pshx              ; Save to stack                                            (CRV_INTERP)
00622B 7F622B FE 10 2F                    ldx  CrvRowHi     ; Curve row high boundry value -> X                        (CRV_INTERP)
00622E 7F622E 34                          pshx              ; Save to stack                                            (CRV_INTERP)
00622F 7F622F FE 10 31                    ldx  CrvRowLo     ; Curve row low boundry value -> X                         (CRV_INTERP)
006232 7F6232 34                          pshx              ; Save to stack                                            (CRV_INTERP)
006233 7F6233 FE 10 33                    ldx  CrvColHi     ; Curve column high boundry value -> X                     (CRV_INTERP)
006236 7F6236 34                          pshx              ; Save to stack                                            (CRV_INTERP)
006237 7F6237 FE 10 35                    ldx  CrvColLo     ; Curve column low boundry value -> X                      (CRV_INTERP)
00623A 7F623A 34                          pshx              ; Save to stack                                            (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | col lo boundary |  SP+ 0 ($3FF4)(Z1)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | col hi boundary |  SP+ 2 ($3FF6)(Z2)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | row lo boundary |  SP+ 4 ($3FF8)(V1)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | row hi boundary |  SP+ 6 ($3FFA)(V2)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    |    CrvCmpVal    |  SP+ 8 ($3FFC)(V)                                   (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Determine Z                                                                  (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ;                     V       V1      V2      Z1     Z2                          (CRV_INTERP)
00623B 7F623B MACRO                                   2D_IPOL (8,SP), (4,SP), (6,SP), (0,SP), (2,SP)                   (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CRV_INTERP/2D_IPOL)
                                      ; ==========================                                                     (CRV_INTERP/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CRV_INTERP/2D_IPOL)
                                      ; SSTACK: none                                                                   (CRV_INTERP/2D_IPOL)
                                      ;         no registers are preserved                                             (CRV_INTERP/2D_IPOL)
                                      ;                                                                                (CRV_INTERP/2D_IPOL)
                                      ;    ^ V                                                                         (CRV_INTERP/2D_IPOL)
                                      ;    |                                                                           (CRV_INTERP/2D_IPOL)
                                      ;  Z2+....................*                                                      (CRV_INTERP/2D_IPOL)
                                      ;    |                    :                                                      (CRV_INTERP/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CRV_INTERP/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CRV_INTERP/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CRV_INTERP/2D_IPOL)
                                      ;    |   :       :        :                                                      (CRV_INTERP/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CRV_INTERP/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CRV_INTERP/2D_IPOL)
                                      ;                                                                                (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
00623B 7F623B EC 88                                   LDD       \1    ; load V                                         (CRV_INTERP/2D_IPOL)
00623D 7F623D A3 84                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CRV_INTERP/2D_IPOL)
00623F 7F623F B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
006241 7F6241 EC 82                                   LDD       \5    ; load Z2                                        (CRV_INTERP/2D_IPOL)
006243 7F6243 A3 80                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
006245 7F6245 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CRV_INTERP/2D_IPOL)
006247 7F6247 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
006249 7F6249 EC 86                                   LDD       \3    ; load V2                                        (CRV_INTERP/2D_IPOL)
00624B 7F624B A3 84                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CRV_INTERP/2D_IPOL)
00624D 7F624D B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CRV_INTERP/2D_IPOL)
                                      ;*********************************************************************           (CRV_INTERP/2D_IPOL)
00624F 7F624F 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CRV_INTERP/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CRV_INTERP/2D_IPOL)
006251 7F6251 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
006253 7F6253 E3 80                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Free stack space (result in D)                                               (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
006255 7F6255 1B 88                       leas 8,SP   ; Stack pointer -> bottom of stack                               (CRV_INTERP)
006257 7F6257 30                          pulx        ; Pull index register X from stack                               (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Done (result in D)                                                           (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
006258 7F6258 3D                         rts   ; Return from subroutine                                                (CRV_INTERP)
                                      ;*****************************************************************************************
006259 7F6259 -> $6259                INTERP_CODE_END         EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006259 7F6259 -> $7F6259              INTERP_CODE_END_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006D18 7F6D18                                                 ORG     INTERP_TABS_START, INTERP_TABS_START_LIN
006D18 7F6D18 -> $7F6D18              INTERP_TABS_START_LIN   EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006D18 7F6D18 -> $6D18                INTERP_TABS_END         EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006D18 7F6D18 -> $7F6D18              INTERP_TABS_END_LIN     EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (igncalcs_BPEM488.s)                                                       *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module contains code for for the ignition timing calculations                 *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing (This module)                *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 13, 2020                                                                       *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006D18 7F6D18 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001037 0FD037                                     ORG     IGNCALCS_VARS_START, IGNCALCS_VARS_START_LIN
001037 0FD037 -> $FD037               IGNCALCS_VARS_START_LIN EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - RS232 variables variables used in this module (declared  in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;Mapx10:         ds 2 ; Manifold Absolute Pressure (KPAx10)
                                      ;Itrmx10:        ds 2 ; Ignition Trim (degrees x 10)+-20 degrees)
                                      ;RPM:            ds 2 ; Crankshaft Revolutions Per Minute
                                      ;STcurr:         ds 2 ; Current value in ST table (Degrees x 10)
                                      ;Dwell:          ds 2 ; Coil on time (mS*10)
                                      ;DwellCor:       ds 2 ; Coil dwell voltage correction (%*10)
                                      ;DwellFin:       ds 2 ; ("Dwell" * "DwellCor") (mS*10)
                                      ;STandItrmx10:   ds 2 ; STcurr and Itmx10 (degrees*10)
                                      ;*****************************************************************************************
                                      ; - Non RS232 variables used in this module (declared in state_BPEM488.s
                                      ;*****************************************************************************************
                                      ;Degx10tk512:    ds 2 ;(Time for 1 degree of rotation in 5.12uS resolution x 10)
                                      ;Degx10tk256:    ds 2 ; (Time for 1 degree of rotation in 2.56uS resolution x 10)
                                      ;*****************************************************************************************
                                      ; - Non RS232 variables used in this module declared in this module
                                      ;*****************************************************************************************
001037 0FD037                         Spantk:         ds 2 ; Ignition Span time (5.12uS or 2.56uS res)
001039 0FD039                         DwellFintk:     ds 2 ; Time required for dwell after correction (5.12uS or 2.56uS res)
00103B 0FD03B                         STandItrmtk:    ds 2 ; STcurr and Itmx10 (5.12uS or 2.56uS res)
00103D 0FD03D                         Advancetk:      ds 2 ; Delay time for desired spark advance + dwell(5.12uS or 2.56uS res)
00103F 0FD03F                         Delaytk:        ds 2 ; Delay time from crank signal to energise coil(5.12uS or 2.56uS res)
001041 0FD041                         IgnOCadd1:      ds 2 ; First ignition output compare adder (5.12uS or 2.56uS res)
001043 0FD043                         IgnOCadd2:      ds 2 ; Second ignition output compare adder(5.12uS or 2.56uS res)
                                      ;******************************************************************************************
                                      ;*****************************************************************************************
001045 0FD045 -> $1045                IGNCALCS_VARS_END               EQU     * ; * Represents the current value of the paged
                                                                    ; program counter
001045 0FD045 -> $FD045               IGNCALCS_VARS_END_LIN   EQU     @ ; @ Represents the current value of the linear
                                                           ; This is the first OC value loaded into the timer
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
006259 7F6259                                                 ORG     IGNCALCS_CODE_START, IGNCALCS_CODE_START_LIN
006259 7F6259 -> $7F6259              IGNCALCS_CODE_START_LIN EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ----------------------------- No code for this module ----------------------------------
006259 7F6259 -> $6259                IGNCALCS_CODE_END               EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006259 7F6259 -> $7F6259              IGNCALCS_CODE_END_LIN   EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006D18 7F6D18                                                 ORG     IGNCALCS_TABS_START, IGNCALCS_TABS_START_LIN
006D18 7F6D18 -> $7F6D18              IGNCALCS_TABS_START_LIN EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006D18 7F6D18 -> $6D18                IGNCALCS_TABS_END               EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006D18 7F6D18 -> $7F6D18              IGNCALCS_TABS_END_LIN   EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (injcalcs_BPEM488.s)                                                       *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module contains code for the fuel injection pulse width calculations          *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths (This module)         *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 13, 2020                                                                       *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006D18 7F6D18 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001045 0FD045                                     ORG     INJCALCS_VARS_START, INJCALCS_VARS_START_LIN
001045 0FD045 -> $FD045               INJCALCS_VARS_START_LIN EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - RS232 variables (declared in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;cltAdc:       ds 2 ; RV15 10 bit ADC AN00 Engine Coolant Temperature ADC
                                      ;Mapx10:       ds 2 ; Manifold Absolute Pressure (KPAx10)
                                      ;TpsPctx10:    ds 2 ; Throttle Position Sensor % of travel(%x10)(update every 100mSec)
                                      ;RPM:          ds 2 ; Crankshaft Revolutions Per Minute
                                      ;reqFuel:      ds 2 ; Pulse width for 14.7 AFR @ 100% VE (mS x 10)
                                      ;AFRcurr:      ds 2 ; Current value in AFR table (AFR x 100)
                                      ;VEcurr:       ds 2 ; Current value in VE table (% x 10)
                                      ;barocor:      ds 2 ; Barometric Pressure Correction (% x 10)
                                      ;matcor:       ds 2 ; Manifold Air Temperature Correction (% x 10)
                                      ;WUEcor:       ds 2 ; Warmup Enrichment Correction (% x 10)(
                                      ;ASEcor:       ds 2 ; Afterstart Enrichmnet Correction (% x 10)
                                      ;WUEandASEcor  ds 2 ; the sum of WUEcor and ASEcor (% x 10)
                                      ;Crankcor:     ds 2 ; Cranking pulsewidth temperature correction (% x 10)
                                      ;TpsPctDOT:    ds 2 ; TPS difference over time (%/Sec)(update every 100mSec)
                                      ;TpsDOTcor:    ds 1 ; Throttle Opening Enrichment table value(%)
                                      ;ColdAddpct:   ds 1 ; Throttle Opening Enrichment cold adder (%)
                                      ;ColdMulpct:   ds 1 ; Throttle Opening Enrichment cold multiplier (%)
                                      ;TOEpct:       ds 1 ; Throttle Opening Enrichment (%)
                                      ;TOEpw:        ds 2 ; Throttle Opening Enrichment adder (mS x 100)
                                      ;PWlessTOE:    ds 2 ; Injector pulse width before "TOEpw" and "Deadband" (mS x 10)
                                      ;Deadband:     ds 2 ; injector deadband at current battery voltage mS*100
                                      ;PrimePW:      ds 2 ; Primer injector pulswidth (mS x 10)
                                      ;CrankPW:      ds 2 ; Cranking injector pulswidth (mS x 10)
                                      ;FDpw:         ds 2 ; Fuel Delivery pulse width (PW - Deadband) (mS x 10)
                                      ;PW:           ds 2 ; Running engine injector pulsewidth (mS x 10)
                                      ;FD:           ds 2 ; Fuel Delivery pulse width (mS)
                                      ;FDsec:        ds 2 ; Fuel delivery pulse width total over 1 second (mS)
                                      ;InjDelDegx10: ds 2 ; Injection delay from trigger to start of injection (deg x 10)
                                      ;InjPrFlo:     ds 2 ; Pair of injectors flow rate (L/hr x 100)
                                      ;CASprd256:    ds 2 ; Crankshaft Angle Sensor period (2.56uS time base
                                      ;DutyCyclex10: ds 1 ; Injector duty cycle in run mode (% x 10)
                                      ;*****************************************************************************************
                                      ; - "engine" equates
                                      ;*****************************************************************************************
                                      ;OFCdelon     equ  $01 ; %00000001, bit 0, 0 = OFC timer not counting down(Grn),
                                                                              ; 1 = OFC timer counting down(Red)
                                      ;crank        equ  $02 ; %00000010, bit 1, 0 = engine not cranking(Grn),
                                                                              ; 1 = engine cranking(Red)
                                      ;run          equ  $04 ; %00000100, bit 2, 0 = engine not running(Red),
                                                                              ; 1 = engine running(Grn)
                                      ;ASEon        equ  $08 ; %00001000, bit 3, 0 = not in start/warmup(Grn),
                                                                              ; 1 = in start/warmup(Red)
                                      ;WUEon        equ  $10 ; %00010000, bit 4, 0 = not in warmup(Grn),
                                                                              ; 1 = in warmup(Red)
                                      ;TOEon        equ  $20 ; %00100000, bit 5, 0 = not in TOE mode(Grn),
                                                                              ; 1 = TOE mode(Red)
                                      ;OFCon        equ  $40 ; %01000000, bit 6, 0 = not in OFC mode(Grn),
                                                                              ; 1 = in OFC mode(Red)
                                      ;FldClr       equ $80  ; %10000000, bit 7, 0 = not in flood clear mode(Grn),
                                                                              ; 1 = Flood clear mode(Red)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - These configurable constants are located in BPEM488.s in page 1 starting with the
                                      ;   VE table
                                      ;*****************************************************************************************
                                      ;tpsThresh_F: dw   ; Throttle Opening Enrichment threshold (TpsPctx10/100mS)(offset = 984)
                                      ;TOEtime_F:   dw   ; Throttle Opening Enrich time in 100mS increments(mSx10)(offset = 986)
                                      ;OFCrpm_F     dw   ; Overrun Fuel Cut minimum RPM (RPM)(Offset 1004)($03EC)
                                      ;OFCtps_F     dw   ; Overrun Fuel Cut minimum throttle position (%x10)(offset 1010)($03F2)
                                      ;OFCmap_F     dw   ; Overrun Fuel Cut maximum manifold pressure (KPAx10)(offset 1016)($03F8)
                                      ;OFCdel_F     db   ; Overrun Fuel Cut delay duration (Sec x 10)(offset 1018)($03FA)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Non RS232 variables (declared in this module)
                                      ;*****************************************************************************************
001045 0FD045                         TpsPctx10last: ds 2 ; Throttle Position Sensor percent last (%x10)(updated every 100Msec)
001047 0FD047                         OFCdel:        ds 1 ; Overrun Fuel Cut delay duration (decremented every 100 mS)
001048 0FD048                         TOEtim:        ds 1 ; Throttle Opening Enrichment duration (decremented every 100 mS)
001049 0FD049                         DdBndZ1:       ds 1 ; Deadband interpolation Z1 value
00104A 0FD04A                         DdBndZ2:       ds 1 ; Deadband interpolation Z2 value
00104B 0FD04B                         PWcalc1:       ds 2 ; PW calculations result 1
00104D 0FD04D                         PWcalc2:       ds 2 ; PW calculations result 2
00104F 0FD04F                         PWcalc3:       ds 2 ; PW calculations result 3
001051 0FD051                         PWcalc4:       ds 2 ; PW calculations result 4
001053 0FD053                         PWcalc5:       ds 2 ; PW calculations result 5
001055 0FD055                         ASErev:        ds 2 ; Afterstart Enrichment Taper (revolutions)
001057 0FD057                         ASEcnt:        ds 2 ; Counter value for ASE taper
001059 0FD059                         PrimePWtk:     ds 2 ; Primer injector pulswidth timer ticks(uS x 5.12)
00105B 0FD05B                         CrankPWtk:     ds 2 ; Cranking injector pulswidth timer ticks(uS x 5.12)
00105D 0FD05D                         PWtk:          ds 2 ; Running injector pulsewidth timer ticks(uS x 2.56)
00105F 0FD05F                         InjOCadd1:     ds 2 ; First injector output compare adder (5.12uS res or 2.56uS res)
001061 0FD061                         InjOCadd2:     ds 2 ; Second injector output compare adder (5.12uS res or 2.56uS res)
001063 0FD063                         FDt:           ds 2 ; Fuel Delivery pulse width total(mS) (for FDsec calcs)
001065 0FD065                         FDcnt:         ds 2 ; Fuel delivery pulse width total(ms)(for totalizer pulse on rollover)
001067 0FD067                         AIOTcnt:       ds 1 ; Counter for AIOT totalizer pulse width
001068 0FD068 -> $1068                INJCALCS_VARS_END               EQU     * ; * Represents the current value of the paged
                                                                    ; program counter
001068 0FD068 -> $FD068               INJCALCS_VARS_END_LIN   EQU     @ ; @ Represents the current value of the linear
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
006259 7F6259                                                 ORG     INJCALCS_CODE_START, INJCALCS_CODE_START_LIN
006259 7F6259 -> $7F6259              INJCALCS_CODE_START_LIN EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No code for this module ------------------------------
006259 7F6259 -> $6259                INJCALCS_CODE_END               EQU     * ; * Represents the current value of the paged
                                                                    ; program counter
006259 7F6259 -> $7F6259              INJCALCS_CODE_END_LIN   EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006D18 7F6D18                                                 ORG     INJCALCS_TABS_START, INJCALCS_TABS_START_LIN
006D18 7F6D18 -> $7F6D18              INJCALCS_TABS_START_LIN EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006D18 7F6D18 -> $6D18                INJCALCS_TABS_END               EQU     * ; * Represents the current value of the paged
                                                                    ; program counter
006D18 7F6D18 -> $7F6D18              INJCALCS_TABS_END_LIN   EQU     @ ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (DodgeTherm_BPEM488.s)                                                      *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    Lookup table for Dodge thermistors                                                 *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors (This module)     *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 25 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006D18 7F6D18 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001068 0FD068                                    ORG     DODGETHERM_VARS_START, DODGETHERM_VARS_START_LIN
001068 0FD068 -> $FD068               DODGETHERM_VARS_START_LIN       EQU     @ ; @ Represents the current value of the linear
                                                                        ; program counter
                                      ; ----------------------------- No variables for this module ----------------------------
001068 0FD068 -> $1068                DODGETHERM_VARS_END             EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
001068 0FD068 -> $FD068               DODGETHERM_VARS_END_LIN EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
                                      ;*****************************************************************************************
                                      ;* - Macros -                                                                            *
                                      ;*****************************************************************************************
                                      ; ------------------------------ No macros for this module -------------------------------
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
006259 7F6259                                                 ORG     DODGETHERM_CODE_START, DODGETHERM_CODE_START_LIN
006259 7F6259 -> $7F6259              DODGETHERM_CODE_START_LIN       EQU     @ ; @ Represents the current value of the linear
                                                                       ; program counter
                                      ; ------------------------------- No code for this module -------------------------------
006259 7F6259 -> $6259                DODGETHERM_CODE_END             EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
006259 7F6259 -> $7F6259              DODGETHERM_CODE_END_LIN EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006D18 7F6D18                                                 ORG     DODGETHERM_TABS_START, DODGETHERM_TABS_START_LIN
006D18 7F6D18 -> $7F6D18              DODGETHERM_TABS_START_LIN       EQU     @ ; @ Represents the current value of the linear
                                                                        ; program counter
                                      ; Dodge thermistor
                                      ; 5 volt, 10 bit ADC, Bias resistor = 6980R
                                      ; 0C, 32F    = 32660R
                                      ; 30C, 86F   = 8060R
                                      ; 90C, 194F  = 915R
006D18 7F6D18                         DodgeThermistor:
                                      ;        Hex        DgFx10  Deg F   Deg C  ADC          Vout    Ohms
006D18 7F6D18 06 40                           DW      $0640   ;       1600    160.00  71.11   0               0.000   Default to 160F (sensor failure)
006D1A 7F6D1A 1A 56                           DW      $1A56   ;       6742    674.22  356.79  1               0.005   6.987
006D1C 7F6D1C 16 36                           DW      $1636   ;       5686    568.58  298.10  2               0.010   13.998
006D1E 7F6D1E 14 1F                           DW      $141F   ;       5151    515.07  268.37  3               0.015   21.03
006D20 7F6D20 12 C5                           DW      $12C5   ;       4805    480.50  249.17  4               0.020   28.032
006D22 7F6D22 11 F5                           DW      $11F5   ;       4597    459.68  237.60  5               0.024   33.666
006D24 7F6D24 11 26                           DW      $1126   ;       4390    438.99  266.10  6               0.029   40.72
006D26 7F6D26 10 7F                           DW      $107F   ;       4223    422.26  216.81  7               0.034   47.789
006D28 7F6D28 0F F3                           DW      $0FF3   ;       4083    408.29  209.05  8               0.039   54.872
006D2A 7F6D2A 0F 7B                           DW      $0F7B   ;       3963    396.34  202.41  9               0.044   61.969
006D2C 7F6D2C 0F 13                           DW      $0F13   ;       3859    385.93  196.63  10              0.049   69.081
006D2E 7F6D2E 0E B7                           DW      $0EB7   ;       3767    376.73  191.52  11              0.054   76.207
006D30 7F6D30 0E 6A                           DW      $0E6A   ;       3690    368.50  186.95  12              0.059   83.348
006D32 7F6D32 0E 29                           DW      $0E29   ;       3625    362.50  183.61  13              0.063   89.07
006D34 7F6D34 0D E4                           DW      $0DE4   ;       3556    355.61  179.70  14              0.068   96.237
006D36 7F6D36 0D A5                           DW      $0DA5   ;       3493    349.31  176.78  15              0.073   103.418
006D38 7F6D38 0D 6B                           DW      $0D6B   ;       3435    343.49  173.05  16              0.078   110.614
006D3A 7F6D3A 0D 35                           DW      $0D35   ;       3381    338.11  170.06  17              0.083   117.824
006D3C 7F6D3C 0D 03                           DW      $0D03   ;       3331    333.09  167.27  18              0.088   125.049
006D3E 7F6D3E 0D 9C                           DW      $0D9C   ;       3484    348.41  164.67  19              0.093   132.289
006D40 7F6D40 0C A8                           DW      $0CA8   ;       3240    324.01  162.23  20              0.098   139.543
006D42 7F6D42 0C 7F                           DW      $0C7F   ;       3199    319.87  159.93  21              0.103   146.812
006D44 7F6D44 0C 5F                           DW      $0C5F   ;       3167    316.73  158.18  22              0.107   152.638
006D46 7F6D46 0C 3A                           DW      $0C3A   ;       3130    312.99  156.10  23              0.112   159.935
006D48 7F6D48 0C 16                           DW      $0C16   ;       3094    309.44  154.13  24              0.117   167.246
006D4A 7F6D4A 0B F5                           DW      $0BF5   ;       3061    306.06  152.26  25              0.122   174.572
006D4C 7F6D4C 0B D4                           DW      $0BD4   ;       3028    302.84  150.47  26              0.127   181.913
006D4E 7F6D4E 0B B6                           DW      $0BB6   ;       2998    299.77  148.76  27              0.132   189.269
006D50 7F6D50 0B 98                           DW      $0B98   ;       2968    296.83  147.13  28              0.137   196.640
006D52 7F6D52 0B 7C                           DW      $0B7C   ;       2940    294.02  145.57  29              0.142   204.026
006D54 7F6D54 0B 64                           DW      $0B64   ;       2916    291.85  144.36  30              0.146   209.946
006D56 7F6D56 0B 4C                           DW      $0B4C   ;       2892    289.23  142.90  31              0.151   217.360
006D58 7F6D58 0B 34                           DW      $0B34   ;       2868    286.76  141.54  32              0.156   224.789
006D5A 7F6D5A 0B 1B                           DW      $0B1B   ;       2843    284.28  140.17  33              0.161   232.234
006D5C 7F6D5C 0B 03                           DW      $0B03   ;       2819    281.94  138.86  34              0.166   239.694
006D5E 7F6D5E 0A ED                           DW      $0AED   ;       2797    279.68  137.6   35              0.171   247.169
006D60 7F6D60 0A D7                           DW      $0AD7   ;       2775    277.49  136.39  36              0.176   254.660
006D62 7F6D62 0A C2                           DW      $0AC2   ;       2754    275.38  135.21  37              0.181   262.166
006D64 7F6D64 0A AD                           DW      $0AAD   ;       2733    273.33  134.07  38              0.186   269.688
006D66 7F6D66 0A 9D                           DW      $0A9D   ;       2717    271.74  133.19  39              0.190   275.717
006D68 7F6D68 0A 8A                           DW      $0A8A   ;       2698    269.80  132.11  40              0.195   283.267
006D6A 7F6D6A 0A 77                           DW      $0A77   ;       2679    267.92  131.07  41              0.200   290.833
006D6C 7F6D6C 0A 65                           DW      $0A65   ;       2661    266.09  130.05  42              0.205   298.415
006D6E 7F6D6E 0A 53                           DW      $0A53   ;       2643    264.31  129.06  43              0.210   306.013
006D70 7F6D70 0A 42                           DW      $0A42   ;       2626    262.58  128.10  44              0.215   313.626
006D72 7F6D72 0A 31                           DW      $0A31   ;       2609    260.89  127.16  45              0.220   321.255
006D74 7F6D74 0A 21                           DW      $0A21   ;       2593    259.25  126.25  46              0.225   328.901
006D76 7F6D76 0A 14                           DW      $0A14   ;       2580    257.97  2125.54 47              0.229   335.028
006D78 7F6D78 0A 04                           DW      $0A04   ;       2564    256.40  124.67  48              0.234   342.702
006D7A 7F6D7A 09 F5                           DW      $09F5   ;       2549    254.87  123.82  49              0.239   350.393
006D7C 7F6D7C 09 E6                           DW      $09E6   ;       2534    253.37  122.99  50              0.244   358.099
006D7E 7F6D7E 09 D7                           DW      $09D7   ;       2519    251.91  122.17  51              0.249   365.822
006D80 7F6D80 09 C9                           DW      $09C9   ;       2505    250.48  121.38  52              0.254   373.561
006D82 7F6D82 09 BB                           DW      $09BB   ;       2491    249.09  120.60  53              0.259   381.316
006D84 7F6D84 09 AD                           DW      $09AD   ;       2477    247.72  119.85  54              0.264   289.088
006D86 7F6D86 09 A0                           DW      $09A0   ;       2464    246.39  119.10  55              0.269   396.876
006D88 7F6D88 09 95                           DW      $0995   ;       2453    245.34  118.52  56              0.273   403.118
006D8A 7F6D8A 09 89                           DW      $0989   ;       2441    244.05  117.80  57              0.278   410.936
006D8C 7F6D8C 09 7C                           DW      $097C   ;       2428    242.79  117.10  58              0.283   418.770
006D8E 7F6D8E 09 70                           DW      $0970   ;       2416    241.55  116.42  59              0.288   426.621
006D90 7F6D90 09 63                           DW      $0963   ;       2403    240.34  115.74  60              0.293   434.489
006D92 7F6D92 09 58                           DW      $0958   ;       2392    239.15  115.08  61              0.298   442.373
006D94 7F6D94 09 4C                           DW      $094C   ;       2380    237.98  114.43  62              0.303   450.278
006D96 7F6D96 09 40                           DW      $0940   ;       2368    236.83  113.80  63              0.308   458.193
006D98 7F6D98 09 35                           DW      $0935   ;       2357    235.71  113.17  64              0.313   466.128
006D9A 7F6D9A 09 2C                           DW      $092C   ;       2348    234.82  112.68  65              0.317   472.488
006D9C 7F6D9C 09 21                           DW      $0921   ;       2337    233.73  112.07  66              0.322   480.453
006D9E 7F6D9E 09 17                           DW      $0917   ;       2327    232.66  111.48  67              0.327   488.436
006DA0 7F6DA0 09 0C                           DW      $090C   ;       2316    231.60  110.89  68              0.332   496.435
006DA2 7F6DA2 09 02                           DW      $0902   ;       2306    230.57  110.36  69              0.337   504.452
006DA4 7F6DA4 08 F8                           DW      $08F8   ;       2296    229.55  109.75  70              0.342   512.486
006DA6 7F6DA6 08 EE                           DW      $08EE   ;       2286    228.55  109.19  71              0.347   520.537
006DA8 7F6DA8 08 E4                           DW      $08E4   ;       2276    227.56  108.64  72              0.352   528.606
006DAA 7F6DAA 08 DB                           DW      $08DB   ;       2267    226.78  108.21  73              0.356   535.073
006DAC 7F6DAC 08 D2                           DW      $08D2   ;       2258    225.82  107.68  74              0.361   543.173
006DAE 7F6DAE 08 C9                           DW      $08C9   ;       2249    224.88  107.15  75              0.366   551.290
006DB0 7F6DB0 08 C0                           DW      $08C0   ;       2240    223.95  106.64  76              0.371   559.425
006DB2 7F6DB2 08 B6                           DW      $08B6   ;       2230    223.03  106.13  77              0.376   567.578
006DB4 7F6DB4 08 AD                           DW      $08AD   ;       2221    222.13  105.63  78              0.381   575.748
006DB6 7F6DB6 08 A4                           DW      $08A4   ;       2212    221.24  105.13  79              0.386   583.936
006DB8 7F6DB8 08 9C                           DW      $089C   ;       2204    220.36  104.64  80              0.391   592.141
006DBA 7F6DBA 08 93                           DW      $0893   ;       2195    219.49  104.16  81              0.396   600.365
006DBC 7F6DBC 08 8C                           DW      $088C   ;       2188    218.81  103.78  82              0.400   606.957
006DBE 7F6DBE 08 84                           DW      $0884   ;       2180    217.97  103.31  83              0.405   615.212
006DC0 7F6DC0 08 7B                           DW      $087B   ;       2171    217.13  102.85  84              0.410   623.486
006DC2 7F6DC2 08 73                           DW      $0873   ;       2163    216.31  102.40  85              0.415   631.778
006DC4 7F6DC4 08 6B                           DW      $086B   ;       2155    215.50  101.95  86              0.420   640.087
006DC6 7F6DC6 08 63                           DW      $0863   ;       2147    214.70  101.50  87              0.425   648.415
006DC8 7F6DC8 08 5B                           DW      $085B   ;       2139    213.91  101.06  88              0.430   656.761
006DCA 7F6DCA 08 53                           DW      $0853   ;       2131    213.13  100.63  89              0.435   665.126
006DCC 7F6DCC 08 4D                           DW      $084D   ;       2125    212.51  100.29  90              0.439   671.831
006DCE 7F6DCE 08 46                           DW      $0846   ;       2118    211.75  99.86   91              0.444   680.228
006DD0 7F6DD0 08 3E                           DW      $083E   ;       2110    211.00  99.44   92              0.449   688.644
006DD2 7F6DD2 08 37                           DW      $0837   ;       2103    210.25  99.03   93              0.454   697.079
006DD4 7F6DD4 08 2F                           DW      $082F   ;       2095    209.52  98.62   94              0.459   705.532
006DD6 7F6DD6 08 28                           DW      $0828   ;       2088    208.79  98.22   95              0.464   714.004
006DD8 7F6DD8 08 20                           DW      $0820   ;       2080    208.07  97.82   96              0.469   722.494
006DDA 7F6DDA 08 1A                           DW      $081A   ;       2074    207.36  97.42   97              0.474   731.003
006DDC 7F6DDC 08 13                           DW      $0813   ;       2067    206.66  97.03   98              0.479   739.531
006DDE 7F6DDE 08 0D                           DW      $080D   ;       2061    206.10  96.72   99              0.483   746.367
006DE0 7F6DE0 08 06                           DW      $0806   ;       2054    205.41  96.34   100             0.488   754.929
006DE2 7F6DE2 07 FF                           DW      $07FF   ;       2047    204.73  95.96   101             0.493   763.510
006DE4 7F6DE4 07 F9                           DW      $07F9   ;       2041    204.06  95.59   102             0.498   772.110
006DE6 7F6DE6 07 F2                           DW      $07F2   ;       2034    203.39  95.22   103             0.503   780.729
006DE8 7F6DE8 07 EB                           DW      $07EB   ;       2027    202.73  94.85   104             0.508   789.386
006DEA 7F6DEA 07 E5                           DW      $07E5   ;       2021    202.08  94.49   105             0.513   798.025
006DEC 7F6DEC 07 DE                           DW      $07DE   ;       2014    201.43  94.13   106             0.518   806.702
006DEE 7F6DEE 07 D9                           DW      $07D9   ;       2009    200.92  93.85   107             0.522   813.658
006DF0 7F6DF0 07 D3                           DW      $07D3   ;       2003    200.29  93.49   108             0.527   822.370
006DF2 7F6DF2 07 CD                           DW      $07CD   ;       1997    199.66  93.15   109             0.532   831.101
006DF4 7F6DF4 07 C6                           DW      $07C6   ;       1990    199.04  92.80   110             0.537   839.852
006DF6 7F6DF6 07 C0                           DW      $07C0   ;       1984    198.43  92.46   111             0.542   848.623
006DF8 7F6DF8 07 BA                           DW      $07BA   ;       1978    197.82  92.12   112             0.547   857.413
006DFA 7F6DFA 07 B4                           DW      $07B4   ;       1972    197.21  91.79   113             0.552   866.223
006DFC 7F6DFC 07 AE                           DW      $07AE   ;       1966    196.62  91.45   114             0.557   875.053
006DFE 7F6DFE 07 A8                           DW      $07A8   ;       1960    196.03  91.13   115             0.562   883.903
006E00 7F6E00 07 A4                           DW      $07A4   ;       1956    195.56  90.86   116             0.566   890.997
006E02 7F6E02 07 9E                           DW      $079E   ;       1950    194.97  90.54   117             0.571   899.883
006E04 7F6E04 07 98                           DW      $0798   ;       1944    194.40  90.22   118             0.576   908.788
006E06 7F6E06 07 92                           DW      $0792   ;       1938    193.83  89.90   119             0.581   917.714
006E08 7F6E08 07 8D                           DW      $078D   ;       1933    193.26  89.59   120             0.586   926.661
006E0A 7F6E0A 07 87                           DW      $0787   ;       1927    192.70  89.28   121             0.591   935.627
006E0C 7F6E0C 07 81                           DW      $0781   ;       1921    192.14  88.97   122             0.596   944.614
006E0E 7F6E0E 07 7C                           DW      $077C   ;       1916    191.59  88.66   123             0.601   953.621
006E10 7F6E10 07 77                           DW      $0777   ;       1911    191.05  88.36   124             0.605   962.649
006E12 7F6E12 07 72                           DW      $0772   ;       1906    190.61  88.12   125             0.610   969.886
006E14 7F6E14 07 6D                           DW      $076D   ;       1901    190.08  87.82   126             0.615   978.951
006E16 7F6E16 07 67                           DW      $0767   ;       1895    189.54  87.52   127             0.620   988.037
006E18 7F6E18 07 62                           DW      $0762   ;       1890    189.01  87.23   128             0.625   997.143
006E1A 7F6E1A 07 5D                           DW      $075D   ;       1885    188.49  86.94   129             0.630   1006.27
006E1C 7F6E1C 07 58                           DW      $0758   ;       1880    187.97  86.65   130             0.635   1015.418
006E1E 7F6E1E 07 53                           DW      $0753   ;       1875    187.45  86.36   131             0.640   1024.587
006E20 7F6E20 07 4D                           DW      $074D   ;       1869    186.94  86.08   132             0.645   1033.777
006E22 7F6E22 07 49                           DW      $0749   ;       1865    186.53  85.85   133             0.649   1041.145
006E24 7F6E24 07 44                           DW      $0744   ;       1860    186.03  85.57   134             0.654   1050.373
006E26 7F6E26 07 3F                           DW      $073F   ;       1855    185.53  85.29   135             0.659   1059.622
006E28 7F6E28 07 3A                           DW      $073A   ;       1850    185.03  85.02   136             0.664   1068.893
006E2A 7F6E2A 07 35                           DW      $0735   ;       1845    184.54  84.75   137             0.669   1078.185
006E2C 7F6E2C 07 31                           DW      $0731   ;       1841    184.05  84.47   138             0.674   1087.499
006E2E 7F6E2E 07 2C                           DW      $072C   ;       1836    183.57  84.20   139             0.679   1096.834
006E30 7F6E30 07 27                           DW      $0727   ;       1831    183.09  83.94   140             0.684   1106.191
006E32 7F6E32 07 23                           DW      $0723   ;       1827    182.70  83.72   141             0.688   1113.692
006E34 7F6E34 07 1E                           DW      $071E   ;       1822    182.23  83.46   142             0.693   1123.088
006E36 7F6E36 07 1A                           DW      $071A   ;       1818    181.76  83.20   143             0.698   1132.506
006E38 7F6E38 07 15                           DW      $0715   ;       1813    181.29  82.94   144             0.703   1141.946
006E3A 7F6E3A 07 10                           DW      $0710   ;       1808    180.82  82.68   145             0.708   1151.407
006E3C 7F6E3C 07 0C                           DW      $070C   ;       1804    180.36  82.42   146             0.713   1160.891
006E3E 7F6E3E 07 07                           DW      $0707   ;       1799    179.90  82.17   147             0.718   1170.397
006E40 7F6E40 07 03                           DW      $0703   ;       1795    179.45  81.92   148             0.723   1179.925
006E42 7F6E42 06 FE                           DW      $06FE   ;       1790    179.00  81.67   149             0.728   1189.476
006E44 7F6E44 06 FA                           DW      $06FA   ;       1786    178.64  81.47   150             0.732   1197.132
006E46 7F6E46 06 F6                           DW      $06F6   ;       1782    178.19  81.22   151             0.737   1206.723
006E48 7F6E48 06 F2                           DW      $06F2   ;       1778    177.75  80.97   152             0.742   1216.336
006E4A 7F6E4A 06 ED                           DW      $06ED   ;       1773    177.31  80.73   153             0.747   1225.972
006E4C 7F6E4C 06 E9                           DW      $06E9   ;       1769    176.87  80.49   154             0.752   1235.631
006E4E 7F6E4E 06 E4                           DW      $06E4   ;       1764    176.44  80.24   155             0.757   1245.312
006E50 7F6E50 06 E0                           DW      $06E0   ;       1760    176.01  80.00   156             0.762   1255.017
006E52 7F6E52 06 DC                           DW      $06DC   ;       1756    175.58  79.77   157             0.767   1264.744
006E54 7F6E54 06 D8                           DW      $06D8   ;       1752    175.24  79.58   158             0.771   1272.542
006E56 7F6E56 06 D4                           DW      $06D4   ;       1748    174.82  79.34   159             0.776   1282.311
006E58 7F6E58 06 D0                           DW      $06D0   ;       1744    174.40  79.11   160             0.781   1292.102
006E5A 7F6E5A 06 CC                           DW      $06CC   ;       1740    173.98  78.88   161             0.786   1301.917
006E5C 7F6E5C 06 C8                           DW      $06C8   ;       1736    173.56  78.65   162             0.791   1311.756
006E5E 7F6E5E 06 C4                           DW      $06C4   ;       1732    173.15  78.42   163             0.796   1321.618
006E60 7F6E60 06 BF                           DW      $06BF   ;       1727    172.74  78.19   164             0.801   1331.503
006E62 7F6E62 06 BB                           DW      $06BB   ;       1723    172.33  77.96   165             0.806   1341.412
006E64 7F6E64 06 B7                           DW      $06B7   ;       1719    171.93  77.73   166             0.811   1351.344
006E66 7F6E66 06 B4                           DW      $06B4   ;       1716    171.61  77.56   167             0.815   1359.307
006E68 7F6E68 06 B0                           DW      $06B0   ;       1712    171.20  77.34   168             0.820   1369.282
006E6A 7F6E6A 06 AC                           DW      $06AC   ;       1708    170.81  77.11   169             0.825   1379.281
006E6C 7F6E6C 06 A8                           DW      $06A8   ;       1704    170.41  76.89   170             0.830   1389.305
006E6E 7F6E6E 06 A4                           DW      $06A4   ;       1700    170.02  76.68   171             0.835   1399.352
006E70 7F6E70 06 A0                           DW      $06A0   ;       1696    169.63  76.46   172             0.840   1409.423
006E72 7F6E72 06 9C                           DW      $069C   ;       1692    169.24  76.24   173             0.845   1419.519
006E74 7F6E74 06 99                           DW      $0699   ;       1689    168.85  76.03   174             0.850   1429.639
006E76 7F6E76 06 95                           DW      $0695   ;       1685    168.54  75.86   175             0.854   1437.752
006E78 7F6E78 06 92                           DW      $0692   ;       1682    168.16  75.65   176             0.859   1447.916
006E7A 7F6E7A 06 8E                           DW      $068E   ;       1678    167.78  75.43   177             0.864   1458.104
006E7C 7F6E7C 06 8A                           DW      $068A   ;       1674    167.40  75.22   178             0.869   1468.318
006E7E 7F6E7E 06 86                           DW      $0686   ;       1670    167.03  75.05   179             0.874   1478.556
006E80 7F6E80 06 83                           DW      $0683   ;       1667    166.65  74.81   180             0.879   1488.818
006E82 7F6E82 06 7F                           DW      $067F   ;       1663    166.28  74.60   181             0.884   1499.106
006E84 7F6E84 06 7D                           DW      $067D   ;       1661    166.09  74.49   182             0.889   1504.419
006E86 7F6E86 06 77                           DW      $0677   ;       1655    165.54  74.19   183             0.894   1519.756
006E88 7F6E88 06 75                           DW      $0675   ;       1653    165.25  74.03   184             0.898   1528.045
006E8A 7F6E8A 06 71                           DW      $0671   ;       1649    164.89  73.83   185             0.903   1538.428
006E8C 7F6E8C 06 6D                           DW      $066D   ;       1645    164.52  73.63   186             0.908   1548.837
006E8E 7F6E8E 06 6A                           DW      $066A   ;       1642    164.16  73.42   187             0.913   1559.271
006E90 7F6E90 06 66                           DW      $0666   ;       1638    163.81  73.23   188             0.918   1569.731
006E92 7F6E92 06 63                           DW      $0663   ;       1635    163.45  73.03   189             0.923   1580.216
006E94 7F6E94 06 5F                           DW      $065F   ;       1631    163.09  72.98   190             0.928   1590.727
006E96 7F6E96 06 5B                           DW      $065B   ;       1627    162.74  72.63   191             0.933   1601.264
006E98 7F6E98 06 58                           DW      $0658   ;       1624    162.39  72.44   192             0.938   1611.827
006E9A 7F6E9A 06 55                           DW      $0655   ;       1621    162.11  72.28   193             0.942   1620.296
006E9C 7F6E9C 06 52                           DW      $0652   ;       1618    161.76  72.09   194             0.947   1630.906
006E9E 7F6E9E 06 4E                           DW      $064E   ;       1614    161.42  71.90   195             0.952   1641.542
006EA0 7F6EA0 06 4B                           DW      $064B   ;       1611    161.07  71.71   196             0.957   1652.204
006EA2 7F6EA2 06 47                           DW      $0647   ;       1607    160.73  71.52   197             0.962   1662.893
006EA4 7F6EA4 06 44                           DW      $0644   ;       1604    160.39  71.33   198             0.967   1673.608
006EA6 7F6EA6 06 41                           DW      $0641   ;       1601    160.16  71.14   199             0.972   1684.350
006EA8 7F6EA8 06 3D                           DW      $063D   ;       1597    159.71  70.95   200             0.977   1695.118
006EAA 7F6EAA 06 3A                           DW      $063A   ;       1594    159.44  70.80   201             0.981   1703.752
006EAC 7F6EAC 06 37                           DW      $0637   ;       1591    159.11  70.62   202             0.986   1714.569
006EAE 7F6EAE 06 34                           DW      $0634   ;       1588    158.78  70.43   203             0.991   1725.413
006EB0 7F6EB0 06 30                           DW      $0630   ;       1584    158.44  70.25   204             0.996   1736.284
006EB2 7F6EB2 06 2D                           DW      $062D   ;       1581    158.11  70.06   205             1.001   1747.182
006EB4 7F6EB4 06 2A                           DW      $062A   ;       1578    157.79  69.88   206             1.006   1758.107
006EB6 7F6EB6 06 27                           DW      $0627   ;       1575    157.46  69.70   207             1.011   1769.06
006EB8 7F6EB8 06 23                           DW      $0623   ;       1571    157.13  69.52   208             1.016   1780.04
006EBA 7F6EBA 06 20                           DW      $0620   ;       1568    156.81  69.34   209             1.021   1791.048
006EBC 7F6EBC 06 1E                           DW      $061E   ;       1566    156.55  69.20   210             1.025   1799.874
006EBE 7F6EBE 06 1A                           DW      $061A   ;       1562    156.23  69.02   211             1.030   1810.932
006EC0 7F6EC0 06 17                           DW      $0617   ;       1559    155.91  68.84   212             1.035   1822.018
006EC2 7F6EC2 06 14                           DW      $0614   ;       1556    155.59  68.66   213             1.040   1833.131
006EC4 7F6EC4 06 11                           DW      $0611   ;       1553    155.28  68.49   214             1.045   1844.273
006EC6 7F6EC6 06 0E                           DW      $060E   ;       1550    154.96  68.31   215             1.050   1855.443
006EC8 7F6EC8 06 0B                           DW      $060B   ;       1547    154.65  68.14   216             1.055   1866.641
006ECA 7F6ECA 06 07                           DW      $0607   ;       1543    154.33  67.96   217             1.060   1877.868
006ECC 7F6ECC 06 05                           DW      $0605   ;       1541    154.08  67.82   218             1.064   1886.870
006ECE 7F6ECE 06 02                           DW      $0602   ;       1538    153.77  67.65   219             1.069   1898.148
006ED0 7F6ED0 05 FF                           DW      $05FF   ;       1535    153.46  67.48   220             1.074   1909.455
006ED2 7F6ED2 05 FC                           DW      $05FC   ;       1532    153.16  67.31   221             1.079   1920.791
006ED4 7F6ED4 05 F9                           DW      $05F9   ;       1529    152.85  67.14   222             1.084   1932.155
006ED6 7F6ED6 05 F6                           DW      $05F6   ;       1526    152.55  66.97   223             1.089   1943.549
006ED8 7F6ED8 05 F2                           DW      $05F2   ;       1522    152.24  66.80   224             1.094   1954.972
006EDA 7F6EDA 05 EF                           DW      $05EF   ;       1519    151.94  66.63   225             1.099   1966.424
006EDC 7F6EDC 05 EC                           DW      $05EC   ;       1516    151.64  66.47   226             1.104   1977.906
006EDE 7F6EDE 05 EA                           DW      $05EA   ;       1514    151.40  66.33   227             1.108   1987.112
006EE0 7F6EE0 05 E7                           DW      $05E7   ;       1511    151.10  66.17   228             1.113   1998.647
006EE2 7F6EE2 05 E4                           DW      $05E4   ;       1508    150.80  66.00   229             1.118   2010.211
006EE4 7F6EE4 05 E1                           DW      $05E1   ;       1505    150.51  65.84   230             1.123   2021.806
006EE6 7F6EE6 05 DE                           DW      $05DE   ;       1502    150.21  65.67   231             1.128   2033.430
006EE8 7F6EE8 05 DB                           DW      $05DB   ;       1499    149.92  65.51   232             1.133   2045.084
006EEA 7F6EEA 05 D8                           DW      $05D8   ;       1496    149.62  65.35   233             1.138   2056.769
006EEC 7F6EEC 05 D5                           DW      $05D5   ;       1493    149.33  65.18   234             1.143   2068.483
006EEE 7F6EEE 05 D3                           DW      $05D3   ;       1491    149.10  65.05   235             1.147   2077.877
006EF0 7F6EF0 05 D0                           DW      $05D0   ;       1488    148.81  64.89   236             1.152   2089.647
006EF2 7F6EF2 05 CD                           DW      $05CD   ;       1485    148.52  64.73   237             1.157   2101.447
006EF4 7F6EF4 05 CA                           DW      $05CA   ;       1482    148.23  64.57   238             1.162   2113.278
006EF6 7F6EF6 05 C8                           DW      $05C8   ;       1480    147.95  64.41   239             1.167   2125.140
006EF8 7F6EF8 05 C5                           DW      $05C5   ;       1477    147.66  64.26   240             1.172   2137.032
006EFA 7F6EFA 05 C2                           DW      $05C2   ;       1474    147.38  64.10   241             1.177   2148.956
006EFC 7F6EFC 05 BF                           DW      $05BF   ;       1471    147.09  63.94   242             1.182   2160.911
006EFE 7F6EFE 05 BC                           DW      $05BC   ;       1468    146.81  63.78   243             1.187   2172.898
006F00 7F6F00 05 BA                           DW      $05BA   ;       1466    146.59  63.66   244             1.191   2182.510
006F02 7F6F02 05 B7                           DW      $05B7   ;       1463    146.31  63.50   245             1.196   2194.553
006F04 7F6F04 05 B4                           DW      $05B4   ;       1460    146.03  63.35   246             1.201   2206.628
006F06 7F6F06 05 B2                           DW      $05B2   ;       1458    145.75  63.19   247             1.206   2218.735
006F08 7F6F08 05 AF                           DW      $05AF   ;       1455    145.47  63.04   248             1.211   2230.874
006F0A 7F6F0A 05 AC                           DW      $05AC   ;       1452    145.20  62.89   249             1.216   2243.044
006F0C 7F6F0C 05 A9                           DW      $05A9   ;       1449    144.92  62.73   250             1.221   2255.247
006F0E 7F6F0E 05 A7                           DW      $05A7   ;       1447    144.65  62.58   251             1.226   2267.483
006F10 7F6F10 05 A2                           DW      $05A2   ;       1442    144.23  62.46   252             1.230   2277.294
006F12 7F6F12 05 A2                           DW      $05A2   ;       1442    144.16  62.31   253             1.235   2289.588
006F14 7F6F14 05 9F                           DW      $059F   ;       1439    143.88  62.16   254             1.240   2301.915
006F16 7F6F16 05 9C                           DW      $059C   ;       1436    143.61  62.00   255             1.245   2314.274
006F18 7F6F18 05 99                           DW      $0599   ;       1433    143.34  61.86   256             1.250   2326.667
006F1A 7F6F1A 05 97                           DW      $0597   ;       1431    143.08  61.71   257             1.255   2339.092
006F1C 7F6F1C 05 94                           DW      $0594   ;       1428    142.81  61.56   258             1.260   2351.551
006F1E 7F6F1E 05 91                           DW      $0591   ;       1425    142.54  61.41   259             1.265   2364.043
006F20 7F6F20 05 8F                           DW      $058F   ;       1423    142.28  61.26   260             1.270   2376.568
006F22 7F6F22 05 8D                           DW      $058D   ;       1421    142.06  61.15   261             1.274   2386.613
006F24 7F6F24 05 8A                           DW      $058A   ;       1418    141.80  61.00   262             1.279   2399.199
006F26 7F6F26 05 87                           DW      $0587   ;       1415    141.54  60.85   263             1.284   2411.819
006F28 7F6F28 05 85                           DW      $0585   ;       1413    141.27  60.71   264             1.289   2424.473
006F2A 7F6F2A 05 82                           DW      $0582   ;       1410    141.01  60.56   265             1.294   2437.161
006F2C 7F6F2C 05 80                           DW      $0580   ;       1408    140.75  60.42   266             1.299   2449.884
006F2E 7F6F2E 05 7D                           DW      $057D   ;       1405    140.49  60.27   267             1.304   2462.641
006F30 7F6F30 05 7A                           DW      $057A   ;       1402    140.23  60.13   268             1.309   2475.432
006F32 7F6F32 05 78                           DW      $0578   ;       1400    140.03  60.01   269             1.313   2485.690
006F34 7F6F34 05 76                           DW      $0576   ;       1398    139.77  59.87   270             1.318   2498.544
006F36 7F6F36 05 73                           DW      $0573   ;       1395    139.51  59.73   271             1.323   2511.433
006F38 7F6F38 05 71                           DW      $0571   ;       1393    139.26  59.59   272             1.328   2524.357
006F3A 7F6F3A 05 6E                           DW      $056E   ;       1390    139.00  59.44   273             1.333   2537.317
006F3C 7F6F3C 05 6C                           DW      $056C   ;       1388    138.75  59.30   274             1.338   2550.311
006F3E 7F6F3E 05 69                           DW      $0569   ;       1385    138.49  59.16   275             1.343   2563.342
006F40 7F6F40 05 66                           DW      $0566   ;       1382    138.24  59.02   276             1.348   2576.407
006F42 7F6F42 05 64                           DW      $0564   ;       1380    137.99  58.88   277             1.353   2589.509
006F44 7F6F44 05 62                           DW      $0562   ;       1378    137.79  58.77   278             1.357   2600.016
006F46 7F6F46 05 5F                           DW      $055F   ;       1375    137.54  58.63   279             1.362   2613.183
006F48 7F6F48 05 5D                           DW      $055D   ;       1373    137.29  58.49   280             1.367   2626.386
006F4A 7F6F4A 05 5A                           DW      $055A   ;       1370    137.04  58.35   281             1.372   2639.625
006F4C 7F6F4C 05 58                           DW      $0558   ;       1368    136.79  58.22   282             1.377   2652.901
006F4E 7F6F4E 05 55                           DW      $0555   ;       1365    136.54  58.08   283             1.382   2666.213
006F50 7F6F50 05 53                           DW      $0553   ;       1363    136.29  57.94   284             1.387   2679.563
006F52 7F6F52 05 51                           DW      $0551   ;       1361    136.05  57.80   285             1.392   2692.949
006F54 7F6F54 05 4F                           DW      $054F   ;       1359    135.85  57.70   286             1.396   2703.685
006F56 7F6F56 05 4C                           DW      $054C   ;       1356    135.61  57.56   287             1.401   2717.138
006F58 7F6F58 05 4A                           DW      $054A   ;       1354    135.38  57.42   288             1.406   2730.629
006F5A 7F6F5A 05 47                           DW      $0547   ;       1351    135.12  57.29   289             1.411   2744.157
006F5C 7F6F5C 05 45                           DW      $0545   ;       1349    134.88  57.15   290             1.416   2757.723
006F5E 7F6F5E 05 42                           DW      $0542   ;       1346    134.64  57.02   291             1.421   2771.327
006F60 7F6F60 05 40                           DW      $0540   ;       1344    134.39  56.89   292             1.426   2784.969
006F62 7F6F62 05 3E                           DW      $053E   ;       1342    134.15  56.75   293             1.431   2798.649
006F64 7F6F64 05 3B                           DW      $053B   ;       1339    133.91  56.62   294             1.436   2812.368
006F66 7F6F66 05 39                           DW      $0539   ;       1337    133.72  56.51   295             1.440   2823.371
006F68 7F6F68 05 37                           DW      $0537   ;       1335    133.48  56.38   296             1.445   2837.159
006F6A 7F6F6A 05 35                           DW      $0535   ;       1333    133.25  56.25   297             1.450   2850.986
006F6C 7F6F6C 05 32                           DW      $0532   ;       1330    133.01  56.12   298             1.455   2864.852
006F6E 7F6F6E 05 30                           DW      $0530   ;       1328    132.77  55.98   299             1.460   2878.757
006F70 7F6F70 05 2D                           DW      $052D   ;       1325    132.54  55.85   300             1.465   2892.702
006F72 7F6F72 05 2B                           DW      $052B   ;       1323    132.30  55.72   301             1.470   2906.686
006F74 7F6F74 05 29                           DW      $0529   ;       1321    132.07  55.59   302             1.475   2920.709
006F76 7F6F76 05 27                           DW      $0527   ;       1319    131.88  55.49   303             1.479   2931.957
006F78 7F6F78 05 24                           DW      $0524   ;       1316    131.64  55.36   304             1.484   2946.052
006F7A 7F6F7A 05 22                           DW      $0522   ;       1314    131.41  55.23   305             1.489   2960.188
006F7C 7F6F7C 05 20                           DW      $0520   ;       1312    131.88  55.10   306             1.494   2974.364
006F7E 7F6F7E 05 1E                           DW      $051E   ;       1310    130.95  54.97   307             1.499   2988.580
006F80 7F6F80 05 1B                           DW      $051B   ;       1307    130.72  54.84   308             1.504   3002.838
006F82 7F6F82 05 19                           DW      $0519   ;       1305    130.49  54.71   309             1.509   3017.135
006F84 7F6F84 05 17                           DW      $0517   ;       1303    130.25  54.59   310             1.514   3031.474
006F86 7F6F86 05 14                           DW      $0514   ;       1300    130.03  54.46   311             1.519   3045.855
006F88 7F6F88 05 12                           DW      $0512   ;       1298    129.84  54.36   312             1.523   3057.389
006F8A 7F6F8A 05 10                           DW      $0510   ;       1296    129.61  54.23   313             1.528   3071.843
006F8C 7F6F8C 05 0E                           DW      $050E   ;       1294    129.39  54.10   314             1.533   3086.340
006F8E 7F6F8E 05 0C                           DW      $050C   ;       1292    129.16  53.98   315             1.538   3100.878
006F90 7F6F90 05 09                           DW      $0509   ;       1289    128.93  53.85   316             1.543   3115.458
006F92 7F6F92 05 07                           DW      $0507   ;       1287    128.71  53.73   317             1.548   3130.081
006F94 7F6F94 05 05                           DW      $0505   ;       1285    128.48  53.60   318             1.553   3144.746
006F96 7F6F96 05 03                           DW      $0503   ;       1283    128.26  53.48   319             1.558   3159.454
006F98 7F6F98 05 00                           DW      $0500   ;       1280    128.03  53.35   320             1.563   3174.204
006F9A 7F6F9A 04 FF                           DW      $04FF   ;       1279    127.85  53.25   321             1.567   3186.036
006F9C 7F6F9C 04 FC                           DW      $04FC   ;       1276    127.63  53.13   322             1.572   3200.863
006F9E 7F6F9E 04 FA                           DW      $04FA   ;       1274    127.41  53.00   323             1.577   3215.735
006FA0 7F6FA0 04 F8                           DW      $04F8   ;       1272    127.18  52.88   324             1.582   3230.650
006FA2 7F6FA2 04 F6                           DW      $04F6   ;       1270    126.96  52.76   325             1.587   3245.608
006FA4 7F6FA4 04 F3                           DW      $04F3   ;       1267    126.74  52.63   326             1.592   3260.610
006FA6 7F6FA6 04 F1                           DW      $04F1   ;       1265    126.52  52.51   327             1.597   3275.657
006FA8 7F6FA8 04 EF                           DW      $04EF   ;       1263    126.30  52.39   328             1.602   3290.747
006FAA 7F6FAA 04 ED                           DW      $04ED   ;       1261    126.12  52.29   329             1.606   3302.852
006FAC 7F6FAC 04 EB                           DW      $04EB   ;       1259    125.90  52.17   330             1.611   3318.023
006FAE 7F6FAE 04 E9                           DW      $04E9   ;       1257    125.68  52.05   331             1.616   3333.239
006FB0 7F6FB0 04 E7                           DW      $04E7   ;       1255    125.47  51.93   332             1.621   3348.500
006FB2 7F6FB2 04 E5                           DW      $04E5   ;       1253    125.25  51.80   333             1.626   3363.806
006FB4 7F6FB4 04 E2                           DW      $04E2   ;       1250    125.03  51.68   334             1.631   3379.157
006FB6 7F6FB6 04 E0                           DW      $04E0   ;       1248    124.81  51.56   335             1.636   3394.554
006FB8 7F6FB8 04 DE                           DW      $04DE   ;       1246    124.60  51.44   336             1.641   3409.997
006FBA 7F6FBA 04 DC                           DW      $04DC   ;       1244    124.38  51.32   337             1.646   3425.486
006FBC 7F6FBC 04 DA                           DW      $04DA   ;       1242    124.21  51.23   338             1.650   3437.910
006FBE 7F6FBE 04 D8                           DW      $04D8   ;       1240    123.99  51.11   339             1.655   3453.483
006FC0 7F6FC0 04 D6                           DW      $04D6   ;       1238    123.78  50.99   340             1.660   3469.102
006FC2 7F6FC2 04 D4                           DW      $04D4   ;       1236    123.56  50.87   341             1.665   3484.768
006FC4 7F6FC4 04 D2                           DW      $04D2   ;       1234    123.35  50.75   342             1.670   3500.480
006FC6 7F6FC6 04 CF                           DW      $04CF   ;       1231    123.14  50.63   343             1.675   3516.241
006FC8 7F6FC8 04 CD                           DW      $04CD   ;       1229    122.92  50.51   344             1.680   3532.048
006FCA 7F6FCA 04 CB                           DW      $04CB   ;       1227    122.71  50.40   345             1.685   3547.903
006FCC 7F6FCC 04 C9                           DW      $04C9   ;       1225    122.54  50.30   346             1.689   3560.622
006FCE 7F6FCE 04 C7                           DW      $04C7   ;       1223    122.33  50.18   347             1.694   3576.564
006FD0 7F6FD0 04 C5                           DW      $04C5   ;       1221    122.12  50.07   348             1.699   3592.554
006FD2 7F6FD2 04 C3                           DW      $04C3   ;       1219    121.91  49.95   349             1.704   3608.592
006FD4 7F6FD4 04 C1                           DW      $04C1   ;       1217    121.70  49.83   350             1.709   3624.679
006FD6 7F6FD6 04 BF                           DW      $04BF   ;       1215    121.49  49.72   351             1.714   3640.816
006FD8 7F6FD8 04 BD                           DW      $04BD   ;       1213    121.28  4960    352             1.719   3657.001
006FDA 7F6FDA 04 BB                           DW      $04BB   ;       1211    121.07  49.48   353             1.724   3673.236
006FDC 7F6FDC 04 B9                           DW      $04B9   ;       1209    120.86  49.37   354             1.729   3689.520
006FDE 7F6FDE 04 B7                           DW      $04B7   ;       1207    120.70  49.28   355             1.733   3702.583
006FE0 7F6FE0 04 B5                           DW      $04B5   ;       1205    120.49  49.16   356             1.738   3718.958
006FE2 7F6FE2 04 B3                           DW      $04B3   ;       1203    120.28  49.04   357             1.743   3735.382
006FE4 7F6FE4 04 B1                           DW      $04B1   ;       1201    120.07  48.93   358             1.748   3751.857
006FE6 7F6FE6 04 AF                           DW      $04AF   ;       1199    119.87  48.82   359             1.753   3768.383
006FE8 7F6FE8 04 AD                           DW      $04AD   ;       1197    119.66  48.70   360             1.758   3784.960
006FEA 7F6FEA 04 AB                           DW      $04AB   ;       1195    119.46  48.59   361             1.763   3801.588
006FEC 7F6FEC 04 A9                           DW      $04A9   ;       1193    119.25  48.47   362             1.768   3818.267
006FEE 7F6FEE 04 A7                           DW      $04A7   ;       1191    119.09  48.38   363             1.772   3831.648
006FF0 7F6FF0 04 A5                           DW      $04A5   ;       1189    118.88  48.27   364             1.777   3848.421
006FF2 7F6FF2 04 A3                           DW      $04A3   ;       1187    118.68  48.15   365             1.782   3865.245
006FF4 7F6FF4 04 A1                           DW      $04A1   ;       1185    118.47  48.04   366             1.787   3882.123
006FF6 7F6FF6 04 9F                           DW      $049F   ;       1183    118.27  47.93   367             1.792   3899.052
006FF8 7F6FF8 04 9D                           DW      $049D   ;       1181    118.07  47.81   368             1.797   3916.035
006FFA 7F6FFA 04 9B                           DW      $049B   ;       1179    117.86  47.70   369             1.802   3933.071
006FFC 7F6FFC 04 99                           DW      $0499   ;       1177    117.66  47.59   370             1.807   3950.160
006FFE 7F6FFE 04 97                           DW      $0497   ;       1175    117.46  47.48   371             1.812   3967.302
007000 7F7000 04 95                           DW      $0495   ;       1173    117.30  47.39   372             1.816   3981.055
007002 7F7002 04 93                           DW      $0493   ;       1171    117.10  47.28   373             1.821   3998.295
007004 7F7004 04 91                           DW      $0491   ;       1169    116.90  47.16   374             1.826   4015.589
007006 7F7006 04 8F                           DW      $048F   ;       1167    116.69  47.05   375             1.831   4032.938
007008 7F7008 04 8D                           DW      $048D   ;       1165    116.49  46.94   376             1.836   4050.341
00700A 7F700A 04 8B                           DW      $048B   ;       1163    116.29  46.83   377             1.841   4067.800
00700C 7F700C 04 89                           DW      $0489   ;       1161    116.10  46.72   378             1.846   4085.314
00700E 7F700E 04 87                           DW      $0487   ;       1159    115.90  46.61   379             1.851   4102.883
007010 7F7010 04 85                           DW      $0485   ;       1157    115.74  46.52   380             1.855   4116.979
007012 7F7012 04 83                           DW      $0483   ;       1155    115.54  46.41   381             1.860   4134.65
007014 7F7014 04 81                           DW      $0481   ;       1153    115.34  46.30   382             1.865   4152.376
007016 7F7016 04 7F                           DW      $047F   ;       1151    115.14  46.19   383             1.870   4170.160
007018 7F7018 04 7D                           DW      $047D   ;       1149    114.94  46.08   384             1.875   4188.000
00701A 7F701A 04 7C                           DW      $047C   ;       1148    114.75  45.97   385             1.880   4205.897
00701C 7F701C 04 7A                           DW      $047A   ;       1146    114.55  45.86   386             1.885   4223.852
00701E 7F701E 04 78                           DW      $0478   ;       1144    114.35  45.75   387             1.890   4241.865
007020 7F7020 04 76                           DW      $0476   ;       1142    114.16  45.64   388             1.895   4259.936
007022 7F7022 04 74                           DW      $0474   ;       1140    114.00  45.56   389             1.899   4274.434
007024 7F7024 04 72                           DW      $0472   ;       1138    113.80  45.45   390             1.904   4292.610
007026 7F7026 04 70                           DW      $0470   ;       1136    113.61  45.34   391             1.909   4310.844
007028 7F7028 04 6E                           DW      $046E   ;       1134    113.41  45.23   392             1.914   4329.138
00702A 7F702A 04 6C                           DW      $046C   ;       1132    113.22  45.12   393             1.919   4347.491
00702C 7F702C 04 6A                           DW      $046A   ;       1130    113.02  45.01   394             1.924   4365.904
00702E 7F702E 04 68                           DW      $0468   ;       1128    112.83  44.91   395             1.929   4384.376
007030 7F7030 04 66                           DW      $0466   ;       1126    112.64  44.80   396             1.934   4402.909
007032 7F7032 04 65                           DW      $0465   ;       1125    112.48  44.71   397             1.938   4417.779
007034 7F7034 04 63                           DW      $0463   ;       1123    112.29  44.60   398             1.943   4436.421
007036 7F7036 04 61                           DW      $0461   ;       1121    112.10  44.50   399             1.948   4455.125
007038 7F7038 04 5F                           DW      $045F   ;       1119    111.90  44.39   400             1.953   4473.889
00703A 7F703A 04 5D                           DW      $045D   ;       1117    111.71  44.28   401             1.958   4492.715
00703C 7F703C 04 5B                           DW      $045B   ;       1115    111.52  44.18   402             1.963   4511.604
00703E 7F703E 04 59                           DW      $0459   ;       1113    111.33  44.07   403             1.968   4530.554
007040 7F7040 04 57                           DW      $0457   ;       1111    111.13  43.96   404             1.973   4549.567
007042 7F7042 04 55                           DW      $0455   ;       1109    110.94  43.86   405             1.978   4568.643
007044 7F7044 04 54                           DW      $0454   ;       1108    110.79  43.77   406             1.982   4583.950
007046 7F7046 04 52                           DW      $0452   ;       1106    110.60  43.67   407             1.987   4603.140
007048 7F7048 04 50                           DW      $0450   ;       1104    110.41  43.56   408             1.992   4622.394
00704A 7F704A 04 4E                           DW      $044E   ;       1102    110.22  43.45   409             1.997   4641.712
00704C 7F704C 04 4C                           DW      $044C   ;       1100    110.03  43.35   410             2.002   4661.094
00704E 7F704E 04 4A                           DW      $044A   ;       1098    109.84  43.24   411             2.007   4680.541
007050 7F7050 04 49                           DW      $0449   ;       1097    109.65  43.14   412             2.012   4700.054
007052 7F7052 04 47                           DW      $0447   ;       1095    109.46  43.03   413             2.017   4719.631
007054 7F7054 04 45                           DW      $0445   ;       1093    109.31  42.95   414             2.021   4735.341
007056 7F7056 04 43                           DW      $0443   ;       1091    109.12  42.84   415             2.026   4755.037
007058 7F7058 04 41                           DW      $0441   ;       1089    108.93  42.74   416             2.031   4774.800
00705A 7F705A 04 3F                           DW      $043F   ;       1087    108.74  42.64   417             2.036   4794.629
00705C 7F705C 04 3E                           DW      $043E   ;       1086    108.56  42.53   418             2.041   4814.525
00705E 7F705E 04 3C                           DW      $043C   ;       1084    108.37  42.43   419             2.046   4834.489
007060 7F7060 04 3A                           DW      $043A   ;       1082    108.18  42.32   420             2.051   4854.520
007062 7F7062 04 38                           DW      $0438   ;       1080    107.99  42.22   421             2.056   4874.620
007064 7F7064 04 36                           DW      $0436   ;       1078    107.81  42.11   422             2.061   4894.787
007066 7F7066 04 17                           DW      $0417   ;       1077    107.66  42.03   423             2.065   4910.971
007068 7F7068 04 33                           DW      $0433   ;       1075    107.47  41.93   424             2.070   4931.263
00706A 7F706A 04 31                           DW      $0431   ;       1073    107.28  41.82   425             2.075   4951.624
00706C 7F706C 04 2F                           DW      $042F   ;       1071    107.10  41.72   426             2.080   4972.055
00706E 7F706E 04 2D                           DW      $042D   ;       1069    106.91  41.62   427             2.085   4992.556
007070 7F7070 04 2B                           DW      $042B   ;       1067    106.73  41.51   428             2.090   5013.127
007072 7F7072 04 29                           DW      $0429   ;       1065    106.54  41.41   429             2.095   5033.769
007074 7F7074 04 28                           DW      $0428   ;       1064    106.36  41.31   430             2.100   5054.483
007076 7F7076 04 26                           DW      $0426   ;       1062    106.21  41.23   431             2.104   5071.105
007078 7F7078 04 24                           DW      $0424   ;       1060    106.02  41.12   432             2.109   5091.947
00707A 7F707A 04 22                           DW      $0422   ;       1058    105.84  41.02   433             2.114   5112.862
00707C 7F707C 04 21                           DW      $0421   ;       1057    105.66  40.92   434             2.119   5133.849
00707E 7F707E 04 1F                           DW      $041F   ;       1055    105.47  40.82   435             2.124   5154.910
007080 7F7080 04 1D                           DW      $041D   ;       1053    105.29  40.72   436             2.129   5176.043
007082 7F7082 04 1B                           DW      $041B   ;       1051    105.10  40.61   437             2.134   5197.251
007084 7F7084 04 19                           DW      $0419   ;       1049    104.92  40.51   438             2.139   5218.532
007086 7F7086 04 17                           DW      $0417   ;       1047    104.74  40.41   439             2.144   5239.888
007088 7F7088 04 16                           DW      $0416   ;       1046    104.59  40.33   440             2.148   5257.027
00708A 7F708A 04 14                           DW      $0414   ;       1044    104.41  40.23   441             2.153   5278.518
00708C 7F708C 04 12                           DW      $0412   ;       1042    104.23  40.13   442             2.158   5300.084
00708E 7F708E 04 10                           DW      $0410   ;       1040    104.04  40.02   443             2.163   5321.727
007090 7F7090 04 0F                           DW      $040F   ;       1039    103.86  39.92   444             2.168   5343.446
007092 7F7092 04 0D                           DW      $040D   ;       1037    103.68  39.82   445             2.173   5365.242
007094 7F7094 04 0B                           DW      $040B   ;       1035    103.50  39.72   446             2.178   5387.116
007096 7F7096 04 09                           DW      $0409   ;       1033    103.32  39.62   447             2.183   5409.066
007098 7F7098 04 07                           DW      $0407   ;       1031    103.14  39.52   448             2.188   5431.095
00709A 7F709A 04 06                           DW      $0406   ;       1030    102.99  39.44   449             2.192   5448.775
00709C 7F709C 04 04                           DW      $0404   ;       1028    102.81  39.34   450             2.197   5470.945
00709E 7F709E 04 02                           DW      $0402   ;       1026    102.63  39.24   451             2.202   5493.195
0070A0 7F70A0 04 01                           DW      $0401   ;       1025    102.45  39.14   452             2.207   5515.525
0070A2 7F70A2 03 FF                           DW      $03FF   ;       1023    102.27  39.04   453             2.212   5537.934
0070A4 7F70A4 03 FD                           DW      $03FD   ;       1021    102.09  38.94   454             2.217   5560.424
0070A6 7F70A6 03 FB                           DW      $03FB   ;       1019    101.91  38.84   455             2.222   5582.995
0070A8 7F70A8 03 F9                           DW      $03F9   ;       1017    101.73  38.74   456             2.227   5605.647
0070AA 7F70AA 03 F8                           DW      $03F8   ;       1016    101.58  38.66   457             2.231   5623.828
0070AC 7F70AC 03 F6                           DW      $03F6   ;       1014    101.40  38.56   458             2.236   5646.628
0070AE 7F70AE 03 F4                           DW      $03F4   ;       1012    101.22  38.46   459             2.241   5669.511
0070B0 7F70B0 03 F3                           DW      $03F3   ;       1011    101.05  38.36   460             2.246   5692.476
0070B2 7F70B2 03 F1                           DW      $03F1   ;       1009    100.87  38.26   461             2.251   5715.526
0070B4 7F70B4 03 EF                           DW      $03EF   ;       1007    100.69  38.16   462             2.256   5738.659
0070B6 7F70B6 03 ED                           DW      $03ED   ;       1005    100.51  38.06   463             2.261   5761.887
0070B8 7F70B8 03 EB                           DW      $03EB   ;       1003    100.33  37.96   464             2.266   5785.179
0070BA 7F70BA 03 EA                           DW      $03EA   ;       1002    100.15  37.86   465             2.271   5808.567
0070BC 7F70BC 03 E8                           DW      $03E8   ;       1000    100.01  37.78   466             2.275   5827.339
0070BE 7F70BE 03 E6                           DW      $03E6   ;       998         99.83       37.68   467             2.280   5850.882
0070C0 7F70C0 03 E5                           DW      $03E5   ;       997     99.65   37.59   468             2.285   5874.512
0070C2 7F70C2 03 E3                           DW      $03E3   ;       995     99.48   37.49   469             2.290   5898.229
0070C4 7F70C4 03 E1                           DW      $03E1   ;       993     99.30   37.39   470             2.295   5922.033
0070C6 7F70C6 03 DF                           DW      $03DF   ;       991     99.12   37.29   471             2.300   5945.926
0070C8 7F70C8 03 DD                           DW      $03DD   ;       989     98.94   37.19   472             2.305   5969.907
0070CA 7F70CA 03 DC                           DW      $03DC   ;       988     98.77   37.09   473             2.310   5993.978
0070CC 7F70CC 03 DA                           DW      $03DA   ;       986     98.63   37.01   474             2.314   6013.299
0070CE 7F70CE 03 D9                           DW      $03D9   ;       985     98.45   36.92   475             2.319   6037.531
0070D0 7F70D0 03 D7                           DW      $03D7   ;       983     98.27   36.82   476             2.324   6061.854
0070D2 7F70D2 03 D5                           DW      $03D5   ;       981     98.10   36.72   477             2.329   6086.267
0070D4 7F70D4 03 D3                           DW      $03D3   ;       979     97.92   36.62   478             2.334   6110.773
0070D6 7F70D6 03 D1                           DW      $03D1   ;       977     97.74   36.52   479             2.339   6135.370
0070D8 7F70D8 03 D0                           DW      $03D0   ;       976     97.57   36.43   480             2.344   6160.060
0070DA 7F70DA 03 CE                           DW      $03CE   ;       974     97.39   36.33   481             2.349   6184.843
0070DC 7F70DC 03 CC                           DW      $03CC   ;       972     97.21   36.23   482             2.354   6209.720
0070DE 7F70DE 03 CA                           DW      $03CA   ;       970     97.07   36.15   483             2.358   6229.690
0070E0 7F70E0 03 C9                           DW      $03C9   ;       969     96.90   36.05   484             2.363   6254.736
0070E2 7F70E2 03 C7                           DW      $03C7   ;       967     96.72   35.96   485             2.368   6279.878
0070E4 7F70E4 03 C6                           DW      $03C6   ;       966     95.86   35.86   486             2.373   6305.116
0070E6 7F70E6 03 C4                           DW      $03C4   ;       964     96.37   35.76   487             2.378   6330.450
0070E8 7F70E8 03 C2                           DW      $03C2   ;       962     96.20   35.67   488             2.383   6355.881
0070EA 7F70EA 03 C0                           DW      $03C0   ;       960     96.02   35.57   489             2.388   6381.409
0070EC 7F70EC 03 BF                           DW      $03BF   ;       959     95.85   35.47   490             2.393   6407.035
0070EE 7F70EE 03 BD                           DW      $03BD   ;       957     95.39   35.39   491             2.397   6427.607
0070F0 7F70F0 03 BB                           DW      $03BB   ;       955     95.53   35.30   492             2.402   6453.410
0070F2 7F70F2 03 BA                           DW      $03BA   ;       954     95.36   35.20   493             2.407   6479.314
0070F4 7F70F4 03 B8                           DW      $03B8   ;       952     95.19   35.10   494             2.412   6505.317
0070F6 7F70F6 03 B6                           DW      $03B6   ;       950     95.01   35.00   495             2.417   6531.421
0070F8 7F70F8 03 B4                           DW      $03B4   ;       948     94.84   34.91   496             2.422   6557.626
0070FA 7F70FA 03 B3                           DW      $03B3   ;       947     94.66   34.81   497             2.427   6583.933
0070FC 7F70FC 03 B1                           DW      $03B1   ;       945     94.49   34.72   498             2.432   6610.343
0070FE 7F70FE 03 AF                           DW      $03AF   ;       943     94.32   34.62   499             2.437   6636.855
007100 7F7100 03 AE                           DW      $03AE   ;       942     94.18   34.54   500             2.441   6658.140
007102 7F7102 03 AC                           DW      $03AC   ;       940     94.00   34.45   501             2.446   6684.839
007104 7F7104 03 AA                           DW      $03AA   ;       938     93.83   34.35   502             2.451   6711.644
007106 7F7106 03 A9                           DW      $03A9   ;       937     93.66   34.25   503             2.456   6738.553
007108 7F7108 03 A7                           DW      $03A7   ;       935     93.48   34.16   504             2.461   6765.569
00710A 7F710A 03 A5                           DW      $03A5   ;       933     93.31   34.06   505             2.466   6792.691
00710C 7F710C 03 A3                           DW      $03A3   ;       931     93.14   33.97   506             2.471   6819.921
00710E 7F710E 03 A2                           DW      $03A2   ;       930     92.97   33.87   507             2.476   6847.258
007110 7F7110 03 A0                           DW      $03A0   ;       928     92.83   33.79   508             2.480   6869.206
007112 7F7112 03 9F                           DW      $039F   ;       927     92.65   33.70   509             2.485   6896.740
007114 7F7114 03 9D                           DW      $039D   ;       925     92.48   33.60   510             2.490   6924.382
007116 7F7116 03 9B                           DW      $039B   ;       923     92.31   33.51   511             2.495   6952.136
007118 7F7118 03 99                           DW      $0399   ;       921     92.14   33.41   512             2.500   6980.000
00711A 7F711A 03 98                           DW      $0398   ;       920     91.96   33.31   513             2.505   7007.976
00711C 7F711C 03 96                           DW      $0396   ;       918     91.79   33.22   514             2.510   7036.064
00711E 7F711E 03 94                           DW      $0394   ;       916     91.62   33.12   515             2.515   7064.266
007120 7F7120 03 93                           DW      $0393   ;       915     91.45   33.03   516             2.520   7092.581
007122 7F7122 03 91                           DW      $0391   ;       913     91.31   32.95   517             2.524   7115.315
007124 7F7124 03 8F                           DW      $038F   ;       911     91.14   32.85   518             2.529   7143.837
007126 7F7126 03 8E                           DW      $038E   ;       910     90.97   32.76   519             2.534   7172.474
007128 7F7128 03 8C                           DW      $038C   ;       908     90.80   32.66   520             2.539   7201.227
00712A 7F712A 03 8A                           DW      $038A   ;       906     90.62   32.57   521             2.544   7230.098
00712C 7F712C 03 89                           DW      $0389   ;       905     90.45   32.47   522             2.549   7259.086
00712E 7F712E 03 87                           DW      $0387   ;       903     90.28   32.38   523             2.554   7288.193
007130 7F7130 03 85                           DW      $0385   ;       901     90.11   32.28   524             2.559   7317.419
007132 7F7132 03 84                           DW      $0384   ;       900     89.97   32.21   525             2.563   7340.886
007134 7F7134 03 82                           DW      $0382   ;       898     89.80   32.11   526             2.568   7370.329
007136 7F7136 03 80                           DW      $0380   ;       896     89.63   32.02   527             2.573   7399.893
007138 7F7138 03 7F                           DW      $037F   ;       895     89.46   31.92   528             2.578   7429.579
00713A 7F713A 03 7D                           DW      $037D   ;       893     89.29   31.83   529             2.583   7459.388
00713C 7F713C 03 7B                           DW      $037B   ;       891     89.12   31.73   530             2.588   7489.320
00713E 7F713E 03 7A                           DW      $037A   ;       890     88.95   31.64   531             2.593   7519.377
007140 7F7140 03 78                           DW      $0378   ;       888     88.78   31.54   532             2.598   7549.559
007142 7F7142 03 76                           DW      $0376   ;       886     88.61   31.45   533             2.603   7579.866
007144 7F7144 03 75                           DW      $0375   ;       885     88.47   31.37   534             2.607   7604.204
007146 7F7146 03 73                           DW      $0373   ;       883     88.30   31.28   535             2.612   7634.740
007148 7F7148 03 71                           DW      $0371   ;       881     88.13   31.18   536             2.617   7665.405
00714A 7F714A 03 70                           DW      $0370   ;       880     87.96   31.09   537             2.622   7696.198
00714C 7F714C 03 6E                           DW      $036E   ;       878     87.79   30.99   538             2.627   7727.122
00714E 7F714E 03 6C                           DW      $036C   ;       876     87.62   30.90   539             2.632   7758.176
007150 7F7150 03 6B                           DW      $036B   ;       875     87.45   30.80   540             2.637   7789.361
007152 7F7152 03 69                           DW      $0369   ;       873     87.28   30.71   541             2.642   7820.679
007154 7F7154 03 67                           DW      $0367   ;       871     87.14   30.63   542             2.646   7845.828
007156 7F7156 03 66                           DW      $0366   ;       870     86.97   30.54   543             2.651   7877.386
007158 7F7158 03 64                           DW      $0364   ;       868     86.80   30.44   544             2.656   7909.078
00715A 7F715A 03 62                           DW      $0362   ;       866     86.63   30.35   545             2.661   7940.906
00715C 7F715C 03 61                           DW      $0361   ;       865     86.46   30.26   546             2.666   7972.871
00715E 7F715E 03 5F                           DW      $035F   ;       863     86.29   30.16   547             2.671   8004.972
007160 7F7160 03 5D                           DW      $035D   ;       861     86.12   30.07   548             2.676   8037.212
007162 7F7162 03 5C                           DW      $035C   ;       860     85.95   29.97   549             2.681   8069.590
007164 7F7164 03 5A                           DW      $035A   ;       858     85.78   29.88   550             2.686   8102.109
007166 7F7166 03 58                           DW      $0358   ;       856     85.64   29.80   551             2.690   8128.225
007168 7F7168 03 57                           DW      $0357   ;       855     85.47   29.71   552             2.695   8160.998
00716A 7F716A 03 55                           DW      $0355   ;       853     85.30   29.61   553             2.700   8193.913
00716C 7F716C 03 53                           DW      $0353   ;       851     85.14   29.52   554             2.705   8226.972
00716E 7F716E 03 52                           DW      $0352   ;       850     84.97   29.43   555             2.710   8260.175
007170 7F7170 03 50                           DW      $0350   ;       848     84.80   29.33   556             2.715   8293.523
007172 7F7172 03 4E                           DW      $034E   ;       846     84.63   29.24   557             2.720   8327.018
007174 7F7174 03 4D                           DW      $034D   ;       845     84.46   29.14   558             2.725   8360.659
007176 7F7176 03 4B                           DW      $034B   ;       843     84.32   29.07   559             2.729   8387.679
007178 7F7178 03 4A                           DW      $034A   ;       842     84.15   28.97   560             2.734   8421.589
00717A 7F717A 03 48                           DW      $0348   ;       840     83.98   28.88   561             2.739   8455.648
00717C 7F717C 03 46                           DW      $0346   ;       838     83.81   28.78   562             2.744   8489.858
00717E 7F717E 03 44                           DW      $0344   ;       836     83.64   28.69   563             2.749   8524.220
007180 7F7180 03 43                           DW      $0343   ;       835     83.47   28.60   564             2.754   8558.736
007182 7F7182 03 41                           DW      $0341   ;       833     83.30   28.50   565             2.759   8593.405
007184 7F7184 03 3F                           DW      $033F   ;       831     83.14   28.41   566             2.764   8628.229
007186 7F7186 03 3E                           DW      $033E   ;       830     82.97   28.31   567             2.769   8663.209
007188 7F7188 03 3C                           DW      $033C   ;       828     82.83   28.24   568             2.773   8691.307
00718A 7F718A 03 3B                           DW      $033B   ;       827     82.66   28.15   569             2.778   8726.571
00718C 7F718C 03 39                           DW      $0339   ;       825     82.49   28.05   570             2.783   8761.994
00718E 7F718E 03 37                           DW      $0337   ;       823     82.32   27.96   571             2.788   8797.577
007190 7F7190 03 36                           DW      $0336   ;       822     82.15   27.86   572             2.793   8833.321
007192 7F7192 03 34                           DW      $0334   ;       820     81.98   27.77   573             2.798   8869.228
007194 7F7194 03 32                           DW      $0332   ;       818     81.82   27.68   574             2.803   8905.298
007196 7F7196 03 31                           DW      $0331   ;       817     81.65   27.58   575             2.808   8941.533
007198 7F7198 03 2F                           DW      $032F   ;       815     81.48   27.49   576             2.813   8977.933
00719A 7F719A 03 2D                           DW      $032D   ;       813     81.34   27.41   577             2.817   9007.174
00719C 7F719C 03 2C                           DW      $032C   ;       812     81.17   27.32   578             2.822   9043.875
00719E 7F719E 03 2A                           DW      $032A   ;       810     81.00   27.22   579             2.827   9080.746
0071A0 7F71A0 03 28                           DW      $0328   ;       808     80.83   27.13   580             2.832   9117.786
0071A2 7F71A2 03 27                           DW      $0327   ;       807     80.67   27.04   581             2.837   9154.998
0071A4 7F71A4 03 25                           DW      $0325   ;       805     80.50   26.94   582             2.842   9192.382
0071A6 7F71A6 03 23                           DW      $0323   ;       803     80.30   26.85   583             2.847   9229.940
0071A8 7F71A8 03 22                           DW      $0322   ;       802     80.16   26.75   584             2.852   9267.672
0071AA 7F71AA 03 20                           DW      $0320   ;       800     80.02   26.68   585             2.856   9297.985
0071AC 7F71AC 03 1F                           DW      $031F   ;       799     79.85   26.59   586             2.861   9336.036
0071AE 7F71AE 03 1D                           DW      $031D   ;       797     79.68   26.49   587             2.866   9374.264
0071B0 7F71B0 03 1B                           DW      $031B   ;       795     79.52   26.40   588             2.871   9412.673
0071B2 7F71B2 03 19                           DW      $0319   ;       793     79.35   26.30   589             2.876   9451.262
0071B4 7F71B4 03 18                           DW      $0318   ;       792     79.18   26.21   590             2.881   9490.033
0071B6 7F71B6 03 16                           DW      $0316   ;       790     79.00   26.12   591             2.886   9528.988
0071B8 7F71B8 03 14                           DW      $0314   ;       788     78.84   26.02   592             2.891   9568.127
0071BA 7F71BA 03 13                           DW      $0313   ;       787     78.67   25.93   593             2.896   9607.452
0071BC 7F71BC 03 11                           DW      $0311   ;       785     78.53   25.85   594             2.900   9639.048
0071BE 7F71BE 03 10                           DW      $0310   ;       784     78.36   25.76   595             2.905   9678.711
0071C0 7F71C0 03 0E                           DW      $030E   ;       782     78.19   25.66   596             2.910   9718.565
0071C2 7F71C2 03 0C                           DW      $030C   ;       780     78.03   25.57   597             2.915   9758.609
0071C4 7F71C4 03 0B                           DW      $030B   ;       779     77.86   25.48   598             2.920   9798.846
0071C6 7F71C6 03 09                           DW      $0309   ;       777     77.69   25.38   599             2.925   9839.277
0071C8 7F71C8 03 07                           DW      $0307   ;       775     77.52   25.29   600             2.930   9879.903
0071CA 7F71CA 03 06                           DW      $0306   ;       774     77.35   25.19   601             2.935   9920.726
0071CC 7F71CC 03 04                           DW      $0304   ;       772     77.21   25.12   602             2.939   9953.527
0071CE 7F71CE 03 02                           DW      $0302   ;       770     77.04   25.02   603             2.944   9994.708
0071D0 7F71D0 03 01                           DW      $0301   ;       769     76.87   24.93   604             2.949   10036.090
0071D2 7F71D2 02 FF                           DW      $02FF   ;       767     76.70   24.84   605             2.954   10077.674
0071D4 7F71D4 02 FD                           DW      $02FD   ;       765     76.53   24.74   606             2.959   10119.461
0071D6 7F71D6 02 FC                           DW      $02FC   ;       764     76.36   24.65   607             2.964   10161.454
0071D8 7F71D8 02 FA                           DW      $02FA   ;       762     76.20   24.55   608             2.969   10203.635
0071DA 7F71DA 02 F8                           DW      $02F8   ;       760     76.03   24.46   609             2.974   10246.061
0071DC 7F71DC 02 F7                           DW      $02F7   ;       759     75.86   24.36   610             2.979   10288.679
0071DE 7F71DE 02 F5                           DW      $02F5   ;       757     75.72   24.29   611             2.983   10322.925
0071E0 7F71E0 02 F4                           DW      $02F4   ;       756     75.55   24.19   612             2.988   10365.924
0071E2 7F71E2 02 F2                           DW      $02F2   ;       754     75.38   24.10   613             2.993   10409.138
0071E4 7F71E4 02 F0                           DW      $02F0   ;       752     75.21   24.00   614             2.998   10452.567
0071E6 7F71E6 02 EE                           DW      $02EE   ;       750     75.04   23.91   615             3.003   10496.214
0071E8 7F71E8 02 ED                           DW      $02ED   ;       749     74.87   23.82   616             3.008   10540.080
0071EA 7F71EA 02 EB                           DW      $02EB   ;       747     74.70   23.72   617             3.013   10584.167
0071EC 7F71EC 02 E9                           DW      $02E9   ;       745     74.53   23.63   618             3.018   10628.476
0071EE 7F71EE 02 E8                           DW      $02E8   ;       744     74.39   23.55   619             3.022   10664.085
0071F0 7F71F0 02 E6                           DW      $02E6   ;       742     74.22   23.46   620             3.027   10708.799
0071F2 7F71F2 02 E4                           DW      $02E4   ;       740     74.05   23.36   621             3.032   10753.740
0071F4 7F71F4 02 E3                           DW      $02E3   ;       739     73.88   23.27   622             3.037   10798.910
0071F6 7F71F6 02 E1                           DW      $02E1   ;       737     73.71   23.17   623             3.042   10844.311
0071F8 7F71F8 02 DF                           DW      $02DF   ;       735     73.54   23.08   624             3.047   10889.944
0071FA 7F71FA 02 DE                           DW      $02DE   ;       734     73.37   22.98   625             3.052   10935.811
0071FC 7F71FC 02 DC                           DW      $02DC   ;       732     73.20   22.89   626             3.057   10981.915
0071FE 7F71FE 02 DA                           DW      $02DA   ;       730     73.03   22.80   627             3.062   11028.256
007200 7F7200 02 D9                           DW      $02D9   ;       729     72.90   22.72   628             3.066   11065.502
007202 7F7202 02 D7                           DW      $02D7   ;       727     72.72   22.62   629             3.071   11112.276
007204 7F7204 02 D6                           DW      $02D6   ;       726     72.55   22.53   630             3.076   11159.293
007206 7F7206 02 D4                           DW      $02D4   ;       724     72.38   22.43   631             3.081   11206.555
007208 7F7208 02 D2                           DW      $02D2   ;       722     72.21   22.34   632             3.086   11254.065
00720A 7F720A 02 D0                           DW      $02D0   ;       720     72.04   22.24   633             3.091   11301.823
00720C 7F720C 02 CF                           DW      $02CF   ;       719     71.87   22.15   634             3.096   11349.832
00720E 7F720E 02 CD                           DW      $02CD   ;       717     71.70   22.05   635             3.101   11398.094
007210 7F7210 02 CC                           DW      $02CC   ;       716     71.56   21.98   636             3.105   11436.887
007212 7F7212 02 CA                           DW      $02CA   ;       714     71.39   21.88   637             3.110   11485.608
007214 7F7214 02 C8                           DW      $02C8   ;       712     71.22   21.79   638             3.115   11534.589
007216 7F7216 02 C7                           DW      $02C7   ;       711     71.05   21.69   639             3.120   11583.830
007218 7F7218 02 C5                           DW      $02C5   ;       709     70.88   21.60   640             3.125   11633.333
00721A 7F721A 02 C3                           DW      $02C3   ;       707     70.70   21.50   641             3.130   11683.102
00721C 7F721C 02 C1                           DW      $02C1   ;       705     70.53   21.41   642             3.135   11733.137
00721E 7F721E 02 C0                           DW      $02C0   ;       704     70.36   21.31   643             3.140   11783.441
007220 7F7220 02 BE                           DW      $02BE   ;       702     70.19   21.22   644             3.145   11834.016
007222 7F7222 02 BD                           DW      $02BD   ;       701     70.05   21.14   645             3.149   11874.673
007224 7F7224 02 BB                           DW      $02BB   ;       699     69.88   21.04   646             3.154   11925.742
007226 7F7226 02 B9                           DW      $02B9   ;       697     69.71   20.95   647             3.159   11977.089
007228 7F7228 02 B7                           DW      $02B7   ;       695     69.53   20.85   648             3.164   12028.715
00722A 7F722A 02 B6                           DW      $02B6   ;       694     69.36   20.76   649             3.169   12080.623
00722C 7F722C 02 B4                           DW      $02B4   ;       692     69.19   20.66   650             3.174   12132.815
00722E 7F722E 02 B2                           DW      $02B2   ;       690     69.02   20.57   651             3.179   12185.294
007230 7F7230 02 B0                           DW      $02B0   ;       688     68.84   20.47   652             3.184   12238.062
007232 7F7232 02 AF                           DW      $02AF   ;       687     68.71   20.39   653             3.188   12280.486
007234 7F7234 02 AD                           DW      $02AD   ;       685     68.53   20.30   654             3.193   12333.780
007236 7F7236 02 AC                           DW      $02AC   ;       684     68.36   20.20   655             3.198   12387.370
007238 7F7238 02 AA                           DW      $02AA   ;       682     68.19   20.10   656             3.203   12441.258
00723A 7F723A 02 A8                           DW      $02A8   ;       680     68.01   20.00   657             3.208   12495.446
00723C 7F723C 02 A6                           DW      $02A6   ;       678     67.84   19.91   658             3.213   12549.938
00723E 7F723E 02 A5                           DW      $02A5   ;       677     67.67   19.81   659             3.218   12604.736
007240 7F7240 02 A3                           DW      $02A3   ;       675     67.49   19.72   660             3.223   12659.842
007242 7F7242 02 A1                           DW      $02A1   ;       673     67.32   19.62   661             3.228   12715.260
007244 7F7244 02 A0                           DW      $02A0   ;       672     67.18   19.54   662             3.232   12759.819
007246 7F7246 02 9E                           DW      $029E   ;       670     67.01   19.45   663             3.237   12815.803
007248 7F7248 02 9C                           DW      $029C   ;       668     66.83   19.35   664             3.242   12872.105
00724A 7F724A 02 9B                           DW      $029B   ;       667     66.66   19.26   665             3.247   12928.728
00724C 7F724C 02 99                           DW      $0299   ;       665     66.49   19.16   666             3.252   12985.675
00724E 7F724E 02 97                           DW      $0297   ;       663     66.31   19.06   667             3.257   13042.949
007250 7F7250 02 95                           DW      $0295   ;       661     66.14   18.96   668             3.262   13100.552
007252 7F7252 02 94                           DW      $0294   ;       660     65.96   18.87   669             3.267   13158.488
007254 7F7254 02 92                           DW      $0292   ;       658     65.82   18.79   670             3.271   13205.078
007256 7F7256 02 91                           DW      $0291   ;       657     65.65   18.69   671             3.276   13263.619
007258 7F7258 02 8F                           DW      $028F   ;       655     65.47   18.60   672             3.281   13322.501
00725A 7F725A 02 8D                           DW      $028D   ;       653     65.30   18.50   673             3.286   13381.727
00725C 7F725C 02 8B                           DW      $028B   ;       651     65.12   18.40   674             3.291   13441.299
00725E 7F725E 02 8A                           DW      $028A   ;       650     64.95   18.30   675             3.296   13501.221
007260 7F7260 02 88                           DW      $0288   ;       648     64.77   18.21   676             3.301   13561.495
007262 7F7262 02 86                           DW      $0286   ;       646     64.59   18.11   677             3.306   13622.125
007264 7F7264 02 84                           DW      $0284   ;       644     64.42   18.01   678             3.311   13683.114
007266 7F7266 02 83                           DW      $0283   ;       643     64.28   17.93   679             3.315   13732.166
007268 7F7268 02 81                           DW      $0281   ;       641     64.10   17.83   680             3.320   13793.81
00726A 7F726A 02 7F                           DW      $027F   ;       639     63.93   17.74   681             3.325   13855.821
00726C 7F726C 02 7E                           DW      $027E   ;       638     63.75   17.64   682             3.330   13981.204
00726E 7F726E 02 7C                           DW      $027C   ;       636     63.57   17.54   683             3.335   13980.961
007270 7F7270 02 7A                           DW      $027A   ;       634     63.40   17.44   684             3.340   14044.096
007272 7F7272 02 78                           DW      $0278   ;       632     63.22   17.34   685             3.345   14107.613
007274 7F7274 02 76                           DW      $0276   ;       630     63.04   17.24   686             3.350   14171.515
007276 7F7276 02 75                           DW      $0275   ;       629     62.90   17.17   687             3.354   14222.916
007278 7F7278 02 73                           DW      $0273   ;       627     62.72   17.07   688             3.359   14287.520
00727A 7F727A 02 71                           DW      $0271   ;       625     62.54   16.97   689             3.364   14352.518
00727C 7F727C 02 70                           DW      $0270   ;       624     62.37   16.87   690             3.369   14417.915
00727E 7F727E 02 6E                           DW      $026E   ;       622     62.19   16.77   691             3.374   14483.715
007280 7F7280 02 6C                           DW      $026C   ;       620     62.01   16.67   692             3.379   14549.920
007282 7F7282 02 6A                           DW      $026A   ;       618     61.83   16.57   693             3.384   14616.535
007284 7F7284 02 69                           DW      $0269   ;       617     61.65   16.47   694             3.389   14683.563
007286 7F7286 02 67                           DW      $0267   ;       615     61.47   16.37   695             3.394   14751.009
007288 7F7288 02 65                           DW      $0265   ;       613     61.33   16.30   696             3.398   14805.268
00728A 7F728A 02 64                           DW      $0264   ;       612     61.15   16.20   697             3.403   14873.475
00728C 7F728C 02 62                           DW      $0262   ;       610     60.97   16.10   698             3.408   14942.111
00728E 7F728E 02 60                           DW      $0260   ;       608     60.79   16.00   699             3.413   15011.178
007290 7F7290 02 5E                           DW      $025E   ;       606     60.61   15.90   700             3.418   15080.683
007292 7F7292 02 5C                           DW      $025C   ;       604     60.43   15.80   701             3.423   15150.628
007294 7F7294 02 5B                           DW      $025B   ;       603     60.25   15.70   702             3.428   15221.018
007296 7F7296 02 59                           DW      $0259   ;       601     60.07   15.60   703             3.433   15291.857
007298 7F7298 02 57                           DW      $0257   ;       599     59.89   15.50   704             3.438   15363.150
00729A 7F729A 02 56                           DW      $0256   ;       598     59.75   15.41   705             3.442   15420.513
00729C 7F729C 02 54                           DW      $0254   ;       596     59.57   15.32   706             3.447   15492.634
00729E 7F729E 02 52                           DW      $0252   ;       594     59.39   15.22   707             3.452   15565.220
0072A0 7F72A0 02 50                           DW      $0250   ;       592     59.21   15.11   708             3.457   15638.276
0072A2 7F72A2 02 4E                           DW      $024E   ;       590     59.02   15.01   709             3.462   15711.808
0072A4 7F72A4 02 4C                           DW      $024C   ;       588     58.84   14.91   710             3.467   15785.819
0072A6 7F72A6 02 4B                           DW      $024B   ;       587     58.66   14.81   711             3.472   15860.314
0072A8 7F72A8 02 49                           DW      $0249   ;       585     58.48   14.71   712             3.477   15935.299
0072AA 7F72AA 02 47                           DW      $0247   ;       583     58.33   14.63   713             3.481   15995.642
0072AC 7F72AC 02 46                           DW      $0246   ;       582     58.15   14.53   714             3.486   16071.519
0072AE 7F72AE 02 44                           DW      $0244   ;       580     57.97   14.43   715             3.491   16147.899
0072B0 7F72B0 02 42                           DW      $0242   ;       578     57.78   14.32   716             3.496   16224.787
0072B2 7F72B2 02 40                           DW      $0240   ;       576     57.60   14.22   717             3.501   16302.188
0072B4 7F72B4 02 3E                           DW      $023E   ;       574     57.42   14.12   718             3.506   16380.107
0072B6 7F72B6 02 3C                           DW      $023C   ;       572     57.23   14.02   719             3.511   16458.549
0072B8 7F72B8 02 3B                           DW      $023B   ;       571     57.05   13.92   720             3.516   16537.520
0072BA 7F72BA 02 39                           DW      $0239   ;       569     56.87   13.81   721             3.521   16617.025
0072BC 7F72BC 02 37                           DW      $0237   ;       567     56.72   13.73   722             3.525   16681.017
0072BE 7F72BE 02 35                           DW      $0235   ;       565     56.53   13.63   723             3.530   16761.497
0072C0 7F72C0 02 34                           DW      $0234   ;       564     56.35   13.53   724             3.535   16842.526
0072C2 7F72C2 02 32                           DW      $0232   ;       562     56.16   13.42   725             3.540   16924.110
0072C4 7F72C4 02 30                           DW      $0230   ;       560     55.98   13.32   726             3.545   17006.254
0072C6 7F72C6 02 2E                           DW      $022E   ;       558     55.79   13.22   727             3.550   17088.966
0072C8 7F72C8 02 2C                           DW      $022C   ;       556     55.61   13.11   728             3.555   17172.249
0072CA 7F72CA 02 2A                           DW      $022A   ;       554     55.42   13.01   729             3.560   17256.111
0072CC 7F72CC 02 29                           DW      $0229   ;       553     55.27   12.93   730             3.564   17323.621
0072CE 7F72CE 02 27                           DW      $0227   ;       551     55.08   12.82   731             3.569   17408.539
0072D0 7F72D0 02 25                           DW      $0225   ;       549     54.90   12.72   732             3.574   17494.053
0072D2 7F72D2 02 23                           DW      $0223   ;       547     54.71   12.62   733             3.579   17580.169
0072D4 7F72D4 02 21                           DW      $0221   ;       545     54.52   12.51   734             3.584   17666.893
0072D6 7F72D6 02 1F                           DW      $021F   ;       543     54.34   12.41   735             3.589   17754.231
0072D8 7F72D8 02 1E                           DW      $021E   ;       542     54.15   12.30   736             3.594   17842.191
0072DA 7F72DA 02 1C                           DW      $021C   ;       540     53.96   12.20   737             3.599   17930.778
0072DC 7F72DC 02 1A                           DW      $021A   ;       538     53.77   12.09   738             3.604   18020.000
0072DE 7F72DE 02 18                           DW      $0218   ;       536     53.62   12.01   739             3.608   18091.839
0072E0 7F72E0 02 16                           DW      $0216   ;       534     53.43   11.91   740             3.613   18182.221
0072E2 7F72E2 02 14                           DW      $0214   ;       532     53.24   11.80   741             3.618   18273.256
0072E4 7F72E4 02 13                           DW      $0213   ;       531     53.05   11.69   742             3.623   18364.953
0072E6 7F72E6 02 11                           DW      $0211   ;       529     52.86   11.59   743             3.628   18457.318
0072E8 7F72E8 02 0F                           DW      $020F   ;       527     52.67   11.48   744             3.633   18550.358
0072EA 7F72EA 02 0D                           DW      $020D   ;       525     52.48   11.38   745             3.638   18644.082
0072EC 7F72EC 02 0B                           DW      $020B   ;       523     52.29   11.27   746             3.643   18738.497
0072EE 7F72EE 02 09                           DW      $0209   ;       521     52.14   11.19   747             3.647   18814.531
0072F0 7F72F0 02 07                           DW      $0207   ;       519     51.94   11.08   748             3.652   18910.208
0072F2 7F72F2 02 06                           DW      $0206   ;       518     51.75   10.97   749             3.657   19006.597
0072F4 7F72F4 02 04                           DW      $0204   ;       516     51.56   10.87   750             3.662   19103.707
0072F6 7F72F6 02 02                           DW      $0202   ;       514     51.37   10.76   751             3.667   19201.545
0072F8 7F72F8 02 00                           DW      $0200   ;       512     51.17   10.65   752             3.672   19300.120
0072FA 7F72FA 01 FE                           DW      $01FE   ;       510     50.98   10.54   753             3.677   19399.441
0072FC 7F72FC 01 FC                           DW      $01FC   ;       508     50.79   10.44   754             3.682   19449.514
0072FE 7F72FE 01 FA                           DW      $01FA   ;       506     50.59   10.33   755             3.687   19600.350
007300 7F7300 01 F8                           DW      $01F8   ;       504     50.44   10.24   756             3.691   19681.574
007302 7F7302 01 F6                           DW      $01F6   ;       502     50.24   10.14   757             3.696   19783.804
007304 7F7304 01 F5                           DW      $01F5   ;       501     50.05   10.03   758             3.701   19886.821
007306 7F7306 01 F3                           DW      $01F3   ;       499     49.85   9.92    759             3.706   19990.634
007308 7F7308 01 F1                           DW      $01F1   ;       497     49.66   9.81    760             3.711   20095.252
00730A 7F730A 01 EF                           DW      $01EF   ;       495     49.46   9.70    761             3.716   20200.685
00730C 7F730C 01 ED                           DW      $01ED   ;       493     49.27   9.59    762             3.721   20306.943
00730E 7F730E 01 EB                           DW      $01EB   ;       491     49.07   9.48    763             3.726   20414.035
007310 7F7310 01 E9                           DW      $01E9   ;       489     48.91   9.39    764             3.730   20500.315
007312 7F7312 01 E7                           DW      $01E7   ;       487     48.71   9.29    765             3.735   20608.933
007314 7F7314 01 E5                           DW      $01E5   ;       485     48.52   9.18    766             3.740   20718.413
007316 7F7316 01 E3                           DW      $01E3   ;       483     48.32   9.07    767             3.745   20828.765
007318 7F7318 01 E1                           DW      $01E1   ;       481     48.12   8.95    768             3.750   20940.000
00731A 7F731A 01 DF                           DW      $01DF   ;       479     47.92   8.84    769             3.755   21052.129
00731C 7F731C 01 DD                           DW      $01DD   ;       477     47.72   8.73    770             3.760   21165.161
00731E 7F731E 01 DB                           DW      $01DB   ;       475     47.52   8.62    771             3.765   21279.109
007320 7F7320 01 D9                           DW      $01D9   ;       473     47.32   8.51    772             3.770   21393.984
007322 7F7322 01 D7                           DW      $01D7   ;       471     47.16   8.42    773             3.774   21486.558
007324 7F7324 01 D6                           DW      $01D6   ;       470     46.96   8.31    774             3.779   21603.129
007326 7F7326 01 D4                           DW      $01D4   ;       468     46.76   8.20    775             3.784   21720.658
007328 7F7328 01 D2                           DW      $01D2   ;       466     46.56   8.08    776             3.789   21839.158
00732A 7F732A 01 D0                           DW      $01D0   ;       464     46.35   7.97    777             3.794   21958.640
00732C 7F732C 01 CE                           DW      $01CE   ;       462     46.15   7.86    778             3.799   22079.117
00732E 7F732E 01 CC                           DW      $01CC   ;       460     45.95   7.75    779             3.804   22200.602
007330 7F7330 01 C9                           DW      $01C9   ;       457     45.74   7.64    780             3.809   22323.107
007332 7F7332 01 C8                           DW      $01C8   ;       456     45.58   7.54    781             3.813   22421.853
007334 7F7334 01 C6                           DW      $01C6   ;       454     45.38   7.43    782             3.818   22546.227
007336 7F7336 01 C4                           DW      $01C4   ;       452     45.17   7.32    783             3.823   22671.657
007338 7F7338 01 C2                           DW      $01C2   ;       450     44.97   7.20    784             3.828   22798.157
00733A 7F733A 01 C0                           DW      $01C0   ;       448     44.76   7.09    785             3.833   22925.741
00733C 7F733C 01 BE                           DW      $01BE   ;       446     44.55   6.97    786             3.838   23054.423
00733E 7F733E 01 BC                           DW      $01BC   ;       444     44.35   6.86    787             3.843   23184.218
007340 7F7340 01 BA                           DW      $01BA   ;       442     44.14   6.74    788             3.848   23315.139
007342 7F7342 01 B7                           DW      $01B7   ;       439     43.93   6.63    789             3.853   23447.201
007344 7F7344 01 B6                           DW      $01B6   ;       438     43.77   6.54    790             3.857   13553.683
007346 7F7346 01 B4                           DW      $01B4   ;       436     43.56   6.42    791             3.862   23687.838
007348 7F7348 01 B2                           DW      $01B2   ;       434     43.35   6.30    792             3.867   23823.177
00734A 7F734A 01 AF                           DW      $01AF   ;       431     43.14   6.19    793             3.872   23959.716
00734C 7F734C 01 AD                           DW      $01AD   ;       429     42.93   6.07    794             3.877   24097.471
00734E 7F734E 01 AB                           DW      $01AB   ;       427     42.72   5.95    795             3.882   24236.458
007350 7F7350 01 A9                           DW      $01A9   ;       425     42.51   5.84    796             3.887   24376.694
007352 7F7352 01 A7                           DW      $01A7   ;       423     42.30   5.72    797             3.892   24518.195
007354 7F7354 01 A5                           DW      $01A5   ;       421     42.13   5.63    798             3.896   24632.319
007356 7F7356 01 A3                           DW      $01A3   ;       419     41.91   5.51    799             3.901   24776.142
007358 7F7358 01 A1                           DW      $01A1   ;       417     41.70   5.39    800             3.906   24921.280
00735A 7F735A 01 9F                           DW      $019F   ;       415     41.49   5.27    801             3.911   25067.750
00735C 7F735C 01 9D                           DW      $019D   ;       413     41.27   5.15    802             3.916   25215.572
00735E 7F735E 01 9B                           DW      $019B   ;       411     41.06   5.03    803             3.921   25364.764
007360 7F7360 01 98                           DW      $0198   ;       408     40.84   4.91    804             3.926   25515.345
007362 7F7362 01 96                           DW      $0196   ;       406     40.63   4.79    805             3.931   25667.334
007364 7F7364 01 94                           DW      $0194   ;       404     40.41   4.67    806             3.936   25820.752
007366 7F7366 01 92                           DW      $0192   ;       402     40.24   4.58    807             3.940   25944.528
007368 7F7368 01 90                           DW      $0190   ;       400     40.02   4.46    808             3.945   26100.569
00736A 7F736A 01 8E                           DW      $018E   ;       398     39.80   4.33    809             3.950   26258.095
00736C 7F736C 01 8C                           DW      $018C   ;       396     39.58   4.21    810             3.955   26417.129
00736E 7F736E 01 8A                           DW      $018A   ;       394     39.36   4.09    811             3.960   26577.692
007370 7F7370 01 87                           DW      $0187   ;       391     39.14   3.97    812             3.965   26739.807
007372 7F7372 01 85                           DW      $0185   ;       389     38.92   3.85    813             3.970   26903.495
007374 7F7374 01 83                           DW      $0183   ;       387     38.70   3.72    814             3.975   27068.780
007376 7F7376 01 81                           DW      $0181   ;       385     38.52   3.62    815             3.979   27202.174
007378 7F7378 01 7F                           DW      $017F   ;       383     38.30   3.50    816             3.984   27370.394
00737A 7F737A 01 7D                           DW      $017D   ;       381     38.08   3.37    817             3.989   27540.277
00737C 7F737C 01 7B                           DW      $017B   ;       379     37.85   3.25    818             3.994   27711.849
00737E 7F737E 01 78                           DW      $0178   ;       376     37.63   3.00    820             4.004   28060.161
007380 7F7380 01 74                           DW      $0174   ;       372     37.18   2.88    821             4.009   28236.953
007382 7F7382 01 72                           DW      $0172   ;       370     36.95   2.75    822             4.014   28415.538
007384 7F7384 01 6F                           DW      $016F   ;       367     36.72   2.62    823             4.019   28595.943
007386 7F7386 01 6D                           DW      $016D   ;       365     36.54   2.52    824             4.023   28741.597
007388 7F7388 01 6B                           DW      $016B   ;       363     36.32   2.40    825             4.028   28925.350
00738A 7F738A 01 69                           DW      $0169   ;       361     36.09   2.27    826             4.033   29111.003
00738C 7F738C 01 67                           DW      $0167   ;       359     35.86   2.14    827             4.038   29298.586
00738E 7F738E 01 64                           DW      $0164   ;       356     35.63   2.01    828             4.043   29488.130
007390 7F7390 01 62                           DW      $0162   ;       354     35.40   1.89    829             4.048   29679.644
007392 7F7392 01 60                           DW      $0160   ;       352     35.16   1.76    830             4.053   29873.221
007394 7F7394 01 5D                           DW      $015D   ;       349     34.93   1.63    831             4.058   30068.832
007396 7F7396 01 5B                           DW      $015B   ;       347     34.70   1.50    832             4.063   30266.531
007398 7F7398 01 59                           DW      $0159   ;       345     34.51   1.40    833             4.067   30426.217
00739A 7F739A 01 57                           DW      $0157   ;       343     34.28   1.26    834             4.072   30627.759
00739C 7F739C 01 54                           DW      $0154   ;       340     34.04   1.13    835             4.077   30831.484
00739E 7F739E 01 52                           DW      $0152   ;       338     33.80   1.00    836             4.082   31037.429
0073A0 7F73A0 01 50                           DW      $0150   ;       336     33.57   0.87    837             4.087   31245.630
0073A2 7F73A2 01 4D                           DW      $014D   ;       333     33.33   0.74    838             4.092   31456.123
0073A4 7F73A4 01 4B                           DW      $014B   ;       331     33.09   0.61    839             4.097   31668.948
0073A6 7F73A6 01 49                           DW      $0149   ;       329     32.85   0.47    840             4.102   31884.143
0073A8 7F73A8 01 47                           DW      $0147   ;       327     32.66   0.37    841             4.106   32058.031
0073AA 7F73AA 01 44                           DW      $0144   ;       324     32.42   0.23    842             4.111   32277.593
0073AC 7F73AC 01 42                           DW      $0142   ;       322     32.17   0.10    843             4.116   32499.638
0073AE 7F73AE 01 3F                           DW      $013F   ;       319     31.93   -0.04   844             4.121   32724.209
0073B0 7F73B0 01 3D                           DW      $013D   ;       317     31.69   -0.17   845             4.126   32951.350
0073B2 7F73B2 01 3A                           DW      $013A   ;       314     31.44   -0.31   846             4.131   33181.105
0073B4 7F73B4 01 38                           DW      $0138   ;       312     31.20   -0.45   847             4.136   33413.519
0073B6 7F73B6 01 36                           DW      $0136   ;       310     30.95   -0.58   848             4.141   33648.638
0073B8 7F73B8 01 33                           DW      $0133   ;       307     30.70   -0.72   849             4.146   33886.511
0073BA 7F73BA 01 31                           DW      $0131   ;       305     30.50   -0.83   850             4.150   34078.824
0073BC 7F73BC 01 2F                           DW      $012F   ;       303     30.25   -0.97   851             4.155   34321.775
0073BE 7F73BE 01 2C                           DW      $012C   ;       300     30.00   -1.11   852             4.160   34567.619
0073C0 7F73C0 01 2A                           DW      $012A   ;       298     29.75   -1.25   853             4.165   34816.407
0073C2 7F73C2 01 27                           DW      $0127   ;       295     29.50   -1.39   854             4.170   35068.193
0073C4 7F73C4 01 25                           DW      $0125   ;       293     29.25   -1.53   855             4.175   35323.030
0073C6 7F73C6 01 22                           DW      $0122   ;       290     28.99   -1.67   856             4.180   35580.976
0073C8 7F73C8 01 1F                           DW      $011F   ;       287     28.74   -1.81   857             4.185   35842.086
0073CA 7F73CA 01 1D                           DW      $011D   ;       285     28.53   -1.93   858             4.189   36053.292
0073CC 7F73CC 01 1B                           DW      $011B   ;       283     28.28   -2.07   859             4.194   36320.248
0073CE 7F73CE 01 18                           DW      $0118   ;       280     28.02   -2.21   860             4.199   36590.537
0073D0 7F73D0 01 16                           DW      $0116   ;       278     27.76   -2.36   861             4.204   36864.221
0073D2 7F73D2 01 13                           DW      $0113   ;       275     27.50   -2.50   862             4.209   37141.365
0073D4 7F73D4 01 10                           DW      $0110   ;       272     27.24   -2.65   863             4.214   37422.036
0073D6 7F73D6 01 0E                           DW      $010E   ;       270     26.98   -2.79   864             4.219   37706.300
0073D8 7F73D8 01 0B                           DW      $010B   ;       267     26.71   -2.94   865             4.224   37994.227
0073DA 7F73DA 01 09                           DW      $0109   ;       265     26.45   -3.08   866             4.229   38285.888
0073DC 7F73DC 01 06                           DW      $0106   ;       262     26.23   -3.20   867             4.233   38521.956
0073DE 7F73DE 01 04                           DW      $0104   ;       260     25.97   -3.35   868             4.238   38820.525
0073E0 7F73E0 01 01                           DW      $0101   ;       257     25.70   -3.50   869             4.243   39123.038
0073E2 7F73E2 00 FE                           DW      $00FE   ;       254     25.43   -3.65   870             4.248   39429.574
0073E4 7F73E4 00 FC                           DW      $00FC   ;       252     25.16   -3.80   871             4.253   39740.214
0073E6 7F73E6 00 F9                           DW      $00F9   ;       249     24.89   -3.95   872             4.258   40055.040
0073E8 7F73E8 00 F6                           DW      $00F6   ;       246     24.62   -4.10   873             4.263   40374.138
0073EA 7F73EA 00 F3                           DW      $00F3   ;       243     24.34   -4.25   874             4.268   40697.596
0073EC 7F73EC 00 F1                           DW      $00F1   ;       241     24.12   -4.38   875             4.272   40959.560
0073EE 7F73EE 00 EE                           DW      $00EE   ;       238     23.84   -4.53   876             4.277   41291.093
0073F0 7F73F0 00 EC                           DW      $00EC   ;       236     23.57   -4.69   877             4.282   41627.242
0073F2 7F73F2 00 E9                           DW      $00E9   ;       233     23.29   -4.84   878             4.287   41968.107
0073F4 7F73F4 00 E6                           DW      $00E6   ;       230     23.01   -5.00   879             4.292   42313.785
0073F6 7F73F6 00 E3                           DW      $00E3   ;       227     22.72   -5.15   880             4.297   42664.381
0073F8 7F73F8 00 E0                           DW      $00E0   ;       224     22.44   -5.31   881             4.302   43020.000
0073FA 7F73FA 00 DE                           DW      $00DE   ;       222     22.16   -5.47   882             4.307   43380.750
0073FC 7F73FC 00 DB                           DW      $00DB   ;       219     21.87   -5.63   883             4.312   43746.744
0073FE 7F73FE 00 D8                           DW      $00D8   ;       216     21.64   -5.76   884             4.316   44043.392
007400 7F7400 00 D6                           DW      $00D6   ;       214     21.35   -5.92   885             4.321   44419.116
007402 7F7402 00 D3                           DW      $00D3   ;       211     21.06   -6.08   886             4.326   44800.415
007404 7F7404 00 D0                           DW      $00D0   ;       208     20.77   -6.24   887             4.331   45187.414
007406 7F7406 00 CD                           DW      $00CD   ;       205     20.48   -6.40   888             4.336   45580.241
007408 7F7408 00 CA                           DW      $00CA   ;       202     20.18   -6.57   889             4.341   45979.029
00740A 7F740A 00 C7                           DW      $00C7   ;       199     19.88   -6.73   890             4.346   46383.914
00740C 7F740C 00 C4                           DW      $00C4   ;       196     19.59   -6.90   891             4.351   46795.039
00740E 7F740E 00 C2                           DW      $00C2   ;       194     19.35   -7.03   892             4.355   47128.527
007410 7F7410 00 BE                           DW      $00BE   ;       190     19.04   -7.20   893             4.360   47551.250
007412 7F7412 00 BB                           DW      $00BB   ;       187     18.74   -7.37   894             4.365   47980.630
007414 7F7414 00 B8                           DW      $00B8   ;       184     18.44   -7.53   895             4.370   48416.825
007416 7F7416 00 B5                           DW      $00B5   ;       181     18.13   -7.71   896             4.375   48860.000
007418 7F7418 00 B2                           DW      $00B2   ;       178     17.82   -7.87   897             4.380   49310.323
00741A 7F741A 00 AF                           DW      $00AF   ;       175     17.51   -8.05   898             4.385   49767.967
00741C 7F741C 00 AC                           DW      $00AC   ;       172     17.20   -8.22   899             4.390   50233.115
00741E 7F741E 00 A9                           DW      $00A9   ;       169     16.89   -8.40   900             4.395   50705.950
007420 7F7420 00 A6                           DW      $00A6   ;       166     16.64   -8.54   901             4.399   51089.884
007422 7F7422 00 A3                           DW      $00A3   ;       163     16.32   -8.71   902             4.404   51577.047
007424 7F7424 00 A0                           DW      $00A0   ;       160     16.00   -8.89   903             4.409   52072.453
007426 7F7426 00 9D                           DW      $009D   ;       157     15.68   -9.07   904             4.414   52576.314
007428 7F7428 00 9A                           DW      $009A   ;       154     15.35   -9.25   905             4.419   53088.847
00742A 7F742A 00 96                           DW      $0096   ;       150     15.03   -9.43   906             4.424   53610.278
00742C 7F742C 00 93                           DW      $0093   ;       147     14.70   -9.61   907             4.429   54140.841
00742E 7F742E 00 90                           DW      $0090   ;       144     14.37   -9.79   908             4.434   54680.777
007430 7F7430 00 8D                           DW      $008D   ;       141     14.11   -9.94   909             4.438   55119.644
007432 7F7432 00 8A                           DW      $008A   ;       138     13.76   -10.12  910             4.443   55677.092
007434 7F7434 00 86                           DW      $0086   ;       134     13.44   -10.31  911             4.448   56244.638
007436 7F7436 00 83                           DW      $0083   ;       131     13.10   -10.50  912             4.453   56822.559
007438 7F7438 00 80                           DW      $0080   ;       128     12.76   -10.69  913             4.458   57411.144
00743A 7F743A 00 7C                           DW      $007C   ;       124     12.42   -10.88  914             4.463   58010.689
00743C 7F743C 00 79                           DW      $0079   ;       121     12.08   -11.07  915             4.468   58621.504
00743E 7F743E 00 75                           DW      $0075   ;       117     11.73   -11.26  916             4.473   59243.909
007440 7F7440 00 72                           DW      $0072   ;       114     11.38   -11.46  917             4.478   59878.238
007442 7F7442 00 6F                           DW      $006F   ;       111     11.10   -11.61  918             4.482   60394.517
007444 7F7444 00 6B                           DW      $006B   ;       107     10.74   -11.81  919             4.487   61051.189
007446 7F7446 00 68                           DW      $0068   ;       104     10.39   -12.00  920             4.492   61720.787
007448 7F7448 00 64                           DW      $0064   ;       100     10.03   -12.21  921             4.497   62403.698
00744A 7F744A 00 61                           DW      $0061   ;       97              9.66    -12.41  922             4.502   63100.321
00744C 7F744C 00 5D                           DW      $005D   ;       93      9.30    -12.61  923             4.507   63811.075
00744E 7F744E 00 59                           DW      $0059   ;       89              8.93    -12.82  924             4.512   64536.393
007450 7F7450 00 56                           DW      $0056   ;       86      8.56    -13.02  925             4.517   65276.729
007452 7F7452 00 53                           DW      $0053   ;       83              8.26    -13.19  926             4.521   65880.125
007454 7F7454 00 4F                           DW      $004F   ;       79              7.86    -13.40  927             4.526   66648.692
007456 7F7456 00 4B                           DW      $004B   ;       75              7.51    -13.61  928             4.531   67433.646
007458 7F7458 00 47                           DW      $0047   ;       71      7.12    -13.82  929             4.536   68235.577
00745A 7F745A 00 43                           DW      $0043   ;       67              6.74    -14.03  930             4.541   69054.858
00745C 7F745C 00 40                           DW      $0040   ;       64              6.35    -14.25  931             4.546   69892.247
00745E 7F745E 00 3C                           DW      $003C   ;       60              5.96    -14.47  932             4.551   70748.285
007460 7F7460 00 38                           DW      $0038   ;       56              5.56    -14.69  933             4.556   71623.604
007462 7F7462 00 34                           DW      $0034   ;       52              5.16    -14.91  934             4.561   72518.861
007464 7F7464 00 30                           DW      $0030   ;       48          4.84        -15.09  935             4.565   73249.885
007466 7F7466 00 2C                           DW      $002C   ;       44              4.44    -15.31  936             4.570   74182.791
007468 7F7468 00 28                           DW      $0028   ;   40          4.03    -15.54  937             4.575   75137.647
00746A 7F746A 00 24                           DW      $0024   ;       36      3.61    -15.77  938             4.580   76115.238
00746C 7F746C 00 20                           DW      $0020   ;       32              3.20    -16.00  939             4.585   77116.386
00746E 7F746E 00 1C                           DW      $001C   ;       28              2.78    -16.23  940             4.590   78141.951
007470 7F7470 00 18                           DW      $0018   ;       24              2.35    -16.47  941             4.595   79192.840
007472 7F7472 00 13                           DW      $0013   ;       19          1.92        -16.71  942             4.600   80270.000
007474 7F7474 00 10                           DW      $0010   ;       16      1.58    -16.90  943             4.604   81151.313
007476 7F7476 00 0B                           DW      $000B   ;       11      1.14    -17.14  944             4.609   82278.312
007478 7F7478 00 07                           DW      $0007   ;       7       0.70    -17.39  945             4.614   83434.508
00747A 7F747A 00 03                           DW      $0003   ;       3       0.25    -17.64  946             4.619   84621.050
00747C 7F747C FF FE                           DW      $FFFE   ;       -2      -0.20   -17.89  947             4.624   85839.149
00747E 7F747E FF F9                           DW      $FFF9   ;       -7      -0.65   -18.14  948             4.629   87090.081
007480 7F7480 FF F5                           DW      $FFF5   ;       -11     -1.11   -18.39  949             4.634   88375.191
007482 7F7482 FF F0                           DW      $FFF0   ;       -16     -1.58   -18.65  950             4.639   89695.900
007484 7F7484 FF EC                           DW      $FFEC   ;       -20     -2.05   -18.91  951             4.644   91053.708
007486 7F7486 FF E8                           DW      $FFE8   ;       -24     -2.43   -19.13  952             4.648   92167.727
007488 7F7488 FF E3                           DW      $FFE3   ;       -29     -2.91   -19.39  953             4.653   93956.369
00748A 7F748A FF DE                           DW      $FFDE   ;       -34     -3.39   -19.66  954             4.658   95066.784
00748C 7F748C FF D9                           DW      $FFD9   ;       -39     -3.88   -19.93  955             4.663   96580.837
00748E 7F748E FF D4                           DW      $FFD4   ;       -44     -4.38   -20.21  956             4.668   98140.482
007490 7F7490 FF CF                           DW      $FFCF   ;       -49     -4.88   -20.49  957             4.673   99747.829
007492 7F7492 FF CA                           DW      $FFCA   ;       -54     -5.39   -20.77  958             4.678   101405.093
007494 7F7494 FF C5                           DW      $FFC5   ;       -59     -5.91   -21.06  959             4.683   103114.637
007496 7F7496 FF C0                           DW      $FFC0   ;       -64     -6.43   -21.35  960             4.688   104878.974
007498 7F7498 FF BB                           DW      $FFBB   ;       -69     -6.85   -21.58  961             4.692   106331.688
00749A 7F749A FF B6                           DW      $FFB6   ;       -74     -7.39   -21.88  962             4.697   108201.518
00749C 7F749C FF B1                           DW      $FFB1   ;       -79     -7.93   -22.18  963             4.702   110134.094
00749E 7F749E FF AB                           DW      $FFAB   ;       -85     -8.48   -22.49  964             4.707   112132.628
0074A0 7F74A0 FF A6                           DW      $FFA6   ;       -90     -9.04   -22.80  965             4.712   114200.556
0074A2 7F74A2 FF A0                           DW      $FFA0   ;       -96     -9.60   -23.11  966             4.717   116341.555
0074A4 7F74A4 FF 9A                           DW      $FF9A   ;       -102    -10.18  -23.43  967             4.722   118559.568
0074A6 7F74A6 FF 94                           DW      $FF94   ;       -108    -10.76  -23.75  968             4.727   120858.828
0074A8 7F74A8 FF 90                           DW      $FF90   ;       -112    -11.23  -24.02  969             4.731   122759.777
0074AA 7F74AA FF 8A                           DW      $FF8A   ;       -118    -11.83  -24.35  970             4.736   125216.970
0074AC 7F74AC FF 84                           DW      $FF84   ;       -124    -12.44  -24.69  971             4.741   127769.035
0074AE 7F74AE FF 7D                           DW      $FF7D   ;       -131    -13.05  -25.03  972             4.746   130421.575
0074B0 7F74B0 FF 77                           DW      $FF77   ;       -137    -13.68  -25.38  973             4.751   133180.643
0074B2 7F74B2 FF 71                           DW      $FF71   ;       -143    -14.32  -25.73  974             4.756   136052.787
0074B4 7F74B4 FF 6A                           DW      $FF6A   ;       -150    -14.97  -26.09  975             4.761   139045.105
0074B6 7F74B6 FF 64                           DW      $FF64   ;       -156    -15.63  -26.46  976             4.766   142165.299
0074B8 7F74B8 FF 5D                           DW      $FF5D   ;       -163    -16.30  -26.84  977             4.771   145421.747
0074BA 7F74BA FF 56                           DW      $FF56   ;       -170    -16.85  -27.14  978             4.775   148131.111
0074BC 7F74BC FF 50                           DW      $FF50   ;       -176    -17.55  -27.53  979             4.780   151656.364
0074BE 7F74BE FF 49                           DW      $FF49   ;       -183    -18.25  -27.92  980             4.785   155345.581
0074C0 7F74C0 FF 42                           DW      $FF42   ;       -190    -18.98  -28.32  981             4.790   159210.476
0074C2 7F74C2 FF 3B                           DW      $FF3B   ;       -197    -19.71  -28.73  982             4.795   163263.902
0074C4 7F74C4 FF 37                           DW      $FF37   ;       -201    -20.47  -29.15  983             4.800   167520.000
0074C6 7F74C6 FF 2C                           DW      $FF2C   ;       -212    -21.24  -29.58  984             4.805   171994.359
0074C8 7F74C8 FF 24                           DW      $FF24   ;       -220    -22.02  -30.01  985             4.810   176704.211
0074CA 7F74CA FF 1D                           DW      $FF1D   ;       -227    -22.66  -30.37  986             4.814   180654.409
0074CC 7F74CC FF 15                           DW      $FF15   ;       -235    -23.48  -30.82  987             4.819   185837.680
0074CE 7F74CE FF 0D                           DW      $FF0D   ;       -243    -24.32  -31.29  988             4.824   191315.455
0074D0 7F74D0 FF 04                           DW      $FF04   ;       -252    -25.18  -31.77  989             4.829   197113.567
0074D2 7F74D2 FE FB                           DW      $FEFB   ;       -261    -26.06  -32.25  990             4.834   203260.964
0074D4 7F74D4 FE F2                           DW      $FEF2   ;       -270    -26.96  -32.76  991             4.839   209790.186
0074D6 7F74D6 FE E8                           DW      $FEE8   ;       -280    -27.89  -33.27  992             4.844   216737.949
0074D8 7F74D8 FE E4                           DW      $FEE4   ;       -284    -28.84  -33.80  993             4.849   224145.828
0074DA 7F74DA FE D6                           DW      $FED6   ;       -298    -29.82  -34.34  994             4.854   232061.096
0074DC 7F74DC FE CE                           DW      $FECE   ;       -306    -30.63  -34.79  995             4.858   238794.648
0074DE 7F74DE FE C3                           DW      $FEC3   ;       -317    -31.66  -35.37  996             4.863   247764.526
0074E0 7F74E0 FE B9                           DW      $FEB9   ;       -327    -32.73  -35.96  997             4.868   257413.939
0074E2 7F74E2 FE AE                           DW      $FEAE   ;       -338    -33.83  -36.57  998             4.873   267823.150
0074E4 7F74E4 FE A2                           DW      $FEA2   ;       -350    -34.97  -37.21  999             4.878   279085.574
0074E6 7F74E6 FE 96                           DW      $FE96   ;       -362    -36.16  -37.86  1000    4.883   291310.598
0074E8 7F74E8 FE 8A                           DW      $FE8A   ;       -374    -37.38  -38.55  1001    4.888   304627.143
0074EA 7F74EA FE 7D                           DW      $FE7D   ;       -387    -38.66  -39.26  1002    4.893   319188.224
0074EC 7F74EC FE 73                           DW      $FE73   ;       -397    -39.72  -39.84  1003    4.897   331854.951
0074EE 7F74EE FE 65                           DW      $FE65   ;       -411    -41.09  -40.61  1004    4.902   349142.449
0074F0 7F74F0 FE 57                           DW      $FE57   ;       -425    -42.53  -41.41  1005    4.907   368288.817
0074F2 7F74F2 FE 48                           DW      $FE48   ;       -440    -44.04  -42.24  1006    4.912   389610.909
0074F4 7F74F4 FE 38                           DW      $FE38   ;       -456    -45.62  -43.12  1007    4.917   413501.928
0074F6 7F74F6 FE 27                           DW      $FE27   ;       -473    -47.29  -44.05  1008    4.922   440455.897
0074F8 7F74F8 FE 15                           DW      $FE15   ;       -491    -49.06  -45.03  1009    4.927   471102.192
0074FA 7F74FA FE 03                           DW      $FE03   ;       -509    -50.94  -46.08  1010    4.932   506255.294
0074FC 7F74FC FD EE                           DW      $FDEE   ;       -530    -52.94  -47.19  1011    4.937   546988.254
0074FE 7F74FE FD DD                           DW      $FDDD   ;       -547    -54.65  -48.14  1012    4.941   584545.424
007500 7F7500 FD C6                           DW      $FDC6   ;       -570    -56.95  -49.41  1013    4.946   639316.296
007502 7F7502 FD AE                           DW      $FDAE   ;       -594    -59.41  -50.79  1014    4.951   705264.898
007504 7F7504 FD 93                           DW      $FD93   ;       -621    -62.13  -52.29  1015    4.956   786201.818
007506 7F7506 FD 75                           DW      $FD75   ;       -651    -65.14  -53.96  1016    4.961   887891.795
007508 7F7508 FD 53                           DW      $FD53   ;       -685    -68.51  -55.84  1017    4.966   1019490.588
00750A 7F750A FD 2C                           DW      $FD2C   ;       -724    -72.36  -57.98  1018    4.971   1196468.276
00750C 7F750C FC FF                           DW      $FCFF   ;       -769    -76.86  -60.48  1019    4.976   1447186.667
00750E 7F750E FC D5                           DW      $FCD5   ;       -811    -81.11  -62.84  1020    4.980   1738020.000
007510 7F7510 FC 93                           DW      $FC93   ;       -877    -87.67  -66.48  1021    4.985   2319686.667
007512 7F7512 FC 3A                           DW      $FC3A   ;       -966    -96.61  -71.45  1022    4.990   3483020.000
007514 7F7514 3E 80                           DW      $3E80   ;       1600    160.00  71.11   1023    4.995   Default to 160F (sensor failure)
007516 7F7516 -> $7516                DODGETHERM_TABS_END             EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
007516 7F7516 -> $7F7516              DODGETHERM_TABS_END_LIN EQU     @     ; @ Represents the current value of the linear
