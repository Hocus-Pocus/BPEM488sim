                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (BPEM488.s)                                                                *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    Application code for the Basic Programmable Engine Management 488 project          *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project (This module)       *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 14 2020                                                                        *
                                      ;*    - BPEM488 version begins(work in progress)                                         *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
??????        S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Resource mapping -                                                                  *
                                      ;*****************************************************************************************
001000 0FD000                                         ORG   MMAP_RAM_START, MMAP_RAM_START_LIN   ; $1000, $0F_D000
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001000 0FD000 -> $1000                BASE_VARS_START           EQU *   ; * Represents the current value of the paged
                                                                        ; program counter
001000 0FD000 -> $FD000               BASE_VARS_START_LIN       EQU @   ; @ Represents the current value of the linear
                                                                        ; program counter
00106A 0FD06A                                         ORG   BASE_VARS_END, BASE_VARS_END_LIN
                                      ; - Shared Variables -
00106A 0FD06A -> $106A                BPEM488_SHARED_VARS_START       EQU *   ; * Represents the current value of the paged
                                                                              ; program counter
00106A 0FD06A -> $FD06A               BPEM488_SHARED_VARS_START_LIN   EQU @   ; @ Represents the current value of the linear
                                                                              ; program counter
                                      ;BPEM488_SHARED_VARS_START_XG    EQU (BPEM488_SHARED_VARS_START_LIN & $FFFF)
                                      ;; - XGATE Variables -
                                      ;               ORG   MMAP_XGATE_RAM_START_XG, MMAP_XGATE_RAM_START_LIN   ; $8000, $0F_8000
                                      ;BPEM488_XGATE_VARS_START_XG    EQU *   ; * Represents the current value of the paged
                                                                             ; program counter
                                      ;BPEM488_XGATE_VARS_START_LIN   EQU @   ; @ Represents the current value of the linear
                                                                             ; program counter
004000 7F4000                                         ORG   MMAP_FLASH_FD_START, MMAP_FLASH_FD_START_LIN   ; $4000, $7F_4000
                                      ;*****************************************************************************************
                                      ;* - Macros -                                                                            *
                                      ;*****************************************************************************************
                                      ; ------------------------------- No macros for this module ------------------------------
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; THIS IS THE AFTER RESET ENTRY POINT                                                    *
                                      ;*****************************************************************************************
004000 7F4000 -> $4000                BPEM488_CODE_START       EQU  *  ; * Represents the current value of the paged
                                                                       ; program counter
004000 7F4000 -> $7F4000              BPEM488_CODE_START_LIN   EQU  @  ; @ Represents the current value of the linear
                                                                       ; program counter
005538 7F5538                                         ORG   BPEM488_CODE_END, BPEM488_CODE_END_LIN
005538 7F5538 -> $5538                BASE_CODE_START       EQU  *  ; * Represents the current value of the paged
                                                                    ; program counter
005538 7F5538 -> $7F5538              BASE_CODE_START_LIN   EQU  @  ; @ Represents the current value of the linear
                                                                    ; program counter
0062A2 7F62A2                                         ORG   BASE_CODE_END, BASE_CODE_END_LIN
                                      ; - Tables -
0062A2 7F62A2 -> $62A2                BPEM488_TABS_START       EQU  *  ; * Represents the current value of the paged
                                                                       ; program counter
0062A2 7F62A2 -> $7F62A2              BPEM488_TABS_START_LIN   EQU  @  ; @ Represents the current value of the linear
                                                                       ; program counter
006C5B 7F6C5B                                         ORG   BPEM488_TABS_END, BPEM488_TABS_END_LIN
006C5B 7F6C5B -> $6C5B                BASE_TABS_START       EQU BPEM488_TABS_END
006C5B 7F6C5B -> $7F6C5B              BASE_TABS_START_LIN   EQU BPEM488_TABS_END_LIN
                                      ;*****************************************************************************************
                                      ; - Complete last flash phrase - (Required for D-Bug12)
                                      ;*****************************************************************************************
007565 7F7565                                         ORG   BASE_TABS_END, BASE_TABS_END_LIN
                                      ;*              FILL    $FF, 8-(*&7)
007565 7F7565 FF FF FF                       ALIGN 7,$FF          ; This is the better option
                                      ;; - XGATE Code -
000800 780800                                         ORG   MMAP_XG_FLASH_START_XG, MMAP_XG_FLASH_START_LIN   ; $0800, $78_0800
                                      ;BPEM488_XGATE_CODE_START_XG    EQU *   ; * Represents the current value of the paged
                                                                             ; program counter
                                      ;BPEM488_XGATE_CODE_START_LIN   EQU @   ; @ Represents the current value of the linear
                                                                             ; program counter
                                      ;               ORG   BPEM488_XGATE_CODE_END_XG, BPEM488_XGATE_CODE_END_LIN
                                      ;; - XGATE Tables -
                                      ;BPEM488_XGATE_TABS_START_XG    EQU *   ; * Represents the current value of the paged
                                                                             ; program counter
                                      ;BPEM488_XGATE_TABS_START_LIN   EQU @   ; @ Represents the current value of the linear
                                                                             ; program counter
                                      ;               ORG   BPEM488_XGATE_TABS_END_XG, BPEM488_XGATE_TABS_END_LIN
000800 780800                                ALIGN 7,$FF
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
00106A 0FD06A                                         ORG   BPEM488_SHARED_VARS_START, BPEM488_SHARED_VARS_START_LIN
00106A 0FD06A                                 ALIGN 1
                                      ;*****************************************************************************************
                                      ;----------------------------- RS232 Real Time Variables ---------------------------------
                                      ;   Zero page ordered list continuously updated to Tuner Studio
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Seconds counter variables
                                      ;*****************************************************************************************
00106A 0FD06A                         SecH:         ds 1 ; RTI seconds count Hi byte (offset=0)
00106B 0FD06B                         SecL:         ds 1 ; RTI seconds count Lo byte (offset=1)
                                      ;*****************************************************************************************
                                      ; - ADC variables
                                      ;*****************************************************************************************
00106C 0FD06C                         cltAdc:       ds 2 ; RV15 10 bit ADC AN00 Engine Coolant Temperature ADC(offset=2)
00106E 0FD06E                         Cltx10:       ds 2 ; Engine Coolant Temperature (Degrees F x 10)(offset=4)
001070 0FD070                         matAdc:       ds 2 ; RV14 10 bit ADC AN01 Manifold Air Temperature ADC(offset=6)
001072 0FD072                         Matx10:       ds 2 ; Manifold Air Temperature (Degrees F x 10)(offset=8)
001074 0FD074                         eftAdc:       ds 2 ; RV13 10 bit ADC AN02 Engine Fuel Temperature ADC(offset=10)
001076 0FD076                         Eftx10:       ds 2 ; Engine Fuel Temperature (Degrees F x 10)(offset=12)
001078 0FD078                         eotAdc:       ds 2 ; RV12 10 bit ADC AN03 Engine Oil Temperature ADC(offset=14)
00107A 0FD07A                         Eotx10:       ds 2 ; Engine Oil Temperature (Degrees F x 10)(offset=16)
00107C 0FD07C                         RV11Adc:      ds 2 ; RV11 10 bit ADC AN04(19)(offset=18)
00107E 0FD07E                         mapAdc:       ds 2 ; RV10 10 bit ADC AN05 Manifold Absolute Pressure ADC(offset=20)
001080 0FD080                         Mapx10:       ds 2 ; Manifold Absolute Pressure (KPAx10)(offset=22)
001082 0FD082                         baroAdc:      ds 2 ; RV9 10 bit ADC AN06 Barometric Pressure ADC(offset=24)
001084 0FD084                         Barox10:      ds 2 ; Barometric Pressure (KPAx10)(offset=26)
001086 0FD086                         batAdc:       ds 2 ; Battery Voltage 10 bit ADC AN07(offset=28)
001088 0FD088                         BatVx10:      ds 2 ; Battery Voltage (Volts x 10)(offset=30)
00108A 0FD08A                         ftrmAdc:      ds 2 ; RV8 10 bit ADC AN08 Fuel Trim ADC(offset=32)
00108C 0FD08C                         Ftrmx10:      ds 2 ; Fuel Trim (% x 10)(+-20%)(offset=34)
00108E 0FD08E                         itrmAdc:      ds 2 ; RV7 10 bit ADC AN09 Ignition Trim ADC(offset=36)
001090 0FD090                         Itrmx10:      ds 2 ; Ignition Trim (degrees x 10)+-20 degrees) (offset=38)
001092 0FD092                         egtAdc:       ds 2 ; RV6 10 bit ADC AN10 Exhaust Gas Temperature ADC(offset=40)
001094 0FD094                         Egt:          ds 2 ; Exhaust Gas Temperature (degrees F)(offset=42)
001096 0FD096                         eopAdc:       ds 2 ; RV5 10 bit ADC AN11 Engine Oil Pressure ADC(offset=44)
001098 0FD098                         Eopx10:       ds 2 ; Engine Oil Pressure (PSI x 10)(offset=46)
00109A 0FD09A                         efpAdc:       ds 2 ; RV4 10 bit ADC AN12 Engine Fuel Pressure ADC(offset=48)
00109C 0FD09C                         Efpx10:       ds 2 ; Engine Fuel Pressure (PSI x 10)(offset=50)
00109E 0FD09E                         tpsADC:       ds 2 ; RV3 10 bit ADC AN13 Throttle Position Sensor ADC (exact for TS)(offset=52)
0010A0 0FD0A0                         TpsPctx10:    ds 2 ; Throttle Position Sensor % of travel(%x10)(update every 100mSec)(offset=54)
0010A2 0FD0A2                         iacAdc:       ds 2 ; RV2 10 bit ADC AN14 Idle Air Control ADC(offset=56)
0010A4 0FD0A4                         egoAdc:       ds 2 ; RV1 10 bit ADC AN15 Exhaust Gas Oxygen ADC(offset=58)
0010A6 0FD0A6                         afr1x10:      ds 2 ; Air Fuel Ratio for gasoline (AFRx10)(exact for TS)(offset=60)
                                      ;*****************************************************************************************
                                      ; - Input capture variables
                                      ;*****************************************************************************************
0010A8 0FD0A8                         CASprd512:    ds 2 ; Crankshaft Angle Sensor period (5.12uS time base(offset=62)
0010AA 0FD0AA                         CASprd256:    ds 2 ; Crankshaft Angle Sensor period (2.56uS time base(offset=64)
0010AC 0FD0AC                         VSSprd:       ds 2 ; Vehicle Speed Sensor period(offset=66)
0010AE 0FD0AE                         RPM:          ds 2 ; Crankshaft Revolutions Per Minute(offset=68)
0010B0 0FD0B0                         KPH:          ds 2 ; Vehicle speed (KpH x 10)(offset=70)
                                      ;*****************************************************************************************
                                      ; - Fuel calculation variables
                                      ;*****************************************************************************************
0010B2 0FD0B2                         Place72:      ds 2 ; Place holder(offset=72)
0010B4 0FD0B4                         AFRcurr:      ds 2 ; Current value in AFR table (AFR x 100)(offset=74)
0010B6 0FD0B6                         VEcurr:       ds 2 ; Current value in VE table (% x 10)(offset=76)
0010B8 0FD0B8                         barocor:      ds 2 ; Barometric Pressure Correction (% x 10)(offset=78)
0010BA 0FD0BA                         matcor:       ds 2 ; Manifold Air Temperature Correction (% x 10)(offset=80)
0010BC 0FD0BC                         WUEcor:       ds 2 ; Warmup Enrichment Correction (% x 10)(offset=82)
0010BE 0FD0BE                         ASEcor:       ds 2 ; Afterstart Enrichmnet Correction (% x 10)(offset=84)
0010C0 0FD0C0                         WUEandASEcor: ds 2 ; the sum of WUEcor and ASEcor (% x 10)(offset=86)
0010C2 0FD0C2                         Crankcor:     ds 2 ; Cranking pulsewidth temperature correction (% x 10)(offset=88)
0010C4 0FD0C4                         TpsPctDOT:    ds 2 ; TPS difference over time (%/Sec)(update every 100mSec)(offset=90)
0010C6 0FD0C6                         TpsDOTcor:    ds 1 ; Throttle Opening Enrichment table value(%)(offset=92)
0010C7 0FD0C7                         ColdAddpct:   ds 1 ; Throttle Opening Enrichment cold adder (%)(offset=93)
0010C8 0FD0C8                         ColdMulpct:   ds 1 ; Throttle Opening Enrichment cold multiplier (%)(offset=94)
0010C9 0FD0C9                         TOEpct:       ds 1 ; Throttle Opening Enrichment (%)(offset=95)
0010CA 0FD0CA                         TOEpw:        ds 2 ; Throttle Opening Enrichment adder (mS x 100)(offset=96)
0010CC 0FD0CC                         PWlessTOE:    ds 2 ; Injector pulse width before "TOEpw" and "Deadband" (mS x 10)(offset=98)
0010CE 0FD0CE                         Deadband:     ds 2 ; injector deadband at current battery voltage mS*100(offset=100)
0010D0 0FD0D0                         PrimePW:      ds 2 ; Primer injector pulswidth (mS x 10)(offset=102)
0010D2 0FD0D2                         CrankPW:      ds 2 ; Cranking injector pulswidth (mS x 10)(offset=104)
0010D4 0FD0D4                         FDpw:         ds 2 ; Fuel Delivery pulse width (PW - Deadband) (mS x 10)(offset=106)
0010D6 0FD0D6                         PW:           ds 2 ; Running engine injector pulsewidth (mS x 10)(offset=108)
0010D8 0FD0D8                         FD:           ds 2 ; Fuel Delivery pulse width (mS)(offset=110)
0010DA 0FD0DA                         FDsec:        ds 2 ; Fuel delivery pulse width total over 1 second (mS)(offset=112)
0010DC 0FD0DC                         Place114:     ds 2 ; Place holder(offset=114)
0010DE 0FD0DE                         Place115:     ds 2 ; Place holder(offset=116)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Ignition calculation variables
                                      ;*****************************************************************************************
0010E0 0FD0E0                         STcurr:         ds 2 ; Current value in ST table (Degrees x 10)(offset=118)
0010E2 0FD0E2                         Place120:       ds 2 ; Place holder(offset=120)
0010E4 0FD0E4                         DwellCor:       ds 2 ; Coil dwell voltage correction (%*10)(offset=122)
0010E6 0FD0E6                         DwellFin:       ds 2 ; ("Dwell" * "DwellCor") (mS*10)(offset=124)
0010E8 0FD0E8                         STandItrmx10:   ds 2 ; stCurr and Itmx10 (degrees*10)(offset=126)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Port status variables
                                      ;*****************************************************************************************
0010EA 0FD0EA                         PortAbits:    ds 1  ; Port A status bit field(offset=128)
0010EB 0FD0EB                         PortBbits:    ds 1  ; Port B status bit field(offset=129)
0010EC 0FD0EC                         PortEbits:    ds 1  ; Port E status bit field(offset=130)
0010ED 0FD0ED                         PortKbits:    ds 1  ; Port K status bit field(offset=131)
0010EE 0FD0EE                         PortJbits:    ds 1  ; Port J status bit field(offset=132)
0010EF 0FD0EF                         PortPbits:    ds 1  ; Port P status bit field(offset=133)
0010F0 0FD0F0                         PortTbits:    ds 1  ; Port T status bit field(offset=134)
                                      ;*****************************************************************************************
                                      ; - Misc variables
                                      ;*****************************************************************************************
0010F1 0FD0F1                         engine:       ds 1  ; Engine status bit field(offset=135)
0010F2 0FD0F2                         engine2:      ds 1  ; Engine2 status bit field(offset=136)
0010F3 0FD0F3                         alarmbits:    ds 1  ; Alarm status bit field(offset=137)
0010F4 0FD0F4                         AAoffbits:    ds 1  ; Audio Alarm Off status bit field(offset=138)
0010F5 0FD0F5                         StateStatus:  ds 1  ; State status bit field(offset=139)
0010F6 0FD0F6                         LoopTime:     ds 2  ; Program main loop time (loops/Sec)(offset=140)
0010F8 0FD0F8                         DutyCyclex10: ds 2  ; Injector duty cycle in run mode (% x 10)(offset=142)
0010FA 0FD0FA                         TestValw:     ds 2  ; Word test value (for program developement only)(offset=144)
0010FC 0FD0FC                         testValb:     ds 1  ; Byte test value (for program developement only)(offset=146)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - This marks the end of the real time variables (147 bytes in total)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; --------------------------------- RS232 equates ----------------------------------------
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - "engine" equates
                                      ;*****************************************************************************************
0010FD 0FD0FD -> $0001                OFCdelon     equ  $01 ; %00000001, bit 0, 0 = OFC timer not counting down(Grn),
                                                                              ; 1 = OFC timer counting down(Red)
0010FD 0FD0FD -> $0002                crank        equ  $02 ; %00000010, bit 1, 0 = engine not cranking(Grn),
                                                                              ; 1 = engine cranking(Red)
0010FD 0FD0FD -> $0004                run          equ  $04 ; %00000100, bit 2, 0 = engine not running(Red),
                                                                              ; 1 = engine running(Grn)
0010FD 0FD0FD -> $0008                ASEon        equ  $08 ; %00001000, bit 3, 0 = not in start/warmup(Grn),
                                                                              ; 1 = in start/warmup(Red)
0010FD 0FD0FD -> $0010                WUEon        equ  $10 ; %00010000, bit 4, 0 = not in warmup(Grn),
                                                                              ; 1 = in warmup(Red)
0010FD 0FD0FD -> $0020                TOEon        equ  $20 ; %00100000, bit 5, 0 = not in TOE mode(Grn),
                                                                              ; 1 = TOE mode(Red)
0010FD 0FD0FD -> $0040                OFCon        equ  $40 ; %01000000, bit 6, 0 = not in OFC mode(Grn),
                                                                              ; 1 = in OFC mode(Red)
0010FD 0FD0FD -> $0080                FldClr       equ $80  ; %10000000, bit 7, 0 = not in flood clear mode(Grn),
                                                                              ; 1 = Flood clear mode(Red)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; "engine2" equates
                                      ;*****************************************************************************************
0010FD 0FD0FD -> $0001                base512        equ $01 ; %00000001, bit 0, 0 = 5.12uS time base off(White),
                                                                               ; 1 = 5.12uS time base on(Grn)
0010FD 0FD0FD -> $0002                base256        equ $02 ; %00000010, bit 1, 0 = 2.56uS time base off(White),
                                                                               ; 1 = 2.56uS time base on(Grn)
0010FD 0FD0FD -> $0004                AudAlrm        equ $04 ; %00000100, bit 2, 0 = Audible Alarm on(Grn),
                                                                               ; 1 = Audible Alarm off(Red)
0010FD 0FD0FD -> $0008                eng2Bit3       equ $08 ; %00001000, bit 3, 0 = , 1 =
0010FD 0FD0FD -> $0010                eng2Bit4       equ $10 ; %00010000, bit 4, 0 = , 1 =
0010FD 0FD0FD -> $0020                eng2Bit5       equ $20 ; %00100000, bit 5, 0 = , 1 =
0010FD 0FD0FD -> $0040                eng2Bit6       equ $40 ; %01000000, bit 6, 0 = , 1 =
0010FD 0FD0FD -> $0080                eng2Bit7       equ $80 ; %10000000, bit 7, 0 = , 1 =
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; "alarmbits" equates
                                      ;*****************************************************************************************
0010FD 0FD0FD -> $0001                LOP        equ $01 ; %00000001, bit 0, 0 = No low oil pressure(Grn),
                                                                            ;1 = Low oil pressure(Red)
0010FD 0FD0FD -> $0002                HOT        equ $02 ; %00000010, bit 1, 0 = No high oil temperature(Grn),
                                                                            ;1 = High oil temperature(Red)
0010FD 0FD0FD -> $0004                HET        equ $04 ; %00000100, bit 2, 0 = No high coolant temperature(Grn),
                                                                            ;1 = High coolant temperature(Red)
0010FD 0FD0FD -> $0008                HEGT       equ $08 ; %00001000, bit 3, 0 = No high exhaust temperature(Grn),
                                                                            ;1 = High exhaust temperatrue(Red)
0010FD 0FD0FD -> $0010                HFT        equ $10 ; %00010000, bit 4, 0 = No high fuel temperature(Grn),
                                                                            ;1 = High fuel temperature(Red)
0010FD 0FD0FD -> $0020                LFP        equ $20 ; %00100000, bit 5, 0 = No Low fuel pressure(Grn),
                                                                            ;1 = Low fuel pressure(Red)
0010FD 0FD0FD -> $0040                HFP        equ $40 ; %01000000, bit 6, 0 = No high fuel pressure(Grn),
                                                                            ;1 = High fuel pressure(Red)
0010FD 0FD0FD -> $0080                Bit7       equ $80 ; %10000000, bit 7, 0 = , 1 =
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; "AAoffbits"equates
                                      ;*****************************************************************************************
0010FD 0FD0FD -> $0001                LOPoff        equ $01 ; %00000001, bit 0, 0 = No LOP audio alarm silence,
                                                                            ;1 = LOP audio alarm silence
0010FD 0FD0FD -> $0002                HOToff        equ $02 ; %00000010, bit 1, 0 = No HOT audio alarm silence,
                                                                            ;1 = HOT audio alarm silence
0010FD 0FD0FD -> $0004                HEToff        equ $04 ; %00000100, bit 2, 0 = No HET audio alarm silence,
                                                                            ;1 = HET audio alarm silence
0010FD 0FD0FD -> $0008                HEGToff       equ $08 ; %00001000, bit 3, 0 = No HEGT audio alarm silence,
                                                                            ;1 = HEGT audio alarm silence
0010FD 0FD0FD -> $0010                HFToff        equ $10 ; %00010000, bit 4, 0 = No HFT audio alarm silence,
                                                                            ;1 = HFT audio alarm silence
0010FD 0FD0FD -> $0020                LFPoff        equ $20 ; %00100000, bit 5, 0 = No LFP audio alarm silence,
                                                                            ;1 = LFP audio alarm silence
0010FD 0FD0FD -> $0040                HFPoff        equ $40 ; %01000000, bit 6, 0 = No HFP audio alarm silence,
                                                                             ;1 = HFP audio alarm silence
0010FD 0FD0FD -> $0080                Bit7off       equ $80 ; %10000000, bit 7, 0 = , 1 =
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - "StateStatus" equates
                                      ;*****************************************************************************************
0010FD 0FD0FD -> $0001                Synch            equ    $01  ; %00000001, bit 0,
                                                                   ; 0 = crank position not synchronized(Red),
                                                                                               ; 1 = crank position synchronized(Grn)
0010FD 0FD0FD -> $0002                SynchLost        equ    $02  ; %00000010, bit 1, 0 = synch not lost(Grn),
                                                                   ; 1 = synch lost(Red)
0010FD 0FD0FD -> $0004                StateNew         equ    $04  ; %00000100, bit 2, 0 = no new State value,
                                                                   ; 1 = New State value
0010FD 0FD0FD -> $0008                StateStatus3     equ    $08  ; %00001000, bit 3,
0010FD 0FD0FD -> $0010                StateStatus4     equ    $10  ; %00010000, bit 4
0010FD 0FD0FD -> $0020                StateStatus5     equ    $20  ; %00100000, bit 5
0010FD 0FD0FD -> $0040                StateStatus6     equ    $40  ; %01000000, bit 6
0010FD 0FD0FD -> $0080                StateStatus7     equ    $80  ; %10000000, bit 7
                                      ;*****************************************************************************************
                                      ; PortAbits: Port A status bit field (PORTA)
                                      ;*****************************************************************************************
0010FD 0FD0FD -> $0001                SW7on57to82  equ  $01 ;(PA0)%00000001, bit 0
0010FD 0FD0FD -> $0002                SW3on57to82  equ  $02 ;(PA1)%00000010, bit 1
0010FD 0FD0FD -> $0004                SW6on57to82  equ  $04 ;(PA2)%00000100, bit 2
0010FD 0FD0FD -> $0008                Ftrimen      equ  $08 ;(PA3)%00001000, bit 3, SW2on57to82, 0 = Fuel trim disabled(Grn),
                                                                                                ;1 = Fuel trim enabled(Red)
0010FD 0FD0FD -> $0010                Itrimen      equ  $10 ;(PA4)%00010000, bit 4, SW5on57to82, 0 = Ign trim disabled(Grn),
                                                                                                ;1 = Ign trim enabled(Red)
0010FD 0FD0FD -> $0020                SW1on57to82  equ  $20 ;(PA5)%00100000, bit 5
0010FD 0FD0FD -> $0040                RunLoad      equ  $40 ;(PA6)%01000000, bit 6, SW2 on CPU, 0 = EEM load enabled(Red),
                                                                                               ;1 = EEMload not enabled(Grn)
0010FD 0FD0FD -> $0080                SW4on57to82  equ  $80 ;(PA7)%10000000, bit 7
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; PortBbits: Port B status bit field (PORTB)
                                      ;*****************************************************************************************
0010FD 0FD0FD -> $0001                FuelPump    equ  $01 ;(PB0)%00000001, bit 0, D9on1to28, 0 = Fuel Pump off(Red),
                                                                                             ;1 = Fuel pump on(Grn)
0010FD 0FD0FD -> $0002                ASDRelay    equ  $02 ;(PB1)%00000010, bit 1, D23on1to28,0 = ASD Relay off(Red),
                                                                                             ;1 = ASD Relay on(Grn)
0010FD 0FD0FD -> $0004                D4on1to28   equ  $04 ;(PB2)%00000100, bit 2
0010FD 0FD0FD -> $0008                D20on1to28  equ  $08 ;(PB3)%00001000, bit 3
0010FD 0FD0FD -> $0010                D10on1to28  equ  $10 ;(PB4)%00010000, bit 4
0010FD 0FD0FD -> $0020                EngAlarm    equ  $20 ;(PB5)%00100000, bit 5, D1on29to56, 0 = Alarm Relay off,
                                                                                              ;1 = Alarm Relay on
0010FD 0FD0FD -> $0040                AIOT        equ  $40 ;(PB6)%01000000, bit 6, D10on29to56 0 = AIOT no pulse
                                                                                              ;1 = AIOT pulse
0010FD 0FD0FD -> $0080                D2on29to56  equ  $80 ;(PB7)%10000000, bit 7
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; PortEbits: Port E status bit field (PORTE)
                                      ;*****************************************************************************************
0010FD 0FD0FD -> $0001                XIRQpin      equ  $01  ;(PE0)%00000001, bit 0, XIRQ
0010FD 0FD0FD -> $0002                IRQpin       equ  $02  ;(PE1)%00000010, bit 1, IRQ
0010FD 0FD0FD -> $0004                SDcard       equ  $04  ;(PE2)%00000100, bit 2, SD card detect
0010FD 0FD0FD -> $0008                SW5on29to56  equ  $08  ;(PE3)%00001000, bit 3, SW5on29to56
0010FD 0FD0FD -> $0010                AudAlrmSil   equ  $10  ;(PE4)%00010000, bit 4, SW2on29to56, 0 = No Audible Alarm Silence
                                                                                              ; 1 = Audible Alarm Silence
0010FD 0FD0FD -> $0020                SW4on29to56  equ  $20  ;(PE5)%00100000, bit 5,(MODA) (hard wired to ground)
0010FD 0FD0FD -> $0040                SW1on29to56  equ  $40  ;(PE6)%01000000, bit 6,(MODB)( hard wired to ground)
0010FD 0FD0FD -> $0080                SW6on29to56  equ  $80  ;(PE7)%10000000, bit 7,
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; PortKbits: Port K status bit field (PORTK)
                                      ;*****************************************************************************************
0010FD 0FD0FD -> $0001                D22on1to28  equ  $01 ;(PK0)%00000001, bit 0
0010FD 0FD0FD -> $0002                D6on1to28   equ  $02 ;(PK1)%00000010, bit 1
0010FD 0FD0FD -> $0004                D25on1to28  equ  $04 ;(PK2)%00000100, bit 2
0010FD 0FD0FD -> $0008                D2on1to28   equ  $08 ;(PK3)%00001000, bit 3
0010FD 0FD0FD -> $0010                D19on1to28  equ  $10 ;(PK4)%00010000, bit 4
0010FD 0FD0FD -> $0020                D3on1to28   equ  $20 ;(PK5)%00100000, bit 5
                                      ;N/A        equ  $40 ;(PK6)%01000000, bit 6
0010FD 0FD0FD -> $0080                D2on87to112 equ  $80 ;(PK7)%10000000, bit 7
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; PortJbits: Port J status bit field (PTJ)
                                      ;*****************************************************************************************
0010FD 0FD0FD -> $0040                SW4on87to112 equ $40 ;(PJ6) %01000000, bit 6
0010FD 0FD0FD -> $0080                SW2on87to112 equ $80 ;(PJ7) %10000000, bit 7
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; PortPbits: Port P status bit field (PTP)(Tim1 Output Compare Channels)
                                      ;*****************************************************************************************
0010FD 0FD0FD -> $0001                Ign3      equ $01 ;(PP0)%00000001, bit 0, D21on1to28 (Ign3)(9&8)
0010FD 0FD0FD -> $0002                Ign4      equ $02 ;(PP1)%00000010, bit 1, D5on1to28 (Ign4)(4&7)
0010FD 0FD0FD -> $0004                Ign5      equ $04 ;(PP2)%00000100, bit 2, D24on1to28 (Ign5)(3&2)
0010FD 0FD0FD -> $0008                Inj1      equ $08 ;(PP3)%00001000, bit 3, D1on1to28 (Inj1)(1&10)
0010FD 0FD0FD -> $0010                Inj2      equ $10 ;(PP4)%00010000, bit 4, D3on87to112 (Inj2)(9&4)
0010FD 0FD0FD -> $0020                Inj3      equ $20 ;(PP5)%00100000, bit 5, D6on87to112 (Inj3)(3&6)
0010FD 0FD0FD -> $0040                Inj4      equ $40 ;(PP6)%01000000, bit 6, D1on87to112 (Inj4)(5&8)
0010FD 0FD0FD -> $0080                Inj5      equ $80 ;(PP7)%10000000, bit 7, D7on87to112 (Inj5)(7&2)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; PortTbits: Port T status bit field (PTT)(Enhanced Capture Channels)
                                      ;*****************************************************************************************
0010FD 0FD0FD -> $0001                Ign1       equ $01 ;(PT0)%00000001, bit 0, D7on1to28(Ign1)(1&6)
0010FD 0FD0FD -> $0002                PT1        equ $02 ;(PT1)%00000010, bit 1, P9 VR Sensor
0010FD 0FD0FD -> $0004                Ign2       equ $04 ;(PT2)%00000100, bit 2, D8on1to28(Ign2)(10&5)
0010FD 0FD0FD -> $0008                PT3        equ $08 ;(PT3)%00001000, bit 3, P10 VR Sensor
0010FD 0FD0FD -> $0010                PT4        equ $10 ;(PT4)%00010000, bit 4, U1 Volt/Frq RPM
0010FD 0FD0FD -> $0020                CamSens    equ $20 ;(PT5)%00100000, bit 5, K2 Cam Sensor
0010FD 0FD0FD -> $0040                PT6        equ $40 ;(PT6)%01000000, bit 6, U2 Volt Frq VSS
0010FD 0FD0FD -> $0080                CrnkSens   equ $80 ;(PT7)%10000000, bit 7, K3 Crank Sensor
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; ------------------------------- Non RS232 variables ------------------------------------
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Misc variables
                                      ;*****************************************************************************************
0010FD 0FD0FD                         LoopCntr:    ds 2 ; Counter for "LoopTime" (incremented every Main Loop pass)
0010FF 0FD0FF                         tmp1w:       ds 2 ; Temporary word variable #1
001101 0FD101                         tmp2w:       ds 2 ; Temporary word variable #2
001103 0FD103                         tmp3w:       ds 2 ; Temporary word variable #3
001105 0FD105                         tmp4w:       ds 2 ; Temporary word variable #4
001107 0FD107                         tmp5b:       ds 1 ; Temporary byte variable #5
001108 0FD108                         tmp6b:       ds 1 ; Temporary byte variable #6
001109 0FD109                         tmp7b:       ds 1 ; Temporary byte variable #7
00110A 0FD10A                         tmp8b:       ds 1 ; Temporary byte variable #8
                                      ;*****************************************************************************************
00110B 0FD10B -> $110B                BPEM488_SHARED_VARS_END       EQU *   ; * Represents the current value of the paged
                                                                            ; program counter
00110B 0FD10B -> $FD10B               BPEM488_SHARED_VARS_END_LIN   EQU @   ; @ Represents the current value of the linear
                                                                            ; program counter
                                      ;*****************************************************************************************
                                      ;* - Macros -                                                                            *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
004000 7F4000                                         ORG   BPEM488_CODE_START, BPEM488_CODE_START_LIN
                                      ; - Initialization -
                                      ;*****************************************************************************************
                                      ; - Initialize stack pointer -
                                      ;*****************************************************************************************
004000 7F4000 CF 40 00                    lds   #$3FFF+1    ; Initialize stack pointer bottom + 1
                                      ;*****************************************************************************************
                                      ; - Make sure we are in Single Chip Mode
                                      ;*****************************************************************************************
004003 7F4003 86 80                       ldaa  #MODC     ; Load Acc A with the value in bit 7 of Mode Register
004005 7F4005 5A 0B                       staa  MODE      ; Copy to Mode Register (lock MODE register into NSC
                                                          ;(normal single chip mode)
004007 7F4007 79 00 1E                    clr  IRQCR      ; Disable IRQ (won't run without this)
00400A 7F400A MACRO                       BASE_INIT       ; Call "BASE_INIT" Macro
                                                                        ; program counter                              (BASE_INIT)
                                      ;***************************************************************************************** (BASE_INIT)
                                      ;* - Macros -                                                                            * (BASE_INIT)
                                      ;***************************************************************************************** (BASE_INIT)
                                      ; -  Initialization -                                                            (BASE_INIT)
00400A 7F400A MACRO                                           INIT_VECTAB     ; Initialize Interrupt vectors (vectabs_BEEM488.s) (BASE_INIT)
                                      ;***************************************************************************************** (BASE_INIT/INIT_VECTAB)
                                      ; ------------------------- Initialize interupt vectors ---------------------------------- (BASE_INIT/INIT_VECTAB)
                                      ;                                                                                (BASE_INIT/INIT_VECTAB)
                                      ;   Priority level 7 = highest, 1 = lowest. If no priority set then highest address has (BASE_INIT/INIT_VECTAB)
                                      ;   priority                                                                     (BASE_INIT/INIT_VECTAB)
                                      ;***************************************************************************************** (BASE_INIT/INIT_VECTAB)
                                      ; - Disable XGATE interrupts -                                                   (BASE_INIT/INIT_VECTAB)
                                      ;    clr   INT_XGPRIO       ; Clear XGATE Interrupt Priority Configuration Register (XGATE NOT USED!!!!!!!!!!!!!!!) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize RTI -> UI ISR vectors -                                           (BASE_INIT/INIT_VECTAB)
00400A 7F400A 18 0B F0 01 27              movb  #$F0,INT_CFADDR  ; Load "CFADDR" with %11110000 (Place RTI -> UI       (BASE_INIT/INIT_VECTAB)
                                                                 ; into window)                                        (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set RTI disabled)  (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$81,INT_CFDATA0 ; Load "CFDATA0" with %10000001 (Set RTI XGATE      (BASE_INIT/INIT_VECTAB)
                                                                 ; level 1 priority)                                   (BASE_INIT/INIT_VECTAB)
00400F 7F400F 18 0B 01 01 28              movb  #$01,INT_CFDATA0 ; Load "CFDATA0" with %10000001 (Set RTI CPU                ; RTI ENABLED, CPU, level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; level 1 priority)                                   (BASE_INIT/INIT_VECTAB)
004014 7F4014 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set IRQ disabled)    (BASE_INIT/INIT_VECTAB)
004019 7F4019 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set XIRQ disabled)   (BASE_INIT/INIT_VECTAB)
00401E 7F401E 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set SWI disabled)    (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize Enhanced Capture Timer Ch7 -> Ch0 vectors -                       (BASE_INIT/INIT_VECTAB)
004023 7F4023 18 0B E0 01 27              movb  #$E0,INT_CFADDR  ; Load "CFADDR" with %11100000 (Place Enhanced Captuer Timer (BASE_INIT/INIT_VECTAB)
                                                                 ; Ch7 -> Ch0 into window)                             (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set ECT ch7 disabled) (BASE_INIT/INIT_VECTAB)
004028 7F4028 18 0B 07 01 28              movb  #$07,INT_CFDATA0 ; Load "CFDATA0" with %00000111 (Set ECT ch7 geartrooth K3 CPU       ; ECT ch7(Crank) ENABLED, CPU, level 7 (Highest) (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 7)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$87,INT_CFDATA0 ; Load "CFDATA0" with %10000111 (Set ECT ch7 Crank XGATE (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 7)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set ECT ch6 VSS disabled) (BASE_INIT/INIT_VECTAB)
00402D 7F402D 18 0B 01 01 29              movb  #$01,INT_CFDATA1 ; Load "CFDATA1" with %00000001 (Set ECT ch6 Volt Freq U2 CPU,        ; ECT ch6 (VSS) ENABLED, CPU, level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set ECT ch5 disabled) (BASE_INIT/INIT_VECTAB)
004032 7F4032 18 0B 06 01 2A              movb  #$06,INT_CFDATA2 ; Load "CFDATA2" with %00000110 (Set ECT ch5 Geartooth K2 CPU)        ; ECT ch5 (Cam) ENABLED, CPU level 6 (BASE_INIT/INIT_VECTAB)
                                                                 ;priority level 6)                                    (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$86,INT_CFDATA2 ; Load "CFDATA2" with %10000110 (Set ECT ch5 Geartooth K2 XGATE) (BASE_INIT/INIT_VECTAB)
                                                                 ;priority level 6)                                    (BASE_INIT/INIT_VECTAB)
004037 7F4037 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set ECT ch4 disabled) (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$01,INT_CFDATA3 ; Load "CFDATA3" with %00000001 (Set ECT ch4 Volt/freq RPM CPU, (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
00403C 7F403C 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set ECT ch3 VR sensor disabled) (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set ECT ch2 disabled) (BASE_INIT/INIT_VECTAB)
004041 7F4041 18 0B 01 01 2D              movb  #$01,INT_CFDATA5 ; Load "CFDATA5" with %00000001 (Set (D8)(1to28)(Ign2)(10&5)         ; ECT ch2 ((D8)(1to28)(Ign2)(10&5)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
004046 7F4046 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set ECT ch1 VR sensor disabled) (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set ECT ch0 disabled) (BASE_INIT/INIT_VECTAB)
00404B 7F404B 18 0B 01 01 2F              movb  #$01,INT_CFDATA7 ; Load "CFDATA7" with %00000001 (Set (D7)(1to28)(Ign1)(1&6)        ; ECT ch0 ((D7)(1to28)(Ign1)(1&6)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize ATD1 -> Enhanced Capture Timer Overflow Interrupt Vectors -       (BASE_INIT/INIT_VECTAB)
004050 7F4050 18 0B D0 01 27              movb  #$D0,INT_CFADDR  ; Load "CFADDR" with %11010000 (Place ATD1 -> Enhanced (BASE_INIT/INIT_VECTAB)
                                                                 ; Capture Timer Overflow into window)                 (BASE_INIT/INIT_VECTAB)
004055 7F4055 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set ATD1 disabled)   (BASE_INIT/INIT_VECTAB)
00405A 7F405A 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set ATD0 disabled)   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$01,INT_CFDATA1 ; Load "CFDATA1" with %00000001 (Set ATD0 CPU to    (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
00405F 7F405F 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set SCI1 disabled)   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set SCI0 disabled) (BASE_INIT/INIT_VECTAB)
004064 7F4064 18 0B 01 01 2B              movb  #$01,INT_CFDATA3 ; Load "CFDATA3" with %00000001 (Set SCI0 CPU to         ; SCI0 ENABLED, CPU, level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
004069 7F4069 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set SPI0 disabled)   (BASE_INIT/INIT_VECTAB)
00406E 7F406E 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set Pulse accumulator input (BASE_INIT/INIT_VECTAB)
                                                                 ; edge disabled)                                      (BASE_INIT/INIT_VECTAB)
004073 7F4073 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set Pulse accumulator A (BASE_INIT/INIT_VECTAB)
                                                                 ; overflow disabled)                                  (BASE_INIT/INIT_VECTAB)
004078 7F4078 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set ECT overflow disabled) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize IIC0 bus -> Port J Interrupt Vectors -                            (BASE_INIT/INIT_VECTAB)
00407D 7F407D 18 0B C0 01 27              movb  #$C0,INT_CFADDR  ; Load "CFADDR" with %11000000 (IIC0 bus -> Port J    (BASE_INIT/INIT_VECTAB)
                                                                 ; into window)                                        (BASE_INIT/INIT_VECTAB)
004082 7F4082 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set IIC0 bus disabled) (BASE_INIT/INIT_VECTAB)
004087 7F4087 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set SCI6 disabled)   (BASE_INIT/INIT_VECTAB)
00408C 7F408C 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set CRG self clock mode (BASE_INIT/INIT_VECTAB)
                                                                 ; disabled)                                           (BASE_INIT/INIT_VECTAB)
004091 7F4091 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set CRG PLL lock disabled) (BASE_INIT/INIT_VECTAB)
004096 7F4096 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set Pulse accumulator B (BASE_INIT/INIT_VECTAB)
                                                                 ; overflow disabled)                                  (BASE_INIT/INIT_VECTAB)
00409B 7F409B 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set Modulus down counter (BASE_INIT/INIT_VECTAB)
                                                                 ; underflow disabled)                                 (BASE_INIT/INIT_VECTAB)
0040A0 7F40A0 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set Port H disabled) (BASE_INIT/INIT_VECTAB)
0040A5 7F40A5 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set Port J disabled) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize CAN0 transmit -> SPI1 Interrupt Vectors -                         (BASE_INIT/INIT_VECTAB)
0040AA 7F40AA 18 0B B0 01 27              movb  #$B0,INT_CFADDR  ; Load "CFADDR" with %10110000 (CAN0 transmit -> SPI1 (BASE_INIT/INIT_VECTAB)
                                                                 ; into window)                                        (BASE_INIT/INIT_VECTAB)
0040AF 7F40AF 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set CAN0 transmit disabled) (BASE_INIT/INIT_VECTAB)
0040B4 7F40B4 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set CAN0 receive disabled) (BASE_INIT/INIT_VECTAB)
0040B9 7F40B9 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set CAN0 errors disabled) (BASE_INIT/INIT_VECTAB)
0040BE 7F40BE 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set CAN0 wake-up disabled) (BASE_INIT/INIT_VECTAB)
0040C3 7F40C3 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set FLASH disabled)  (BASE_INIT/INIT_VECTAB)
0040C8 7F40C8 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set Flash fault detect (BASE_INIT/INIT_VECTAB)
                                                                 ; disabled)                                           (BASE_INIT/INIT_VECTAB)
0040CD 7F40CD 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set SPI2 disabled)   (BASE_INIT/INIT_VECTAB)
0040D2 7F40D2 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set SPI1 disabled)   (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize CAN2 transmit -> CAN1 wake-up Interrupt Vectors -                 (BASE_INIT/INIT_VECTAB)
0040D7 7F40D7 18 0B A0 01 27              movb  #$A0,INT_CFADDR  ; Load "CFADDR" with %10100000 (CAN2 transmit -> CAN1 (BASE_INIT/INIT_VECTAB)
                                                                 ; wake-up into window)                                (BASE_INIT/INIT_VECTAB)
0040DC 7F40DC 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set CAN2 transmit disabled) (BASE_INIT/INIT_VECTAB)
0040E1 7F40E1 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set CAN2 receive disabled) (BASE_INIT/INIT_VECTAB)
0040E6 7F40E6 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set CAN2 errors disabled) (BASE_INIT/INIT_VECTAB)
0040EB 7F40EB 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set CAN2 wake-up disabled) (BASE_INIT/INIT_VECTAB)
0040F0 7F40F0 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set CAN1 transmit disabled) (BASE_INIT/INIT_VECTAB)
0040F5 7F40F5 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set CAN1 receive disabled) (BASE_INIT/INIT_VECTAB)
0040FA 7F40FA 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set CAN1 errors disabled) (BASE_INIT/INIT_VECTAB)
0040FF 7F40FF 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set CAN1 wake-up disabled) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize CAN4 transmit -> CAN3 wake-up Interrupt Vectors -                 (BASE_INIT/INIT_VECTAB)
004104 7F4104 18 0B 90 01 27              movb  #$90,INT_CFADDR  ; Load "CFADDR" with %10010000 (CAN2 transmit -> CAN1 (BASE_INIT/INIT_VECTAB)
                                                                 ; wake-up into window)                                (BASE_INIT/INIT_VECTAB)
004109 7F4109 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set CAN4 transmit disabled) (BASE_INIT/INIT_VECTAB)
00410E 7F410E 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set CAN4 receive disabled) (BASE_INIT/INIT_VECTAB)
004113 7F4113 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set CAN4 errors disabled) (BASE_INIT/INIT_VECTAB)
004118 7F4118 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set CAN4 wake-up disabled) (BASE_INIT/INIT_VECTAB)
00411D 7F411D 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set CAN3 transmit disabled) (BASE_INIT/INIT_VECTAB)
004122 7F4122 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set CAN3 receive disabled) (BASE_INIT/INIT_VECTAB)
004127 7F4127 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set CAN3 errors disabled) (BASE_INIT/INIT_VECTAB)
00412C 7F412C 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set CAN3 wake-up disabled) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize Low Voltage interrupt -> Port P Interrupt Vectors -               (BASE_INIT/INIT_VECTAB)
004131 7F4131 18 0B 80 01 27              movb  #$80,INT_CFADDR  ; Load "CFADDR" with %10000000 (Low Voltage interrupt -> (BASE_INIT/INIT_VECTAB)
                                                                 ; Port P into window)                                 (BASE_INIT/INIT_VECTAB)
004136 7F4136 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set Low Voltage interrupt (BASE_INIT/INIT_VECTAB)
                                                                 ; disabled)                                           (BASE_INIT/INIT_VECTAB)
00413B 7F413B 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set IIC1 bus disabled) (BASE_INIT/INIT_VECTAB)
004140 7F4140 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set SCI5 disabled)   (BASE_INIT/INIT_VECTAB)
004145 7F4145 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set SCI4 disabled)   (BASE_INIT/INIT_VECTAB)
00414A 7F414A 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set SCI3 transmit disabled) (BASE_INIT/INIT_VECTAB)
00414F 7F414F 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set SCI2 receive disabled) (BASE_INIT/INIT_VECTAB)
004154 7F4154 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set PWM emergency shutdown (BASE_INIT/INIT_VECTAB)
                                                                 ; disabled)                                           (BASE_INIT/INIT_VECTAB)
004159 7F4159 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set Port P interrupt disabled) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize XGATE SW trig 1 -> API Interrupt Vectors -                        (BASE_INIT/INIT_VECTAB)
00415E 7F415E 18 0B 70 01 27              movb  #$70,INT_CFADDR  ; Load "CFADDR" with %01110000 (XGATE SW trig 1 -> API (BASE_INIT/INIT_VECTAB)
                                                                 ; into window)                                        (BASE_INIT/INIT_VECTAB)
004163 7F4163 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set XGATE SW trig 1 disabled) (BASE_INIT/INIT_VECTAB)
004168 7F4168 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set XGATE SW trig 0 disabled) (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$81,INT_CFDATA1 ; Load "CFDATA1" with %10000001 (Set XGATE SW trig 0 XGATE,)      ; XGATE SW Trig 0 (RTI) Disabled, XGATE, level 1 (used to clear RTI variables) (BASE_INIT/INIT_VECTAB)
                                                                 ; level 1 priority)                                   (BASE_INIT/INIT_VECTAB)
00416D 7F416D 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set PIT ch3 disabled) (BASE_INIT/INIT_VECTAB)
004172 7F4172 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set PIT ch2 disabled) (BASE_INIT/INIT_VECTAB)
004177 7F4177 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set PIT ch1 transmit disabled) (BASE_INIT/INIT_VECTAB)
00417C 7F417C 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set PIT ch0 disabled) (BASE_INIT/INIT_VECTAB)
004181 7F4181 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set Hi Temp interrupt disabled) (BASE_INIT/INIT_VECTAB)
004186 7F4186 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set API interrupt disabled) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize XGATE SW trig 7 -> XGATE SW trig 2 Interrupt Vectors -            (BASE_INIT/INIT_VECTAB)
00418B 7F418B 18 0B 64 01 27              movb  #$64,INT_CFADDR  ; Load "CFADDR" with %01100100 (XGATE SW trig 7 -> XGATE SW (BASE_INIT/INIT_VECTAB)
                                                                 ; trig 2 into window)                                 (BASE_INIT/INIT_VECTAB)
004190 7F4190 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set XGATE SW trig 7 disabled) (BASE_INIT/INIT_VECTAB)
004195 7F4195 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set XGATE SW trig 6 disabled) (BASE_INIT/INIT_VECTAB)
00419A 7F419A 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set XGATE SW trig 5 disabled) (BASE_INIT/INIT_VECTAB)
00419F 7F419F 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set XGATE SW trig 4 disabled) (BASE_INIT/INIT_VECTAB)
0041A4 7F41A4 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set XGATE SW trig 3 disabled) (BASE_INIT/INIT_VECTAB)
0041A9 7F41A9 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set XGATE SW trig 2 disabled) (BASE_INIT/INIT_VECTAB)
0041AE 7F41AE 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
0041B3 7F41B3 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize TIM ch2 -> PIT ch4 Interrupt Vectors -                            (BASE_INIT/INIT_VECTAB)
0041B8 7F41B8 18 0B 50 01 27              movb  #$50,INT_CFADDR  ; Load "CFADDR" with %01010000 (TIM ch2 -> PIT ch4    (BASE_INIT/INIT_VECTAB)
                                                                 ; into window)                                        (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set TIM ch2 disabled) (BASE_INIT/INIT_VECTAB)
0041BD 7F41BD 18 0B 01 01 28              movb  #$01,INT_CFDATA0 ; Load "CFDATA0" with %00000001 (Set (D24)(1to28)(Ign5)(3&2)  ; TIM ch2 ((D24)(1to28)(Ign5)(3&2)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set TIM ch1 disabled) (BASE_INIT/INIT_VECTAB)
0041C2 7F41C2 18 0B 01 01 29              movb  #$01,INT_CFDATA1 ; Load "CFDATA1" with %00000001 (Set (D5)(1to28)(Ign4)(4&7)   ; TIM ch1 ((D5)(1to28)(Ign4)(4&7)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set TIM ch0 disabled) (BASE_INIT/INIT_VECTAB)
0041C7 7F41C7 18 0B 01 01 2A              movb  #$01,INT_CFDATA2 ; Load "CFDATA2" with %00000001 (Set (D21)(1to28)(Ign3)(9&8)  ; TIM ch0 ((D21)(1to28)(Ign3)(9&8)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
0041CC 7F41CC 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set SCI7 disabled)   (BASE_INIT/INIT_VECTAB)
0041D1 7F41D1 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set PIT ch7 disabled) (BASE_INIT/INIT_VECTAB)
0041D6 7F41D6 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set PIT ch6 disabled) (BASE_INIT/INIT_VECTAB)
0041DB 7F41DB 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Set PIT ch5 disabled) (BASE_INIT/INIT_VECTAB)
0041E0 7F41E0 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Set PIT ch4 disabled) (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize TIM Pulse accumulator input edge -> TIM ch3 Interrupt Vectors -   (BASE_INIT/INIT_VECTAB)
0041E5 7F41E5 18 0B 40 01 27              movb  #$40,INT_CFADDR  ; Load "CFADDR" with %01000000 (TIM Pulse accumulator (BASE_INIT/INIT_VECTAB)
                                                                 ; input edge -> TIM ch3 into window)                  (BASE_INIT/INIT_VECTAB)
0041EA 7F41EA 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set TIM Pulse accumulator (BASE_INIT/INIT_VECTAB)
                                                                 ; input edge disabled)                                (BASE_INIT/INIT_VECTAB)
0041EF 7F41EF 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set TIM Pulse accumulator (BASE_INIT/INIT_VECTAB)
                                                                 ; A overflow disabled)                                (BASE_INIT/INIT_VECTAB)
0041F4 7F41F4 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set TIM overflow disabled) (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set TIM ch7 disabled) (BASE_INIT/INIT_VECTAB)
0041F9 7F41F9 18 0B 01 01 2B              movb  #$01,INT_CFDATA3 ; Load "CFDATA3" with %00000001 (Set (D7)(87to112)(Inj5)(7&2)  ; TIM ch7 ((D7)(87to112)(Inj5)(7&2)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Set TIM ch6 disabled) (BASE_INIT/INIT_VECTAB)
0041FE 7F41FE 18 0B 01 01 2C              movb  #$01,INT_CFDATA4 ; Load "CFDATA4" with %00000001 (Set (D1)(87to112)(Inj4)(5&8)  ; TIM ch6 ((D1)(87to112)(Inj4)(5&8)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Set TIM ch5 disabled) (BASE_INIT/INIT_VECTAB)
004203 7F4203 18 0B 01 01 2D              movb  #$01,INT_CFDATA5 ; Load "CFDATA5" with %00000001 (Set (D6)(87to112)(Inj3)(3&6)  ; TIM ch5 ((D6)(87to112)(Inj3)(3&6)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA6 ; Load "CFDATA6" with %00000000 (Set TIM ch4 disabled) (BASE_INIT/INIT_VECTAB)
004208 7F4208 18 0B 01 01 2E              movb  #$01,INT_CFDATA6 ; Load "CFDATA6" with %00000001 (Set (D3)(87to112)(Inj2)(9&4)  ; TIM ch4 ((D3)(87to112)(Inj2)(9&4)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ;*    movb  #$00,INT_CFDATA7 ; Load "CFDATA7" with %00000000 (Set TIM ch3 disabled) (BASE_INIT/INIT_VECTAB)
00420D 7F420D 18 0B 01 01 2F              movb  #$01,INT_CFDATA7 ; Load "CFDATA7" with %00000001 (Set (D1)(1to28)(Inj1)(1&10)  ; TIM ch3 ((D1)(1to28)(Inj1)(1&10)), ENABLED, CPU level 1 (BASE_INIT/INIT_VECTAB)
                                                                 ; priority level 1)                                   (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize ATD1 Compare interrupt -> ATD0 Compare interrupt Interrupt Vectors - (BASE_INIT/INIT_VECTAB)
004212 7F4212 18 0B 3C 01 27              movb  #$3C,INT_CFADDR  ; Load "CFADDR" with %00111100 (ATD1 Compare interrupt -> (BASE_INIT/INIT_VECTAB)
                                                                 ; ATD0 Compare interrupt into window)                 (BASE_INIT/INIT_VECTAB)
004217 7F4217 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set ATD1 Compare interrupt disabled) (BASE_INIT/INIT_VECTAB)
00421C 7F421C 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set ATD0 Compare interrupt disabled) (BASE_INIT/INIT_VECTAB)
004221 7F4221 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
004226 7F4226 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
00422B 7F422B 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
004230 7F4230 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
004235 7F4235 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
00423A 7F423A 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
                                      ; - Initialize Spurious interrupt -> XGATE software error Interrupt Vectors -    (BASE_INIT/INIT_VECTAB)
00423F 7F423F 18 0B 10 01 27              movb  #$10,INT_CFADDR  ; Load "CFADDR" with %00010000 (ATD1 Compare interrupt -> (BASE_INIT/INIT_VECTAB)
                                                                 ; ATD0 Compare interrupt into window)                 (BASE_INIT/INIT_VECTAB)
004244 7F4244 18 0B 00 01 28              movb  #$00,INT_CFDATA0 ; Load "CFDATA0" with %00000000 (Set Spurious interrupt (BASE_INIT/INIT_VECTAB)
                                                                 ; disabled)                                           (BASE_INIT/INIT_VECTAB)
004249 7F4249 18 0B 00 01 29              movb  #$00,INT_CFDATA1 ; Load "CFDATA1" with %00000000 (Set System Call disabled) (BASE_INIT/INIT_VECTAB)
00424E 7F424E 18 0B 00 01 2A              movb  #$00,INT_CFDATA2 ; Load "CFDATA2" with %00000000 (Set MPU access error disabled) (BASE_INIT/INIT_VECTAB)
004253 7F4253 18 0B 00 01 2B              movb  #$00,INT_CFDATA3 ; Load "CFDATA3" with %00000000 (Set XGATE software error (BASE_INIT/INIT_VECTAB)
                                                                 ; disabled)                                           (BASE_INIT/INIT_VECTAB)
004258 7F4258 18 0B 00 01 2C              movb  #$00,INT_CFDATA4 ; Load "CFDATA4" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
00425D 7F425D 18 0B 00 01 2D              movb  #$00,INT_CFDATA5 ; Load "CFDATA5" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
004262 7F4262 18 0B 00 01 2E              movb  #$00,INT_CFDATA6 ; Load "CFDATA0" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
004267 7F4267 18 0B 00 01 2F              movb  #$00,INT_CFDATA7 ; Load "CFDATA0" with %00000000 (Reserved)            (BASE_INIT/INIT_VECTAB)
00426C 7F426C MACRO                                           CLR_VECTAB_VARS ; Clear Vectab variables (vectabs_BPEM488.s) (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_VECTAB_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_VECTAB_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_VECTAB_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_VECTAB_VARS)
00426C 7F426C 79 10 00                   clr  ResetFlgs  ; Reset Flags bit field variable                              (BASE_INIT/CLR_VECTAB_VARS)
00426F 7F426F 79 10 01                   clr  VecDebug   ; Vector Table de-bug address holder                          (BASE_INIT/CLR_VECTAB_VARS)
004272 7F4272 MACRO                                           INIT_EEEM       ; Initialize EEPROM Emulation (eeem_BEEM488.s) (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/INIT_EEEM)
                                      ;***************************************************************************************** (BASE_INIT/INIT_EEEM)
                                      ;* - Macros -                                                                            * (BASE_INIT/INIT_EEEM)
                                      ;***************************************************************************************** (BASE_INIT/INIT_EEEM)
                                      ; - Initialization -                                                             (BASE_INIT/INIT_EEEM)
004272 7F4272 18 0B 0F 01 00              movb    #EEEM_FDIV_VAL, FCLKDIV ; Load Flash clock Divider Register          (BASE_INIT/INIT_EEEM)
004277 7F4277 MACRO                               INIT_CLOCK      ; Initialize Clocks and RTI(clock_BEEM488.s)         (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/INIT_CLOCK)
                                      ;***************************************************************************************** (BASE_INIT/INIT_CLOCK)
                                      ;* - Macros -                                                                            * (BASE_INIT/INIT_CLOCK)
                                      ;***************************************************************************************** (BASE_INIT/INIT_CLOCK)
                                      ;***************************************************************************************** (BASE_INIT/INIT_CLOCK)
                                      ; - Initialize the the clock generator and Phase Lock Loop for 50 Mhz            (BASE_INIT/INIT_CLOCK)
                                      ;   Bus Clock frequency.(See pages 473, 474 and 486,487)                         (BASE_INIT/INIT_CLOCK)
                                      ;                                                                                (BASE_INIT/INIT_CLOCK)
                                      ;   SYSCLK (bus clock) is half of selected source clock, either OSCCLK           (BASE_INIT/INIT_CLOCK)
                                      ;   or PLLCLK.The PLLCLK frequency is:                                           (BASE_INIT/INIT_CLOCK)
                                      ;   PLLCLCK = 2 * OSCCLK * (SYDIV + 1) / REFDIV + 1)                             (BASE_INIT/INIT_CLOCK)
                                      ;   We are using a 16 Mhz crystal oscilator for OSCCLK, So if SYNDIV             (BASE_INIT/INIT_CLOCK)
                                      ;   = 24 and REFDIV = 7 then PLLCLCK will be (2 * 16000000 *25) / 8 =            (BASE_INIT/INIT_CLOCK)
                                      ;   100 Mhz. PLLCLK / 2 = 50 Mhz. Bus Clock.                                     (BASE_INIT/INIT_CLOCK)
                                      ;   From table 11-2 for 100MHz VCO clock VCOFRQ[1:0] = 11 so                     (BASE_INIT/INIT_CLOCK)
                                      ;   so SYNR = %11011000 = $D8                                                    (BASE_INIT/INIT_CLOCK)
                                      ;   From table 11-3 for 2MHz REFLCK frequency REFFRQ[1:0] = 00 so                (BASE_INIT/INIT_CLOCK)
                                      ;   so REFDV = %00000111 = $07                                                   (BASE_INIT/INIT_CLOCK)
                                      ;***************************************************************************************** (BASE_INIT/INIT_CLOCK)
004277 7F4277 18 0B FF 00 37              movb  #$FF,CRGFLG     ; Clear all flags                                      (BASE_INIT/INIT_CLOCK)
00427C 7F427C 18 0B D8 00 34              movb  #$D8,SYNR       ; Load "SYNR" with %11011000                           (BASE_INIT/INIT_CLOCK)
004281 7F4281 18 0B 07 00 35              movb  #$07,REFDV      ; Load "REFDV" with %00000111                          (BASE_INIT/INIT_CLOCK)
004286 7F4286 4F 37 08 FC                 brclr CRGFLG,LOCK,*+0 ; Loop until LOCK flag is cleared                      (BASE_INIT/INIT_CLOCK)
00428A 7F428A 4C 39 80                    bset  CLKSEL,PLLSEL   ; Set "PLL Select bit" to derive system clocks from "PLLCLK" (BASE_INIT/INIT_CLOCK)
00428D 7F428D MACRO                               INIT_RTI        ; Initialize Real Time Interrupt (rti_BEEM488.s)     (BASE_INIT)
                                      ;***************************************************************************************** (BASE_INIT/INIT_RTI)
                                      ; - Initialize Real Time Interrupt for 125uS period -                            (BASE_INIT/INIT_RTI)
                                      ;   OSCLOCK / 2 = Frequency divide rate                                          (BASE_INIT/INIT_RTI)
                                      ;   16,000,000/2=8,000,000                                                       (BASE_INIT/INIT_RTI)
                                      ;   1/8,000,000=0.000125 Sec period                                              (BASE_INIT/INIT_RTI)
                                      ;***************************************************************************************** (BASE_INIT/INIT_RTI)
00428D 7F428D 18 0B 81 00 3B              movb  #$81,RTICTL     ; Load "RTICTL with %10000001 (Decimal                 (BASE_INIT/INIT_RTI)
                                                                ; based divider,125uS period)                          (BASE_INIT/INIT_RTI)
004292 7F4292 4C 37 80                    bset  CRGFLG,RTIF     ; Clear Real Time Interrupt Flag                       (BASE_INIT/INIT_RTI)
004295 7F4295 4C 38 80                    bset  CRGINT,RTIE     ; Enable RTI                                           (BASE_INIT/INIT_RTI)
004298 7F4298 MACRO                                           CLR_RTI_VARS    ; Clear RTI variables  (rti_BEEM488.s)   (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_RTI_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_RTI_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_RTI_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_RTI_VARS)
004298 7F4298 79 10 02                   clr uSx125     ; 125 microsecond counter                                      (BASE_INIT/CLR_RTI_VARS)
00429B 7F429B 79 10 03                   clr mS         ; 1 millisecond counter                                        (BASE_INIT/CLR_RTI_VARS)
00429E 7F429E 79 10 04                   clr mSx250     ; 250 millisecond counter                                      (BASE_INIT/CLR_RTI_VARS)
0042A1 7F42A1 79 10 05                   clr clock      ; Time rate flag marker bit field                              (BASE_INIT/CLR_RTI_VARS)
0042A4 7F42A4 MACRO                               INIT_SCI0       ; Initialize SCI0 (sci0_BEEM488.s)                   (BASE_INIT)
                                      ;***************************************************************************************** (BASE_INIT/INIT_SCI0)
                                      ; - Initialize the SCI0 interface for 115,200 Baud Rate                          (BASE_INIT/INIT_SCI0)
                                      ;   When IREN = 0, SCI Baud Rate = SCI bus clock / 16 x SBR[12-0]                (BASE_INIT/INIT_SCI0)
                                      ;   or SCI0BDH:SCI0BDL = (Bus Freq/16)/115200 = 21.70                            (BASE_INIT/INIT_SCI0)
                                      ;   27.1 rounded = 27 = $1B                                                      (BASE_INIT/INIT_SCI0)
                                      ;***************************************************************************************** (BASE_INIT/INIT_SCI0)
0042A4 7F42A4 18 0B 00 00 C8              movb  #$00,SCI0BDH  ; Load SCI0BDH with %01010100, (IR disabled, 1/16 narrow pulse (BASE_INIT/INIT_SCI0)
                                                              ; width, no prescale Hi Byte)                            (BASE_INIT/INIT_SCI0)
0042A9 7F42A9 18 0B 1B 00 C9              movb  #$1B,SCI0BDL  ; Load SCI0BDL with decimal 27, prescale Lo byte         (BASE_INIT/INIT_SCI0)
                                                              ;(115,200 Baud Rate)                                     (BASE_INIT/INIT_SCI0)
0042AE 7F42AE 79 00 CA                    clr   SCI0CR1       ; Load SCI0CR1 with %00000000(Normal operation, SCI enabled (BASE_INIT/INIT_SCI0)
                                                              ; in wait mode. Internal receiver source. One start bit,8 data (BASE_INIT/INIT_SCI0)
                                                              ; bits, one stop bit. Idle line wakeup. No parity.)      (BASE_INIT/INIT_SCI0)
0042B1 7F42B1 18 0B 24 00 CB              movb  #$24,SCI0CR2  ; Load SCI0CR2 with %00100100(TDRE interrupts disabled. TCIE (BASE_INIT/INIT_SCI0)
0042B6 7F42B6 MACRO                                           CLR_SCI0_VARS   ; Clear SCI0 variables  (sci0_BEEM488.s) (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_SCI0_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_SCI0_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_SCI0_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_SCI0_VARS)
0042B6 7F42B6 79 10 06                   clr  txgoalMSB    ; SCI number of bytes to send/rcv Hi byte                   (BASE_INIT/CLR_SCI0_VARS)
0042B9 7F42B9 79 10 07                   clr  txgoalLSB    ; SCI number of bytes to send/rcv Lo byte                   (BASE_INIT/CLR_SCI0_VARS)
0042BC 7F42BC 18 79 10 08                clrw txcnt        ; SCI count of bytes sent/rcvd                              (BASE_INIT/CLR_SCI0_VARS)
0042C0 7F42C0 79 10 0A                   clr  rxoffsetMSB  ; SCI offset from start of page Hi byte                     (BASE_INIT/CLR_SCI0_VARS)
0042C3 7F42C3 79 10 0B                   clr  rxoffsetLSB  ; SCI offset from start of page lo byte                     (BASE_INIT/CLR_SCI0_VARS)
0042C6 7F42C6 79 10 0C                   clr  rxmode       ; SCI receive mode selector                                 (BASE_INIT/CLR_SCI0_VARS)
0042C9 7F42C9 79 10 0D                   clr  txmode       ; SCI transmit mode selector                                (BASE_INIT/CLR_SCI0_VARS)
0042CC 7F42CC 79 10 0E                   clr  pageID       ; SCI page identifier                                       (BASE_INIT/CLR_SCI0_VARS)
0042CF 7F42CF 79 10 0F                   clr  txcmnd       ; SCI command character identifier                          (BASE_INIT/CLR_SCI0_VARS)
0042D2 7F42D2 79 10 10                   clr  dataMSB      ; SCI data Most Significant Byte received                   (BASE_INIT/CLR_SCI0_VARS)
0042D5 7F42D5 79 10 11                   clr  dataLSB      ; SCI data Least Significant Byte received                  (BASE_INIT/CLR_SCI0_VARS)
0042D8 7F42D8 MACRO                               INIT_ADC0       ; Initialize ADC0 channels (adc0_BEEM488.s)          (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/INIT_ADC0)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ADC0)
                                      ;* - Macros -                                                                            * (BASE_INIT/INIT_ADC0)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ADC0)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ADC0)
                                      ; - Initialize Analog to Digital Converter (ATD0) for continuous conversions     (BASE_INIT/INIT_ADC0)
                                      ;   8.3MHz ATDCLK period = 0.00000012048 Sec.                                    (BASE_INIT/INIT_ADC0)
                                      ;   10 bit ATD Conversion period = 41 ATDCLK cycles(ref page 1219)               (BASE_INIT/INIT_ADC0)
                                      ;   Sample time per channel = 24+2 for discharge capacitor = 26 ATDCLK cycles    (BASE_INIT/INIT_ADC0)
                                      ;   Sample time for all 16 channels = (41+26)x16=1072 ATDCLK periods = 0.00012915 Sec. (~129uS) (BASE_INIT/INIT_ADC0)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ADC0)
0042D8 7F42D8 18 03 00 00 02 CC           movw  #$0000,ATD0DIENH  ; Load ATD0 Input Enable Register                    (BASE_INIT/INIT_ADC0)
                                                                  ; Hi byte and Lo byte with                           (BASE_INIT/INIT_ADC0)
                                                                  ; %0000000000000000 (all pins ADC)                   (BASE_INIT/INIT_ADC0)
0042DE 7F42DE 18 0B 0F 02 C0              movb  #$0F,ATD0CTL0 ; Load "ATD0CTL0" with %00001111                         (BASE_INIT/INIT_ADC0)
                                                              ; (wrap at AN15)                                         (BASE_INIT/INIT_ADC0)
                                                                          ;             ^  ^                           (BASE_INIT/INIT_ADC0)
                                                                          ;    WRAP-----+--+                           (BASE_INIT/INIT_ADC0)
0042E3 7F42E3 18 0B 30 02 C1              movb  #$30,ATD0CTL1 ; Load "ATD0CTL1" with %00110000                         (BASE_INIT/INIT_ADC0)
                                                              ; (no external trigger, 10 bit resolution,               (BASE_INIT/INIT_ADC0)
                                                              ; discharge cap before conversion)                       (BASE_INIT/INIT_ADC0)
                                                              ;         ^^^^^  ^                                       (BASE_INIT/INIT_ADC0)
                                                              ;ETRIGSEL-+||||  |                                       (BASE_INIT/INIT_ADC0)
                                                              ;    SRES--++||  |                                       (BASE_INIT/INIT_ADC0)
                                                              ; SMP_DIS----+|  |                                       (BASE_INIT/INIT_ADC0)
                                                              ; ETRIGCH-----+--+                                       (BASE_INIT/INIT_ADC0)
                                      ;*    movb  #$62,ATD0CTL2 ; Load "ATD0CTL2" with %01100010                       (BASE_INIT/INIT_ADC0)
                                                              ;(fast flag clear, continue in stop,                     (BASE_INIT/INIT_ADC0)
                                                              ; no external trigger, Sequence                          (BASE_INIT/INIT_ADC0)
                                                              ; complete interrupt enabled,                            (BASE_INIT/INIT_ADC0)
                                                              ; Compare interrupt disabled)                            (BASE_INIT/INIT_ADC0)
                                                              ;          ^^^^^^^                                       (BASE_INIT/INIT_ADC0)
                                                              ;    AFFC--+||||||                                       (BASE_INIT/INIT_ADC0)
                                                              ; ICLKSTP---+|||||                                       (BASE_INIT/INIT_ADC0)
                                                              ; ETRIGLE----+||||                                       (BASE_INIT/INIT_ADC0)
                                                              ;  ETRIGP-----+|||                                       (BASE_INIT/INIT_ADC0)
                                                              ;  ETRIGE------+||                                       (BASE_INIT/INIT_ADC0)
                                                              ;   ASCIE-------+|                                       (BASE_INIT/INIT_ADC0)
                                                              ;  ACMPIE--------+                                       (BASE_INIT/INIT_ADC0)
0042E8 7F42E8 18 0B 60 02 C2              movb  #$60,ATD0CTL2 ; Load "ATD0CTL2" with %01100000                         (BASE_INIT/INIT_ADC0)
                                                              ;(fast flag clear, continue in stop,                     (BASE_INIT/INIT_ADC0)
                                                              ; no external trigger, Sequence                          (BASE_INIT/INIT_ADC0)
                                                              ; complete interrupt disabled,                           (BASE_INIT/INIT_ADC0)
                                                              ; Compare interrupt disabled)                            (BASE_INIT/INIT_ADC0)
                                                              ;          ^^^^^^^                                       (BASE_INIT/INIT_ADC0)
                                                              ;    AFFC--+||||||                                       (BASE_INIT/INIT_ADC0)
                                                              ; ICLKSTP---+|||||                                       (BASE_INIT/INIT_ADC0)
                                                              ; ETRIGLE----+||||                                       (BASE_INIT/INIT_ADC0)
                                                              ;  ETRIGP-----+|||                                       (BASE_INIT/INIT_ADC0)
                                                              ;  ETRIGE------+||                                       (BASE_INIT/INIT_ADC0)
                                                              ;   ASCIE-------+|                                       (BASE_INIT/INIT_ADC0)
                                                              ;  ACMPIE--------+                                       (BASE_INIT/INIT_ADC0)
0042ED 7F42ED 18 0B 80 02 C3              movb  #$80,ATD0CTL3 ; Load "ATD0CTL3" with %10000000                         (BASE_INIT/INIT_ADC0)
                                                              ;(right justifed data, 16 conversions,                   (BASE_INIT/INIT_ADC0)
                                                              ; no Fifo, no freeze)                                    (BASE_INIT/INIT_ADC0)
                                                              ;         ^^^^^^^^                                       (BASE_INIT/INIT_ADC0)
                                                              ;     DJM-+|||||||                                       (BASE_INIT/INIT_ADC0)
                                                              ;     S8C--+||||||                                       (BASE_INIT/INIT_ADC0)
                                                              ;     S4C---+|||||                                       (BASE_INIT/INIT_ADC0)
                                                              ;     S2C----+||||                                       (BASE_INIT/INIT_ADC0)
                                                              ;     S1C-----+|||                                       (BASE_INIT/INIT_ADC0)
                                                              ;    FIFO------+||                                       (BASE_INIT/INIT_ADC0)
                                                              ;     FRZ-------++                                       (BASE_INIT/INIT_ADC0)
0042F2 7F42F2 18 0B E2 02 C4              movb  #$E2,ATD0CTL4 ; Load "ATD0CTL4" with %11100010                         (BASE_INIT/INIT_ADC0)
0042F7 7F42F7 MACRO                               INIT_GPIO       ; Initialize GPIOs (gpio_BEEM488.s)                  (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ;* - Macros -                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ;*    This Macro initializes all GPIO ports for the BEPM simulator                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port AD:                                                                           * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD00 - ATD0  0 (RV15)(cltADC)     (analog, no pull) temperature sensor           * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD01 - ATD0  1 (RV14)(matADC)     (analog, no pull) temperature sensor           * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD02 - ATD0  2 (RV13)(eftADC)     (analog, no pull) temperature sensor           * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD03 - ATD0  3 (RV12)(eotADC)     (analog, no pull) temperature sensor           * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD04 - ATD0  4 (RV11)             (analog, no pull) temperature sensor           * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD05 - ATD0  5 (RV10)(mapADC)     (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD06 - ATD0  6 (RV9) (baroADC)    (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD07 - ATD0  7       (batADC)     (analog, no pull) hard wired Bat volts only    * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD08 - ATD0  8 (RV8) (ftrmADC)    (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD09 - ATD0  9 (RV7) (itrmADC)    (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD10 - ATD0 10 (RV6) (egtADC)     (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD11 - ATD0 11 (RV5) (eopADC)     (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD12 - ATD0 12 (RV4) (efpADC)     (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD13 - ATD0 13 (RV3) (tpsADC)     (analog, no pull) general purpose              * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD14 - ATD0 14 (RV2) (iacADC)     (analog, no pull) external 0-5v option         * (BASE_INIT/INIT_GPIO)
                                      ;*     PAD15 - ATD0 15 (RV1) (egoADC)     (analog, no pull) external 0-5v option         * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port A:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PA0 - SW7(57to82)                          (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PA1 - SW3(57to82)                          (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PA2 - SW6(57to82)                          (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PA3 - SW2(57to82)(Fuel Trim Enable)        (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PA4 - SW5(57to82)(Ignition Trim Enable)    (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PA5 - SW1(57to82)                          (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PA6 - SW2 (run/load)(CPU)                  (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PA7 - SW4(57to82)                          (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port B:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PB0 - LED red (D9) (1to28)(FuelPump)                               (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*     PB1 - LED red (D23)(1to28)(ASDRelay)                               (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*     PB2 - LED red (D4) (1to28)                                          (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*     PB3 - LED red (D20)(1to28)                                          (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*     PB4 - LED red (D10)(1to28)                                          (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*     PB5 - LED red (D1) (29to56)(EngAlarm)                               (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*     PB6 - LED red (D10)(29to56)(AIOT)                                   (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*     PB7 - LED red (D2) (29to56)                                         (output, low) * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port C: - Not Available in 112 LQFP                                                * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port D: - Not Available in 112 LQFP                                                * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port E:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PE0 - XIRQ                                 (input, pull-up) gear tooth K1         * (BASE_INIT/INIT_GPIO)
                                      ;*     PE1 - IRQ                                  (input, pull-up) gear tooth K2         * (BASE_INIT/INIT_GPIO)
                                      ;*     PE2 - SD card detect                       (input, pull_up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PE3 - SW5(29to56)(AudAlrmSil)              (input, pull-up) momentary contact     * (BASE_INIT/INIT_GPIO)
                                      ;*     PE4 - SW2(29to56)(Send Date/Time)          (input, pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PE5 - SW4 (MODA) (hard wired to ground)    (input, pull-up) SW4 not in service    * (BASE_INIT/INIT_GPIO)
                                      ;*     PE6 - SW1 (MODB)( hard wired to ground)    (input, pull-up) SW1 not in service    * (BASE_INIT/INIT_GPIO)
                                      ;*     PE7 - SW6(29to56)(Decel Fuel Cut Disable)  (input, pull-up) momentary contact     * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port F: - Not Available in 112 LQFP                                                * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port H:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PH0 - SD data out     (MISO1)           (input,   pull-down)                      * (BASE_INIT/INIT_GPIO)
                                      ;*     PH1 - SD CMD          (MOSI1)           (output, Hi      )                        * (BASE_INIT/INIT_GPIO)
                                      ;*     PH2 - SD CLK          (SCK1)            (output, Hi      )                        * (BASE_INIT/INIT_GPIO)
                                      ;*     PH3 - SD CD           (SS1)             (output, Hi      )                        * (BASE_INIT/INIT_GPIO)
                                      ;*     PH4 - Real time clock (MISO2)           (input,  pull-down)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PH5 - Real time clock (MOSI2)           (output, Hi      )                        * (BASE_INIT/INIT_GPIO)
                                      ;*     PH6 - Real time clock (SCK2)            (output, Hi      )                        * (BASE_INIT/INIT_GPIO)
                                      ;*     PH7 - Real time clock (SS2)             (output, Hi      )                        * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port J:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ0 - SCI2 RXD                            (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ1 - SCI2 TXD                            (output, high   )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ2 - Not Available in 112 LQFP           (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ3 - Not Available in 112 LQFP           (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ4 - Not Available in 112 LQFP           (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ5 - Not Available in 112 LQFP           (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ6 - SW4(87to112)                        (input,  pull-up) momentary contact     * (BASE_INIT/INIT_GPIO)
                                      ;*     PJ7 - SW2(87to112)                        (input,  pull-up) momentary contact     * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port K:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PK0 - LED red (D22)(1to28)                                      (output, low    ) * (BASE_INIT/INIT_GPIO)
                                      ;*     PK1 - LED red (D6) (1to28)                                      (output, low    ) * (BASE_INIT/INIT_GPIO)
                                      ;*     PK2 - LED red (D25)(1to28)(Rev counter)                         (output, low    ) * (BASE_INIT/INIT_GPIO)
                                      ;*     PK3 - LED red (D2) (1to28)                                      (output, low    ) * (BASE_INIT/INIT_GPIO)
                                      ;*     PK4 - LED red (D19)(1to28)                                      (output, low    ) * (BASE_INIT/INIT_GPIO)
                                      ;*     PK5 - LED red (D3) (1to28)                                      (output, low    ) * (BASE_INIT/INIT_GPIO)
                                      ;*     PK6 - Not Available in 112 LQFP                                 (input,  pull-up) * (BASE_INIT/INIT_GPIO)
                                      ;*     PK7 - LED red (D2) (87to112)(TS real time variables toggle)     (output, low    ) * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port M:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PM0 - RXCAN0                              (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PM1 - TXCAN0                              (output, high   )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PM2 - RXCAN1                              (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PM3 - TXCAN1                              (output, high   )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PM4 - SW3(87to112)                        (input,  pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PM5 - SW1(87to112)                        (input,  pull-up) maintained contact    * (BASE_INIT/INIT_GPIO)
                                      ;*     PM6 - SCI3 RXD                            (input,  pull-up)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PM7 - SCI3 TXD                            (output, high   )                       * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port L: - Not Available in 112 LQFP                                                * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port P:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PP0(P4) - TIM1 OC0 (D21)(1to28)(Ign3)(9&8)     (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP1(P3) - TIM1 OC1 (D5)(1to28)(Ign4)(4&7)      (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP2(P2) - TIM1 OC2 (D24)(1to28)(Ign5)(3&2)     (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP3(P1) - TIM1 OC3 (D1)(1to28)(Inj1)(1&10)     (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP4(P112) - TIM1 OC4 (D3)(87to112)(Inj2)(9&4)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP5(P111) - TIM1 OC5 (D6)(87to112)(Inj3)(3&6)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP6(P110) - TIM1 OC6 (D1)(87to112)(Inj4)(5&8)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP7(P109) - TIM1 OC7 (D7)(87to112)(Inj5)(7&2)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port R: - Not Available in 112 LQFP                                                * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port S:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PS0 - SCI0 RXD                          (input,  pull-up  )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PS1 - SCI0 TXD                          (output, high     )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PS2 - SCI1 RXD                          (input,  pull-up  )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PS3 - SCI1 TXD                          (output, high     )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PS4 - MISO0 (P8)                        (input,  pull-down)                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PS5 - MOSI0 (P8)                        (output, low      )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PS6 - SCK0  (P8)                        (output, low      )                       * (BASE_INIT/INIT_GPIO)
                                      ;*     PS7 - SS0   (P8)                        (output, high     )                       * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;*    Port T:                                                                            * (BASE_INIT/INIT_GPIO)
                                      ;*     PT0(P9) - IOC0 OC0 LED red  (D7)(1to28)(Ign1)(1&6)   (output, low)                * (BASE_INIT/INIT_GPIO)
                                      ;*     PT1(P10) - IOC1 IC1 (CASc)(Tooth decoder)(input,  pull-down) VR sensor P9         * (BASE_INIT/INIT_GPIO)
                                      ;*     PT2(P11) - IOC2 OC2 LED red  (D8)(1to28)(Ign2)(10&5)  (output, low)               * (BASE_INIT/INIT_GPIO)
                                      ;*     PT3(P12) - IOC3 IC3 (VSSb)(Vehicle Speed)(input,  pull-down) VR sensor P10        * (BASE_INIT/INIT_GPIO)
                                      ;*     PT4(P15) - IOC4 IC4 (CASa)(RPM)          (input,  pull-down) Volt to Freq U1      * (BASE_INIT/INIT_GPIO)
                                      ;*     PT5(P16) - IOC5 IC5 (CASd)(Tooth decoder)(input,  pull-down) gear tooth K2 Cam    * (BASE_INIT/INIT_GPIO)
                                      ;*     PT6(P17) - IOC6 IC6 (VSSa)(Vehicle Speed)(input,  pull-down) Volt to Freq U2      * (BASE_INIT/INIT_GPIO)
                                      ;*     PT7(P18) - IoC7 IC7 (CASb)(Tooth decoder)(input,  pull-down) gear tooth K3 Crank  * (BASE_INIT/INIT_GPIO)
                                      ;*                                                                                       * (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port A. General purpose I/Os. All pins inputs -                   (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
0042F7 7F42F7 79 00 02                    clr   DDRA        ; Load %00000000 into Port A Data Direction                (BASE_INIT/INIT_GPIO)
                                                            ; Register(all pins inputs)                                (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port B. General purpose I/Os. all pins outputs -                  (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
0042FA 7F42FA 18 0B FF 00 03              movb  #$FF,DDRB   ; Load %11111111 into Port B Data                          (BASE_INIT/INIT_GPIO)
                                                            ; Direction Register (all pins outputs)                    (BASE_INIT/INIT_GPIO)
0042FF 7F42FF 18 0B 00 00 01              movb  #$00,PORTB  ; Load %00000000 into Port B Data                          (BASE_INIT/INIT_GPIO)
                                                            ; Register (all pin states low)                            (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port E. General purpose I/Os. All pins inputs -                   (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
004304 7F4304 79 00 09                    clr   DDRE        ; Load %00000000 into Port E Data                          (BASE_INIT/INIT_GPIO)
                                                            ; Direction Register (all pins inputs)                     (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize SPI1 and SPI2 on alternate ports -                                (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ;    movb  #$60 MODRR  ; Load %01100000 into Module Routing Register (SPI NOT USED!!!!!!!) (BASE_INIT/INIT_GPIO)
                                                            ; SPI1 MISO PH0                                            (BASE_INIT/INIT_GPIO)
                                                            ; SPI1 MOSI PH1                                            (BASE_INIT/INIT_GPIO)
                                                            ; SPI1 SCK PH2                                             (BASE_INIT/INIT_GPIO)
                                                            ; SPI1 SS PH3                                              (BASE_INIT/INIT_GPIO)
                                                            ; SPI2 MISO PH4                                            (BASE_INIT/INIT_GPIO)
                                                            ; SPI2 MOSI PH5                                            (BASE_INIT/INIT_GPIO)
                                                            ; SPI2 SCK PH6                                             (BASE_INIT/INIT_GPIO)
                                                            ; SPI2 SS PH7                                              (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port H. General purpose I/Os. Pins 7,6,5,3,2,1 outputs            (BASE_INIT/INIT_GPIO)
                                      ;   pins 4,0 inputs (all outputs initiialized Hi)                                (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
004307 7F4307 18 0B EE 02 60              movb #$EE PTH     ; Load Port H with %11101110 (initialize pins Hi)          (BASE_INIT/INIT_GPIO)
00430C 7F430C 18 0B EE 02 62              movb #$EE,DDRH    ; Load Port H Data Direction Register                      (BASE_INIT/INIT_GPIO)
                                                            ; with %11101110 (pins 7,6,5,3,2,1                         (BASE_INIT/INIT_GPIO)
                                                            ; outputs, pins 4,0 inputs)                                (BASE_INIT/INIT_GPIO)
004311 7F4311 18 03 11 11 02 64           movw #$1111,PERH  ; Load Port H Pull Device Enable                           (BASE_INIT/INIT_GPIO)
                                                            ; Register and Port H Polarity Select                      (BASE_INIT/INIT_GPIO)
                                                            ; Register with%0001000100010001                           (BASE_INIT/INIT_GPIO)
                                                            ; (pull-downs and rising edge on pins                      (BASE_INIT/INIT_GPIO)
                                                            ; 4 and 0)                                                 (BASE_INIT/INIT_GPIO)
                                      ;*    movb #$FF DDRH    ; Load Port H Data Direction Register                    (BASE_INIT/INIT_GPIO)
                                                            ; with %11111111 (all pins outputs)                        (BASE_INIT/INIT_GPIO)
                                      ;*    movb #$FF PTH     ; Load Port H with %11111111 (initialize pins Hi)        (BASE_INIT/INIT_GPIO)
                                      ;*    movb #$00 PTH     ; Load Port H with %00000000 (initialize pins Lo)        (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port J. General purpose I/Os.                                     (BASE_INIT/INIT_GPIO)
                                      ;   PJ1 output, all others inputs.                                               (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
004317 7F4317 18 0B 02 02 68              movb  #$02, PTJ   ; Load Port J Data Register with                           (BASE_INIT/INIT_GPIO)
                                                            ; %00000010(initialize PJ1 Hi)                             (BASE_INIT/INIT_GPIO)
00431C 7F431C 18 0B 02 02 6A                  movb  #$02, DDRJ  ; Load Port J Data Direction Register                  (BASE_INIT/INIT_GPIO)
                                                            ; with %00000010 (PJ1 output (SCI2 TXD)                    (BASE_INIT/INIT_GPIO)
                                                            ; all others inputs)                                       (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port K. General purpose I/Os. All pins outputs, inital            (BASE_INIT/INIT_GPIO)
                                      ;   state low.                                                                   (BASE_INIT/INIT_GPIO)
                                      ;   NOTE! - PK6 not available in 112 pin package.                                (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
004321 7F4321 18 0B BF 00 33              movb  #$BF,DDRK   ; Load %10111111 into Port K Data                          (BASE_INIT/INIT_GPIO)
                                                            ; (PE6 N/C, set to input, all others                       (BASE_INIT/INIT_GPIO)
                                                            ; outputs)                                                 (BASE_INIT/INIT_GPIO)
004326 7F4326 18 0B 00 00 32              movb  #$00,PORTK  ; Load %00000000 into Port K Data                          (BASE_INIT/INIT_GPIO)
                                                            ; Register (all pin states low)                            (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Set pull ups for Port K (PK6), BKGD, Port E and Port A                       (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
00432B 7F432B 18 0B D1 00 0C              movb  #$D1,PUCR   ; Load %11010001 into Pull Up Control                      (BASE_INIT/INIT_GPIO)
                                                            ; Register (pullups enabled Port K,                        (BASE_INIT/INIT_GPIO)
                                                            ; BKGD, Port E and Port A                                  (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port M. General purpose I/Os. 7,3,1 outputs, inital               (BASE_INIT/INIT_GPIO)
                                      ;   state high, all others inputs.                                               (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
004330 7F4330 18 0B 8A 02 50              movb  #$8A,PTM    ; Load Port M Data Register with                           (BASE_INIT/INIT_GPIO)
                                                            ; %10001010                                                (BASE_INIT/INIT_GPIO)
004335 7F4335 18 0B 8A 02 52                  movb  #$8A,DDRM   ; Load Port M Data direction Register                  (BASE_INIT/INIT_GPIO)
                                                            ; with %10001010 (outputs on Pins 7,3,1                    (BASE_INIT/INIT_GPIO)
                                                            ; inputs on pins 6,5,4,2,0)                                (BASE_INIT/INIT_GPIO)
00433A 7F433A 18 0B 75 02 54                  movb  #$75,PERM   ; Load Port M Pull Device Enable                       (BASE_INIT/INIT_GPIO)
                                                            ; Register with %01110101 (pull ups                        (BASE_INIT/INIT_GPIO)
                                                            ; enabled on pins 6,5,4,2,0)                               (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port P. General purpose I/Os. all pins outputs                    (BASE_INIT/INIT_GPIO)
                                      ;*     PP0(P4) - TIM1 OC0 (D21)(1to28)(Ign3)(9&8)     (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP1(P3) - TIM1 OC1 (D5)(1to28)(Ign4)(4&7)      (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP2(P2) - TIM1 OC2 (D24)(1to28)(Ign5)(3&2)     (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP3(P1) - TIM1 OC3 (D1)(1to28)(Inj1)(1&10)     (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP4(P112) - TIM1 OC4 (D3)(87to112)(Inj2)(9&4)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP5(P111) - TIM1 OC5 (D6)(87to112)(Inj3)(3&6)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP6(P110) - TIM1 OC6 (D1)(87to112)(Inj4)(5&8)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;*     PP7(P109) - TIM1 OC7 (D7)(87to112)(Inj5)(7&2)  (output, low) analog Vout option   * (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ;* - NOTE! Port P is initialized in tim_BEEM488.s                                (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
                                      ; - Initialize Port S. General purpose I/Os. outputs pins 7,6,5,3,1              (BASE_INIT/INIT_GPIO)
                                      ;   inputs pins 4,2,0                                                            (BASE_INIT/INIT_GPIO)
                                      ;***************************************************************************************** (BASE_INIT/INIT_GPIO)
00433F 7F433F 18 0B 8A 02 48              movb  #$8A,PTS    ; Load Port S Data Register with                           (BASE_INIT/INIT_GPIO)
                                                            ; %10001010(initialize PS7,3,1 Hi,                         (BASE_INIT/INIT_GPIO)
                                                            ; PS6,5,4,2,0 Lo                                           (BASE_INIT/INIT_GPIO)
004344 7F4344 18 0B EA 02 4A              movb  #$EA,DDRS   ; Load Port S Data Direction Register                      (BASE_INIT/INIT_GPIO)
                                                            ; with %11101010 (outputs on PS7,6,5,                      (BASE_INIT/INIT_GPIO)
                                                            ; 3,1 inputs on PS4,2,0)                                   (BASE_INIT/INIT_GPIO)
004349 7F4349 18 0B 10 02 4D              movb  #$10,PPSS   ; Load Port S Polarity Select Register                     (BASE_INIT/INIT_GPIO)
00434E 7F434E MACRO                                           INIT_ECT        ; Initialize Enhanced Captuer Timers (ect_BEEM488.s) (BASE_INIT)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ECT)
                                      ; - Initialize Port T. Enhanced Capture Channels IOC7-IOC0. pg 527               (BASE_INIT/INIT_ECT)
                                      ;*     PT0(P9) - IOC0 OC0 LED red  (D7)(1to28)(Ign1)(1&6)   (output, low)                * (BASE_INIT/INIT_ECT)
                                      ;*     PT1(P10) - IOC1 IC1 (CASc)(Tooth decoder)(input,  pull-down) VR sensor P9         * (BASE_INIT/INIT_ECT)
                                      ;*     PT2(P11) - IOC2 OC2 LED red  (D8)(1to28)(Ign2)(10&5)  (output, low)               * (BASE_INIT/INIT_ECT)
                                      ;*     PT3(P12) - IOC3 IC3 (VSSb)(Vehicle Speed)(input,  pull-down) VR sensor P10        * (BASE_INIT/INIT_ECT)
                                      ;*     PT4(P15) - IOC4 IC4 (CASa)(RPM)          (input,  pull-down) Volt to Freq U1      * (BASE_INIT/INIT_ECT)
                                      ;*     PT5(P16) - IOC5 IC5 (CASd)(Tooth decoder)(input,  pull-down) gear tooth K2 Cam    * (BASE_INIT/INIT_ECT)
                                      ;*     PT6(P17) - IOC6 IC6 (VSSa)(Vehicle Speed)(input,  pull-down) Volt to Freq U2      * (BASE_INIT/INIT_ECT)
                                      ;*     PT7(P18) - IoC7 IC7 (CASb)(Tooth decoder)(input,  pull-down) gear tooth K3 Crank  * (BASE_INIT/INIT_ECT)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ECT)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ECT)
                                      ;* - The crank trigger wheel on the Dodge V10 has 5 pairs of two notches. Each notch is (BASE_INIT/INIT_ECT)
                                      ;    3 degrees wide. The falling edges of the notch pairs are 18 degrees apart and the (BASE_INIT/INIT_ECT)
                                      ;    pairs are 54 degrees apart. Any 3 consecutive notches will cover 72 degrees. The (BASE_INIT/INIT_ECT)
                                      ;    time period of 72 degrees can be used as a base to calculate RPM, ignition and (BASE_INIT/INIT_ECT)
                                      ;    injection timing. In order to determine the best timer rate it has to be able to (BASE_INIT/INIT_ECT)
                                      ;    accurately determine the period between notches at cranking speeds before rolling (BASE_INIT/INIT_ECT)
                                      ;    over and still have good resolution at the highest expected engine speed. Rather (BASE_INIT/INIT_ECT)
                                      ;    than make this compromise the decision was made to use the 5.12uS time base in crank (BASE_INIT/INIT_ECT)
                                      ;    mode and the 2.56uS time base in run mode. The interrupts for the crankshaft and (BASE_INIT/INIT_ECT)
                                      ;    camshaft sensors are handled in the state_BPEM488.s module. It is here that that (BASE_INIT/INIT_ECT)
                                      ;    the 72 degree period is calculated and the determination of crank mode and run mode (BASE_INIT/INIT_ECT)
                                      ;    are made.                                                                   (BASE_INIT/INIT_ECT)
                                      ;                                                                                (BASE_INIT/INIT_ECT)
                                      ;    5000RPM = 83.333Hz = .012Sec period / 5 =.0024Sec per 72 degrees            (BASE_INIT/INIT_ECT)
                                      ;                                                                                (BASE_INIT/INIT_ECT)
                                      ;    A prescale of 256 results in a 5.12uS clock tick with a maximum period of 335.5392mS (BASE_INIT/INIT_ECT)
                                      ;    Lowest cranking speed can be:                                               (BASE_INIT/INIT_ECT)
                                      ;    .3355392 * 5 = 1.677696Sec = .596Hz * 60 = 35.76RPM                         (BASE_INIT/INIT_ECT)
                                      ;    5000RPM .0024/.00000512 = 468.75 5000/468.75 = 10.666 RPM resolution        (BASE_INIT/INIT_ECT)
                                      ;                                                                                (BASE_INIT/INIT_ECT)
                                      ;    A prescale of 128 results in a 2.56uS clock tick with a maximum period of 167.7696mS (BASE_INIT/INIT_ECT)
                                      ;    Lowest cranking speed can be:                                               (BASE_INIT/INIT_ECT)
                                      ;    .1677696 * 5 = .838848Sec = 1.192111086Hz * 60 = 71.53RPM                   (BASE_INIT/INIT_ECT)
                                      ;    5000RPM .0024/.00000256 = 937.5 5000/937.5 = 5.333 RPM resolution           (BASE_INIT/INIT_ECT)
                                      ;                                                                                (BASE_INIT/INIT_ECT)
                                      ;***************************************************************************************** (BASE_INIT/INIT_ECT)
00434E 7F434E 18 03 05 00 02 42           movw  #$0500,DDRT   ; Load Port T Data Direction Register and                (BASE_INIT/INIT_ECT)
                                                              ; Port T Reduced Drive Register with                     (BASE_INIT/INIT_ECT)
                                                              ; %0000_0101_0000_0000 (PT2,0 outputs,                   (BASE_INIT/INIT_ECT)
                                                              ; PT7,6,5,4,3,1 inputs PT2,0 full                        (BASE_INIT/INIT_ECT)
                                                              ; drive, PT7,6,5,4,3,0 full drive)                       (BASE_INIT/INIT_ECT)
004354 7F4354 18 03 FA FA 02 44           movw  #$FAFA,PERT   ; Load Port T Pull Device Register and                   (BASE_INIT/INIT_ECT)
                                                              ; Port T Polarity Select Register with                   (BASE_INIT/INIT_ECT)
                                                              ; %1111_1010_1111_1010                                   (BASE_INIT/INIT_ECT)
                                                              ; (pull device enabled on PT7,6,5,4,                     (BASE_INIT/INIT_ECT)
                                                              ; 3,1. Disabled on PT2,0. Pull down on                   (BASE_INIT/INIT_ECT)
                                                              ; PT7,6,5,4,3,1 pull up on PT2,0)                        (BASE_INIT/INIT_ECT)
00435A 7F435A 1D 02 40 04                 bclr PTT,Bit2       ; Initialize PT2 low                                     (BASE_INIT/INIT_ECT)
00435E 7F435E 1D 02 40 01                 bclr PTT,Bit0       ; Initialize PT0 low                                     (BASE_INIT/INIT_ECT)
004362 7F4362 18 0B 05 00 40              movb #$05,ECT_TIOS  ; Load Timer Input capture/Output                        (BASE_INIT/INIT_ECT)
                                                              ; compare Select register with                           (BASE_INIT/INIT_ECT)
                                                              ; %00000101 (Hall/K3, VtoF/U2,                           (BASE_INIT/INIT_ECT)
                                                              ; Hall/K2, VtoF/U1, VR2/P10,                             (BASE_INIT/INIT_ECT)
                                                              ; D8, VR1/P9, D7)(IC Ch7,6,5,4,3,1)                      (BASE_INIT/INIT_ECT)
                                                              ;(OC Ch2,0)                                              (BASE_INIT/INIT_ECT)
004367 7F4367 18 0B 98 00 46              movb #$98,ECT_TSCR1 ; Load ECT_TSCR1 with %10011000                          (BASE_INIT/INIT_ECT)
                                                              ;(timer enabled, no stop in wait,                        (BASE_INIT/INIT_ECT)
                                                              ; no stop in freeze, fast flag clear,                    (BASE_INIT/INIT_ECT)
                                                              ; precision timer)                                       (BASE_INIT/INIT_ECT)
00436C 7F436C 18 0B FF 00 4C              movb  #$FF,ECT_TIE  ; Load Timer Interrupt Enable Register                   (BASE_INIT/INIT_ECT)
                                                              ; with %11111111 (interrupts enabled                     (BASE_INIT/INIT_ECT)
                                                              ; Ch7,6,5,4,3,2,1,0)                                     (BASE_INIT/INIT_ECT)
004371 7F4371 18 0B 07 00 4D              movb #$07,ECT_TSCR2 ; Load ECT_TSCR2 with %00000111                          (BASE_INIT/INIT_ECT)
                                                              ; (timer overflow interrupt disabled,                    (BASE_INIT/INIT_ECT)
                                                              ; timer counter reset disabled,                          (BASE_INIT/INIT_ECT)
                                                              ; prescale divide by 128 for legacy timer only)          (BASE_INIT/INIT_ECT)
                                      ;*    movb #$0F,ECT_PTPSR ; Load ECT_PTPSR with %00001111                        (BASE_INIT/INIT_ECT)
                                                              ; (prescale 16, 0.32us resolution,                       (BASE_INIT/INIT_ECT)
                                                              ; max period 20.9712ms)                                  (BASE_INIT/INIT_ECT)
                                      ;*    movb #$1F,ECT_PTPSR ; Load ECT_PTPSR with %00011111                        (BASE_INIT/INIT_ECT)
                                                              ; (prescale 32, 0.64us resolution,                       (BASE_INIT/INIT_ECT)
                                                              ; max period 41.94248ms)                                 (BASE_INIT/INIT_ECT)
                                      ;*    movb #$3F,ECT_PTPSR ; Load ECT_PTPSR with %00111111                        (BASE_INIT/INIT_ECT)
                                                              ; (prescale 64, 1.28us resolution,                       (BASE_INIT/INIT_ECT)
                                                              ; max period 83.884ms)                                   (BASE_INIT/INIT_ECT)
                                      ;*    movb #$7F,ECT_PTPSR ; Load ECT_PTPSR with %01111111  (time base for run mode) (BASE_INIT/INIT_ECT)
                                                              ; (prescale 128, 2.56us resolution,                      (BASE_INIT/INIT_ECT)
                                                              ; max period 167.7696ms)                                 (BASE_INIT/INIT_ECT)
004376 7F4376 18 0B FF 00 6E              movb #$FF,ECT_PTPSR ; Load ECT_PTPSR with %11111111 (time base for prime or crank modes) (BASE_INIT/INIT_ECT)
                                                              ; (prescale 256, 5.12us resolution,                      (BASE_INIT/INIT_ECT)
                                                              ; max period 335.5ms)                                    (BASE_INIT/INIT_ECT)
00437B 7F437B 18 0B 55 00 4A              movb #$55,ECT_TCTL3 ; Load ECT_TCTL3 with %01010101 (rising                  (BASE_INIT/INIT_ECT)
                                                              ; edge capture Ch7,6,5,4)                                (BASE_INIT/INIT_ECT)
004380 7F4380 18 0B 44 00 4B              movb #$44,ECT_TCTL4 ; Load ECT_TCTL4 with %01000100 (rising                  (BASE_INIT/INIT_ECT)
004385 7F4385 MACRO                                           CLR_ECT_VARS    ; Clear ECT variables  (ect_BEEM488.s)   (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_ECT_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_ECT_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_ECT_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_ECT_VARS)
004385 7F4385 18 79 10 12                clrw VSS1st      ; VSS input capture rising edge 1st time stamp (5.12uS or 2.56uS res) (BASE_INIT/CLR_ECT_VARS)
004389 7F4389 MACRO                               INIT_TIM        ; Initialize Timer (tim_BEEM488.s)                   (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/INIT_TIM)
                                      ;***************************************************************************************** (BASE_INIT/INIT_TIM)
                                      ;* - Macros -                                                                            * (BASE_INIT/INIT_TIM)
                                      ;***************************************************************************************** (BASE_INIT/INIT_TIM)
                                      ;***************************************************************************************** (BASE_INIT/INIT_TIM)
                                      ; - Initialize Port P. General purpose I/Os. all pins outputs                    (BASE_INIT/INIT_TIM)
                                      ;*     PP0(P4) - TIM1 OC0 (D21)(1to28)(Ign3)(9&8)     (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;*     PP1(P3) - TIM1 OC1 (D5)(1to28)(Ign4)(4&7)      (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;*     PP2(P2) - TIM1 OC2 (D24)(1to28)(Ign5)(3&2)     (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;*     PP3(P1) - TIM1 OC3 (D1)(1to28)(Inj1)(1&10)     (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;*     PP4(P112) - TIM1 OC4 (D3)(87to112)(Inj2)(9&4)  (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;*     PP5(P111) - TIM1 OC5 (D6)(87to112)(Inj3)(3&6)  (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;*     PP6(P110) - TIM1 OC6 (D1)(87to112)(Inj4)(5&8)  (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;*     PP7(P109) - TIM1 OC7 (D7)(87to112)(Inj5)(7&2)  (output, low) analog Vout option   * (BASE_INIT/INIT_TIM)
                                      ;***************************************************************************************** (BASE_INIT/INIT_TIM)
                                      ;***************************************************************************************** (BASE_INIT/INIT_TIM)
004389 7F4389 18 0B FF 03 6F              movb #$FF,PTRRR     ; Load Port R Routing Register with %00000101 (All TIM1 OC channels (BASE_INIT/INIT_TIM)
                                                              ; available on Port P)                                   (BASE_INIT/INIT_TIM)
00438E 7F438E 18 0B FF 02 5A              movb  #$FF,DDRP     ; Load Port P Data Direction Register                    (BASE_INIT/INIT_TIM)
                                                              ; with %11111111 (all pins outputs)                      (BASE_INIT/INIT_TIM)
004393 7F4393 18 0B 00 02 58              movb #$00,PTP       ; Load Port P with %00000000 (initialize all pins low)   (BASE_INIT/INIT_TIM)
004398 7F4398 18 0B FF 03 D0              movb #$FF,TIM_TIOS  ;(TIM_TIOS equ $03D0)                                    (BASE_INIT/INIT_TIM)
                                                              ; Load Timer Input capture/Output compare Select register with (BASE_INIT/INIT_TIM)
                                                              ; %11111111 (All channels outputs)                       (BASE_INIT/INIT_TIM)
00439D 7F439D 18 0B 98 03 D6              movb #$98,TIM_TSCR1 ; (TIM_TSCR1 equ $03D6)                                  (BASE_INIT/INIT_TIM)
                                                              ; Load TIM_TSCR1 with %10011000 (timer enabled, no stop in wait, (BASE_INIT/INIT_TIM)
                                                              ; no stop in freeze, fast flag clear, precision timer)   (BASE_INIT/INIT_TIM)
0043A2 7F43A2 18 0B FF 03 DC              movb #$FF,TIM_TIE   ; Load TIM_TIE (Timer Interrupt Enable Register)         (BASE_INIT/INIT_TIM)
                                                              ; with %11111111 (enable interrupts all channels)        (BASE_INIT/INIT_TIM)
0043A7 7F43A7 18 0B 07 03 DD              movb #$07,TIM_TSCR2 ; (TIM_TSCR2 equ $03DD)(Load TIM_TSCR2 with %00000111    (BASE_INIT/INIT_TIM)
                                                              ; (timer overflow interrupt disabled,timer counter       (BASE_INIT/INIT_TIM)
                                                              ; reset disabled, prescale divide by 128)                (BASE_INIT/INIT_TIM)
                                      ;*    movb #$7F,TIM_PTPSR ; (TIM_PTPSR equ $03FE) Load TIM_PTPSR with %01111111  (BASE_INIT/INIT_TIM)
                                                              ; (prescale 128, 2.56us resolution,                      (BASE_INIT/INIT_TIM)
                                                              ; max period 167.7696ms)(Time base for run mode)         (BASE_INIT/INIT_TIM)
0043AC 7F43AC 18 0B FF 03 FE              movb #$FF,TIM_PTPSR ; (TIM_PTPSR equ $03FE)(Load TIM_PTPSR with %11111111    (BASE_INIT/INIT_TIM)
0043B1 7F43B1 MACRO                                           CLR_IGN_VARS    ; Clear Ignition Calcs variables (igncalcs_BPEM488.s) (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_IGN_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_IGN_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_IGN_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_IGN_VARS)
0043B1 7F43B1 18 79 10 37                clrw Spantk         ; Ignition Span time (5.12uS or 2.56uS res)               (BASE_INIT/CLR_IGN_VARS)
0043B5 7F43B5 18 79 10 39                clrw DwellFintk     ; Time required for dwell after correction (5.12uS or 2.56uS res) (BASE_INIT/CLR_IGN_VARS)
0043B9 7F43B9 18 79 10 3B                clrw STandItrmtk    ; STcurr and Itmx10 (5.12uS or 2.56uS res)                (BASE_INIT/CLR_IGN_VARS)
0043BD 7F43BD 18 79 10 3D                clrw Advancetk      ; Delay time for desired spark advance + dwell(5.12uS or 2.56uS res) (BASE_INIT/CLR_IGN_VARS)
0043C1 7F43C1 18 79 10 3F                clrw Delaytk        ; Delay time from crank signal to energise coil(5.12uS or 2.56uS res) (BASE_INIT/CLR_IGN_VARS)
0043C5 7F43C5 18 79 10 41                clrw IgnOCadd1      ; First ignition output compare adder (5.12uS or 2.56uS res) (BASE_INIT/CLR_IGN_VARS)
0043C9 7F43C9 18 79 10 43                clrw IgnOCadd2      ; Second ignition output compare adder(5.12uS or 2.56uS res) (BASE_INIT/CLR_IGN_VARS)
0043CD 7F43CD MACRO                                           CLR_INJ_VARS    ; Clear Injection Calcs variables (injcalcs_BPEM488.s) (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_INJ_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_INJ_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_INJ_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_INJ_VARS)
0043CD 7F43CD 18 79 10 45                clrw TpsPctx10last ; Throttle Position Sensor percent last (%x10)(updated every 100Msec) (BASE_INIT/CLR_INJ_VARS)
0043D1 7F43D1 79 10 47                   clr  OFCdel        ; Overrun Fuel Cut delay duration (decremented every 100 mS) (BASE_INIT/CLR_INJ_VARS)
0043D4 7F43D4 79 10 48                   clr  TOEtim        ; Throttle Opening Enrichment duration (decremented every 100 mS) (BASE_INIT/CLR_INJ_VARS)
0043D7 7F43D7 18 79 10 49                clrw  DdBndZ1       ; Deadband interpolation Z1 value                         (BASE_INIT/CLR_INJ_VARS)
0043DB 7F43DB 18 79 10 4B                clrw  DdBndZ2       ; Deadband interpolation Z2 value                         (BASE_INIT/CLR_INJ_VARS)
0043DF 7F43DF 18 79 10 4D                clrw PWcalc1       ; PW calculations result 1                                 (BASE_INIT/CLR_INJ_VARS)
0043E3 7F43E3 18 79 10 4F                clrw PWcalc2       ; PW calculations result 2                                 (BASE_INIT/CLR_INJ_VARS)
0043E7 7F43E7 18 79 10 51                clrw PWcalc3       ; PW calculations result 3                                 (BASE_INIT/CLR_INJ_VARS)
0043EB 7F43EB 18 79 10 53                clrw PWcalc4       ; PW calculations result 4                                 (BASE_INIT/CLR_INJ_VARS)
0043EF 7F43EF 18 79 10 55                clrw PWcalc5       ; PW calculations result 5                                 (BASE_INIT/CLR_INJ_VARS)
0043F3 7F43F3 18 79 10 57                clrw ASErev        ; Afterstart Enrichment Taper (revolutions)                (BASE_INIT/CLR_INJ_VARS)
0043F7 7F43F7 18 79 10 59                clrw ASEcnt        ; Counter value for ASE taper                              (BASE_INIT/CLR_INJ_VARS)
0043FB 7F43FB 18 79 10 5B                clrw PrimePWtk     ; Primer injector pulswidth timer ticks(uS x 5.12)         (BASE_INIT/CLR_INJ_VARS)
0043FF 7F43FF 18 79 10 5D                clrw CrankPWtk     ; Cranking injector pulswidth timer ticks(uS x 5.12)       (BASE_INIT/CLR_INJ_VARS)
004403 7F4403 18 79 10 5F                clrw PWtk          ; Running injector pulsewidth timer ticks(uS x 2.56)       (BASE_INIT/CLR_INJ_VARS)
004407 7F4407 18 79 10 61                clrw InjOCadd1     ; First injector output compare adder (5.12uS res or 2.56uS res) (BASE_INIT/CLR_INJ_VARS)
00440B 7F440B 18 79 10 63                clrw InjOCadd2     ; Second injector output compare adder (5.12uS res or 2.56uS res) (BASE_INIT/CLR_INJ_VARS)
00440F 7F440F 18 79 10 65                clrw FDt           ; Fuel Delivery pulse width total(mS) (for FDsec calcs)    (BASE_INIT/CLR_INJ_VARS)
004413 7F4413 18 79 10 67                clrw FDcnt         ; Fuel delivery pulse width total(ms)(for totalizer pulse on rollover) (BASE_INIT/CLR_INJ_VARS)
004417 7F4417 79 10 69                   clr  AIOTcnt       ; Counter for AIOT totalizer pulse width                   (BASE_INIT/CLR_INJ_VARS)
00441A 7F441A MACRO                                           CLR_INTERP_VARS ; Clear Interp variables (interp_BPEM488.s) (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_INTERP_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_INTERP_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_INTERP_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_INTERP_VARS)
00441A 7F441A 18 79 10 25                clrw CrvPgPtr   ; Pointer to the page where the desired curve resides         (BASE_INIT/CLR_INTERP_VARS)
00441E 7F441E 18 79 10 27                clrw CrvRowOfst ; Offset from the curve page to the curve row                 (BASE_INIT/CLR_INTERP_VARS)
004422 7F4422 18 79 10 29                clrw CrvColOfst ; Offset from the curve page to the curve column              (BASE_INIT/CLR_INTERP_VARS)
004426 7F4426 18 79 10 2B                clrw CrvCmpVal  ; Curve comparison value for interpolation                    (BASE_INIT/CLR_INTERP_VARS)
00442A 7F442A 79 10 2D                   clr  CrvBinCnt  ; Number of bins in the curve row or column minus 1           (BASE_INIT/CLR_INTERP_VARS)
00442D 7F442D 79 10 2E                   clr  IndexNum   ; Position in the row or column of the curve comparison value (BASE_INIT/CLR_INTERP_VARS)
004430 7F4430 18 79 10 2F                clrw CrvRowHi   ; Curve row high boundry value for interpolation              (BASE_INIT/CLR_INTERP_VARS)
004434 7F4434 18 79 10 31                clrw CrvRowLo   ; Curve row low boundry value for interpolation               (BASE_INIT/CLR_INTERP_VARS)
004438 7F4438 18 79 10 33                clrw CrvColHi   ; Curve column high boundry value for interpolation           (BASE_INIT/CLR_INTERP_VARS)
00443C 7F443C 18 79 10 35                clrw CrvColLo   ; Curve column low boundry value for interpolation            (BASE_INIT/CLR_INTERP_VARS)
004440 7F4440 MACRO                                           CLR_STATE_VARS  ; Clear State variables (state_BPEM488.s) (BASE_INIT)
                                                                    ; program counter                                  (BASE_INIT/CLR_STATE_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_STATE_VARS)
                                      ;* - Macros -                                                                            * (BASE_INIT/CLR_STATE_VARS)
                                      ;***************************************************************************************** (BASE_INIT/CLR_STATE_VARS)
004440 7F4440 18 79 10 15                clrw CAS1sttk    ; CAS input capture rising edge 1st time stamp ((5.12uS or 2.56uS res) (BASE_INIT/CLR_STATE_VARS)
004444 7F4444 18 79 10 17                clrw CAS2ndtk    ; CAS input capture rising edge 2nd time stamp (5.12uS or 2.56uS res) (BASE_INIT/CLR_STATE_VARS)
004448 7F4448 18 79 10 19                clrw CASprd1tk   ; Period between CAS1st and CAS2nd (5.12uS or 2.56uS res)    (BASE_INIT/CLR_STATE_VARS)
00444C 7F444C 18 79 10 1B                clrw CASprd2tk   ; Period between CAS2nd and CAS3d ((5.12uS or 2.56uS res)    (BASE_INIT/CLR_STATE_VARS)
004450 7F4450 18 79 10 1D                clrw Degx10tk512 ; Time to rotate crankshaft 1 degree in 5.12uS resolution x 10 (BASE_INIT/CLR_STATE_VARS)
004454 7F4454 18 79 10 1F                clrw Degx10tk256 ; Time to rotate crankshaft 1 degree in 2.56uS resolution x 10 (BASE_INIT/CLR_STATE_VARS)
004458 7F4458 79 10 21                   clr  RevCntr     ; Counter for "Revmarker" flag                               (BASE_INIT/CLR_STATE_VARS)
00445B 7F445B 18 79 10 22                clrw Stallcnt    ; No crank or stall condition counter (1mS increments)       (BASE_INIT/CLR_STATE_VARS)
00445F 7F445F 79 10 24                   clr  ICflgs      ; Input Capture flags bit field                              (BASE_INIT/CLR_STATE_VARS)
004462 7F4462 20 00                                           JOB     DONE        ; Jump or branch to DONE             (BASE_INIT)
004464 7F4464 -> $4464                DONE        EQU *     ; * Represents the current value of the paged              (BASE_INIT)
                                      ; - Application code -
                                      ;*****************************************************************************************
                                      ; - Clear all real time variables -
                                      ;*****************************************************************************************
004464 7F4464 18 79 10 6C                clrw cltAdc       ; RV15 10 bit ADC AN00 Engine Coolant Temperature ADC(offset=2)
004468 7F4468 18 79 10 6E                clrw Cltx10       ; Engine Coolant Temperature (Degrees F x 10)(offset=4)
00446C 7F446C 18 79 10 70                clrw matAdc       ; RV14 10 bit ADC AN01 Manifold Air Temperature ADC(offset=6)
004470 7F4470 18 79 10 72                clrw Matx10       ; Manifold Air Temperature (Degrees F x 10)(offset=8)
004474 7F4474 18 79 10 74                clrw eftAdc       ; RV13 10 bit ADC AN02 Engine Fuel Temperature ADC(offset=10)
004478 7F4478 18 79 10 76                clrw Eftx10       ; Engine Fuel Temperature (Degrees F x 10)(offset=12)
00447C 7F447C 18 79 10 78                clrw eotAdc       ; RV12 10 bit ADC AN03 Engine Oil Temperature ADC(offset=14)
004480 7F4480 18 79 10 7A                clrw Eotx10       ; Engine Oil Temperature (Degrees F x 10)(offset=16)
004484 7F4484 18 79 10 7C                clrw RV11Adc      ; RV11 10 bit ADC AN04(19)(offset=18)
004488 7F4488 18 79 10 7E                clrw mapAdc       ; RV10 10 bit ADC AN05 Manifold Absolute Pressure ADC(offset=20)
00448C 7F448C 18 79 10 80                clrw Mapx10       ; Manifold Absolute Pressure (KPAx10)(offset=22)
004490 7F4490 18 79 10 82                clrw baroAdc      ; RV9 10 bit ADC AN06 Barometric Pressure ADC(offset=24)
004494 7F4494 18 79 10 84                clrw Barox10      ; Barometric Pressure (KPAx10)(offset=26)
004498 7F4498 18 79 10 86                clrw batAdc       ; Battery Voltage 10 bit ADC AN07(offset=28)
00449C 7F449C 18 79 10 88                clrw BatVx10      ; Battery Voltage (Volts x 10)(offset=30)
0044A0 7F44A0 18 79 10 8A                clrw ftrmAdc      ; RV8 10 bit ADC AN08 Fuel Trim ADC(offset=32)
0044A4 7F44A4 18 79 10 8C                clrw Ftrmx10      ; Fuel Trim (% x 10)(+-20%)(offset=34)
0044A8 7F44A8 18 79 10 8E                clrw itrmAdc      ; RV7 10 bit ADC AN09 Ignition Trim ADC(offset=36)
0044AC 7F44AC 18 79 10 90                clrw Itrmx10      ; Ignition Trim (degrees x 10)+-20 degrees) (offset=38)
0044B0 7F44B0 18 79 10 92                clrw egtAdc       ; RV6 10 bit ADC AN10 Exhaust Gas Temperature ADC(offset=40)
0044B4 7F44B4 18 79 10 94                clrw Egt          ; Exhaust Gas Temperature (degrees F)(offset=42)
0044B8 7F44B8 18 79 10 96                clrw eopAdc       ; RV5 10 bit ADC AN11 Engine Oil Pressure ADC(offset=44)
0044BC 7F44BC 18 79 10 98                clrw Eopx10       ; Engine Oil Pressure (PSI x 10)(offset=46)
0044C0 7F44C0 18 79 10 9A                clrw efpAdc       ; RV4 10 bit ADC AN12 Engine Fuel Pressure ADC(offset=48)
0044C4 7F44C4 18 79 10 9C                clrw Efpx10       ; Engine Fuel Pressure (PSI x 10)(offset=50)
0044C8 7F44C8 18 79 10 9E                clrw tpsADC       ; RV3 10 bit ADC AN13 Throttle Position Sensor ADC (exact for TS)(offset=52)
0044CC 7F44CC 18 79 10 A0                clrw TpsPctx10    ; Throttle Position Sensor % of travel(%x10)(update every 100mSec)(offset=54)
0044D0 7F44D0 18 79 10 A2                clrw iacAdc       ; RV2 10 bit ADC AN14 Idle Air Control ADC(offset=56)
0044D4 7F44D4 18 79 10 A4                clrw egoAdc       ; RV1 10 bit ADC AN15 Exhaust Gas Oxygen ADC(offset=58)
0044D8 7F44D8 18 79 10 A6                clrw afr1x10      ; Air Fuel Ratio for gasoline (AFRx10)(exact for TS)(offset=60)
                                      ;*****************************************************************************************
                                      ; - Input capture variables
                                      ;*****************************************************************************************
0044DC 7F44DC 18 79 10 A8                clrw CASprd512    ; Crankshaft Angle Sensor period (5.12uS time base(offset=62)
0044E0 7F44E0 18 79 10 AA                clrw CASprd256    ; Crankshaft Angle Sensor period (2.56uS time base(offset=64)
0044E4 7F44E4 18 79 10 AC                clrw VSSprd       ; Vehicle Speed Sensor period(offset=66)
0044E8 7F44E8 18 79 10 AE                clrw RPM          ; Crankshaft Revolutions Per Minute(offset=68)
0044EC 7F44EC 18 79 10 B0                clrw KPH          ; Vehicle speed (KpH x 10)(offset=70)
                                      ;*****************************************************************************************
                                      ; - Fuel calculation variables
                                      ;*****************************************************************************************
0044F0 7F44F0 18 79 10 B2                clrw Place72      ; Place holder(offset=72)
0044F4 7F44F4 18 79 10 B4                clrw AFRcurr      ; Current value in AFR table (AFR x 100)(offset=74)
0044F8 7F44F8 18 79 10 B6                clrw VEcurr       ; Current value in VE table (% x 10)(offset=76)
0044FC 7F44FC 18 79 10 B8                clrw barocor      ; Barometric Pressure Correction (% x 10)(offset=78)
004500 7F4500 18 79 10 BA                clrw matcor       ; Manifold Air Temperature Correction (% x 10)(offset=80)
004504 7F4504 18 79 10 BC                clrw WUEcor       ; Warmup Enrichment Correction (% x 10)(offset=82)
004508 7F4508 18 79 10 BE                clrw ASEcor       ; Afterstart Enrichmnet Correction (% x 10)(offset=84)
00450C 7F450C 18 79 10 C0                clrw WUEandASEcor ; the sum of WUEcor and ASEcor (% x 10)(offset=86)
004510 7F4510 18 79 10 C2                clrw Crankcor     ; Cranking pulsewidth temperature correction (% x 10)(offset=88)
004514 7F4514 18 79 10 C4                clrw TpsPctDOT    ; TPS difference over time (%/Sec)(update every 100mSec)(offset=90)
004518 7F4518 79 10 C6                   clr  TpsDOTcor    ; Throttle Opening Enrichment table value(%)(offset=92)
00451B 7F451B 79 10 C7                   clr  ColdAddpct   ; Throttle Opening Enrichment cold adder (%)(offset=93)
00451E 7F451E 79 10 C8                   clr  ColdMulpct   ; Throttle Opening Enrichment cold multiplier (%)(offset=94)
004521 7F4521 79 10 C9                   clr  TOEpct       ; Throttle Opening Enrichment (%)(offset=95)
004524 7F4524 18 79 10 CA                clrw TOEpw        ; Throttle Opening Enrichment adder (mS x 100)(offset=96)
004528 7F4528 18 79 10 CC                clrw PWlessTOE    ; Injector pulse width before "TOEpw" and "Deadband" (mS x 10)(offset=98)
00452C 7F452C 18 79 10 CE                clrw Deadband     ; injector deadband at current battery voltage mS*100(offset=100)
004530 7F4530 18 79 10 D0                clrw PrimePW      ; Primer injector pulswidth (mS x 10)(offset=102)
004534 7F4534 18 79 10 D2                clrw CrankPW      ; Cranking injector pulswidth (mS x 10)(offset=104)
004538 7F4538 18 79 10 D4                clrw FDpw         ; Fuel Delivery pulse width (PW - Deadband) (mS x 10)(offset=106)
00453C 7F453C 18 79 10 D6                clrw PW           ; Running engine injector pulsewidth (mS x 10)(offset=108)
004540 7F4540 18 79 10 D8                clrw FD           ; Fuel Delivery pulse width (mS)(offset=110)
004544 7F4544 18 79 10 DA                clrw FDsec        ; Fuel delivery pulse width total over 1 second (mS)(offset=112)
004548 7F4548 18 79 10 DC                clrw Place114     ; Place holder(offset=114)
00454C 7F454C 18 79 10 DE                clrw Place115     ; Place holder(offset=116)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Ignition calculation variables
                                      ;*****************************************************************************************
004550 7F4550 18 79 10 E0                clrw STcurr         ; Current value in ST table (Degrees x 10)(offset=118)
004554 7F4554 18 79 10 E2                clrw Place120       ; Place holder(offset=120)
004558 7F4558 18 79 10 E4                clrw DwellCor       ; Coil dwell voltage correction (%*10)(offset=122)
00455C 7F455C 18 79 10 E6                clrw DwellFin       ; ("Dwell" * "DwellCor") (mS*10)(offset=124)
004560 7F4560 18 79 10 E8                clrw STandItrmx10   ; stCurr and Itmx10 (degrees*10)(offset=126)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Port status variables
                                      ;*****************************************************************************************
004564 7F4564 79 10 EA                   clr  PortAbits    ; Port A status bit field(offset=128)
004567 7F4567 79 10 EB                   clr  PortBbits    ; Port B status bit field(offset=129)
00456A 7F456A 79 10 EC                   clr  PortEbits    ; Port E status bit field(offset=130)
00456D 7F456D 79 10 ED                   clr  PortKbits    ; Port K status bit field(offset=131)
004570 7F4570 79 10 EE                   clr  PortJbits    ; Port J status bit field(offset=132)
004573 7F4573 79 10 EF                   clr  PortPbits    ; Port P status bit field(offset=133)
004576 7F4576 79 10 F0                   clr  PortTbits    ; Port T status bit field(offset=134)
                                      ;*****************************************************************************************
                                      ; - Misc variables
                                      ;*****************************************************************************************
004579 7F4579 79 10 F1                   clr  engine       ; Engine status bit field(offset=135)
00457C 7F457C 79 10 F2                   clr  engine2      ; Engine2 status bit field(offset=136)
00457F 7F457F 79 10 F3                   clr  alarmbits    ; Alarm status bit field(offset=137)
004582 7F4582 79 10 F4                   clr  AAoffbits    ; Audio Alarm Off status bit field(offset=138)
004585 7F4585 79 10 F5                   clr  StateStatus  ; State status bit field(offset=139)
004588 7F4588 18 79 10 F6                clrw LoopTime     ; Program main loop time (loops/Sec)(offset=140)
00458C 7F458C 18 79 10 F8                clrw DutyCyclex10 ; Injector duty cycle in run mode (% x 10)(offset=142)
004590 7F4590 18 79 10 FA                clrw TestValw     ; Word test value (for program developement only)(offset=143)
004594 7F4594 79 10 FC                   clr  testValb     ; Byte test value (for program developement only)(offset=145)
                                      ;*****************************************************************************************
                                      ; - Clear other variables -
                                      ;*****************************************************************************************
004597 7F4597 18 79 10 FD                clrw LoopCntr    ; Counter for "LoopTime" (incremented every Main Loop pass)
00459B 7F459B 79 10 FF                   clr  tmp1w       ; Temporary word variable #1
00459E 7F459E 79 11 01                   clr  tmp2w       ; Temporary word variable #2
0045A1 7F45A1 79 11 03                   clr  tmp3w       ; Temporary word variable #3
0045A4 7F45A4 79 11 05                   clr  tmp4w       ; Temporary word variable #4
0045A7 7F45A7 79 11 07                   clr  tmp5b       ; Temporary byte variable #5
0045AA 7F45AA 79 11 08                   clr  tmp6b       ; Temporary byte variable #6
0045AD 7F45AD 79 11 09                   clr  tmp7b       ; Temporary byte variable #7
0045B0 7F45B0 79 11 0A                   clr  tmp8b       ; Temporary byte variable #8
                                      ;*****************************************************************************************
                                      ; - Initialize other variables -
                                      ;*****************************************************************************************
0045B3 7F45B3 18 0B 09 10 21              movb  #$09,RevCntr     ; Counter for Revolution Counter signals
                                      ;*****************************************************************************************
                                      ; - SW2 on the CPU board is labled Load/Run and is labled backwards. In the "Load"
                                      ;   position PA6(bit7) is high (set). In the "Run" position PA6(bit7) is low (clear).
                                      ;   Pole Port A PA6(bit7) to check it's state.
                                      ;
                                      ;   BPEM488 utilizes EEPROM Emulation and all configurable constants are stored in D-Flash
                                      ;   and run from Buffer Ram. Tuner Studio reads Buffer Ram on start up but if values there
                                      ;   are not within acceptable ranges the session is aborted. Default values are stored
                                      ;   in P-Flash and this code transfers those values to Buffer Ram to keep TS happy.
                                      ;   This should only have to be done once. After that, tuning changes to Buffer Ram
                                      ;   will be automatically copied to D-Flash by the EEPROM Emulation module.
                                      ;*****************************************************************************************
0045B8 7F45B8 MACRO                       EEEM_ENABLE   ; Enable EEPROM Emulation Macro in eeemBPEM488.s
                                                                          ; with $0F (FCLK=1MHz)                       (EEEM_ENABLE)
                                      ; - Enable EE Emulation -                                                        (EEEM_ENABLE)
                                      ; args:   1: branch address of error handler (optional)                          (EEEM_ENABLE)
                                      ; result: none                                                                   (EEEM_ENABLE)
                                      ; SSTACK: none                                                                   (EEEM_ENABLE)
                                      ;         X, Y, and D are preserved                                              (EEEM_ENABLE)
                                      ; - Step (1): Set FCCOBIX -                                                      (EEEM_ENABLE)
0045B8 7F45B8 79 01 02                    clr    FCCOBIX    ; Clear Flash CCOB Index Register                          (EEEM_ENABLE)
                                      ; - Step (2): Enter parameters into FCCOB -                                      (EEEM_ENABLE)
0045BB 7F45BB 18 0B 13 01 0A              movb   #$13, FCCOBHI  ; Move %00010011 into Flash Common Command Register    (EEEM_ENABLE)
                                                                ; Hi byte (Flash command enable EEEPROM Emulation)     (EEEM_ENABLE)
                                      ;     movb   #$13, FCCOBLO                                                       (EEEM_ENABLE)
                                      ; - Step (3): Launch command -                                                   (EEEM_ENABLE)
0045C0 7F45C0 18 0B B0 01 06              movb #(CCIF|ACCERR|FPVIOL), FSTAT ; Move $B0 (%10110000) into Flash Status Register (EEEM_ENABLE)
                                                                            ;( Write 1s to Command Complete Interrupt  (EEEM_ENABLE)
                                                                            ; flag, Flash Access Error Flag and Flash  (EEEM_ENABLE)
                                                                            ; Protection Violation Flag to clear flags) (EEEM_ENABLE)
                                      ; - Step (4): Wait until command is executed -                                   (EEEM_ENABLE)
0045C5 7F45C5 1F 01 06 80 FB              brclr       FSTAT, #CCIF, *  ; Loop until Command Complete Interrupt         (EEEM_ENABLE)
0045CA 7F45CA 4E 00 40 53                 brset PORTA,PA6,PA6Set ; Pole PORTA, bit PA6 and branch to PA6Set: if bit is Hi
                                                                 ; This is the normal condition in mis-named position "Load"
0045CE 7F45CE MACRO                       EEEM_ENABLE   ; Enable EEPROM Emulation Macro in eeemBPEM488.s
                                                                          ; with $0F (FCLK=1MHz)                       (EEEM_ENABLE)
                                      ; - Enable EE Emulation -                                                        (EEEM_ENABLE)
                                      ; args:   1: branch address of error handler (optional)                          (EEEM_ENABLE)
                                      ; result: none                                                                   (EEEM_ENABLE)
                                      ; SSTACK: none                                                                   (EEEM_ENABLE)
                                      ;         X, Y, and D are preserved                                              (EEEM_ENABLE)
                                      ; - Step (1): Set FCCOBIX -                                                      (EEEM_ENABLE)
0045CE 7F45CE 79 01 02                    clr    FCCOBIX    ; Clear Flash CCOB Index Register                          (EEEM_ENABLE)
                                      ; - Step (2): Enter parameters into FCCOB -                                      (EEEM_ENABLE)
0045D1 7F45D1 18 0B 13 01 0A              movb   #$13, FCCOBHI  ; Move %00010011 into Flash Common Command Register    (EEEM_ENABLE)
                                                                ; Hi byte (Flash command enable EEEPROM Emulation)     (EEEM_ENABLE)
                                      ;     movb   #$13, FCCOBLO                                                       (EEEM_ENABLE)
                                      ; - Step (3): Launch command -                                                   (EEEM_ENABLE)
0045D6 7F45D6 18 0B B0 01 06              movb #(CCIF|ACCERR|FPVIOL), FSTAT ; Move $B0 (%10110000) into Flash Status Register (EEEM_ENABLE)
                                                                            ;( Write 1s to Command Complete Interrupt  (EEEM_ENABLE)
                                                                            ; flag, Flash Access Error Flag and Flash  (EEEM_ENABLE)
                                                                            ; Protection Violation Flag to clear flags) (EEEM_ENABLE)
                                      ; - Step (4): Wait until command is executed -                                   (EEEM_ENABLE)
0045DB 7F45DB 1F 01 06 80 FB              brclr       FSTAT, #CCIF, *  ; Loop until Command Complete Interrupt         (EEEM_ENABLE)
                                      ;*********************************************************************
                                      ; - Copy page 1, VE table, ranges and other configurable constants
                                      ;   from Flash to Buffer Ram. (EPAGE=$FF)
                                      ;*********************************************************************
0045E0 7F45E0 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
0045E5 7F45E5 CC 04 00                    ldd    #$400        ; Load accu D with decimal 1024
0045E8 7F45E8 CE 62 A2                    ldx    #veBins_F    ; Load index register X with the address  NOTE CHANGE
                                                              ; of the first value in "veBins_F" table (Flash)
0045EB 7F45EB CD 08 00                    ldy    #veBins_E      ; Load index register Y with the address  NOTE CHANGE
                                                              ; of the first value in "veBins" table (Buffer Ram)
0045EE 7F45EE                         CopyPage1:
0045EE 7F45EE 18 0A 30 70                 movb    1,X+, 1,Y+  ; Copy byte value from Flash to Buffer Ram and
                                                              ; increment X and Y registers
0045F2 7F45F2 04 34 F9                    dbne    D,CopyPage1 ; Decrement Accu D and loop back to CopyPage1:
                                                              ; if not zero
                                      ;*********************************************************************
                                      ; - Copy page 2, ST table, ranges and other configurable constants
                                      ;   from Flash to Buffer Ram. (EPAGE=$FE)
                                      ;*********************************************************************
0045F5 7F45F5 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE
0045FA 7F45FA CC 04 00                    ldd    #$400        ; Load accu D with decimal 1024
0045FD 7F45FD CE 66 99                    ldx    #stBins_F    ; Load index register X with the address
                                                              ; of the first value in "stBins_F" table (Flash)
004600 7F4600 CD 08 00                    ldy    #stBins_E      ; Load index register Y with the address
                                                              ; of the first value in "stBins" table ( Buffer Ram)
004603 7F4603                         CopyPage2:
004603 7F4603 18 0A 30 70                 movb    1,X+, 1,Y+  ; Copy byte value from Flash to Buffer Ram and
                                                              ; increment X and Y registers
004607 7F4607 04 34 F9                    dbne    D,CopyPage2 ; Decrement Accu D and loop back to CopyPage2:
                                                              ; if not zero
                                      ;*********************************************************************
                                      ; - Copy page 3, AFR table, ranges and other configurable constants
                                      ;   from Flash to Buffer Ram. (EPAGE=$FD)
                                      ;*********************************************************************
00460A 7F460A 18 0B FD 00 17              movb  #(BUF_RAM_P3_START>>16),EPAGE  ; Move $FD into EPAGE
00460F 7F460F CC 04 00                    ldd    #$400        ; Load accu D with decimal 1024
004612 7F4612 CE 69 8B                    ldx    #afrBins_F   ; Load index register X with the address
                                                              ; of the first value in "afrBins_F" table (Flash)
004615 7F4615 CD 08 00                    ldy    #afrBins_E     ; Load index register Y with the address
                                                              ; of the first value in "afrBins" table (Buffer Ram)
004618 7F4618                         CopyPage3:
004618 7F4618 18 0A 30 70                 movb    1,X+, 1,Y+  ; Copy byte value from Flash to Buffer Ram and
                                                              ; increment X and Y registers
00461C 7F461C 04 34 F9                    dbne    D,CopyPage3 ; Decrement Accu D and loop back to CopyPage3:
                                                              ; if not zero
00461F 7F461F 20 00                       bra   PA6Done       ; Branch to PA6Done:
004621 7F4621                         PA6Set:
004621 7F4621                         PA6Done:
                                      ;*****************************************************************************************
004621 7F4621 79 00 1E                    clr  IRQCR   ; Disable IRQ (won't run without this)
004624 7F4624 10 EF                       cli          ; Clear Interrupt mask (enable interrupts)
                                      ;*****************************************************************************************
004626 7F4626 1F 10 05 08 FB              brclr clock,ms500,*  ; Wait here for 500mSec. Without this the ATD0 sequence below
                                                               ; won't work on power up. Slow start up for switching 5V power
                                                               ; supply is suspect.
                                      ;*****************************************************************************************
                                      ; - Start ATD0 conversion sequence, load all results and do conversions to user units
                                      ;   as a starting point for calculations.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;    Port AD:
                                      ;     PAD00 - ATD0  0 (RV15)(cltADC)
                                      ;     PAD01 - ATD0  1 (RV14)(matADC)
                                      ;     PAD02 - ATD0  2 (RV13)(eftADC)
                                      ;     PAD03 - ATD0  3 (RV12)(eotADC)
                                      ;     PAD04 - ATD0  4 (RV11)
                                      ;     PAD05 - ATD0  5 (RV10)(mapADC)
                                      ;     PAD06 - ATD0  6 (RV9)(baroADC)
                                      ;     PAD07 - ATD0  7       (batADC)
                                      ;     PAD08 - ATD0  8 (RV8)(ftrmADC)
                                      ;     PAD09 - ATD0  9 (RV7)(itrmADC)
                                      ;     PAD10 - ATD0 10 (RV6)(egtADC)
                                      ;     PAD11 - ATD0 11 (RV5)(eopADC)
                                      ;     PAD12 - ATD0 12 (RV4)(efpADC)
                                      ;     PAD13 - ATD0 13 (RV3)(tpsADC)
                                      ;     PAD14 - ATD0 14 (RV2)(iacAdc)
                                      ;     PAD15 - ATD0 15 (RV1)(egoADC)
                                      ;*****************************************************************************************
00462B 7F462B MACRO                       START_ATD0    ;(Macro in adc0_BPEM488.s)
                                                              ;(24 cycle sample time, prescale = 2                     (START_ATD0)
                                                              ; for 8.3MHz ATDCLK)                                     (START_ATD0)
                                                              ;         ^ ^^   ^                                       (START_ATD0)
                                                              ;     SMP-+-+|   |                                       (START_ATD0)
                                                              ;     PRS----+---+                                       (START_ATD0)
                                      ;***************************************************************************************** (START_ATD0)
                                      ;- Start ATD0 and get ADC values for all channels                                (START_ATD0)
                                      ;***************************************************************************************** (START_ATD0)
00462B 7F462B 18 0B 30 02 C5              movb  #$30,ATD0CTL5   ; Load "ATD0CTL5" with %00110000 (no special channel,continuous (START_ATD0)
                                                                ; conversion, multi channel, initial channel 0)        (START_ATD0)
                                                                ; (Start conversion sequence)                          (START_ATD0)
                                                                ;         ^^^^^^^^                                     (START_ATD0)
                                                                ;       SC-+||||||                                     (START_ATD0)
                                                                ;     SCAN--+|||||                                     (START_ATD0)
                                                                ;     MULT---+||||                                     (START_ATD0)
                                                                ;       CD----+|||                                     (START_ATD0)
                                                                ;       CC-----+||                                     (START_ATD0)
                                                                ;       CB------+|                                     (START_ATD0)
                                                                ;       CA-------+                                     (START_ATD0)
004630 7F4630 1F 02 C6 80 FB              brclr ATD0STAT0,SCF,*  ; Loop here until Sequence Complete Flag is set       (START_ATD0)
004635 7F4635 18 0B 80 02 C6              movb  #SCF,ATD0STAT0 ; Set the Sequence Complete Flag of ATD0STAT0 to clear the flag (START_ATD0)
00463A 7F463A FC 02 D0                    ldd   ATD0DR0H  ; Load accumulator with value in ATD Ch00                    (START_ATD0)
00463D 7F463D 7C 10 6C                    std   cltAdc    ; Copy to cltAdc                                             (START_ATD0)
004640 7F4640 FC 02 D2                    ldd   ATD0DR1H  ; Load accumulator with value in ATD Ch01                    (START_ATD0)
004643 7F4643 7C 10 70                    std   matAdc    ; Copy to matAdc ADC                                         (START_ATD0)
004646 7F4646 FC 02 D4                    ldd   ATD0DR2H  ; Load accumulator with value in ATD Ch02                    (START_ATD0)
004649 7F4649 7C 10 74                    std   eftAdc    ; Copy to eftAdc ADC                                         (START_ATD0)
00464C 7F464C FC 02 D6                    ldd   ATD0DR3H  ; Load accumulator with value in ATD Ch03                    (START_ATD0)
00464F 7F464F 7C 10 78                    std   eotAdc    ; Copy to eotAdc                                             (START_ATD0)
004652 7F4652 FC 02 D8                    ldd   ATD0DR4H  ; Load accumulator with value in ATD Ch04                    (START_ATD0)
004655 7F4655 7C 10 7C                    std   RV11Adc   ; Copy to RV11 ADC                                           (START_ATD0)
004658 7F4658 FC 02 DA                    ldd   ATD0DR5H  ; Load accumulator with value in ATD Ch05                    (START_ATD0)
00465B 7F465B 7C 10 7E                    std   mapAdc    ; Copy to mapAdc                                             (START_ATD0)
00465E 7F465E FC 02 DC                    ldd   ATD0DR6H  ; Load accumulator with value in ATD Ch06                    (START_ATD0)
004661 7F4661 7C 10 82                    std   baroAdc   ; Copy to baroAdc                                            (START_ATD0)
004664 7F4664 FC 02 DE                    ldd   ATD0DR7H  ; Load accumulator with value in ATD Ch07                    (START_ATD0)
004667 7F4667 7C 10 86                    std   batAdc    ; Copy to bat ADC                                            (START_ATD0)
00466A 7F466A FC 02 E0                    ldd   ATD0DR8H  ; Load accumulator with value in ATD Ch08                    (START_ATD0)
00466D 7F466D 7C 10 8A                    std   ftrmAdc   ; Copy to ftrmAdc                                            (START_ATD0)
004670 7F4670 FC 02 E2                    ldd   ATD0DR9H  ; Load accumulator with value in ATD Ch09                    (START_ATD0)
004673 7F4673 7C 10 8E                    std   itrmAdc   ; Copy to itrmAdc                                            (START_ATD0)
004676 7F4676 FC 02 E4                    ldd   ATD0DR10H ; Load accumulator with value in ATD Ch10                    (START_ATD0)
004679 7F4679 7C 10 92                    std   egtAdc    ; Copy to egtAdc                                             (START_ATD0)
00467C 7F467C FC 02 E6                    ldd   ATD0DR11H ; Load accumulator with value in ATD Ch11                    (START_ATD0)
00467F 7F467F 7C 10 96                    std   eopAdc    ; Copy to eopAdc                                             (START_ATD0)
004682 7F4682 FC 02 E8                    ldd   ATD0DR12H ; Load accumulator with value in ATD Ch12                    (START_ATD0)
004685 7F4685 7C 10 9A                    std   efpAdc    ; Copy to efpAdc                                             (START_ATD0)
004688 7F4688 FC 02 EA                    ldd   ATD0DR13H ; Load accumulator with value in ATD Ch13                    (START_ATD0)
00468B 7F468B 7C 10 9E                    std   tpsADC    ; Copy to tpsADC                                             (START_ATD0)
00468E 7F468E FC 02 EC                    ldd   ATD0DR14H ; Load accumulator with value in ATD Ch14                    (START_ATD0)
004691 7F4691 7C 10 A2                    std   iacAdc    ; Copy to iacADC                                             (START_ATD0)
004694 7F4694 FC 02 EE                    ldd   ATD0DR15H ; Load accumulator with value in ATD Ch15                    (START_ATD0)
004697 7F4697 7C 10 A4                    std   egoAdc    ; Copy to egoAdc                                             (START_ATD0)
                                      ;*****************************************************************************************
                                      ; - Convert ADC values to user units -
                                      ;*****************************************************************************************
                                      ;    ADC0_CLT     ; Calculate Cltx10    ; Engine Coolant Temperature (Degrees F x 10) (6)
                                      ;    ADC0_MAT     ; Calculate Matx10    ; Manifold Air Temperature (Degrees F x 10) (10)
                                      ;    ADC0_EFT     ; Calculate Eftx10    ; Engine Fuel Temperature (Degrees F x 10) (14)
                                      ;    ADC0_EOT     ; Calculate Eotx10    ; Engine Oil Temperature (Degrees F x 10)(18)
                                      ;    ADC0_MAP     ; Calculate Mapx10    ; Manifold Absolute Pressure (KPAx10) (24)
                                      ;    ADC0_BARO    ; Calculate Barox10   ; Barometric Pressure (KPAx10) (28)
                                      ;    ADC0_BATV    ; Calculate BatVx10   ; Battery Voltage (Volts x 10) (32)
                                      ;    ADC0_FTRM    ; Calculate Ftrmx10   ; Fuel Trim (% x 10)(+-20%) (36)
                                      ;    ADC0_ITRM    ; Calculate Itrmx10   ; Ignition Trim (degrees x 10)+-20 degrees) (40)
                                      ;        ADC0_EGT     ; Calculate Egt       ; Exhaust Gas Temperature (degrees F) (44)
                                      ;    ADC0_EOP     ; Calculate Eopx10    ; Engine Oil Pressure (PSI x 10) (48)
                                      ;    ADC0_EFP     ; Calculate Efpx10    ; Engine Fuel Pressure (PSI x 10)( (52)
                                      ;    ADC0_TPSPCT  ; Calculate TpsPctx10 ; Throttle Position Sensor % of travel(%x10) (56)
                                      ;        ADC0_AFR1    ; Calculate afr1x10   ; Air Fuel Ratio (AFRx10)(exact for TS) (62)
                                      ;*****************************************************************************************
00469A 7F469A MACRO                       CONVERT_ATD0    ;(Macro in adc0_BPEM488.s)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Engine Coolant Temperature (Degrees F x 10)                          (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
00469A 7F469A FE 10 6C                    ldx   cltAdc            ; Load index register X with value in "cltAdc"       (CONVERT_ATD0)
00469D 7F469D 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "cltAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
00469F 7F469F ED E2 6D 67                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
0046A3 7F46A3 7D 10 6E                    sty   Cltx10            ; Copy result to "Cltx10" Engine Coolant Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Manifold Air Temperature (Degrees F x 10)                            (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0046A6 7F46A6 FE 10 70                    ldx   matAdc            ; Load index register X with value in "matAdc"       (CONVERT_ATD0)
0046A9 7F46A9 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "matAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
0046AB 7F46AB ED E2 6D 67                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
0046AF 7F46AF 7D 10 72                    sty   Matx10            ; Copy result to "Matx100" Manifold Air Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Engine Fuel Temperature (Degrees F x 10)                             (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0046B2 7F46B2 FE 10 74                    ldx   eftAdc            ; Load index register X with value in "eftAdc"       (CONVERT_ATD0)
0046B5 7F46B5 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "eftAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
0046B7 7F46B7 ED E2 6D 67                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
0046BB 7F46BB 7D 10 76                    sty   Eftx10            ; Copy result to "Eftx100" Engine Fuel Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Engine Oil Temperature (Degrees F x 10)                              (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0046BE 7F46BE FE 10 78                    ldx   eotAdc            ; Load index register X with value in "eoAdc"        (CONVERT_ATD0)
0046C1 7F46C1 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "eoAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
0046C3 7F46C3 ED E2 6D 67                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
0046C7 7F46C7 7D 10 7A                    sty   Eotx10           ; Copy result to "Eotx100" Engine Oil Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Manifold Absolute Pressure x 10 (Used to calculate to 1 decimal place) (CONVERT_ATD0)
                                      ;   MAP sensor MPX4115AP                                                         (CONVERT_ATD0)
                                      ;   Vout = MAP sensor output voltage                                             (CONVERT_ATD0)
                                      ;   P = Manifold pressure in KPA                                                 (CONVERT_ATD0)
                                      ;                                                                                (CONVERT_ATD0)
                                      ;   Vout = (mapAdc/1023)*5                                                       (CONVERT_ATD0)
                                      ;   P = ((Vout/5)+0.095)/0.009                                                   (CONVERT_ATD0)
                                      ; - For integer math:                                                            (CONVERT_ATD0)
                                      ;   P x 10 = ((mapAdc*10,000)/1023)+950)/9                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0046CA 7F46CA FC 10 7E                    ldd   mapAdc        ; Load double accumulator with value in "mapAdc"         (CONVERT_ATD0)
0046CD 7F46CD CD 27 10                    ldy   #$2710        ; Load index register Y with decimal decimal 10,000      (CONVERT_ATD0)
0046D0 7F46D0 13                          emul                ; Extended 16x16 multiply (D)x(Y)=Y:D                    (CONVERT_ATD0)
0046D1 7F46D1 CE 03 FF                    ldx   #$03FF        ; Load index register X with decimal 1023                (CONVERT_ATD0)
0046D4 7F46D4 11                          ediv                ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                (CONVERT_ATD0)
0046D5 7F46D5 18 CB 03 B6                 addy  #$03B6        ; Add without carry decimal 950 to Y (Y)+(M:M+1)->(Y)    (CONVERT_ATD0)
0046D9 7F46D9 B7 64                       tfr   Y,D           ; Copy value in "Y" to "D"                               (CONVERT_ATD0)
0046DB 7F46DB CE 00 09                    ldx   #$0009        ; Load index register "X" with decimal 9                 (CONVERT_ATD0)
0046DE 7F46DE 18 10                       idiv                ; Integer divide (D)/(X)=>X Rem=>D                       (CONVERT_ATD0)
0046E0 7F46E0 7E 10 80                    stx   Mapx10        ; Copy result to "Mapx10" (KPAx10)                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Barometric Pressure x 10(Used to calculate to 1 decimal place)     (CONVERT_ATD0)
                                      ;   Baro sensor MPX4115AP                                                        (CONVERT_ATD0)
                                      ;   Vout = Baro sensor output voltage                                            (CONVERT_ATD0)
                                      ;   P = Barometric pressure in KPA                                               (CONVERT_ATD0)
                                      ;                                                                                (CONVERT_ATD0)
                                      ;   Vout = (baroAdc/1023)*5                                                      (CONVERT_ATD0)
                                      ;   P = ((Vout/5)+0.095)/0.009                                                   (CONVERT_ATD0)
                                      ; - For integer math:                                                            (CONVERT_ATD0)
                                      ;   P x 10 = ((baroAdc*10,000)/1023)+950)/9                                      (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0046E3 7F46E3 FC 10 82                    ldd   baroAdc       ; Load double accumulator with value in "baroAdc"        (CONVERT_ATD0)
0046E6 7F46E6 CD 27 10                    ldy   #$2710        ; Load index register Y with decimal decimal 10,000      (CONVERT_ATD0)
0046E9 7F46E9 13                          emul                ; Extended 16x16 multiply (D)x(Y)=Y:D                    (CONVERT_ATD0)
0046EA 7F46EA CE 03 FF                    ldx   #$03FF        ; Load index register X with decimal 1023                (CONVERT_ATD0)
0046ED 7F46ED 11                          ediv                ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                (CONVERT_ATD0)
0046EE 7F46EE 18 CB 03 B6                 addy  #$03B6        ; Add without carry decimal 950 to Y (Y)+(M:M+1)->(Y)    (CONVERT_ATD0)
0046F2 7F46F2 B7 64                       tfr   Y,D           ; Copy value in "Y" to "D"                               (CONVERT_ATD0)
0046F4 7F46F4 CE 00 09                    ldx   #$0009        ; Load index register "X" with decimal 9                 (CONVERT_ATD0)
0046F7 7F46F7 18 10                       idiv                ; Integer divide (D)/(X)=>X Rem=>D                       (CONVERT_ATD0)
0046F9 7F46F9 7E 10 84                    stx   Barox10        ; Copy result to "Barox10" (KPAx10)                     (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Battery Voltage x 10 -                                             (CONVERT_ATD0)
                                      ;    (batAdc/1023)*29.95 = BatV                                                  (CONVERT_ATD0)
                                      ;             or                                                                 (CONVERT_ATD0)
                                      ;    batAdc*(29.95/1023) = BatV, batADC = BatV                                   (CONVERT_ATD0)
                                      ;    batAdc*.029276637 = BatV  batADC = batV/.029276637                          (CONVERT_ATD0)
                                      ;    batAdc*(300/1023) = BatV*10                                                 (CONVERT_ATD0)
                                      ;    batAdc*.29276637 = BatV*10 bat ADC = batV*10/.29276637                      (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0046FC 7F46FC FC 10 86                    ldd   batAdc       ; Load double accumulator with value in "batAdc"          (CONVERT_ATD0)
0046FF 7F46FF CD 01 2C                    ldy   #$012C       ; Load index register Y with decimal decimal 300          (CONVERT_ATD0)
004702 7F4702 13                          emul               ; Extended 16x16 multiply (D)x(Y)=Y:D                     (CONVERT_ATD0)
004703 7F4703 CE 03 FF                    ldx   #$03FF       ; Load index register X with decimal 1023                 (CONVERT_ATD0)
004706 7F4706 11                          ediv               ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                 (CONVERT_ATD0)
004707 7F4707 7D 10 88                    sty   BatVx10      ; Copy result to "BatVx10" (Battery Voltage x 10)         (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Fuel Trim (% x 10)(+-20%) -                                        (CONVERT_ATD0)
                                      ;   (80% = 80% of VEcurr, 100% = 100% of VeCurr(no correction), 120% = 120% of VEcurr) (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
00470A 7F470A 1F 10 EA 08 39              brclr PortAbits,Ftrimen,NoFtrim ; "If Ftrimen" bit of "PortAbits" is clear, branch to (CONVERT_ATD0)
                                                                ; NoFtrim: (Fuel trim enable switch is off so skip over) (CONVERT_ATD0)
00470F 7F470F CC 00 00                    ldd   #$0000      ; Load double accumulator with zero (0 volt ADC)           (CONVERT_ATD0)
004712 7F4712 3B                          pshd              ; Push to stack (V1)                                       (CONVERT_ATD0)
004713 7F4713 FC 10 8A                    ldd   ftrmAdc     ; Load double accumulator with "ftrmAdc"                   (CONVERT_ATD0)
004716 7F4716 CD 00 0A                    ldy   #$000A      ; Load index register Y with decimal 10                    (CONVERT_ATD0)
004719 7F4719 13                          emul              ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)         (CONVERT_ATD0)
00471A 7F471A 3B                          pshd              ; Push to stack (V)                                        (CONVERT_ATD0)
00471B 7F471B CC 27 F6                    ldd   #$27F6      ; Load double accumulator with decimal 1023x10 (5 volt ADC) (CONVERT_ATD0)
00471E 7F471E 3B                          pshd              ; Push to stack (V2)                                       (CONVERT_ATD0)
00471F 7F471F CC 03 20                    ldd   #$0320      ; Load double accumulator with decimal 80x10 (Low range %) (CONVERT_ATD0)
004722 7F4722 3B                          pshd              ; Push to stack (Z1)                                       (CONVERT_ATD0)
004723 7F4723 CC 04 B0                    ldd   #$04B0      ; Load double accumulator with decimal 120x10 (High range %) (CONVERT_ATD0)
004726 7F4726 3B                          pshd              ; Push to stack (Z2)                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004727 7F4727 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004727 7F4727 EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004729 7F4729 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
00472B 7F472B B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00472D 7F472D EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
00472F 7F472F A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004731 7F4731 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004733 7F4733 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004735 7F4735 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004737 7F4737 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004739 7F4739 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
00473B 7F473B 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
00473D 7F473D B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00473F 7F473F E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004741 7F4741 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (CONVERT_ATD0)
004743 7F4743 7C 10 8C                    std   Ftrmx10   ; Copy result to "Ftrmx10" Fuel Trim (%x10)                  (CONVERT_ATD0)
004746 7F4746 20 06                           bra   FtrimDone ; Branch to FtrimDone:                                   (CONVERT_ATD0)
004748 7F4748                         NoFtrim:                                                                         (CONVERT_ATD0)
004748 7F4748 18 03 03 E8 10 8C           movw #$03E8,Ftrmx10  ; Decimal 1000 -> "Ftrmx10" (100%, no trim)             (CONVERT_ATD0)
00474E 7F474E                         FtrimDone:                                                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Ignition Trim (Degrees x 10)(+-20 Degrees) -                       (CONVERT_ATD0)
                                      ;   Ignition calculations delay the coil energisation time (dwell) and the discharge time (CONVERT_ATD0)
                                      ;   (spark timing) from a known crankshaft angle. A trim offset of 20 degrees is built in. (CONVERT_ATD0)
                                      ;    An Itrm value of 0 results in 20 degree retard                              (CONVERT_ATD0)
                                      ;    An Itrm value of 20 results in no ignition trim                             (CONVERT_ATD0)
                                      ;    An Itrm value of 40 results in 20 degree advance                            (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
00474E 7F474E 1F 10 EA 10 39              brclr PortAbits,Itrimen,NoItrim ; "If Itrimen" bit of "PortAbits" is clear, branch to (CONVERT_ATD0)
                                                               ; NoItrim: (Ignition trim enable switch is off so skip over) (CONVERT_ATD0)
004753 7F4753 CC 00 00                    ldd  #$0000      ; Load double accumulator with zero (0 volt ADC)            (CONVERT_ATD0)
004756 7F4756 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004757 7F4757 FC 10 8E                    ldd  itrmAdc     ; Load double accumulator with "itrmAdc"                    (CONVERT_ATD0)
00475A 7F475A CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
00475D 7F475D 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "itrmAdc" by 10)         (CONVERT_ATD0)
00475E 7F475E 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
00475F 7F475F CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023x10 (5 volt ADC) (CONVERT_ATD0)
004762 7F4762 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
004763 7F4763 CC 00 00                    ldd  #$0000      ; Load double accumulator with zero (Low range degrees)     (CONVERT_ATD0)
004766 7F4766 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004767 7F4767 CC 01 90                    ldd  #$0190      ; Load double accumulator with decimal 40x10 (High range degrees) (CONVERT_ATD0)
00476A 7F476A 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
00476B 7F476B MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00476B 7F476B EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
00476D 7F476D A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
00476F 7F476F B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004771 7F4771 EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004773 7F4773 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004775 7F4775 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004777 7F4777 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004779 7F4779 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
00477B 7F477B A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
00477D 7F477D B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
00477F 7F477F 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004781 7F4781 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004783 7F4783 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004785 7F4785 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (CONVERT_ATD0)
004787 7F4787 7C 10 90                    std   Itrmx10   ; Copy result to "Itrmx10" Ignition Trim (Degrees x 10)      (CONVERT_ATD0)
00478A 7F478A 20 06                           bra   ItrimDone ; Branch to ItrimDone:                                   (CONVERT_ATD0)
00478C 7F478C                         NoItrim:                                                                         (CONVERT_ATD0)
00478C 7F478C 18 03 00 CB 10 90           movw #$00CB,Itrmx10  ; Decimal 200 -> "Itrmx10" (20 degrees, no trim)        (CONVERT_ATD0)
004792 7F4792                         ItrimDone:                                                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Exhaust Gas Temperature "Egt" -                                    (CONVERT_ATD0)
                                      ;   EGT amplifier 0.0027v @ 0C (32F), 5.022v @ 720C (1328F) Resolution ~ 5 degrees F (CONVERT_ATD0)
                                      ;   Egt = (((egtAdc-0)*(1328-32))/(1023-0))+32                                   (CONVERT_ATD0)
                                      ;   Egt = ((egtAdc*(1296/1023)+32                                                (CONVERT_ATD0)
                                      ;   Egt = (egtAdc*1.26686217)+32                                                 (CONVERT_ATD0)
                                      ;   For integer math:                                                            (CONVERT_ATD0)
                                      ;   Egt = (egtAdc*12668/10000)+32                                                (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004792 7F4792 FC 10 92                    ldd   egtAdc       ; Load double accumulator with value in "egtAdc"          (CONVERT_ATD0)
004795 7F4795 CD 31 7C                    ldy   #$317C       ; Load index register Y with decimal decimal 12,668       (CONVERT_ATD0)
004798 7F4798 13                          emul               ; Extended 16x16 multiply (D)x(Y)=Y:D                     (CONVERT_ATD0)
004799 7F4799 CE 27 10                    ldx   #$2710       ; Load index register X with decimal 10,000               (CONVERT_ATD0)
00479C 7F479C 11                          ediv               ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                 (CONVERT_ATD0)
00479D 7F479D 18 CB 00 20                 addy  #$0020           ; (Y)+(M:M+1)->Y Add decimal 32                       (CONVERT_ATD0)
0047A1 7F47A1 7D 10 94                    sty   Egt          ; copy result to "Egt" Exhaust Gas Temperature            (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Engine Oil Pressure x 10 -                                         (CONVERT_ATD0)
                                      ;   Pressure transducer is ratiometric 1V to 5V 0PSI to 100PSI                   (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0047A4 7F47A4 CC 08 02                    ldd  #$0802      ; Load double accumulator with decimal 205 (1 volt ADC) ( x 10) (CONVERT_ATD0)
0047A7 7F47A7 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
0047A8 7F47A8 FC 10 96                    ldd  eopAdc      ; Load double accumulator with "eopAdc"                     (CONVERT_ATD0)
0047AB 7F47AB CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
0047AE 7F47AE 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)          (CONVERT_ATD0)
0047AF 7F47AF 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
0047B0 7F47B0 CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023 (5 volt ADC) ( x 10) (CONVERT_ATD0)
0047B3 7F47B3 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
0047B4 7F47B4 CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (Low range PSI) ( x 10) (CONVERT_ATD0)
0047B7 7F47B7 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
0047B8 7F47B8 CC 03 E8                    ldd  #$03E8      ; Load double accumulator with decimal 100 (High range PSI) ( x 10) (CONVERT_ATD0)
0047BB 7F47BB 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
0047BC 7F47BC MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047BC 7F47BC EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
0047BE 7F47BE A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
0047C0 7F47C0 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047C2 7F47C2 EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
0047C4 7F47C4 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047C6 7F47C6 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
0047C8 7F47C8 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047CA 7F47CA EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
0047CC 7F47CC A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
0047CE 7F47CE B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
0047D0 7F47D0 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
0047D2 7F47D2 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047D4 7F47D4 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0047D6 7F47D6 1B 8A                       leas  10,SP    ; Stack pointer -> bottom of stack                            (CONVERT_ATD0)
0047D8 7F47D8 7C 10 98                    std   Eopx10   ; Copy result to "Eopx10" Engine Oil Pressure x 10            (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Engine Fuel Pressure x 10 -                                        (CONVERT_ATD0)
                                      ;   Pressure transducer is ratiometric 1V to 5V 0PSI to 100PSI                   (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
0047DB 7F47DB CC 08 02                    ldd  #$0802      ; Load double accumulator with decimal 205 (1 volt ADC) ( x 10) (CONVERT_ATD0)
0047DE 7F47DE 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
0047DF 7F47DF FC 10 9A                    ldd  efpAdc      ; Load double accumulator with "efpAdc"                     (CONVERT_ATD0)
0047E2 7F47E2 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
0047E5 7F47E5 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)          (CONVERT_ATD0)
0047E6 7F47E6 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
0047E7 7F47E7 CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023 (5 volt ADC) ( x 10) (CONVERT_ATD0)
0047EA 7F47EA 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
0047EB 7F47EB CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (Low range PSI) ( x 10) (CONVERT_ATD0)
0047EE 7F47EE 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
0047EF 7F47EF CC 03 E8                    ldd  #$03E8      ; Load double accumulator with decimal 100 (High range PSI) ( x 10) (CONVERT_ATD0)
0047F2 7F47F2 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
0047F3 7F47F3 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047F3 7F47F3 EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
0047F5 7F47F5 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
0047F7 7F47F7 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047F9 7F47F9 EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
0047FB 7F47FB A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
0047FD 7F47FD 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
0047FF 7F47FF B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004801 7F4801 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004803 7F4803 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004805 7F4805 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004807 7F4807 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004809 7F4809 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00480B 7F480B E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
00480D 7F480D 1B 8A                       leas  10,SP    ; Stack pointer -> bottom of stack                            (CONVERT_ATD0)
00480F 7F480F 7C 10 9C                    std   Efpx10   ; Copy result to "Efpx10" Engine Fuel Pressure x 10           (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Throttle Position Percent x 10 -                                   (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004812 7F4812 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (CONVERT_ATD0)
004817 7F4817 CD 08 00                    ldy  #veBins_E   ; Load index register Y with address of first configurable constant (CONVERT_ATD0)
                                                           ; on buffer RAM page 1 (veBins)                             (CONVERT_ATD0)
00481A 7F481A EC EA 03 E8                 ldd  $03E8,Y     ; Load Accu D with value in buffer RAM page 1 offset 1000 (tpsMin) (CONVERT_ATD0)
00481E 7F481E CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004821 7F4821 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "tpsMin" by 10)          (CONVERT_ATD0)
004822 7F4822 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004823 7F4823 FC 10 9E                    ldd  tpsADC      ; Load double accumulator with "tpsADCAdc"                  (CONVERT_ATD0)
004826 7F4826 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004829 7F4829 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "tpsADC" by 10)          (CONVERT_ATD0)
00482A 7F482A 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
00482B 7F482B 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (CONVERT_ATD0)
004830 7F4830 CD 08 00                    ldy  #veBins_E   ; Load index register Y with address of first configurable constant (CONVERT_ATD0)
                                                           ; on buffer RAM page 1 (vebins)                             (CONVERT_ATD0)
004833 7F4833 EC EA 03 EA                 ldd  $03EA,Y     ; Load Accu D with value in buffer RAM page 1 offset 1002 (tpsMax) (CONVERT_ATD0)
004837 7F4837 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
00483A 7F483A 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "tpsMax" by 10)          (CONVERT_ATD0)
00483B 7F483B 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
00483C 7F483C CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (Low range %) ( x 10) (CONVERT_ATD0)
00483F 7F483F 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004840 7F4840 CC 03 E8                    ldd  #$03E8      ; Load double accumulator with decimal 100 (High range %) ( x 10) (CONVERT_ATD0)
004843 7F4843 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004844 7F4844 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004844 7F4844 EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004846 7F4846 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004848 7F4848 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00484A 7F484A EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
00484C 7F484C A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00484E 7F484E 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004850 7F4850 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004852 7F4852 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004854 7F4854 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004856 7F4856 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004858 7F4858 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
00485A 7F485A B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00485C 7F485C E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
00485E 7F485E 1B 8A                       leas  10,SP    ; Stack pointer -> bottom of stack                            (CONVERT_ATD0)
004860 7F4860 7C 10 A0                    std  TpsPctx10 ; Copy result to "TpsPctx10" Throttle Position Percent of travel x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Air Fuel Ratio x 10 -                                              (CONVERT_ATD0)
                                      ;   Innovate LC-2 AFR is ratiometric 0V to 5V 7.35 AFR to 22.39 AFR              (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004863 7F4863 CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (0 volt ADC) ( x 10) (CONVERT_ATD0)
004866 7F4866 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004867 7F4867 FC 10 A4                    ldd  egoAdc      ; Load double accumulator with "egoAdc"                     (CONVERT_ATD0)
00486A 7F486A CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
00486D 7F486D 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)          (CONVERT_ATD0)
00486E 7F486E 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
00486F 7F486F CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023 (5 volt ADC) ( x 10) (10230) (CONVERT_ATD0)
004872 7F4872 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
004873 7F4873 CC 00 4A                    ldd  #$004A      ; Load double accumulator with decimal 7.35 (Low range AFR) ( x 10) (74) (CONVERT_ATD0)
004876 7F4876 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004877 7F4877 CC 00 E0                    ldd  #$00E0      ; Load double accumulator with decimal 22.39 (High range AFR) ( x 10) (224) (CONVERT_ATD0)
00487A 7F487A 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
00487B 7F487B MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
00487B 7F487B EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
00487D 7F487D A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
00487F 7F487F B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004881 7F4881 EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004883 7F4883 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004885 7F4885 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004887 7F4887 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004889 7F4889 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
00488B 7F488B A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
00488D 7F488D B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
00488F 7F488F 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004891 7F4891 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004893 7F4893 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004895 7F4895 1B 8A                       leas  10,SP       ; Stack pointer -> bottom of stack                         (CONVERT_ATD0)
004897 7F4897 7C 10 A6                    std   afr1x10     ; Copy result to "afr1x10" Air Fuel Ratio x 10             (CONVERT_ATD0)
                                      ;*****************************************************************************************
                                      ; - Calculate values at Z1 and Z2 to interpolate injector deadband at current battery
                                      ;   voltage. This is done before entering the main loop as will only change if the
                                      ;   configurable constants for injector dead time and battery voltage correction have
                                      ;   been changed.
                                      ;*****************************************************************************************
00489A 7F489A MACRO                       DEADBAND_Z1_Z2   ; Macro in injcalcs_BPEM488.s
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
                                      ; - Injector dead band is the time required for the injectors to open and close and must (DEADBAND_Z1_Z2)
                                      ;   be included in the pulse width time. The amount of time will depend on battery voltge. (DEADBAND_Z1_Z2)
                                      ;   Battery voltage correction for injector deadband is calculated as a linear function (DEADBAND_Z1_Z2)
                                      ;   of battery voltage from 7.2 volts to 19.2 volts with 13.2 volts being the nominal (DEADBAND_Z1_Z2)
                                      ;   operating voltage where no correction is applied.                            (DEADBAND_Z1_Z2)
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
                                      ; - Calculate values at Z1 and Z2 to interpolate injector deadband at current battery (DEADBAND_Z1_Z2)
                                      ;   voltage. This is done before entering the main loop as will only change if the (DEADBAND_Z1_Z2)
                                      ;   configurable constants for injector dead time and battery voltage correction have (DEADBAND_Z1_Z2)
                                      ;   been changed.                                                                (DEADBAND_Z1_Z2)
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
                                      ;                                                                                (DEADBAND_Z1_Z2)
                                      ;  V1 = 72 (7.2 volts)                                                           (DEADBAND_Z1_Z2)
                                      ;  V  = BatVx10 (current battery voltage x 10)                                   (DEADBAND_Z1_Z2)
                                      ;  V2 = 192 (19.2volts)                                                          (DEADBAND_Z1_Z2)
                                      ;  Z1 = DdBndBase - (DdBBndCor * 6)                                              (DEADBAND_Z1_Z2)
                                      ;  Z  = unknown (deadband)                                                       (DEADBAND_Z1_Z2)
                                      ;  Z2 = DdBndBase + (DdBBndCor * 6)                                              (DEADBAND_Z1_Z2)
                                      ;                                                                                (DEADBAND_Z1_Z2)
                                      ;    |                                                                           (DEADBAND_Z1_Z2)
                                      ;  Z2+....................*                                                      (DEADBAND_Z1_Z2)
                                      ;    |                    :                                                      (DEADBAND_Z1_Z2)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (DEADBAND_Z1_Z2)
                                      ;    |           :        :        Z = Z1 + --------------                       (DEADBAND_Z1_Z2)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (DEADBAND_Z1_Z2)
                                      ;    |   :       :        :                                                      (DEADBAND_Z1_Z2)
                                      ;   -+---+-------+--------+-                                                     (DEADBAND_Z1_Z2)
                                      ;    |   V1      V        V2                                                     (DEADBAND_Z1_Z2)
                                      ;                                                                                (DEADBAND_Z1_Z2)
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
                                      ; - Calculate values at Z1 and Z2                                                (DEADBAND_Z1_Z2)
                                      ; DdBndBase_F = 90 (.9 mSec)                                                     (DEADBAND_Z1_Z2)
                                      ; DdBndCor_F = 18 (.18 mSec/V)                                                   (DEADBAND_Z1_Z2)
                                      ;***************************************************************************************** (DEADBAND_Z1_Z2)
00489A 7F489A 18 0B FF 00 17                  movb   #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE              (DEADBAND_Z1_Z2)
00489F 7F489F CD 08 00                    ldy    #veBins_E    ; Load index register Y with address of first configurable (DEADBAND_Z1_Z2)
                                                              ; constant on buffer RAM page 1 (veBins_E)               (DEADBAND_Z1_Z2)
0048A2 7F48A2 EC EA 03 CC                 ldd    $03CC,Y      ; Load Accu A with value in buffer RAM page 1 offset 972 (DEADBAND_Z1_Z2)
                                                              ; Injector deadband at 13.2V (mSec*10)(DdBndBase_F)      (DEADBAND_Z1_Z2)
0048A6 7F48A6 7C 10 FF                    std    tmp1w        ; Copy to "tmp1w" (Injector deadband at 13.2V (mSec * 100)) (DEADBAND_Z1_Z2)
0048A9 7F48A9 18 0B FF 00 17                  movb   #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE              (DEADBAND_Z1_Z2)
0048AE 7F48AE CD 08 00                    ldy    #veBins_E    ; Load index register Y with address of first configurable (DEADBAND_Z1_Z2)
                                                              ; constant on buffer RAM page 1 (veBins_E)               (DEADBAND_Z1_Z2)
0048B1 7F48B1 EC EA 03 CE                 ldd    $03CE,Y      ; Load Accu A with value in buffer RAM page 1 offset 974 (DEADBAND_Z1_Z2)
                                                              ; Injector deadband voltage correction (mSec/V x 100)(DdBndCor_F) (DEADBAND_Z1_Z2)
0048B5 7F48B5 7C 11 01                    std    tmp2w        ; Copy to "tmp2w"                                        (DEADBAND_Z1_Z2)
0048B8 7F48B8 CD 00 06                    ldy    #$06         ; Decimal 6-> Accu Y                                     (DEADBAND_Z1_Z2)
0048BB 7F48BB 13                              emul                ; (D)*(Y)->Y:D "Injector deadband voltage correction" * 6 (DEADBAND_Z1_Z2)
0048BC 7F48BC 7C 11 03                        std    tmp3w        ;("Injector deadband voltage correction" * 6)-> tmp3w (DEADBAND_Z1_Z2)
0048BF 7F48BF F3 10 FF                        addd   tmp1w        ; A:B)+((M:M+1)->A:B  (Injector deadband at 13.2V + (Injector deadband (DEADBAND_Z1_Z2)
                                                                  ; voltage correction * 6)                            (DEADBAND_Z1_Z2)
0048C2 7F48C2 7C 10 4B                        std   DdBndZ2       ; Copy result to "DdBndZ2"                           (DEADBAND_Z1_Z2)
0048C5 7F48C5 FC 10 FF                    ldd   tmp1w         ; (Injector deadband at 13.2V)-> Accu A                  (DEADBAND_Z1_Z2)
0048C8 7F48C8 B3 11 03                    subd  tmp3w         ;  A:B)-((M:M+1)->A:B  ((Injector deadband at 13.2V) -   (DEADBAND_Z1_Z2)
                                                                  ; (Injector deadband voltage correction * 6))        (DEADBAND_Z1_Z2)
0048CB 7F48CB 2A 05                       bpl   NotMinus      ; N bit = 0 so not a minus result, branch to NotMinus:   (DEADBAND_Z1_Z2)
0048CD 7F48CD 79 10 49                    clr   DdBndZ1       ; Result is minus so clear "DdBndZ1"                     (DEADBAND_Z1_Z2)
0048D0 7F48D0 20 03                       bra   WasMinus      ; Branch to WasMinus: (skip over)                        (DEADBAND_Z1_Z2)
0048D2 7F48D2                         NotMinus:                                                                        (DEADBAND_Z1_Z2)
0048D2 7F48D2 7A 10 49                    staa  DdBndZ1       ; Copy result to "DdBndZ1"                               (DEADBAND_Z1_Z2)
0048D5 7F48D5                         WasMinus:                                                                        (DEADBAND_Z1_Z2)
                                      ;*****************************************************************************************
                                      ; - Interpolate injector deadband at current battery voltage
                                      ;*****************************************************************************************
0048D5 7F48D5 MACRO                       DEADBAND_CALCS   ; Macro in injcalcs_BPEM488.s
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                      ; - Interpolate injector deadband at current battery voltage                     (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
0048D5 7F48D5 CC 00 48                    ldd  #$0048      ; Decimal 72 (7.2 volts) -> Accu D                          (DEADBAND_CALCS)
0048D8 7F48D8 3B                          pshd             ; Push to stack (V1)                                        (DEADBAND_CALCS)
0048D9 7F48D9 FC 10 88                    ldd  BatVx10     ; "BatVx10"(battery volts x 10) -> Accu D                   (DEADBAND_CALCS)
0048DC 7F48DC 3B                          pshd             ; Push to stack (V)                                         (DEADBAND_CALCS)
0048DD 7F48DD CC 00 C0                    ldd  #$00C0      ; Decimal 192 (19.2 volts) -> Accu D                        (DEADBAND_CALCS)
0048E0 7F48E0 3B                          pshd             ; Push to stack (V2)                                        (DEADBAND_CALCS)
0048E1 7F48E1 FC 10 4B                        ldd  DdBndZ2     ;((Injector deadband at 13.2V) + (Injector deadband voltage (DEADBAND_CALCS)
                                                               ; correction * 6)) -> Accu D                            (DEADBAND_CALCS)
0048E4 7F48E4 3B                          pshd             ; Push to stack (Z1)                                        (DEADBAND_CALCS)
0048E5 7F48E5 FC 10 49                        ldd  DdBndZ1     ;((Injector deadband at 13.2V) - (Injector deadband voltage (DEADBAND_CALCS)
                                                               ; correction * 6)) -> Accu D                            (DEADBAND_CALCS)
0048E8 7F48E8 3B                          pshd             ; Push to stack (Z2)                                        (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        Z2       |  SP+ 0                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        Z1       |  SP+ 2                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V2       |  SP+ 4                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V        |  SP+ 6                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V1       |  SP+ 8                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                      ;                     V      V1      V2      Z1    Z2                            (DEADBAND_CALCS)
0048E9 7F48E9 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ; ==========================                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ; result: D: interpolated result                                                 (DEADBAND_CALCS/2D_IPOL)
                                      ; SSTACK: none                                                                   (DEADBAND_CALCS/2D_IPOL)
                                      ;         no registers are preserved                                             (DEADBAND_CALCS/2D_IPOL)
                                      ;                                                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;    ^ V                                                                         (DEADBAND_CALCS/2D_IPOL)
                                      ;    |                                                                           (DEADBAND_CALCS/2D_IPOL)
                                      ;  Z2+....................*                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;    |                    :                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (DEADBAND_CALCS/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (DEADBAND_CALCS/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (DEADBAND_CALCS/2D_IPOL)
                                      ;    |   :       :        :                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ;                                                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
0048E9 7F48E9 EC 86                                   LDD       \1    ; load V                                         (DEADBAND_CALCS/2D_IPOL)
0048EB 7F48EB A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (DEADBAND_CALCS/2D_IPOL)
0048ED 7F48ED B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
0048EF 7F48EF EC 80                                   LDD       \5    ; load Z2                                        (DEADBAND_CALCS/2D_IPOL)
0048F1 7F48F1 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
0048F3 7F48F3 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (DEADBAND_CALCS/2D_IPOL)
0048F5 7F48F5 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
0048F7 7F48F7 EC 84                                   LDD       \3    ; load V2                                        (DEADBAND_CALCS/2D_IPOL)
0048F9 7F48F9 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (DEADBAND_CALCS/2D_IPOL)
0048FB 7F48FB B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (DEADBAND_CALCS/2D_IPOL)
                                      ;*********************************************************************           (DEADBAND_CALCS/2D_IPOL)
0048FD 7F48FD 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (DEADBAND_CALCS/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (DEADBAND_CALCS/2D_IPOL)
0048FF 7F48FF B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
004901 7F4901 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                      ; - Free stack space (result in D)                                               (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
004903 7F4903 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (DEADBAND_CALCS)
004905 7F4905 7C 11 05                    std  tmp4w      ; Copy result to "tmp4w" (Injector deadband at current battery (DEADBAND_CALCS)
                                                              ; voltage) (mSec x 100)                                  (DEADBAND_CALCS)
004908 7F4908 FC 11 05                    ldd  tmp4w      ; Result in "tmp4w" -> Accu D                                (DEADBAND_CALCS)
00490B 7F490B CE 00 0A                    ldx  #$000A     ; Decimal 10-> Accu X                                        (DEADBAND_CALCS)
00490E 7F490E 18 10                       idiv            ; (D)/(X)->Xrem->D ("tmp4w"/10="Deadband")(mSec*10)          (DEADBAND_CALCS)
004910 7F4910 7E 10 CE                    stx  Deadband   ; Copy result to "Deadband"(mSec*10)                         (DEADBAND_CALCS)
                                      ;*****************************************************************************************
                                      ; - Energise the Fuel pump relay and the Emergency Shutdown relay on Port B Bit0
                                      ;*****************************************************************************************
004913 7F4913 MACRO                       FUEL_PUMP_AND_ASD_ON    ; Macro in gpio_BEEM488.s
                                                            ; with %00010000 (PS4 pull down,                           (FUEL_PUMP_AND_ASD_ON)
                                                            ; PS7,6,5,3,2,1,0 pull up)                                 (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ; - Initialize Port T. Enhanced Capture Channels IOC7-IOC0. pg 527               (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT0(P9) - IOC0 OC0 LED red  (D7)(1to28)(Ign1)(1&6)   (output, low)                * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT1(P10) - IOC1 IC1 (CASc)(Tooth decoder)(input,  pull-down) VR sensor P9         * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT2(P11) - IOC2 OC2 LED red  (D8)(1to28)(Ign2)(10&5)  (output, low)               * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT3(P12) - IOC3 IC3 (VSSb)(Vehicle Speed)(input,  pull-down) VR sensor P10        * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT4(P15) - IOC4 IC4 (CASa)(RPM)          (input,  pull-down) Volt to Freq U1      * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT5(P16) - IOC5 IC5 (CASd)(Tooth decoder)(input,  pull-down) gear tooth K2 Cam    * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT6(P17) - IOC6 IC6 (VSSa)(Vehicle Speed)(input,  pull-down) Volt to Freq U2      * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT7(P18) - IoC7 IC7 (CASb)(Tooth decoder)(input,  pull-down) gear tooth K3 Crank  * (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ;* - NOTE! Port T is initialized in ect_BEEM.s                                   (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ; - Energise the Fuel pump relay and the Emergency Shutdown relay on Port B Bit0 and Bit1 (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
004913 7F4913 4C 01 01                    bset  PORTB,FuelPump  ; Set "FuelPump" pin on Port B(LED9 board 1 to 28)     (FUEL_PUMP_AND_ASD_ON)
004916 7F4916 4C 01 02                        bset  PORTB,ASDRelay  ; Set "ASDRelay" pin on Port B(LED23 board 1 to 28) (FUEL_PUMP_AND_ASD_ON)
                                      ;*****************************************************************************************
                                      ; --------------------------------- Priming Mode ----------------------------------------
                                      ;
                                      ; On power up before entering the main loop all injectors are pulsed with a priming pulse
                                      ; to wet the intake manifold walls and provide some initial starting fuel. The injector
                                      ; pulse width is interpolated from the Prime Pulse table which plots engine temperature
                                      ; in degrees F to 0.1 degree resoluion against time in mS to 0.1mS resoluion
                                      ;
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - The ECT and TIM timers are initilized with the 5.12uS time base. This time base is
                                      ;   used for ignition calculations in crank mode as well as injector pulse width
                                      ;   calculations in prime and crank mode. In run mode the time base is swithced to 2.56uS
                                      ;   resolution for all calculations.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Look up the value for the prime pulse width in 5.12uS resolution
                                      ;*****************************************************************************************
004919 7F4919 MACRO                       PRIME_PW_LU              ; (Macro in injcalcs_BEEM488.s)
                                      ;***************************************************************************************** (PRIME_PW_LU)
                                      ; --------------------------------- Priming Mode ---------------------------------------- (PRIME_PW_LU)
                                      ;                                                                                (PRIME_PW_LU)
                                      ; On power up before entering the main loop all injectors are pulsed with a priming pulse (PRIME_PW_LU)
                                      ; to wet the intake manifold walls and provide some initial starting fuel. The injector (PRIME_PW_LU)
                                      ; pulse width is interpolated from the Prime Pulse table which plots engine temperature (PRIME_PW_LU)
                                      ; in degrees F to 0.1 degree resoluion against time in mS to 0.1mS resoluion     (PRIME_PW_LU)
                                      ;                                                                                (PRIME_PW_LU)
                                      ;***************************************************************************************** (PRIME_PW_LU)
                                      ;***************************************************************************************** (PRIME_PW_LU)
                                      ; - Look up current value in Prime Pulsewidth Table (PrimePW)(mS x 10)           (PRIME_PW_LU)
                                      ;***************************************************************************************** (PRIME_PW_LU)
004919 7F4919 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (PRIME_PW_LU)
00491E 7F491E 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (PRIME_PW_LU)
                                                                  ; ->page where the desired curve resides             (PRIME_PW_LU)
004924 7F4924 18 03 01 90 10 27           movw #$0190,CrvRowOfst  ; 400 -> Offset from the curve page to the curve row (PRIME_PW_LU)
                                                                      ; (tempTable2)Actual offset is 800)              (PRIME_PW_LU)
00492A 7F492A 18 03 01 AC 10 29           movw #$01AC,CrvColOfst  ; 428 -> Offset from the curve page to the curve column (PRIME_PW_LU)
                                                                      ; (primePWTable)(actual offset is 856)           (PRIME_PW_LU)
004930 7F4930 18 04 10 6E 10 2B           movw Cltx10,CrvCmpVal   ; Engine Coolant Temperature (Degrees F x 10) ->     (PRIME_PW_LU)
                                                                  ; Curve comparison value                             (PRIME_PW_LU)
004936 7F4936 18 0B 09 10 2D              movb #$09,CrvBinCnt     ; 9 -> number of bins in the curve row or column minus 1 (PRIME_PW_LU)
00493B 7F493B 16 61 17                    jsr   CRV_LU_NP         ; Jump to subroutine at CRV_LU_NP:(located in        (PRIME_PW_LU)
                                                                      ; interp_BPEM488.s module)                       (PRIME_PW_LU)
00493E 7F493E 7C 10 D4                        std  FDpw               ; Result -> "FDpw" (fuel delivery pulsewidth (mS x 10) (PRIME_PW_LU)
004941 7F4941 F3 10 CE                        addd Deadband           ; (A:B)+(M:M+1)->A:B ("FDpw"+"Deadband"="PrimePW" (PRIME_PW_LU)
004944 7F4944 7C 10 D0                        std  PrimePW            ; Result -> "PrimePW" (primer injector pulsewidth) (mS x 10) (PRIME_PW_LU)
004947 7F4947 FC 10 D4                        ldd  FDpw               ; "FDpw"->Accu D (mS x 10)                       (PRIME_PW_LU)
00494A 7F494A CE 00 0A                        ldx  #$000A             ; Decimal 10->Accu X                             (PRIME_PW_LU)
00494D 7F494D 18 10                           idiv                    ; (D)/(X)->Xrem->D ("FDpw"/10="FD")(mS)          (PRIME_PW_LU)
00494F 7F494F 7E 10 D8                        stx  FD                 ; Copy reslut to "FD"(mS)(Fuel burn calcs have to be in mS) (PRIME_PW_LU)
                                      ;***************************************************************************************** (PRIME_PW_LU)
                                      ; - Convert to timer ticks in 5.12uS resolution                                  (PRIME_PW_LU)
                                      ;***************************************************************************************** (PRIME_PW_LU)
004952 7F4952 FC 10 D0                    ldd  PrimePW     ; "PrimePW" -> Accu D                                       (PRIME_PW_LU)
004955 7F4955 CD 27 10                        ldy   #$2710     ; Load index register Y with decimal 10000 (for integer math) (PRIME_PW_LU)
004958 7F4958 13                              emul             ;(D)x(Y)=Y:D "PrimePW" * 10,000                         (PRIME_PW_LU)
004959 7F4959 CE 02 00                        ldx   #$200      ; Decimal 512 -> Accu X                                 (PRIME_PW_LU)
00495C 7F495C 11                          ediv             ;(Y:D)/(X)=Y;Rem->D "PrimePW" * 10,000 / 512 = "CrankPWtk"  (PRIME_PW_LU)
00495D 7F495D 7D 10 5B                    sty   PrimePWtk  ; Copy result to "PrimePWtk" (Priming pulse width in 5.12uS (PRIME_PW_LU)
004960 7F4960 18 04 10 5B 10 63               movw primePWtk,InjOCadd2 ; Copy value in "primePWtk" to "InjOCadd2" (Primer pulse width
                                                                       ; in 5.12uS res to injector timer output compare adder)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - In the INIT_TIM macro, Port T PT0, PT2 and all Port P pins are set as outputs with
                                      ;   initial setting low. To control both the ignition and injector drivers two interrupts
                                      ;   are required for each ignition or injection event. At the appropriate crank angle and
                                      ;   cam phase an interrupt is triggered. In this ISR routine the channel output compare
                                      ;   register is loaded with the delay value from trigger time to the time desired to
                                      ;   energise the coil or injector and the channel interrupt is enabled. When the output
                                      ;   compare matches, the pin is commanded high and the timer channel interrupt is triggered.
                                      ;   The output compare register is then loaded with the value to keep the coil or injector
                                      ;   energised. When the output compare matches the pin is commanded low to fire the coil
                                      ;   or de-energise the injector.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Pulse Inj1 (Cylinders 1&10) with value in "primePWtk"
                                      ;*****************************************************************************************
004966 7F4966 MACRO                       FIRE_INJ1               ; Macro in tim_BEEM488.s
                                      ;***************************************************************************************** (FIRE_INJ1)
                                      ; - PP3(P1) - TIM1 OC3 (D1)(1to28)(Inj1)(1&10) Control                           (FIRE_INJ1)
                                      ;***************************************************************************************** (FIRE_INJ1)
                                      ;***************************************************************************************** (FIRE_INJ1)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ1)
                                      ;***************************************************************************************** (FIRE_INJ1)
004966 7F4966 1C 03 D9 80                 bset TIM_TCTL2,Bit7 ; Set Ch3 output line to 1 on compare                    (FIRE_INJ1)
00496A 7F496A 1C 03 D9 40                 bset TIM_TCTL2,Bit6 ; Set Ch3 output line to 1 on compare                    (FIRE_INJ1)
00496E 7F496E FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ1)
004971 7F4971 F3 10 61                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ1)
004974 7F4974 7C 03 E6                    std  TIM_TC3H       ; Copy result to Timer IC/OC register 3 (Start OC operation) (FIRE_INJ1)
                                      ;*****************************************************************************************
                                      ; - Pulse Inj2 (Cylinders 9&4) with value in "primePWtk"
                                      ;*****************************************************************************************
004977 7F4977 MACRO                       FIRE_INJ2               ; Macro in tim_BEEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
                                      ; - PP4(P112) - TIM1 OC4 (D3)(87to112)(Inj2)(9&4) Control                        (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
004977 7F4977 1C 03 D8 01                 bset TIM_TCTL1,Bit0 ; Set Ch4 output line to 1 on compare                    (FIRE_INJ2)
00497B 7F497B 1C 03 D8 02                 bset TIM_TCTL1,Bit1 ; Set Ch4 output line to 1 on compare                    (FIRE_INJ2)
00497F 7F497F FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ2)
004982 7F4982 F3 10 61                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ2)
004985 7F4985 7C 03 E8                    std  TIM_TC4H       ; Copy result to Timer IC/OC register 4 (Start OC operation) (FIRE_INJ2)
                                      ;*****************************************************************************************
                                      ; - Pulse Inj3 (Cylinders 3&6) with value in "primePWtk"
                                      ;*****************************************************************************************
004988 7F4988 MACRO                       FIRE_INJ3               ; Macro in tim_BEEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
                                      ; - PP5(P111) - TIM1 OC5 (D6)(87to112)(Inj3)(3&6) Control                        (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
004988 7F4988 1C 03 D8 04                 bset TIM_TCTL1,Bit2 ; Set Ch5 output line to 1 on compare                    (FIRE_INJ3)
00498C 7F498C 1C 03 D8 08                 bset TIM_TCTL1,Bit3 ; Set Ch5 output line to 1 on compare                    (FIRE_INJ3)
004990 7F4990 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ3)
004993 7F4993 F3 10 61                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ3)
004996 7F4996 7C 03 EA                    std  TIM_TC5H       ; Copy result to Timer IC/OC register 5 (Start OC operation) (FIRE_INJ3)
                                      ;*****************************************************************************************
                                      ; - Pulse Inj4 (Cylinders 5&8) with value in "primePWtk"
                                      ;*****************************************************************************************
004999 7F4999 MACRO                       FIRE_INJ4               ; Macro in tim_BEEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
                                      ; - PP6(P110) - TIM1 OC6 (D1)(87to112)(Inj4)(5&8) Control                        (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
004999 7F4999 1C 03 D8 10                 bset TIM_TCTL1,Bit4 ; Set Ch6 output line to 1 on compare                    (FIRE_INJ4)
00499D 7F499D 1C 03 D8 20                 bset TIM_TCTL1,Bit5 ; Set Ch6 output line to 1 on compare                    (FIRE_INJ4)
0049A1 7F49A1 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ4)
0049A4 7F49A4 F3 10 61                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ4)
0049A7 7F49A7 7C 03 EC                    std  TIM_TC6H       ; Copy result to Timer IC/OC register 6 (Start OC operation) (FIRE_INJ4)
                                      ;*****************************************************************************************
                                      ; - Pulse Inj5 (Cylinders 7&2) with value in "primePWtk"
                                      ;*****************************************************************************************
0049AA 7F49AA MACRO                       FIRE_INJ5               ; Macro in tim_BEEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
                                      ; - PP7(P109) - TIM1 OC7 (D7)(87to112)(Inj5)(7&2) Control                        (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
0049AA 7F49AA 1C 03 D8 80                 bset TIM_TCTL1,Bit7 ; Set Ch7 output line to 1 on compare                    (FIRE_INJ5)
0049AE 7F49AE 1C 03 D8 40                 bset TIM_TCTL1,Bit6 ; Set Ch7 output line to 1 on compare                    (FIRE_INJ5)
0049B2 7F49B2 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ5)
0049B5 7F49B5 F3 10 61                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ5)
0049B8 7F49B8 7C 03 EE                    std  TIM_TC7H       ; Copy result to Timer IC/OC register 7(Start OC operation) (FIRE_INJ5)
                                      ;*****************************************************************************************
                                      ; - Set the "crank" bit and clear the "run" bit of the "engine" bit field in preparation
                                      ;   for cranking.
                                      ;*****************************************************************************************
0049BB 7F49BB 1C 10 F1 02                bset engine,crank   ; Set the "crank" bit of "engine" bit field
0049BF 7F49BF 1D 10 F1 04                bclr engine,run     ; Clear the "run" bit of "engine" bit field
                                      ;*****************************************************************************************
                                      ; - Set the "base512" bit and clear the "base256" bit of the "engine2" bit field in
                                      ;   preparation for cranking.
                                      ;*****************************************************************************************
0049C3 7F49C3 1C 10 F2 01                bset engine2,base512   ; Set the "base512" bit of "engine" bit field
0049C7 7F49C7 1D 10 F2 02                bclr engine2,base256   ; Clear the "base256" bit of "engine" bit field
                                      ;*****************************************************************************************
                                      ; - Load stall counter with compare value. Stall check is done in the main loop every
                                      ;   mSec. "Stallcnt" is decremented every mSec and reloaded at every crank signal.
                                      ;*****************************************************************************************
0049CB 7F49CB 18 0B FF 00 17                  movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
0049D0 7F49D0 CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable
                                                              ; constant on buffer RAM page 1 (vebins)
0049D3 7F49D3 EC EA 03 E6                 ldd   $03E6,Y       ; Load Accu A with value in buffer RAM page 1 offset 998
                                                              ; "Stallcnt" (stall counter)(offset = 998)
0049D7 7F49D7 7C 10 22                    std  Stallcnt       ; Copy to "Stallcnt" (no crank or stall condition counter)
                                                              ; (1mS increments)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;************************* --- M A I N  E V E N T  L O O P --- ***************************
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
0049DA 7F49DA                         MainLoop:
                                      ;*****************************************************************************************
                                      ; Coding experiments
                                      ;*****************************************************************************************
                                      ;
                                      ;    movw #$7FFF,TestVal  ; Load "TestVal" with decimal +32767
                                      ;    movw #$FFFF,TestVal  ; Load "TestVal" with decimal -1
                                      ;    movw #$FFFE,TestVal  ; Load "TestVal" with decimal -2
                                      ;    movw #$FFD8,TestVal  ; Load "TestVal" with decimal -40
                                      ;    movw #$8000,TestVal  ; Load "TestVal" with decimal -32768
                                      ;    movw #$8001,TestVal  ; Load "TestVal" with decimal -32767
                                      ;    movw #$F060,TestVal  ; Load "TestVal" with decimal -4000
                                      ;    movw #$52D0,TestVal  ; Load "TestVal" with decimal +21200
                                      ;    movw #TestVal,TestVal ; Load "TestVal" with the address of "TestVal" ($1050 decimal 4176)
                                      ;
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Update Ports A, B, E, K, J, P and T status bits
                                      ;*****************************************************************************************
0049DA 7F49DA 96 00                       ldaa PORTA      ; Load accu A with value in Port A
0049DC 7F49DC 7A 10 EA                    staa PortAbits  ; Copy to "PortAbits"
0049DF 7F49DF 96 01                       ldaa PORTB      ; Load accu A with value in Port B
0049E1 7F49E1 7A 10 EB                    staa PortBbits  ; Copy to "PortBbits"
0049E4 7F49E4 96 08                       ldaa PORTE      ; Load accu A with value in Port E
0049E6 7F49E6 7A 10 EC                    staa PortEbits  ; Copy to "PortEbits"
0049E9 7F49E9 96 32                       ldaa PORTK      ; Load accu K with value in Port K
0049EB 7F49EB 7A 10 ED                    staa PortKbits  ; Copy to "PortKBits"
0049EE 7F49EE B6 02 68                    ldaa PTJ        ; Load accu A with value in Port J
0049F1 7F49F1 7A 10 EE                    staa PortJbits  ; Copy to "PortJbits"
0049F4 7F49F4 B6 02 58                    ldaa PTP        ; Load accu A with value in Port P
0049F7 7F49F7 7A 10 EF                    staa PortPbits  ; Copy to "PortPbits"
0049FA 7F49FA B6 02 40                    ldaa PTT        ; Load accu A with value in Port T
0049FD 7F49FD 7A 10 F0                    staa PortTbits  ; Copy to "PortTbits"
                                       ;*****************************************************************************************
                                      ; - Run ATD0 conversion sequence and load all results.
                                      ;*****************************************************************************************
004A00 7F4A00 MACRO                       Run_ATD0    ;(Macro in adc0_BPEM488.s)
004A00 7F4A00 18 0B 80 02 C6              movb  #SCF,ATD0STAT0 ; Set the Sequence Complete Flag of ATD0STAT0 to clear the flag (RUN_ATD0)
004A05 7F4A05 FC 02 D0                    ldd   ATD0DR0H  ; Load accumulator with value in ATD Ch00                    (RUN_ATD0)
004A08 7F4A08 7C 10 6C                    std   cltAdc    ; Copy to cltAdc                                             (RUN_ATD0)
004A0B 7F4A0B FC 02 D2                    ldd   ATD0DR1H  ; Load accumulator with value in ATD Ch01                    (RUN_ATD0)
004A0E 7F4A0E 7C 10 70                    std   matAdc    ; Copy to matAdc ADC                                         (RUN_ATD0)
004A11 7F4A11 FC 02 D4                    ldd   ATD0DR2H  ; Load accumulator with value in ATD Ch02                    (RUN_ATD0)
004A14 7F4A14 7C 10 74                    std   eftAdc    ; Copy to eftAdc ADC                                         (RUN_ATD0)
004A17 7F4A17 FC 02 D6                    ldd   ATD0DR3H  ; Load accumulator with value in ATD Ch03                    (RUN_ATD0)
004A1A 7F4A1A 7C 10 78                    std   eotAdc    ; Copy to eotAdc                                             (RUN_ATD0)
004A1D 7F4A1D FC 02 D8                    ldd   ATD0DR4H  ; Load accumulator with value in ATD Ch04                    (RUN_ATD0)
004A20 7F4A20 7C 10 7C                    std   RV11Adc   ; Copy to RV11 ADC                                           (RUN_ATD0)
004A23 7F4A23 FC 02 DA                    ldd   ATD0DR5H  ; Load accumulator with value in ATD Ch05                    (RUN_ATD0)
004A26 7F4A26 7C 10 7E                    std   mapAdc    ; Copy to mapAdc                                             (RUN_ATD0)
004A29 7F4A29 FC 02 DC                    ldd   ATD0DR6H  ; Load accumulator with value in ATD Ch06                    (RUN_ATD0)
004A2C 7F4A2C 7C 10 82                    std   baroAdc   ; Copy to baroAdc                                            (RUN_ATD0)
004A2F 7F4A2F FC 02 DE                    ldd   ATD0DR7H  ; Load accumulator with value in ATD Ch07                    (RUN_ATD0)
004A32 7F4A32 7C 10 86                    std   batAdc    ; Copy to bat ADC                                            (RUN_ATD0)
004A35 7F4A35 FC 02 E0                    ldd   ATD0DR8H  ; Load accumulator with value in ATD Ch08                    (RUN_ATD0)
004A38 7F4A38 7C 10 8A                    std   ftrmAdc   ; Copy to ftrmAdc                                            (RUN_ATD0)
004A3B 7F4A3B FC 02 E2                    ldd   ATD0DR9H  ; Load accumulator with value in ATD Ch09                    (RUN_ATD0)
004A3E 7F4A3E 7C 10 8E                    std   itrmAdc   ; Copy to itrmAdc                                            (RUN_ATD0)
004A41 7F4A41 FC 02 E4                    ldd   ATD0DR10H ; Load accumulator with value in ATD Ch10                    (RUN_ATD0)
004A44 7F4A44 7C 10 92                    std   egtAdc    ; Copy to egtAdc                                             (RUN_ATD0)
004A47 7F4A47 FC 02 E6                    ldd   ATD0DR11H ; Load accumulator with value in ATD Ch11                    (RUN_ATD0)
004A4A 7F4A4A 7C 10 96                    std   eopAdc    ; Copy to eopAdc                                             (RUN_ATD0)
004A4D 7F4A4D FC 02 E8                    ldd   ATD0DR12H ; Load accumulator with value in ATD Ch12                    (RUN_ATD0)
004A50 7F4A50 7C 10 9A                    std   efpAdc    ; Copy to efpAdc                                             (RUN_ATD0)
004A53 7F4A53 FC 02 EA                    ldd   ATD0DR13H ; Load accumulator with value in ATD Ch13                    (RUN_ATD0)
004A56 7F4A56 7C 10 9E                    std   tpsADC    ; Copy to tpsADC                                             (RUN_ATD0)
004A59 7F4A59 FC 02 EC                    ldd   ATD0DR14H ; Load accumulator with value in ATD Ch14                    (RUN_ATD0)
004A5C 7F4A5C 7C 10 A2                    std   iacAdc    ; Copy to iacADC                                             (RUN_ATD0)
004A5F 7F4A5F FC 02 EE                    ldd   ATD0DR15H ; Load accumulator with value in ATD Ch15                    (RUN_ATD0)
004A62 7F4A62 7C 10 A4                    std   egoAdc    ; Copy to egoAdc                                             (RUN_ATD0)
                                      ;*****************************************************************************************
                                      ; - Convert ADC values to user units -
                                      ;*****************************************************************************************
                                      ;    ADC0_CLT     ; Calculate Cltx10    ; Engine Coolant Temperature (Degrees F x 10) (6)
                                      ;    ADC0_MAT     ; Calculate Matx10    ; Manifold Air Temperature (Degrees F x 10) (10)
                                      ;    ADC0_EFT     ; Calculate Eftx10    ; Engine Fuel Temperature (Degrees F x 10) (14)
                                      ;    ADC0_EOT     ; Calculate Eotx10    ; Engine Oil Temperature (Degrees F x 10)(18)
                                      ;    ADC0_MAP     ; Calculate Mapx10    ; Manifold Absolute Pressure (KPAx10) (24)
                                      ;    ADC0_BARO    ; Calculate Barox10   ; Barometric Pressure (KPAx10) (28)
                                      ;    ADC0_BATV    ; Calculate BatVx10   ; Battery Voltage (Volts x 10) (32)
                                      ;    ADC0_FTRM    ; Calculate Ftrmx10   ; Fuel Trim (% x 10)(+-20%) (36)
                                      ;    ADC0_ITRM    ; Calculate Itrmx10   ; Ignition Trim (degrees x 10)+-20 degrees) (40)
                                      ;        ADC0_EGT     ; Calculate Egt       ; Exhaust Gas Temperature (degrees F) (44)
                                      ;    ADC0_EOP     ; Calculate Eopx10    ; Engine Oil Pressure (PSI x 10) (48)
                                      ;    ADC0_EFP     ; Calculate Efpx10    ; Engine Fuel Pressure (PSI x 10)( (52)
                                      ;    ADC0_TPSPCT  ; Calculate TpsPctx10 ; Throttle Position Sensor % of travel(%x10) (56)
                                      ;        ADC0_AFR1    ; Calculate afr1x10   ; Air Fuel Ratio (AFRx10)(exact for TS) (62)
                                      ;*****************************************************************************************
004A65 7F4A65 MACRO                       CONVERT_ATD0    ;(Macro in adc0_BPEM488.s)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Engine Coolant Temperature (Degrees F x 10)                          (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004A65 7F4A65 FE 10 6C                    ldx   cltAdc            ; Load index register X with value in "cltAdc"       (CONVERT_ATD0)
004A68 7F4A68 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "cltAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
004A6A 7F4A6A ED E2 6D 67                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
004A6E 7F4A6E 7D 10 6E                    sty   Cltx10            ; Copy result to "Cltx10" Engine Coolant Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Manifold Air Temperature (Degrees F x 10)                            (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004A71 7F4A71 FE 10 70                    ldx   matAdc            ; Load index register X with value in "matAdc"       (CONVERT_ATD0)
004A74 7F4A74 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "matAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
004A76 7F4A76 ED E2 6D 67                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
004A7A 7F4A7A 7D 10 72                    sty   Matx10            ; Copy result to "Matx100" Manifold Air Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Engine Fuel Temperature (Degrees F x 10)                             (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004A7D 7F4A7D FE 10 74                    ldx   eftAdc            ; Load index register X with value in "eftAdc"       (CONVERT_ATD0)
004A80 7F4A80 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "eftAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
004A82 7F4A82 ED E2 6D 67                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
004A86 7F4A86 7D 10 76                    sty   Eftx10            ; Copy result to "Eftx100" Engine Fuel Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Look up Engine Oil Temperature (Degrees F x 10)                              (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004A89 7F4A89 FE 10 78                    ldx   eotAdc            ; Load index register X with value in "eoAdc"        (CONVERT_ATD0)
004A8C 7F4A8C 18 48                       aslx                    ; Arithmetic shift left index register X (multiply "eoAdc" (CONVERT_ATD0)
                                                                  ; by two) I have no idea why I have to do this but if I don't (CONVERT_ATD0)
                                                                  ; the table look up is only half of where it shoud be ??????? (CONVERT_ATD0)
004A8E 7F4A8E ED E2 6D 67                 ldy   DodgeThermistor,X  ; Load index register Y with value in "DodgeThermistor" table, (CONVERT_ATD0)
                                                                  ; offset in index register X                         (CONVERT_ATD0)
004A92 7F4A92 7D 10 7A                    sty   Eotx10           ; Copy result to "Eotx100" Engine Oil Temperature x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Manifold Absolute Pressure x 10 (Used to calculate to 1 decimal place) (CONVERT_ATD0)
                                      ;   MAP sensor MPX4115AP                                                         (CONVERT_ATD0)
                                      ;   Vout = MAP sensor output voltage                                             (CONVERT_ATD0)
                                      ;   P = Manifold pressure in KPA                                                 (CONVERT_ATD0)
                                      ;                                                                                (CONVERT_ATD0)
                                      ;   Vout = (mapAdc/1023)*5                                                       (CONVERT_ATD0)
                                      ;   P = ((Vout/5)+0.095)/0.009                                                   (CONVERT_ATD0)
                                      ; - For integer math:                                                            (CONVERT_ATD0)
                                      ;   P x 10 = ((mapAdc*10,000)/1023)+950)/9                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004A95 7F4A95 FC 10 7E                    ldd   mapAdc        ; Load double accumulator with value in "mapAdc"         (CONVERT_ATD0)
004A98 7F4A98 CD 27 10                    ldy   #$2710        ; Load index register Y with decimal decimal 10,000      (CONVERT_ATD0)
004A9B 7F4A9B 13                          emul                ; Extended 16x16 multiply (D)x(Y)=Y:D                    (CONVERT_ATD0)
004A9C 7F4A9C CE 03 FF                    ldx   #$03FF        ; Load index register X with decimal 1023                (CONVERT_ATD0)
004A9F 7F4A9F 11                          ediv                ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                (CONVERT_ATD0)
004AA0 7F4AA0 18 CB 03 B6                 addy  #$03B6        ; Add without carry decimal 950 to Y (Y)+(M:M+1)->(Y)    (CONVERT_ATD0)
004AA4 7F4AA4 B7 64                       tfr   Y,D           ; Copy value in "Y" to "D"                               (CONVERT_ATD0)
004AA6 7F4AA6 CE 00 09                    ldx   #$0009        ; Load index register "X" with decimal 9                 (CONVERT_ATD0)
004AA9 7F4AA9 18 10                       idiv                ; Integer divide (D)/(X)=>X Rem=>D                       (CONVERT_ATD0)
004AAB 7F4AAB 7E 10 80                    stx   Mapx10        ; Copy result to "Mapx10" (KPAx10)                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Barometric Pressure x 10(Used to calculate to 1 decimal place)     (CONVERT_ATD0)
                                      ;   Baro sensor MPX4115AP                                                        (CONVERT_ATD0)
                                      ;   Vout = Baro sensor output voltage                                            (CONVERT_ATD0)
                                      ;   P = Barometric pressure in KPA                                               (CONVERT_ATD0)
                                      ;                                                                                (CONVERT_ATD0)
                                      ;   Vout = (baroAdc/1023)*5                                                      (CONVERT_ATD0)
                                      ;   P = ((Vout/5)+0.095)/0.009                                                   (CONVERT_ATD0)
                                      ; - For integer math:                                                            (CONVERT_ATD0)
                                      ;   P x 10 = ((baroAdc*10,000)/1023)+950)/9                                      (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004AAE 7F4AAE FC 10 82                    ldd   baroAdc       ; Load double accumulator with value in "baroAdc"        (CONVERT_ATD0)
004AB1 7F4AB1 CD 27 10                    ldy   #$2710        ; Load index register Y with decimal decimal 10,000      (CONVERT_ATD0)
004AB4 7F4AB4 13                          emul                ; Extended 16x16 multiply (D)x(Y)=Y:D                    (CONVERT_ATD0)
004AB5 7F4AB5 CE 03 FF                    ldx   #$03FF        ; Load index register X with decimal 1023                (CONVERT_ATD0)
004AB8 7F4AB8 11                          ediv                ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                (CONVERT_ATD0)
004AB9 7F4AB9 18 CB 03 B6                 addy  #$03B6        ; Add without carry decimal 950 to Y (Y)+(M:M+1)->(Y)    (CONVERT_ATD0)
004ABD 7F4ABD B7 64                       tfr   Y,D           ; Copy value in "Y" to "D"                               (CONVERT_ATD0)
004ABF 7F4ABF CE 00 09                    ldx   #$0009        ; Load index register "X" with decimal 9                 (CONVERT_ATD0)
004AC2 7F4AC2 18 10                       idiv                ; Integer divide (D)/(X)=>X Rem=>D                       (CONVERT_ATD0)
004AC4 7F4AC4 7E 10 84                    stx   Barox10        ; Copy result to "Barox10" (KPAx10)                     (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Battery Voltage x 10 -                                             (CONVERT_ATD0)
                                      ;    (batAdc/1023)*29.95 = BatV                                                  (CONVERT_ATD0)
                                      ;             or                                                                 (CONVERT_ATD0)
                                      ;    batAdc*(29.95/1023) = BatV, batADC = BatV                                   (CONVERT_ATD0)
                                      ;    batAdc*.029276637 = BatV  batADC = batV/.029276637                          (CONVERT_ATD0)
                                      ;    batAdc*(300/1023) = BatV*10                                                 (CONVERT_ATD0)
                                      ;    batAdc*.29276637 = BatV*10 bat ADC = batV*10/.29276637                      (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004AC7 7F4AC7 FC 10 86                    ldd   batAdc       ; Load double accumulator with value in "batAdc"          (CONVERT_ATD0)
004ACA 7F4ACA CD 01 2C                    ldy   #$012C       ; Load index register Y with decimal decimal 300          (CONVERT_ATD0)
004ACD 7F4ACD 13                          emul               ; Extended 16x16 multiply (D)x(Y)=Y:D                     (CONVERT_ATD0)
004ACE 7F4ACE CE 03 FF                    ldx   #$03FF       ; Load index register X with decimal 1023                 (CONVERT_ATD0)
004AD1 7F4AD1 11                          ediv               ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                 (CONVERT_ATD0)
004AD2 7F4AD2 7D 10 88                    sty   BatVx10      ; Copy result to "BatVx10" (Battery Voltage x 10)         (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Fuel Trim (% x 10)(+-20%) -                                        (CONVERT_ATD0)
                                      ;   (80% = 80% of VEcurr, 100% = 100% of VeCurr(no correction), 120% = 120% of VEcurr) (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004AD5 7F4AD5 1F 10 EA 08 39              brclr PortAbits,Ftrimen,NoFtrim ; "If Ftrimen" bit of "PortAbits" is clear, branch to (CONVERT_ATD0)
                                                                ; NoFtrim: (Fuel trim enable switch is off so skip over) (CONVERT_ATD0)
004ADA 7F4ADA CC 00 00                    ldd   #$0000      ; Load double accumulator with zero (0 volt ADC)           (CONVERT_ATD0)
004ADD 7F4ADD 3B                          pshd              ; Push to stack (V1)                                       (CONVERT_ATD0)
004ADE 7F4ADE FC 10 8A                    ldd   ftrmAdc     ; Load double accumulator with "ftrmAdc"                   (CONVERT_ATD0)
004AE1 7F4AE1 CD 00 0A                    ldy   #$000A      ; Load index register Y with decimal 10                    (CONVERT_ATD0)
004AE4 7F4AE4 13                          emul              ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)         (CONVERT_ATD0)
004AE5 7F4AE5 3B                          pshd              ; Push to stack (V)                                        (CONVERT_ATD0)
004AE6 7F4AE6 CC 27 F6                    ldd   #$27F6      ; Load double accumulator with decimal 1023x10 (5 volt ADC) (CONVERT_ATD0)
004AE9 7F4AE9 3B                          pshd              ; Push to stack (V2)                                       (CONVERT_ATD0)
004AEA 7F4AEA CC 03 20                    ldd   #$0320      ; Load double accumulator with decimal 80x10 (Low range %) (CONVERT_ATD0)
004AED 7F4AED 3B                          pshd              ; Push to stack (Z1)                                       (CONVERT_ATD0)
004AEE 7F4AEE CC 04 B0                    ldd   #$04B0      ; Load double accumulator with decimal 120x10 (High range %) (CONVERT_ATD0)
004AF1 7F4AF1 3B                          pshd              ; Push to stack (Z2)                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004AF2 7F4AF2 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004AF2 7F4AF2 EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004AF4 7F4AF4 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004AF6 7F4AF6 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004AF8 7F4AF8 EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004AFA 7F4AFA A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004AFC 7F4AFC 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004AFE 7F4AFE B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B00 7F4B00 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004B02 7F4B02 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004B04 7F4B04 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004B06 7F4B06 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004B08 7F4B08 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B0A 7F4B0A E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004B0C 7F4B0C 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (CONVERT_ATD0)
004B0E 7F4B0E 7C 10 8C                    std   Ftrmx10   ; Copy result to "Ftrmx10" Fuel Trim (%x10)                  (CONVERT_ATD0)
004B11 7F4B11 20 06                           bra   FtrimDone ; Branch to FtrimDone:                                   (CONVERT_ATD0)
004B13 7F4B13                         NoFtrim:                                                                         (CONVERT_ATD0)
004B13 7F4B13 18 03 03 E8 10 8C           movw #$03E8,Ftrmx10  ; Decimal 1000 -> "Ftrmx10" (100%, no trim)             (CONVERT_ATD0)
004B19 7F4B19                         FtrimDone:                                                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Ignition Trim (Degrees x 10)(+-20 Degrees) -                       (CONVERT_ATD0)
                                      ;   Ignition calculations delay the coil energisation time (dwell) and the discharge time (CONVERT_ATD0)
                                      ;   (spark timing) from a known crankshaft angle. A trim offset of 20 degrees is built in. (CONVERT_ATD0)
                                      ;    An Itrm value of 0 results in 20 degree retard                              (CONVERT_ATD0)
                                      ;    An Itrm value of 20 results in no ignition trim                             (CONVERT_ATD0)
                                      ;    An Itrm value of 40 results in 20 degree advance                            (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004B19 7F4B19 1F 10 EA 10 39              brclr PortAbits,Itrimen,NoItrim ; "If Itrimen" bit of "PortAbits" is clear, branch to (CONVERT_ATD0)
                                                               ; NoItrim: (Ignition trim enable switch is off so skip over) (CONVERT_ATD0)
004B1E 7F4B1E CC 00 00                    ldd  #$0000      ; Load double accumulator with zero (0 volt ADC)            (CONVERT_ATD0)
004B21 7F4B21 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004B22 7F4B22 FC 10 8E                    ldd  itrmAdc     ; Load double accumulator with "itrmAdc"                    (CONVERT_ATD0)
004B25 7F4B25 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004B28 7F4B28 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "itrmAdc" by 10)         (CONVERT_ATD0)
004B29 7F4B29 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
004B2A 7F4B2A CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023x10 (5 volt ADC) (CONVERT_ATD0)
004B2D 7F4B2D 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
004B2E 7F4B2E CC 00 00                    ldd  #$0000      ; Load double accumulator with zero (Low range degrees)     (CONVERT_ATD0)
004B31 7F4B31 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004B32 7F4B32 CC 01 90                    ldd  #$0190      ; Load double accumulator with decimal 40x10 (High range degrees) (CONVERT_ATD0)
004B35 7F4B35 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004B36 7F4B36 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B36 7F4B36 EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004B38 7F4B38 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004B3A 7F4B3A B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B3C 7F4B3C EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004B3E 7F4B3E A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B40 7F4B40 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004B42 7F4B42 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B44 7F4B44 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004B46 7F4B46 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004B48 7F4B48 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004B4A 7F4B4A 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004B4C 7F4B4C B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B4E 7F4B4E E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004B50 7F4B50 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (CONVERT_ATD0)
004B52 7F4B52 7C 10 90                    std   Itrmx10   ; Copy result to "Itrmx10" Ignition Trim (Degrees x 10)      (CONVERT_ATD0)
004B55 7F4B55 20 06                           bra   ItrimDone ; Branch to ItrimDone:                                   (CONVERT_ATD0)
004B57 7F4B57                         NoItrim:                                                                         (CONVERT_ATD0)
004B57 7F4B57 18 03 00 CB 10 90           movw #$00CB,Itrmx10  ; Decimal 200 -> "Itrmx10" (20 degrees, no trim)        (CONVERT_ATD0)
004B5D 7F4B5D                         ItrimDone:                                                                       (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Exhaust Gas Temperature "Egt" -                                    (CONVERT_ATD0)
                                      ;   EGT amplifier 0.0027v @ 0C (32F), 5.022v @ 720C (1328F) Resolution ~ 5 degrees F (CONVERT_ATD0)
                                      ;   Egt = (((egtAdc-0)*(1328-32))/(1023-0))+32                                   (CONVERT_ATD0)
                                      ;   Egt = ((egtAdc*(1296/1023)+32                                                (CONVERT_ATD0)
                                      ;   Egt = (egtAdc*1.26686217)+32                                                 (CONVERT_ATD0)
                                      ;   For integer math:                                                            (CONVERT_ATD0)
                                      ;   Egt = (egtAdc*12668/10000)+32                                                (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004B5D 7F4B5D FC 10 92                    ldd   egtAdc       ; Load double accumulator with value in "egtAdc"          (CONVERT_ATD0)
004B60 7F4B60 CD 31 7C                    ldy   #$317C       ; Load index register Y with decimal decimal 12,668       (CONVERT_ATD0)
004B63 7F4B63 13                          emul               ; Extended 16x16 multiply (D)x(Y)=Y:D                     (CONVERT_ATD0)
004B64 7F4B64 CE 27 10                    ldx   #$2710       ; Load index register X with decimal 10,000               (CONVERT_ATD0)
004B67 7F4B67 11                          ediv               ; Extended 32x16 divide(Y:D)/(X)=Y;Rem->D                 (CONVERT_ATD0)
004B68 7F4B68 18 CB 00 20                 addy  #$0020           ; (Y)+(M:M+1)->Y Add decimal 32                       (CONVERT_ATD0)
004B6C 7F4B6C 7D 10 94                    sty   Egt          ; copy result to "Egt" Exhaust Gas Temperature            (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Engine Oil Pressure x 10 -                                         (CONVERT_ATD0)
                                      ;   Pressure transducer is ratiometric 1V to 5V 0PSI to 100PSI                   (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004B6F 7F4B6F CC 08 02                    ldd  #$0802      ; Load double accumulator with decimal 205 (1 volt ADC) ( x 10) (CONVERT_ATD0)
004B72 7F4B72 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004B73 7F4B73 FC 10 96                    ldd  eopAdc      ; Load double accumulator with "eopAdc"                     (CONVERT_ATD0)
004B76 7F4B76 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004B79 7F4B79 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)          (CONVERT_ATD0)
004B7A 7F4B7A 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
004B7B 7F4B7B CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023 (5 volt ADC) ( x 10) (CONVERT_ATD0)
004B7E 7F4B7E 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
004B7F 7F4B7F CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (Low range PSI) ( x 10) (CONVERT_ATD0)
004B82 7F4B82 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004B83 7F4B83 CC 03 E8                    ldd  #$03E8      ; Load double accumulator with decimal 100 (High range PSI) ( x 10) (CONVERT_ATD0)
004B86 7F4B86 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004B87 7F4B87 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B87 7F4B87 EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004B89 7F4B89 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004B8B 7F4B8B B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B8D 7F4B8D EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004B8F 7F4B8F A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B91 7F4B91 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004B93 7F4B93 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B95 7F4B95 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004B97 7F4B97 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004B99 7F4B99 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004B9B 7F4B9B 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004B9D 7F4B9D B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004B9F 7F4B9F E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004BA1 7F4BA1 1B 8A                       leas  10,SP    ; Stack pointer -> bottom of stack                            (CONVERT_ATD0)
004BA3 7F4BA3 7C 10 98                    std   Eopx10   ; Copy result to "Eopx10" Engine Oil Pressure x 10            (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Engine Fuel Pressure x 10 -                                        (CONVERT_ATD0)
                                      ;   Pressure transducer is ratiometric 1V to 5V 0PSI to 100PSI                   (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004BA6 7F4BA6 CC 08 02                    ldd  #$0802      ; Load double accumulator with decimal 205 (1 volt ADC) ( x 10) (CONVERT_ATD0)
004BA9 7F4BA9 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004BAA 7F4BAA FC 10 9A                    ldd  efpAdc      ; Load double accumulator with "efpAdc"                     (CONVERT_ATD0)
004BAD 7F4BAD CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004BB0 7F4BB0 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)          (CONVERT_ATD0)
004BB1 7F4BB1 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
004BB2 7F4BB2 CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023 (5 volt ADC) ( x 10) (CONVERT_ATD0)
004BB5 7F4BB5 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
004BB6 7F4BB6 CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (Low range PSI) ( x 10) (CONVERT_ATD0)
004BB9 7F4BB9 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004BBA 7F4BBA CC 03 E8                    ldd  #$03E8      ; Load double accumulator with decimal 100 (High range PSI) ( x 10) (CONVERT_ATD0)
004BBD 7F4BBD 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004BBE 7F4BBE MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004BBE 7F4BBE EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004BC0 7F4BC0 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004BC2 7F4BC2 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004BC4 7F4BC4 EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004BC6 7F4BC6 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004BC8 7F4BC8 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004BCA 7F4BCA B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004BCC 7F4BCC EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004BCE 7F4BCE A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004BD0 7F4BD0 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004BD2 7F4BD2 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004BD4 7F4BD4 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004BD6 7F4BD6 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004BD8 7F4BD8 1B 8A                       leas  10,SP    ; Stack pointer -> bottom of stack                            (CONVERT_ATD0)
004BDA 7F4BDA 7C 10 9C                    std   Efpx10   ; Copy result to "Efpx10" Engine Fuel Pressure x 10           (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Throttle Position Percent x 10 -                                   (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004BDD 7F4BDD 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (CONVERT_ATD0)
004BE2 7F4BE2 CD 08 00                    ldy  #veBins_E   ; Load index register Y with address of first configurable constant (CONVERT_ATD0)
                                                           ; on buffer RAM page 1 (veBins)                             (CONVERT_ATD0)
004BE5 7F4BE5 EC EA 03 E8                 ldd  $03E8,Y     ; Load Accu D with value in buffer RAM page 1 offset 1000 (tpsMin) (CONVERT_ATD0)
004BE9 7F4BE9 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004BEC 7F4BEC 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "tpsMin" by 10)          (CONVERT_ATD0)
004BED 7F4BED 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004BEE 7F4BEE FC 10 9E                    ldd  tpsADC      ; Load double accumulator with "tpsADCAdc"                  (CONVERT_ATD0)
004BF1 7F4BF1 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004BF4 7F4BF4 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "tpsADC" by 10)          (CONVERT_ATD0)
004BF5 7F4BF5 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
004BF6 7F4BF6 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (CONVERT_ATD0)
004BFB 7F4BFB CD 08 00                    ldy  #veBins_E   ; Load index register Y with address of first configurable constant (CONVERT_ATD0)
                                                           ; on buffer RAM page 1 (vebins)                             (CONVERT_ATD0)
004BFE 7F4BFE EC EA 03 EA                 ldd  $03EA,Y     ; Load Accu D with value in buffer RAM page 1 offset 1002 (tpsMax) (CONVERT_ATD0)
004C02 7F4C02 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004C05 7F4C05 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "tpsMax" by 10)          (CONVERT_ATD0)
004C06 7F4C06 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
004C07 7F4C07 CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (Low range %) ( x 10) (CONVERT_ATD0)
004C0A 7F4C0A 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004C0B 7F4C0B CC 03 E8                    ldd  #$03E8      ; Load double accumulator with decimal 100 (High range %) ( x 10) (CONVERT_ATD0)
004C0E 7F4C0E 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004C0F 7F4C0F MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C0F 7F4C0F EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004C11 7F4C11 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004C13 7F4C13 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C15 7F4C15 EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004C17 7F4C17 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C19 7F4C19 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004C1B 7F4C1B B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C1D 7F4C1D EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004C1F 7F4C1F A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004C21 7F4C21 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004C23 7F4C23 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004C25 7F4C25 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C27 7F4C27 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004C29 7F4C29 1B 8A                       leas  10,SP    ; Stack pointer -> bottom of stack                            (CONVERT_ATD0)
004C2B 7F4C2B 7C 10 A0                    std  TpsPctx10 ; Copy result to "TpsPctx10" Throttle Position Percent of travel x 10 (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Calculate Air Fuel Ratio x 10 -                                              (CONVERT_ATD0)
                                      ;   Innovate LC-2 AFR is ratiometric 0V to 5V 7.35 AFR to 22.39 AFR              (CONVERT_ATD0)
                                      ;   ( All variables are multiplied by 10 for greater precision)                  (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004C2E 7F4C2E CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (0 volt ADC) ( x 10) (CONVERT_ATD0)
004C31 7F4C31 3B                          pshd             ; Push to stack (V1)                                        (CONVERT_ATD0)
004C32 7F4C32 FC 10 A4                    ldd  egoAdc      ; Load double accumulator with "egoAdc"                     (CONVERT_ATD0)
004C35 7F4C35 CD 00 0A                    ldy  #$000A      ; Load index register Y with decimal 10                     (CONVERT_ATD0)
004C38 7F4C38 13                          emul             ; Multiply (D)x(Y)=>Y:D  (multiply "eopAdc" by 10)          (CONVERT_ATD0)
004C39 7F4C39 3B                          pshd             ; Push to stack (V)                                         (CONVERT_ATD0)
004C3A 7F4C3A CC 27 F6                    ldd  #$27F6      ; Load double accumulator with decimal 1023 (5 volt ADC) ( x 10) (10230) (CONVERT_ATD0)
004C3D 7F4C3D 3B                          pshd             ; Push to stack (V2)                                        (CONVERT_ATD0)
004C3E 7F4C3E CC 00 4A                    ldd  #$004A      ; Load double accumulator with decimal 7.35 (Low range AFR) ( x 10) (74) (CONVERT_ATD0)
004C41 7F4C41 3B                          pshd             ; Push to stack (Z1)                                        (CONVERT_ATD0)
004C42 7F4C42 CC 00 E0                    ldd  #$00E0      ; Load double accumulator with decimal 22.39 (High range AFR) ( x 10) (224) (CONVERT_ATD0)
004C45 7F4C45 3B                          pshd             ; Push to stack (Z2)                                        (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z2       |  SP+ 0                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        Z1       |  SP+ 2                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V2       |  SP+ 4                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V        |  SP+ 6                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                                      ;    |        V1       |  SP+ 8                                  (CONVERT_ATD0)
                                                      ;    +--------+--------+                                         (CONVERT_ATD0)
                                      ;                     V      V1      V2      Z1    Z2                            (CONVERT_ATD0)
004C46 7F4C46 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; ==========================                                                     (CONVERT_ATD0/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CONVERT_ATD0/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CONVERT_ATD0/2D_IPOL)
                                      ; SSTACK: none                                                                   (CONVERT_ATD0/2D_IPOL)
                                      ;         no registers are preserved                                             (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    ^ V                                                                         (CONVERT_ATD0/2D_IPOL)
                                      ;    |                                                                           (CONVERT_ATD0/2D_IPOL)
                                      ;  Z2+....................*                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;    |                    :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CONVERT_ATD0/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CONVERT_ATD0/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CONVERT_ATD0/2D_IPOL)
                                      ;    |   :       :        :                                                      (CONVERT_ATD0/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CONVERT_ATD0/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;                                                                                (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C46 7F4C46 EC 86                                   LDD       \1    ; load V                                         (CONVERT_ATD0/2D_IPOL)
004C48 7F4C48 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004C4A 7F4C4A B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C4C 7F4C4C EC 80                                   LDD       \5    ; load Z2                                        (CONVERT_ATD0/2D_IPOL)
004C4E 7F4C4E A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C50 7F4C50 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CONVERT_ATD0/2D_IPOL)
004C52 7F4C52 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C54 7F4C54 EC 84                                   LDD       \3    ; load V2                                        (CONVERT_ATD0/2D_IPOL)
004C56 7F4C56 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CONVERT_ATD0/2D_IPOL)
004C58 7F4C58 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CONVERT_ATD0/2D_IPOL)
                                      ;*********************************************************************           (CONVERT_ATD0/2D_IPOL)
004C5A 7F4C5A 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CONVERT_ATD0/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CONVERT_ATD0/2D_IPOL)
004C5C 7F4C5C B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0/2D_IPOL)
004C5E 7F4C5E E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CONVERT_ATD0/2D_IPOL)
                                      ;***************************************************************************************** (CONVERT_ATD0)
                                      ; - Free stack space (result in D)                                               (CONVERT_ATD0)
                                      ;***************************************************************************************** (CONVERT_ATD0)
004C60 7F4C60 1B 8A                       leas  10,SP       ; Stack pointer -> bottom of stack                         (CONVERT_ATD0)
004C62 7F4C62 7C 10 A6                    std   afr1x10     ; Copy result to "afr1x10" Air Fuel Ratio x 10             (CONVERT_ATD0)
                                      ;*****************************************************************************************
                                      ; - BPEM488 allows for the following alarms:
                                      ;   High Engine Temperature
                                      ;   High Oil Temperature
                                      ;   High Fuel Temperature
                                      ;   High Exhaust Gas Temperture
                                      ;   Low Oil Pressure
                                      ;   High Fuel Pressure
                                      ;   Low Fuel Pressure
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Check to see if we have any alarm conditions.
                                      ;*****************************************************************************************
004C65 7F4C65 MACRO                       CHECK_ALARMS    ; Macro in adc0BPEM488.s
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - BPEM488 allows for the following alarms:                                     (CHECK_ALARMS)
                                      ;   High Engine Temperature                                                      (CHECK_ALARMS)
                                      ;   High Oil Temperature                                                         (CHECK_ALARMS)
                                      ;   High Fuel Temperature                                                        (CHECK_ALARMS)
                                      ;   High Exhaust Gas Temperture                                                  (CHECK_ALARMS)
                                      ;   Low Oil Pressure                                                             (CHECK_ALARMS)
                                      ;   High Fuel Pressure                                                           (CHECK_ALARMS)
                                      ;   Low Fuel Pressure                                                            (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - Check for high engine temperature.                                           (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004C65 7F4C65                         CHK_HET_OFF:                                                                     (CHECK_ALARMS)
004C65 7F4C65 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004C6A 7F4C6A CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004C6D 7F4C6D EC EA 02 D2                 ldd  $02D2,Y    ; Load Accu D with value in buffer RAM page 2 offset 722 (hetoff) (CHECK_ALARMS)
004C71 7F4C71 BC 10 6E                        cpd  Cltx10     ; (A:B)-(M:M+1) Compare "hetoff" with "Cltx10            (CHECK_ALARMS)
004C74 7F4C74 24 02                       bhs  CLEAR_HET  ; If "hetoff" is higher or the same as "Cltx10" branch to CLEAR_HET (CHECK_ALARMS)
004C76 7F4C76 20 0B                       bra  CHK_HET_ON ; Branch to CHK_HET_ON:                                      (CHECK_ALARMS)
004C78 7F4C78                         CLEAR_HET:                                                                       (CHECK_ALARMS)
004C78 7F4C78 1F 10 F3 04 22               brclr   alarmbits,HET,HET_ALARM_DONE ; If "HET" bit of "alarmbits" is clear, (CHECK_ALARMS)
                                                                                ; branch to HET_ALARM_DONE:            (CHECK_ALARMS)
004C7D 7F4C7D 1D 10 F3 04                  bclr    alarmbits,HET                ; Clear "HET" bit of "alarmbits"       (CHECK_ALARMS)
004C81 7F4C81 20 1C                        bra     HET_ALARM_DONE               ; Branch to HET_ALARM_DONE:            (CHECK_ALARMS)
004C83 7F4C83                         CHK_HET_ON:                                                                      (CHECK_ALARMS)
004C83 7F4C83 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004C88 7F4C88 CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004C8B 7F4C8B EC EA 02 D0                 ldd  $02D0,Y    ; Load Accu D with value in buffer RAM page 2 offset 720 (heton) (CHECK_ALARMS)
004C8F 7F4C8F BC 10 6E                        cpd  Cltx10     ; (A:B)-(M:M+1) Compare "heton" with "Cltx10"            (CHECK_ALARMS)
004C92 7F4C92 23 02                       bls  SET_HET    ; If "heton" is lower or the same as "Cltx10" branch to SET_HET (CHECK_ALARMS)
004C94 7F4C94 20 09                       bra  HET_ALARM_DONE ; Branch to HET_ALARM_DONE:                              (CHECK_ALARMS)
004C96 7F4C96                         SET_HET:                                                                         (CHECK_ALARMS)
004C96 7F4C96 1E 10 F3 04 04               brset   alarmbits,HET,HET_ALARM_DONE ; If "HET" bit of "alarmbits" is set, branch to (CHECK_ALARMS)
                                                                                ; HET_ALARM_DONE:                      (CHECK_ALARMS)
004C9B 7F4C9B 1C 10 F3 04                  bset    alarmbits,HET                ; Set "HET" bit of "alarmbits"         (CHECK_ALARMS)
004C9F 7F4C9F                         HET_ALARM_DONE:                                                                  (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - Check for high oil temperature.                                              (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004C9F 7F4C9F                         CHK_HOT_OFF:                                                                     (CHECK_ALARMS)
004C9F 7F4C9F 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004CA4 7F4CA4 CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004CA7 7F4CA7 EC EA 02 D6                 ldd  $02D6,Y    ; Load Accu D with value in buffer RAM page 2 offset 726 (hotoff) (CHECK_ALARMS)
004CAB 7F4CAB BC 10 7A                        cpd  Eotx10     ; (A:B)-(M:M+1) Compare "hotoff" with "Eotx10"           (CHECK_ALARMS)
004CAE 7F4CAE 24 02                       bhs  CLEAR_HOT  ; If "hotoff" is higher or the same as "Eotx10" branch to CLEAR_HOT (CHECK_ALARMS)
004CB0 7F4CB0 20 0B                       bra  CHK_HOT_ON ; Branch to CHK_HOT_ON:                                      (CHECK_ALARMS)
004CB2 7F4CB2                         CLEAR_HOT:                                                                       (CHECK_ALARMS)
004CB2 7F4CB2 1F 10 F3 02 22               brclr   alarmbits,HOT,HOT_ALARM_DONE ; If "HOT" bit of "alarmbits" is clear, (CHECK_ALARMS)
                                                                                ; branch to HOT_ALARM_DONE:            (CHECK_ALARMS)
004CB7 7F4CB7 1D 10 F3 02                  bclr    alarmbits,HOT                ; Clear "HOT" bit of "alarmbits"       (CHECK_ALARMS)
004CBB 7F4CBB 20 1C                        bra     HOT_ALARM_DONE               ; Branch to HOT_ALARM_DONE:            (CHECK_ALARMS)
004CBD 7F4CBD                         CHK_HOT_ON:                                                                      (CHECK_ALARMS)
004CBD 7F4CBD 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004CC2 7F4CC2 CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004CC5 7F4CC5 EC EA 02 D4                 ldd  $02D4,Y    ; Load Accu D with value in buffer RAM page 2 offset 724 (hoton) (CHECK_ALARMS)
004CC9 7F4CC9 BC 10 7A                        cpd  Eotx10     ; (A:B)-(M:M+1) Compare "hoton" with "Eotx10"            (CHECK_ALARMS)
004CCC 7F4CCC 23 02                       bls  SET_HOT    ; If "hoton" is lower or the same as "Eotx10" branch to SET_HOT (CHECK_ALARMS)
004CCE 7F4CCE 20 09                       bra  HOT_ALARM_DONE ; Branch to HOT_ALARM_DONE:                              (CHECK_ALARMS)
004CD0 7F4CD0                         SET_HOT:                                                                         (CHECK_ALARMS)
004CD0 7F4CD0 1E 10 F3 02 04               brset   alarmbits,HOT,HOT_ALARM_DONE ; If "HOT" bit of "alarmbits" is set, branch to (CHECK_ALARMS)
                                                                                ; HOT_ALARM_DONE:                      (CHECK_ALARMS)
004CD5 7F4CD5 1C 10 F3 02                  bset    alarmbits,HOT                ; Set "HOT" bit of "alarmbits"         (CHECK_ALARMS)
004CD9 7F4CD9                         HOT_ALARM_DONE:                                                                  (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - Check for high fuel temperature.                                             (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004CD9 7F4CD9                         CHK_HFT_OFF:                                                                     (CHECK_ALARMS)
004CD9 7F4CD9 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004CDE 7F4CDE CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004CE1 7F4CE1 EC EA 02 DA                 ldd  $02DA,Y    ; Load Accu D with value in buffer RAM page 2 offset 730 (hftoff) (CHECK_ALARMS)
004CE5 7F4CE5 BC 10 76                        cpd  Eftx10     ; (A:B)-(M:M+1) Compare "hftoff" with "Eftx10"           (CHECK_ALARMS)
004CE8 7F4CE8 24 02                       bhs  CLEAR_HFT  ; If "hftoff" is higher or the same as "Eftx10" branch to CLEAR_HFT (CHECK_ALARMS)
004CEA 7F4CEA 20 0B                       bra  CHK_HFT_ON ; Branch to CHK_HFT_ON:                                      (CHECK_ALARMS)
004CEC 7F4CEC                         CLEAR_HFT:                                                                       (CHECK_ALARMS)
004CEC 7F4CEC 1F 10 F3 10 22               brclr   alarmbits,HFT,HFT_ALARM_DONE ; If "HFT" bit of "alarmbits" is clear, (CHECK_ALARMS)
                                                                                ; branch to HFT_ALARM_DONE:            (CHECK_ALARMS)
004CF1 7F4CF1 1D 10 F3 10                  bclr    alarmbits,HFT                ; Clear "HFT" bit of "alarmbits"       (CHECK_ALARMS)
004CF5 7F4CF5 20 1C                        bra     HFT_ALARM_DONE               ; Branch to HFT_ALARM_DONE:            (CHECK_ALARMS)
004CF7 7F4CF7                         CHK_HFT_ON:                                                                      (CHECK_ALARMS)
004CF7 7F4CF7 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004CFC 7F4CFC CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004CFF 7F4CFF EC EA 02 D8                 ldd  $02D8,Y    ; Load Accu D with value in buffer RAM page 2 offset 728 (hfton) (CHECK_ALARMS)
004D03 7F4D03 BC 10 76                        cpd  Eftx10     ; (A:B)-(M:M+1) Compare "hfton" with "Eftx10"            (CHECK_ALARMS)
004D06 7F4D06 23 02                       bls  SET_HFT    ; If "hfton" is lower or the same as "Eftx10" branch to SET_HFT (CHECK_ALARMS)
004D08 7F4D08 20 09                       bra  HFT_ALARM_DONE ; Branch to HFT_ALARM_DONE:                              (CHECK_ALARMS)
004D0A 7F4D0A                         SET_HFT:                                                                         (CHECK_ALARMS)
004D0A 7F4D0A 1E 10 F3 10 04               brset   alarmbits,HFT,HFT_ALARM_DONE ; If "HFT" bit of "alarmbits" is set, branch to (CHECK_ALARMS)
                                                                                ; HFT_ALARM_DONE:                      (CHECK_ALARMS)
004D0F 7F4D0F 1C 10 F3 10                  bset    alarmbits,HFT                ; Set "HFT" bit of "alarmbits"         (CHECK_ALARMS)
004D13 7F4D13                         HFT_ALARM_DONE:                                                                  (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - Check for high exhaust gas temperature.                                      (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004D13 7F4D13                         CHK_HEGT_OFF:                                                                    (CHECK_ALARMS)
004D13 7F4D13 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004D18 7F4D18 CD 08 00                    ldy  #stBins_E     ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                           ; on buffer RAM page 2 (stBins)                             (CHECK_ALARMS)
004D1B 7F4D1B EC EA 02 DE                 ldd  $02DE,Y     ; Load Accu D with value in buffer RAM page 2 offset 734 (hegtoff) (CHECK_ALARMS)
004D1F 7F4D1F BC 10 94                        cpd  Egt         ; (A:B)-(M:M+1) Compare "hegt_ff" with "Egt"            (CHECK_ALARMS)
004D22 7F4D22 24 02                       bhs  CLEAR_HEGT  ; If "hegtoff" is higher or the same as "Egt" branch to CLEAR_HEGT (CHECK_ALARMS)
004D24 7F4D24 20 0B                       bra  CHK_HEGT_ON ; Branch to CHK_HEGT_ON:                                    (CHECK_ALARMS)
004D26 7F4D26                         CLEAR_HEGT:                                                                      (CHECK_ALARMS)
004D26 7F4D26 1F 10 F3 08 22               brclr   alarmbits,HEGT,HEGT_ALARM_DONE ; If "HEGT" bit of "alarmbits" is clear, (CHECK_ALARMS)
                                                                                  ; branch to HEGT_ALARM_DONE:         (CHECK_ALARMS)
004D2B 7F4D2B 1D 10 F3 08                  bclr    alarmbits,HEGT                 ; Clear "HEGT" bit of "alarmbits"    (CHECK_ALARMS)
004D2F 7F4D2F 20 1C                        bra     HEGT_ALARM_DONE                ; Branch to HEGT_ALARM_DONE:         (CHECK_ALARMS)
004D31 7F4D31                         CHK_HEGT_ON:                                                                     (CHECK_ALARMS)
004D31 7F4D31 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004D36 7F4D36 CD 08 00                    ldy  #stBins_E     ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                           ; on buffer RAM page 2 (stBins)                             (CHECK_ALARMS)
004D39 7F4D39 EC EA 02 DC                 ldd  $02DC,Y     ; Load Accu D with value in buffer RAM page 2 offset 732 (hegton) (CHECK_ALARMS)
004D3D 7F4D3D BC 10 94                        cpd  Egt         ; (A:B)-(M:M+1) Compare "hegton" with "Egt"             (CHECK_ALARMS)
004D40 7F4D40 23 02                       bls  SET_HEGT    ; If "hegton" is lower or the same as "Egt" branch to SET_HEGT (CHECK_ALARMS)
004D42 7F4D42 20 09                       bra  HEGT_ALARM_DONE ; Branch to HEGT_ALARM_DONE:                            (CHECK_ALARMS)
004D44 7F4D44                         SET_HEGT:                                                                        (CHECK_ALARMS)
004D44 7F4D44 1E 10 F3 08 04               brset   alarmbits,HEGT,HEGT_ALARM_DONE ; If "HEGT" bit of "alarmbits" is set, branch to (CHECK_ALARMS)
                                                                                  ; HEGT_ALARM_DONE:                   (CHECK_ALARMS)
004D49 7F4D49 1C 10 F3 08                  bset    alarmbits,HEGT                 ; Set "HEGT" bit of "alarmbits"      (CHECK_ALARMS)
004D4D 7F4D4D                         HEGT_ALARM_DONE:                                                                 (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - Check for low oil pressure                                                   (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004D4D 7F4D4D                         CHK_LOP_OFF:                                                                     (CHECK_ALARMS)
004D4D 7F4D4D 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004D52 7F4D52 CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004D55 7F4D55 EC EA 02 E2                 ldd  $02E2,Y    ; Load Accu D with value in buffer RAM page 2 offset 738 (lopoff) (CHECK_ALARMS)
004D59 7F4D59 BC 10 98                        cpd  Eopx10     ; (A:B)-(M:M+1) Compare "lopoff" with "Eopx10"           (CHECK_ALARMS)
004D5C 7F4D5C 23 02                       bls  CLEAR_LOP  ; If "lopoff" is lower or the same as "Eopx10" branch to CLEAR_LOP (CHECK_ALARMS)
004D5E 7F4D5E 20 0B                       bra  CHK_LOP_ON ; Branch to CHK_LOP_ON:                                      (CHECK_ALARMS)
004D60 7F4D60                         CLEAR_LOP:                                                                       (CHECK_ALARMS)
004D60 7F4D60 1F 10 F3 01 22               brclr   alarmbits,LOP,LOP_ALARM_DONE ; If "LOP" bit of "alarmbits" is clear, (CHECK_ALARMS)
                                                                                ; branch to LOP_ALARM_DONE:            (CHECK_ALARMS)
004D65 7F4D65 1D 10 F3 01                  bclr    alarmbits,LOP                ; Clear "LOP" bit of "alarmbits"       (CHECK_ALARMS)
004D69 7F4D69 20 1C                        bra     LOP_ALARM_DONE               ; Branch to LOP_ALARM_DONE:            (CHECK_ALARMS)
004D6B 7F4D6B                         CHK_LOP_ON:                                                                      (CHECK_ALARMS)
004D6B 7F4D6B 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004D70 7F4D70 CD 08 00                    ldy  #stBins_E     ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                           ; on buffer RAM page 2 (stBins)                             (CHECK_ALARMS)
004D73 7F4D73 EC EA 02 E0                 ldd  $02E0,Y     ; Load Accu D with value in buffer RAM page 2 offset 736 (lopon) (CHECK_ALARMS)
004D77 7F4D77 BC 10 98                        cpd  Eopx10      ; (A:B)-(M:M+1) Compare "lopon" with "Eopx10"           (CHECK_ALARMS)
004D7A 7F4D7A 24 02                       bhs  SET_LOP     ; If "lopon" is higher or the same as "Eopx10" branch to SET_LOP (CHECK_ALARMS)
004D7C 7F4D7C 20 09                       bra  LOP_ALARM_DONE ; Branch to LOP_ALARM_DONE:                              (CHECK_ALARMS)
004D7E 7F4D7E                         SET_LOP:                                                                         (CHECK_ALARMS)
004D7E 7F4D7E 1E 10 F3 01 04               brset   alarmbits,LOP,LOP_ALARM_DONE ; If "LOP" bit of "alarmbits" is set, branch to (CHECK_ALARMS)
                                                                                ; LOP_ALARM_DONE:                      (CHECK_ALARMS)
004D83 7F4D83 1C 10 F3 01                  bset    alarmbits,LOP                ; Set "LOP" bit of "alarmbits"         (CHECK_ALARMS)
004D87 7F4D87                         LOP_ALARM_DONE:                                                                  (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - Check for high fuel pressure                                                 (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004D87 7F4D87                         CHK_HFP_OFF:                                                                     (CHECK_ALARMS)
004D87 7F4D87 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004D8C 7F4D8C CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004D8F 7F4D8F EC EA 02 E6                 ldd  $02E6,Y    ; Load Accu D with value in buffer RAM page 2 offset 742 (hfpoff) (CHECK_ALARMS)
004D93 7F4D93 BC 10 9C                        cpd  Efpx10     ; (A:B)-(M:M+1) Compare "hfp_off" with "Efpx10"          (CHECK_ALARMS)
004D96 7F4D96 24 02                       bhs  CLEAR_HFP  ; If "hfpoff" is higher or he same as "Efpx10" branch to CLEAR_HFP (CHECK_ALARMS)
004D98 7F4D98 20 0B                       bra  CHK_HFP_ON ; Branch to CHK_HFP_ON:                                      (CHECK_ALARMS)
004D9A 7F4D9A                         CLEAR_HFP:                                                                       (CHECK_ALARMS)
004D9A 7F4D9A 1F 10 F3 40 22               brclr   alarmbits,HFP,HFP_ALARM_DONE ; If "HFP" bit of "alarmbits" is clear, (CHECK_ALARMS)
                                                                                ; branch to HFP_ALARM_DONE:            (CHECK_ALARMS)
004D9F 7F4D9F 1D 10 F3 40                  bclr    alarmbits,HFP                ; Clear "HFP" bit of "alarmbits"       (CHECK_ALARMS)
004DA3 7F4DA3 20 1C                        bra     HFP_ALARM_DONE               ; Branch to HFP_ALARM_DONE:            (CHECK_ALARMS)
004DA5 7F4DA5                         CHK_HFP_ON:                                                                      (CHECK_ALARMS)
004DA5 7F4DA5 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004DAA 7F4DAA CD 08 00                    ldy  #stBins_E     ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                           ; on buffer RAM page 2 (stBins)                             (CHECK_ALARMS)
004DAD 7F4DAD EC EA 02 E4                 ldd  $02E4,Y     ; Load Accu D with value in buffer RAM page 2 offset 740 (hfpon) (CHECK_ALARMS)
004DB1 7F4DB1 BC 10 9C                        cpd  Efpx10      ; (A:B)-(M:M+1) Compare "hfpon" with "Efpx10"           (CHECK_ALARMS)
004DB4 7F4DB4 23 02                       bls  SET_HFP     ; If "hfpon" is lower or the same as "Efpx10" branch to SET_HFP (CHECK_ALARMS)
004DB6 7F4DB6 20 09                       bra  HFP_ALARM_DONE ; Branch to HFP_ALARM_DONE:                              (CHECK_ALARMS)
004DB8 7F4DB8                         SET_HFP:                                                                         (CHECK_ALARMS)
004DB8 7F4DB8 1E 10 F3 40 04               brset   alarmbits,HFP,HFP_ALARM_DONE ; If "LOP" bit of "alarmbits" is set, branch to (CHECK_ALARMS)
                                                                                ; HFP_ALARM_DONE:                      (CHECK_ALARMS)
004DBD 7F4DBD 1C 10 F3 40                  bset    alarmbits,HFP                ; Set "HFP" bit of "alarmbits"         (CHECK_ALARMS)
004DC1 7F4DC1                         HFP_ALARM_DONE:                                                                  (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - Check for low fuel pressure                                                  (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004DC1 7F4DC1                         CHK_LFP_OFF:                                                                     (CHECK_ALARMS)
004DC1 7F4DC1 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004DC6 7F4DC6 CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                          ; on buffer RAM page 2 (stBins)                              (CHECK_ALARMS)
004DC9 7F4DC9 EC EA 02 EA                 ldd  $02EA,Y    ; Load Accu D with value in buffer RAM page 2 offset 746 (lfpoff) (CHECK_ALARMS)
004DCD 7F4DCD BC 10 9C                        cpd  Efpx10     ; (A:B)-(M:M+1) Compare "lfpoff" with "Efpx10"           (CHECK_ALARMS)
004DD0 7F4DD0 23 02                       bls  CLEAR_LFP  ; If "lfpoff" is lower or the same as "Efpx10" branch to CLEAR_LFP (CHECK_ALARMS)
004DD2 7F4DD2 20 0B                       bra  CHK_LFP_ON ; Branch to CHK_LFP_ON:                                      (CHECK_ALARMS)
004DD4 7F4DD4                         CLEAR_LFP:                                                                       (CHECK_ALARMS)
004DD4 7F4DD4 1F 10 F3 20 22               brclr   alarmbits,LFP,LFP_ALARM_DONE ; If "LFP" bit of "alarmbits" is clear, (CHECK_ALARMS)
                                                                                ; branch to LFP_ALARM_DONE:            (CHECK_ALARMS)
004DD9 7F4DD9 1D 10 F3 20                  bclr    alarmbits,LFP                ; Clear "LFP" bit of "alarmbits"       (CHECK_ALARMS)
004DDD 7F4DDD 20 1C                        bra     LFP_ALARM_DONE               ; Branch to LFP_ALARM_DONE:            (CHECK_ALARMS)
004DDF 7F4DDF                         CHK_LFP_ON:                                                                      (CHECK_ALARMS)
004DDF 7F4DDF 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (CHECK_ALARMS)
004DE4 7F4DE4 CD 08 00                    ldy  #stBins_E     ; Load index register Y with address of first configurable constant (CHECK_ALARMS)
                                                           ; on buffer RAM page 2 (stBins)                             (CHECK_ALARMS)
004DE7 7F4DE7 EC EA 02 E8                 ldd  $02E8,Y     ; Load Accu D with value in buffer RAM page 2 offset 744 (lfpon) (CHECK_ALARMS)
004DEB 7F4DEB BC 10 9C                        cpd  Efpx10      ; (A:B)-(M:M+1) Compare "lfpon" with "Efpx10"           (CHECK_ALARMS)
004DEE 7F4DEE 24 02                       bhs  SET_LFP     ; If "lfpon" is higher or the same as "Efpx10" branch to SET_LFP (CHECK_ALARMS)
004DF0 7F4DF0 20 09                       bra  LFP_ALARM_DONE ; Branch to LFP_ALARM_DONE:                              (CHECK_ALARMS)
004DF2 7F4DF2                         SET_LFP:                                                                         (CHECK_ALARMS)
004DF2 7F4DF2 1E 10 F3 20 04               brset   alarmbits,LFP,LFP_ALARM_DONE ; If "LOP" bit of "alarmbits" is set, branch to (CHECK_ALARMS)
                                                                                ; LFP_ALARM_DONE:                      (CHECK_ALARMS)
004DF7 7F4DF7 1C 10 F3 20                  bset    alarmbits,LFP                ; Set "LFP" bit of "alarmbits"         (CHECK_ALARMS)
004DFB 7F4DFB                         LFP_ALARM_DONE:                                                                  (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - When an engine alarm condition occurs an indicator light on the dashbord is  (CHECK_ALARMS)
                                      ;   illuminated and an audible alarm will sound. The alarm can be silenced by switching (CHECK_ALARMS)
                                      ;   the alarm silence switch on the dashboard to the on position but the light will remain (CHECK_ALARMS)
                                      ;   illuminated  until the alarm conditionn is no longer met. When the alarm silence (CHECK_ALARMS)
                                      ;   switch is in the on posiiton an indicator on the dashboard will warn the driver that (CHECK_ALARMS)
                                      ;   feature is off and that subsequent alarms will be indicator lights only.     (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
                                      ; - If we have an audible alarm see if it should be silenced.                    (CHECK_ALARMS)
                                      ;***************************************************************************************** (CHECK_ALARMS)
004DFB 7F4DFB 4F 08 10 06                 brclr PORTE,PE4,NoAudAlrm ; If "AudAlrmSil"(PE4) pin on port E is clear, branch to (CHECK_ALARMS)
                                                                           ; NoAudAlrm: (Switch is on so prohibit audible alarm) (CHECK_ALARMS)
004DFF 7F4DFF 1D 10 F2 04                 bclr engine2,AudAlrm             ; Clear "AudAlrm" bit of "engine2" bit field (CHECK_ALARMS)
004E03 7F4E03 20 04                       bra  ChkAlarmbits                ; Branch to ChkAlarmbits:                   (CHECK_ALARMS)
004E05 7F4E05                         NoAudAlrm:                                                                       (CHECK_ALARMS)
004E05 7F4E05 1C 10 F2 04                 bset engine2,AudAlrm             ; Set "AudAlrm" bit of "engine2" bit field  (CHECK_ALARMS)
004E09 7F4E09                         ChkAlarmbits:                                                                    (CHECK_ALARMS)
004E09 7F4E09 B6 10 F3                    ldaa  alarmbits                  ; "alarmbits"-> Accu A                      (CHECK_ALARMS)
004E0C 7F4E0C 8A 00                       oraa  #$00000000                 ; Inclusive or with %00000000 (all bits cleared (CHECK_ALARMS)
                                                                           ; on power up and bit 7 is not assigned     (CHECK_ALARMS)
004E0E 7F4E0E 27 0A                       beq   AudibleAlarmOff            ; If all bits are zero branch to AudibleAlarmOff: (CHECK_ALARMS)
004E10 7F4E10 1E 10 F2 04 05              brset engine2,AudAlrm,AudibleAlarmOff  ; if "AudAlrm" bit of "engine2" is set branch (CHECK_ALARMS)
                                                                           ; to AudibleAlarmOff: (Switch is on so prohibit audible (CHECK_ALARMS)
                                                                           ; alarm)                                    (CHECK_ALARMS)
004E15 7F4E15 4C 01 20                    bset  PORTB,EngAlarm             ; Set "EngAlarm pin on Port B (audible alarm on) (CHECK_ALARMS)
004E18 7F4E18 20 03                       bra   AudibleAlarmDone           ; Branch to AudibleAlarmDone:               (CHECK_ALARMS)
004E1A 7F4E1A                         AudibleAlarmOff:                                                                 (CHECK_ALARMS)
004E1A 7F4E1A 4D 01 20                    bclr  PORTB,EngAlarm             ; Clear "EngAlarm" pin on port B (audible alarm on) (CHECK_ALARMS)
004E1D 7F4E1D                         AudibleAlarmDone:                                                                (CHECK_ALARMS)
                                      ;*****************************************************************************************
                                      ; - Do RPM calculations when there is a new input capture period.
                                      ;*****************************************************************************************
004E1D 7F4E1D 1F 10 24 01 29             brclr ICflgs,RPMcalc,NoRPMcalc ; If "RPMcalc" bit of "ICflgs" is clear,
                                                                        ; branch to "NoRPMcalc:"(bit is set in State_BPEM.s
                                                                                                        ; and cleared in ect_BPEM.s)
004E22 7F4E22 MACRO                       CALC_RPM   ; (Macro in ect_BEEM488.s)
                                                              ; edge capture Ch3,1)(Capture disabled Ch2,0)            (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ; ------------------------------- RPM CALCULATION SECTION -------------------------------- (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ;                                                                                (CALC_RPM)
                                      ; RPM = CONSTANT/PERIOD                                                          (CALC_RPM)
                                      ; Where:                                                                         (CALC_RPM)
                                      ; RPM    = Engine RPM                                                            (CALC_RPM)
                                      ; RPMk   = 24 bit constant using 5.12uS IC clock tick (195.3125khz)              (CALC_RPM)
                                      ;             ((195,312.5 tickpsec*60secpmin)/(360/72))                          (CALC_RPM)
                                      ; CASprd = 16 bit period count between three consecutive IC events in 5.12uS     (CALC_RPM)
                                      ;               resolution                                                       (CALC_RPM)
                                      ;   RPMk                                                                         (CALC_RPM)
                                      ;   ----- = RPM                                                                  (CALC_RPM)
                                      ;   CASprd512                                                                    (CALC_RPM)
                                      ;                                                                                (CALC_RPM)
                                      ; RPMk = ((195312.5*60)/5) = 2343750 = $0023C346                                 (CALC_RPM)
                                      ;                                                                                (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ;                                                                                (CALC_RPM)
                                      ; RPM = CONSTANT/PERIOD                                                          (CALC_RPM)
                                      ; Where:                                                                         (CALC_RPM)
                                      ; RPM    = Engine RPM                                                            (CALC_RPM)
                                      ; RPMk   = 24 bit constant using 2.56uS IC clock tick (390.625khz)               (CALC_RPM)
                                      ;             ((390,625 tickpsec*60secpmin)/(360/72))                            (CALC_RPM)
                                      ; CASprd256 = 16 bit period count between three consecutive IC events in 2.56uS  (CALC_RPM)
                                      ;               resolution                                                       (CALC_RPM)
                                      ;   RPMk                                                                         (CALC_RPM)
                                      ;   ----- = RPM                                                                  (CALC_RPM)
                                      ;   CASprd256                                                                    (CALC_RPM)
                                      ;                                                                                (CALC_RPM)
                                      ; RPMk = ((390,625*60)/5) = 4,687,500 = $0047868C                                (CALC_RPM)
                                      ;                                                                                (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ; - Check the state of the "Run" bit in "engine" bit field. If it is set we are running (CALC_RPM)
                                      ;   so change the calculations from timer base from 5.12uS to 2.56 uS.           (CALC_RPM)
                                      ;****************************************************************************************** (CALC_RPM)
004E22 7F4E22 1E 10 F1 04 13                  brset engine,run,RunRPM ; If "run" bit of "engine variable is set branch to RunRPM: (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ; - Do RPM calculations for 5.12uS time base when there is a new input capture period (CALC_RPM)
                                      ;   using 32x16 divide                                                           (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
004E27 7F4E27 CC C3 46                    ldd  #$C346         ; Load accu D with Lo word of  10 cyl RPMk (5.12uS clock tick) (CALC_RPM)
004E2A 7F4E2A CD 00 23                    ldy  #$0023         ; Load accu Y with Hi word of 10 cyl RPMk (5.12uS clock tick) (CALC_RPM)
004E2D 7F4E2D FE 10 A8                    ldx  CASprd512      ; Load "X" register with value in "CASprd512"            (CALC_RPM)
004E30 7F4E30 11                          ediv                ; Extended divide (Y:D)/(X)=>Y;Rem=>D                    (CALC_RPM)
                                                                  ;(Divide "RPMk" by "CASprd512")                      (CALC_RPM)
004E31 7F4E31 7D 10 AE                    sty  RPM            ; Copy result to "RPM"                                   (CALC_RPM)
004E34 7F4E34 1D 10 24 01                 bclr ICflgs,RPMcalc ; Clear "RPMcalc" bit of "ICflgs"                        (CALC_RPM)
004E38 7F4E38 20 11                           bra  RunRPMDone     ; Branch to RunRPMDone:                              (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
                                      ; - Do RPM calculations for 2.56uS time base when there is a new input capture period (CALC_RPM)
                                      ;   using 32x16 divide                                                           (CALC_RPM)
                                      ;***************************************************************************************** (CALC_RPM)
004E3A 7F4E3A                         RunRPM:                                                                          (CALC_RPM)
004E3A 7F4E3A CC 86 8C                    ldd  #$868C         ; Load accu D with Lo word of  10 cyl RPMk (2.56uS clock tick) (CALC_RPM)
004E3D 7F4E3D CD 00 47                    ldy  #$0047         ; Load accu Y with Hi word of 10 cyl RPMk (2.56uS clock tick) (CALC_RPM)
004E40 7F4E40 FE 10 AA                    ldx  CASprd256      ; Load "X" register with value in "CASprd256"            (CALC_RPM)
004E43 7F4E43 11                          ediv                ; Extended divide (Y:D)/(X)=>Y;Rem=>D                    (CALC_RPM)
                                                                  ;(Divide "RPMk" by "CASprd256")                      (CALC_RPM)
004E44 7F4E44 7D 10 AE                    sty  RPM            ; Copy result to "RPM"                                   (CALC_RPM)
004E47 7F4E47 1D 10 24 01                 bclr ICflgs,RPMcalc ; Clear "RPMcalc" bit of "ICflgs"                        (CALC_RPM)
004E4B 7F4E4B                         RunRPMDone:                                                                      (CALC_RPM)
004E4B 7F4E4B                         NoRPMcalc
                                      ;*****************************************************************************************
                                      ; - Do KPH calculations when there is a new input capture period.
                                      ;*****************************************************************************************
004E4B 7F4E4B 1F 10 24 02 11              brclr ICflgs,KPHcalc,NoKPHcalc ; If "KPHcalc" bit of "ICflgs" is clear,
                                                                         ; branch to "NoKPHcalc:"(bit is set and cleared in
                                                                                                         ; ect_BPEM.s)
004E50 7F4E50 MACRO                       CALC_KPH   ; (Macro in ect_BEEM488.s)
                                      ;***************************************************************************************** (CALC_KPH)
                                      ; ------------------------------- KPH CALCULATION SECTION -------------------------------- (CALC_KPH)
                                      ;***************************************************************************************** (CALC_KPH)
                                      ;                                                                                (CALC_KPH)
                                      ; KPH = CONSTANT/PERIOD                                                          (CALC_KPH)
                                      ; Where:                                                                         (CALC_KPH)
                                      ; KPH         = Vehicle speed in Kilometers per Hour                             (CALC_KPH)
                                      ; KPHk = 19 bit constant using 2.56uS IC clock tick (390.625khz)                 (CALC_KPH)
                                      ;             ((390.625 tickpsec*60secpmin*60minphr)/4971pulsepkm                (CALC_KPH)
                                      ; VSSprd = 16 bit period count between consecutive IC events in 2.56uS           (CALC_KPH)
                                      ;               resolution. 8000 pulse per mile, 4971 pulse per KM               (CALC_KPH)
                                      ;   KPHk                                                                         (CALC_KPH)
                                      ;   ----- = KPH                                                                  (CALC_KPH)
                                      ;   VSSprd                                                                       (CALC_KPH)
                                      ;                                                                                (CALC_KPH)
                                      ; KPHk = ((390,625*60*60)/4971) = 282890.7664 = $0004510B                        (CALC_KPH)
                                      ; min 4.316636368 KPH                                                            (CALC_KPH)
                                      ; Resolution @ 100KPH = .0796KM                                                  (CALC_KPH)
                                      ;                                                                                (CALC_KPH)
                                      ;***************************************************************************************** (CALC_KPH)
                                      ;***************************************************************************************** (CALC_KPH)
                                      ; - Do KPH calculations for 2.56uS time base when there is a new input capture period (CALC_KPH)
                                      ;   using 32x16 divide                                                           (CALC_KPH)
                                      ;***************************************************************************************** (CALC_KPH)
004E50 7F4E50                         RunKPH:                                                                          (CALC_KPH)
004E50 7F4E50 CC 51 0B                    ldd  #$510B         ; Load accu D with Lo word of KPHk                       (CALC_KPH)
004E53 7F4E53 CD 00 04                    ldy  #$0004         ; Load accu Y with Hi word of KPHk                       (CALC_KPH)
004E56 7F4E56 FE 10 AC                    ldx  VSSprd         ; Load "X" register with value in "VSSprd"               (CALC_KPH)
004E59 7F4E59 11                          ediv                ; Extended divide (Y:D)/(X)=>Y;Rem=>D (Divide "KPHk" by "VSSprd") (CALC_KPH)
004E5A 7F4E5A 7D 10 B0                    sty  KPH            ; Copy result to "KPH"                                   (CALC_KPH)
004E5D 7F4E5D 1D 10 24 02                 bclr ICflgs,KPHcalc ; Clear "KPHcalc" bit of "ICflgs"                        (CALC_KPH)
004E61 7F4E61                         RunKPHDone:                                                                      (CALC_KPH)
004E61 7F4E61                         NoKPHcalc:
                                      ;*****************************************************************************************
                                      ; - Every mS:
                                      ;   Decrement "AIOTcnt" (AIOT pulse width counter)
                                      ;   Decrement "Stallcnt" (stall counter)
                                      ;   Check for no crank or stall condition.
                                      ;*****************************************************************************************
004E61 7F4E61 1F 10 05 01 79              brclr clock,ms1,NoMS1Routines ; If "ms1" bit of "clock" bit field is clear branch to
                                                                        ; NoMS1Routines:
004E66 7F4E66 MACRO                       MILLISEC_ROUTINES             ; (Macro in rti_BEEM488.s)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ; - Every mS:                                                                    (MILLISEC_ROUTINES)
                                      ;   Decrement "AIOTcnt" (AIOT pulse width counter)                               (MILLISEC_ROUTINES)
                                      ;   Decrement "Stallcnt" (stall counter)                                         (MILLISEC_ROUTINES)
                                      ;   Check for no crank or stall condition.                                       (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ;********************************************************************************************** (MILLISEC_ROUTINES)
                                      ; - Check the value of the AIOT pulse width counter, if other than zero, decrement it. (MILLISEC_ROUTINES)
                                      ;   When it reaches zero, shut the AIOT trigger off(open collector output)       (MILLISEC_ROUTINES)
                                      ;********************************************************************************************** (MILLISEC_ROUTINES)
004E66 7F4E66 B6 10 69                    ldaa    AIOTcnt         ; "AIOTcnt"->Accu A                                  (MILLISEC_ROUTINES)
004E69 7F4E69 27 0D                       beq     AIOT_CHK_DONE   ; If "Z" bit of "CCR is set, branch to AIOT_CHK_DONE: (MILLISEC_ROUTINES)
004E6B 7F4E6B 73 10 69                    dec     AIOTcnt         ; Decrement "AIOTcnt"                                (MILLISEC_ROUTINES)
004E6E 7F4E6E B6 10 69                    ldaa    AIOTcnt         ; load accumulator with value in "AIOTcnt"           (MILLISEC_ROUTINES)
004E71 7F4E71 27 02                       beq     AIOT_OFF        ; If "Z" bit of "CCR is set, branch to AIOT_OFF:     (MILLISEC_ROUTINES)
004E73 7F4E73 20 03                       bra     AIOT_CHK_DONE   ; Branch to AIOT_CHK_DONE:                           (MILLISEC_ROUTINES)
004E75 7F4E75                         AIOT_OFF:                                                                        (MILLISEC_ROUTINES)
004E75 7F4E75 4D 01 40                    bclr PORTB,AIOT         ; Clear "AIOT" pin on Port B (PB6)(end totalizer pulse) (MILLISEC_ROUTINES)
004E78 7F4E78                         AIOT_CHK_DONE:                                                                   (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ;   Decrement "Stallcnt" (no crank or stall condition counter)(1mS increments)   (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
004E78 7F4E78 18 73 10 22                decw Stallcnt   ; Decrement "Stallcnt" (no crank or stall condition counter)  (MILLISEC_ROUTINES)
                                                         ; (1mS increments)                                            (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ;   Check for no crank or stall condition.                                       (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
004E7C 7F4E7C 27 02                      beq  DoStall ; If "Stallcnt" has decremented to zero branch to DoStall:       (MILLISEC_ROUTINES)
004E7E 7F4E7E 20 5B                      bra  NoStall ; Branch to NoStall: (counter is not zero so fall through)       (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ;   Engine either hasn't begun to crank yet or has stalled                       (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
004E80 7F4E80                         DoStall:                                                                         (MILLISEC_ROUTINES)
004E80 7F4E80 MACRO                       FUEL_PUMP_AND_ASD_OFF       ; Shut fuel pump and ASD relay off(macro in gpio_BEEM.s) (MILLISEC_ROUTINES)
                                      ;    ldaa   PORTB    ; Load Accu A with value in Port B (LED9 board 1 to 28)     (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
                                      ;    oraa   #$03     ; Bitwise "OR" Accu A with %00000011 (set bits 0 and 1)     (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
                                      ;    staa   PORTB    ; Copy to Port B  (set bits 0 and 1)                        (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
                                      ; - De-energise the Fuel pump relay and the Emergency Shutdown relay on Port B Bit0, Bit1 (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
004E80 7F4E80 4D 01 01                    bclr  PORTB,FuelPump  ; Clear "FuelPump" pin on Port B(LED9 board 1 to 28)   (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
004E83 7F4E83 4D 01 02                        bclr  PORTB,ASDRelay  ; Clear "ASDRelay" pin on Port B(LED23 board 1 to 28) (MILLISEC_ROUTINES/FUEL_PUMP_AND_ASD_OFF)
004E86 7F4E86 18 79 10 AE                 clrw RPM                    ; Clear "RPM" (engine RPM)                       (MILLISEC_ROUTINES)
004E8A 7F4E8A 79 10 14                    clr  State                  ; Clear "State" (Cam-Crank state machine current state ) (MILLISEC_ROUTINES)
004E8D 7F4E8D 79 10 F1                    clr  engine                 ; Clear all flags in "engine" bit field          (MILLISEC_ROUTINES)
004E90 7F4E90 79 10 F2                    clr  engine2                ; Clear all flags in "engine2" bit field         (MILLISEC_ROUTINES)
004E93 7F4E93 79 10 24                    clr  ICflgs                 ; Clear all flags in "ICflgs" bit field          (MILLISEC_ROUTINES)
004E96 7F4E96 79 10 F5                        clr  StateStatus            ; Clear "StateStatus" bit field              (MILLISEC_ROUTINES)
004E99 7F4E99 18 79 10 A8                 clrw CASprd512              ; Clear Crankshaft Angle Sensor period (5.12uS time base (MILLISEC_ROUTINES)
004E9D 7F4E9D 18 79 10 AA                 clrw CASprd256              ; Clear Crankshaft Angle Sensor period (2.56uS time base (MILLISEC_ROUTINES)
004EA1 7F4EA1 18 79 10 1D                 clrw Degx10tk512            ; Clear Time to rotate crankshaft 1 degree (5.12uS x 10) (MILLISEC_ROUTINES)
004EA5 7F4EA5 18 79 10 1F                 clrw Degx10tk256            ; Clear Time to rotate crankshaft 1 degree (2.56uS x 10) (MILLISEC_ROUTINES)
004EA9 7F4EA9 1C 10 F5 02                 bset StateStatus,SynchLost  ; Set "SynchLost" bit of "StateStatus" bit field (bit1) (MILLISEC_ROUTINES)
004EAD 7F4EAD 18 0B FF 00 6E              movb #$FF,ECT_PTPSR         ; Load ECT_PTPSR with %11111111 (prescale 256, 5.12us (MILLISEC_ROUTINES)
                                                                      ; resolution, max period 335.5ms)                (MILLISEC_ROUTINES)
004EB2 7F4EB2 18 0B FF 03 FE              movb #$FF,TIM_PTPSR         ; Load TIM_PTPSR with %11111111 (prescale 256, 5.12us (MILLISEC_ROUTINES)
                                                                      ; resolution, max period 335.5ms)(min RPM = ~85) (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ; - Set the "crank" bit and clear the "run" bit of the "engine" bit field in preparation (MILLISEC_ROUTINES)
                                      ;   for cranking.                                                                (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
004EB7 7F4EB7 1C 10 F1 02                bset engine,crank   ; Set the "crank" bit of "engine" bit field               (MILLISEC_ROUTINES)
004EBB 7F4EBB 1D 10 F1 04                bclr engine,run     ; Clear the "run" bit of "engine" bit field               (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ; - Set the "base512" bit and clear the "base256" bit of the "engine2" bit field in (MILLISEC_ROUTINES)
                                      ;   preparation for cranking.                                                    (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
004EBF 7F4EBF 1C 10 F2 01                bset engine2,base512   ; Set the "base512" bit of "engine" bit field          (MILLISEC_ROUTINES)
004EC3 7F4EC3 1D 10 F2 02                bclr engine2,base256   ; Clear the "base256" bit of "engine" bit field        (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ; - Load stall counter with compare value. Stall check is done in the main loop every (MILLISEC_ROUTINES)
                                      ;   mSec. "Stallcnt" is decremented every mSec and reloaded at every crank signal. (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
004EC7 7F4EC7 18 0B FF 00 17                  movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE               (MILLISEC_ROUTINES)
004ECC 7F4ECC CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable (MILLISEC_ROUTINES)
                                                              ; constant on buffer RAM page 1 (vebins)                 (MILLISEC_ROUTINES)
004ECF 7F4ECF EC EA 03 E6                 ldd   $03E6,Y       ; Load Accu A with value in buffer RAM page 1 offset 998 (MILLISEC_ROUTINES)
                                                              ; "Stallcnt" (stall counter)(offset = 998)               (MILLISEC_ROUTINES)
004ED3 7F4ED3 7C 10 22                    std  Stallcnt       ; Copy to "Stallcnt" (no crank or stall condition counter) (MILLISEC_ROUTINES)
                                                              ; (1mS increments)                                       (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
                                      ; - Initialize other variables -                                                 (MILLISEC_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC_ROUTINES)
004ED6 7F4ED6 18 0B 09 10 21              movb  #$09,RevCntr     ; Counter for Revolution Counter signals              (MILLISEC_ROUTINES)
004EDB 7F4EDB                         NoStall:                                                                         (MILLISEC_ROUTINES)
004EDB 7F4EDB 1D 10 05 01                     bclr clock,ms1                ; Clear "ms1" bit of "clock" bit field
004EDF 7F4EDF                         NoMS1Routines:
                                      ;*****************************************************************************************
                                      ; - Every 100 mS:
                                      ;   Decrement "OFCdelcmp" (counter for Overrun Fuel Cut delay calculations)
                                      ;   Decrement "TOEtimcmp" (counter for Throttle Opening Enrichment calculations)
                                      ;   Save current TPS percent reading "TpsPctx10" as "TpsPctx10last" to compute "tpsDOT"
                                      ;   in acceleration  enrichment section.
                                      ;*****************************************************************************************
004EDF 7F4EDF 1F 10 05 02 10              brclr clock,ms100,NoMS100Routines ; If "ms100" bit of "clock" bit field is clear
                                                                            ; branch to NoMS100Routines:
004EE4 7F4EE4 MACRO                       MILLISEC100_ROUTINES              ; (Macro in rti_BEEM488.s)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
                                      ; - Every 100 mS:                                                                (MILLISEC100_ROUTINES)
                                      ;   Decrement "OFCdelcmp" (counter for Overrun Fuel Cut delay calculations)      (MILLISEC100_ROUTINES)
                                      ;   Decrement "TOEtimcmp" (counter for Throttle Opening Enrichment calculations) (MILLISEC100_ROUTINES)
                                      ;   Save current TPS percent reading "TpsPctx10" as "TpsPctx10last" to compute "tpsDOT" (MILLISEC100_ROUTINES)
                                      ;   in acceleration  enrichment section.                                         (MILLISEC100_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
                                      ; - Decrement "OFCdel" Overrun Fuel Cut delay duration (decremented every 100 mS) (MILLISEC100_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
004EE4 7F4EE4 73 10 47                        dec  OFCdel    ; Decrement Overrun Fuel Cut delay duration               (MILLISEC100_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
                                      ; - Decrement "TOEtim" Throttle Opening Enrichment duration (decremented every 100 mS) (MILLISEC100_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
004EE7 7F4EE7 73 10 48                    dec  TOEtim    ; Decrement Throttle Opening Enrichment duration              (MILLISEC100_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
                                      ; - "TPSdot" is throttle position percent rate of change in 100mS. Save current TPS (MILLISEC100_ROUTINES)
                                      ;   percent reading "TpsPctx10" as "TpsPctx10last" to compute "tpsDOT" in acceleration (MILLISEC100_ROUTINES)
                                      ;   enrichment section.                                                          (MILLISEC100_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC100_ROUTINES)
004EEA 7F4EEA 18 04 10 A0 10 45           movw  TpsPctx10,TpsPctx10last   ; Copy value in "TpsPctx10" to "TpsPctx10last" (MILLISEC100_ROUTINES)
004EF0 7F4EF0 1D 10 05 02                     bclr clock,ms100                  ; Clear "ms100" bit of "clock" bit field
004EF4 7F4EF4                         NoMS100Routines:
                                      ;*****************************************************************************************
                                      ; - Every 1000mS:
                                      ;   Save the current fuel delivery total ("FDt") as "FDsec" so it can be used by Tuner
                                      ;   Studio and Shadow Dash for fuel burn calculations
                                      ;*****************************************************************************************
004EF4 7F4EF4 1F 10 05 10 18              brclr clock,ms1000,NoMS1000Routines ; If "ms1000" bit of "clock" bit field is clear
                                                                              ; branch to NoMS1000Routines:
004EF9 7F4EF9 MACRO                       MILLISEC1000_ROUTINES               ; (Macro in rti_BEEM488.s)
                                                                           ;(current becomes last)                     (MILLISEC1000_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC1000_ROUTINES)
                                      ; - Save the current value of "LoopCntr" as "LoopTime" (loops per second)        (MILLISEC1000_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC1000_ROUTINES)
004EF9 7F4EF9 FC 10 FD                        ldd  LoopCntr      ; "LoopCntr" (counter for "LoopTime") ->Accu D        (MILLISEC1000_ROUTINES)
004EFC 7F4EFC 7C 10 F6                    std  LoopTime      ; Copy to "LoopTime" (Program loop time (loops/Sec)       (MILLISEC1000_ROUTINES)
004EFF 7F4EFF 18 79 10 FD                 clrw LoopCntr      ; Clear "LoopCntr" (incremented every Main Loop pass)     (MILLISEC1000_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC1000_ROUTINES)
                                      ; - Save the current fuel delivery total ("FDt") as "FDsec" so it can be used by Tuner (MILLISEC1000_ROUTINES)
                                      ;   Studio and Shadow Dash for fuel burn calculations                            (MILLISEC1000_ROUTINES)
                                      ;***************************************************************************************** (MILLISEC1000_ROUTINES)
004F03 7F4F03 FC 10 65                    ldd   FDt     ; "FDt"->Accu D (fuel delivery pulse width time total)         (MILLISEC1000_ROUTINES)
004F06 7F4F06 7C 10 DA                        Std   FDsec   ; Copy to "FDsec" (fuel delivery pulse width time total per second) (MILLISEC1000_ROUTINES)
004F09 7F4F09 18 79 10 65                     clrw  FDt     ; Clear "FDt" (fuel delivery pulse width time total)       (MILLISEC1000_ROUTINES)
004F0D 7F4F0D 1D 10 05 10                     bclr clock,ms1000                   ; Clear "ms1000" bit of "clock" bit field
004F11 7F4F11                         NoMS1000Routines:
                                      ;*****************************************************************************************
                                      ; ----------------------- Ignition Calculations Section ----------------------------------
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;
                                      ; - Ignition timing in degrees to 0.1 degree resolution is selected from the 3D
                                      ;   lookup table "ST" which plots manifold pressure against RPM. A potentiometer on the
                                      ;   dash board allows a manual trim of the "ST" values of from 0 to 20 degrees advance
                                      ;   and from 0 to 20 degrees retard. The ignition system is what is called "waste spark",
                                      ;   which pairs cylinders on a single coil. The spark is delivered to both cylinders at
                                      ;   the same time. One cylinder recieves the spark at the appropriate time for ignition.
                                      ;   The other recieves it when the exhaust valve is open. Hence the name "waste spark".
                                      ;   On this 10 cylinder engine there are 5 coils, each controlled by its own hardware
                                      ;   timer. The cylinders are paired 1&6, 10&5, 9&8, 4&7, 3&2
                                      ;   In an ignition event the timer is first loaded with the output compare value in
                                      ;   "Delaytk". At the compare interrupt the coil is energised and the timer is loaded
                                      ;   with the output compare value in "DwllFintk". At the compare interrupt the coil is
                                      ;   de-energized to fire the spark. The delay in timer ticks will depend on the timer base
                                      ;   rate of either 5.12 uS for cranking or 2.56uS for running.
                                      ;
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Look up current value in ST table (STcurr) (degrees*10)
                                      ;*****************************************************************************************
004F11 7F4F11 MACRO                       ST_LU    ; Macro in injcalcs_BPEM.s
                                      ;***************************************************************************************** (ST_LU)
                                      ; For a 2.56uS timer 1 Sec = 1/.00000256 = 390625 tics                           (ST_LU)
                                      ; 1mS = 390625 / 1000 = 390.625 tics                                             (ST_LU)
                                      ; 0.1mS = 390.625 / 10 = 39.0625 tics                                            (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ; 1 RPM/60 = .016666666 Rev per Sec                                              (ST_LU)
                                      ; 1/.016666666 = 60 sec period                                                   (ST_LU)
                                      ; 60/360 = .166666666 sec per degree at 1 RPM                                    (ST_LU)
                                      ; 60/5 = 12 sec Crank Angle Sensor period at 1 RPM                               (ST_LU)
                                      ; 12/.00000256 = 4687500 2.56uS tics at 1 RPM ("CASprdtk")                       (ST_LU)
                                      ; 4687500/72 = 65104.16667 2.56uS tics per degree at 1 RPM ("TkspDeg")           (ST_LU)
                                      ; .166666666/.00000256 = 65104.14063 2.56uS tics per degree at 1 RPM ("TkspDeg") (ST_LU)
                                      ; 1/65104.16667 = .000001528808485 degrees per tic at 1 RPM                      (ST_LU)
                                      ; 71.52666514/60 = 1.192111 Rev per Sec                                          (ST_LU)
                                      ; 1/1.192111 = .83884806 sec period                                              (ST_LU)
                                      ; .83884806/360 = .0023301335 sec per degree at 71.52666 RPM                     (ST_LU)
                                      ; .83884806/5 = .167769612 sec Crank Angle Sensor period at 71.52666 RPM         (ST_LU)
                                      ; .167769612/.00000256 = 65535 2.56uS tics at 71.52666 RPM ("CASprdtk")          (ST_LU)
                                      ; 65535/72 = 910.208333 2.56uS tics per degree at 71.52666 RPM ("TkspDeg")       (ST_LU)
                                      ; .0023301335/.00000256 = 910.2083984 2.56uS tics per degree at 71.52666 RPM ("TkspDeg") (ST_LU)
                                      ; 1/910.208333 = .001098649577 degrees per tic at 71.52666 RPM                   (ST_LU)
                                      ; 500 RPM/60 = 8.333333333 Rev per Sec                                           (ST_LU)
                                      ; 1/8.333333333 = .12 sec period                                                 (ST_LU)
                                      ; .12/360 = .0003333333 sec per degree at 500 RPM                                (ST_LU)
                                      ; .12/5 = .024 sec Crank Angle Sensor period at 500 RPM                          (ST_LU)
                                      ; .024/.00000256 = 9375 2.56uS tics at 500 RPM ("CASprdtk")                      (ST_LU)
                                      ; 9375/72 = 130.2083333 2.56uS tics per degree at 500 RPM ("TkspDeg")            (ST_LU)
                                      ; .0003333333/.00000256 = 130.2083203 2.56uS tics per degree at 500 RPM ("TkspDeg") (ST_LU)
                                      ; 1/130.2083333 = .00768 degrees per tic at 500 RPM                              (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ; 4250 RPM/60 = 70.8333333 Rev per Sec                                           (ST_LU)
                                      ; 1/70.8333333 = .014117647 sec period                                           (ST_LU)
                                      ; .014117647/360 = .00003921568629 sec per degree at 4250 RPM                    (ST_LU)
                                      ; .014117647/5 = .0028235294 sec Crank Angle Sensor period at 5000 RPM           (ST_LU)
                                      ; .0028235294/.00000256 = 1102.941172 2.56uS tics at 5000 RPM ("CASprdtk")       (ST_LU)
                                      ; 1102.941172/72 = 15.31862739 2.56uS tics per degree at 4250 RPM ("TkspDeg")    (ST_LU)
                                      ; .00003921568629/.00000256 = 15.31862746 2.56uS tics per degree at 4250 RPM ("TkspDeg") (ST_LU)
                                      ; 1/15.31862739 = .06528 degrees per tic at 4250 RPM                             (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ; Ignition crank notches are placed 150 degrees BTDC for their respective cylinder (ST_LU)
                                      ; Dwell times of .006sec crank and .004sec run seem to work well                 (ST_LU)
                                      ; Maximum ignition advance expected is 35 degrees BTDC at low load and high RPM  (ST_LU)
                                      ; From data logs cranking RPM is between ~154RPM and ~241RPM                     (ST_LU)
                                      ; Just before stall is ~251RPM                                                   (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ; At 4250 RPM a 4mSec dwell time takes .004/.00003921568629 = 102 degrees of rotation (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ; At power up the timers are initialized with a 5.12uS time base. A "Spantk"     (ST_LU)
                                      ; value of 65535 will happen at 84.441 RPM so this is the lowest RPM that can be (ST_LU)
                                      ; calculated during crank conditions. Resolution at 4250 RPM is 7.706 RPM. If the (ST_LU)
                                      ; time base were 2.56uS a "Spantk" value of 65535 will happen at 168.882 RPM.    (ST_LU)
                                      ; Resolution at 4250 RPM is 3.856 RPM. Cranking RPM can be lower than 168 RPM    (ST_LU)
                                      ; so this is why we begin with the 5.12uS base. When RPM reaches ~300 we are almost (ST_LU)
                                      ; ceratinly running so at that point the time base is switched to 2.56uS. This base (ST_LU)
                                      ; will allow ignition calculations to be done as low as ~169 RPM which is probably lower (ST_LU)
                                      ; than the speed at which the engine can be made to run.                         (ST_LU)
                                      ; With a time base of 5.12uS "CASprd512" of 7812 happens at 300 RPM. When the period gets (ST_LU)
                                      ; shorter than this the time base is switched over to 2.56uS ("CASprd256").      (ST_LU)
                                      ;***************************************************************************************** (ST_LU)
                                      ;***************************************************************************************** (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ; - Ignition timing in degrees to 0.1 degree resolution is selected from the 3D  (ST_LU)
                                      ;   lookup table "ST" which plots manifold pressure against RPM. A potentiometer on the (ST_LU)
                                      ;   dash board allows a manual trim of the "ST" values of from 0 to 20 degrees advance (ST_LU)
                                      ;   and from 0 to 20 degrees retard. The ignition system is what is called "waste spark", (ST_LU)
                                      ;   which pairs cylinders on a single coil. The spark is delivered to both cylinders at (ST_LU)
                                      ;   the same time. One cylinder recieves the spark at the appropriate time for ignition. (ST_LU)
                                      ;   The other recieves it when the exhaust valve is open. Hence the name "waste spark". (ST_LU)
                                      ;   On this 10 cylinder engine there are 5 coils, each controlled by its own hardware (ST_LU)
                                      ;   timer. The cylinders are paired 1&6, 10&5, 9&8, 4&7, 3&2                     (ST_LU)
                                      ;   In an ignition event the timer is first loaded with the output compare value in (ST_LU)
                                      ;   "Delaytk". At the compare interrupt the coil is energised and the timer is loaded (ST_LU)
                                      ;   with the output compare value in "DwllFintk". At the compare interrupt the coil is (ST_LU)
                                      ;   de-energized to fire the spark. The delay in timer ticks will depend on the timer base (ST_LU)
                                      ;   rate of either 5.12 uS for cranking or 2.56uS for running.                   (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ;***************************************************************************************** (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ;  Crank Signal                                                                  (ST_LU)
                                      ;   150BTDC                          Ign                    20ATDC               (ST_LU)
                                      ;      <- Delay          -><- Dwell -><-      ST + Trim     ->                   (ST_LU)
                                      ;     I___________________I__________ I_______________________I                  (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ;                          <-            Advance            ->                   (ST_LU)
                                      ;      <-            Ignition Span (170 degrees)            ->                   (ST_LU)
                                      ;                                                                                (ST_LU)
                                      ;***************************************************************************************** (ST_LU)
                                      ;***************************************************************************************** (ST_LU)
                                      ; - Look up current value in ST table (STcurr) (degrees*10)                      (ST_LU)
                                      ;***************************************************************************************** (ST_LU)
004F11 7F4F11 FE 10 80                    ldx   Mapx10     ; Load index register X with value in "Mapx10"(Column value Manifold (ST_LU)
                                                           ; Absolute Pressure*10 )                                    (ST_LU)
004F14 7F4F14 FC 10 AE                    ldd   RPM        ; Load double accumulator D with value in "RPM" (Row value RPM) (ST_LU)
004F17 7F4F17 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (ST_LU)
004F1C 7F4F1C CD 08 00                    ldy   #stBins_E  ; Load index register Y with address of the first value in ST table (ST_LU)
004F1F 7F4F1F 16 5F 7F                    jsr   3D_LOOKUP  ; Jump to subroutine at 3D_LOOKUP:                          (ST_LU)
004F22 7F4F22 7C 10 E0                    std   STcurr     ; Copy result to "STcurr"                                   (ST_LU)
                                      ;*****************************************************************************************
                                      ; - Look up current value in Dwell Battery Adjustment Table (dwellcor)(% x 10)
                                      ;*****************************************************************************************
004F25 7F4F25 MACRO                       DWELL_COR_LU    ; Macro in injcalcs_BPEM.s
                                      ;***************************************************************************************** (DWELL_COR_LU)
                                      ; - Look up current value in Dwell Battery Adjustment Table (dwellcor)(% x 10)   (DWELL_COR_LU)
                                      ;***************************************************************************************** (DWELL_COR_LU)
004F25 7F4F25 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (DWELL_COR_LU)
004F2A 7F4F2A 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (DWELL_COR_LU)
                                                                  ;  ->page where the desired curve resides            (DWELL_COR_LU)
004F30 7F4F30 18 03 01 7A 10 27           movw #$017A,CrvRowOfst  ; 378 -> Offset from the curve page to the curve row(dwellvolts) (DWELL_COR_LU)
                                                                      ;(actual offset is 756                           (DWELL_COR_LU)
004F36 7F4F36 18 03 01 80 10 29           movw #$0180,CrvColOfst  ; 384 -> Offset from the curve page to the curve column(dwellcorr) (DWELL_COR_LU)
                                                                      ;(actual offset is 768)                          (DWELL_COR_LU)
004F3C 7F4F3C 18 04 10 88 10 2B           movw BatVx10,CrvCmpVal  ; Battery Voltage (Volts x 10) -> Curve comparison value (DWELL_COR_LU)
004F42 7F4F42 18 0B 05 10 2D              movb #$05,CrvBinCnt     ; 5 -> number of bins in the curve row or column minus 1 (DWELL_COR_LU)
004F47 7F4F47 16 60 4E                    jsr   CRV_LU_P   ; Jump to subroutine at CRV_LU_P:(located in interp_BEEM488.s module) (DWELL_COR_LU)
004F4A 7F4F4A 7C 10 E4                    std   DwellCor   ; Copy result to Dwell battery correction (% x 10)          (DWELL_COR_LU)
                                      ;*****************************************************************************************
                                      ; The determination of whether the engine is cranking or running is made in the
                                      ; State_BPEM488.s module within the Crank Angle Sensor interrupt. It is here that the
                                      ; "crank" and "run" bits of the "engine" bit field are set or cleared.
                                      ;*****************************************************************************************
004F4D 7F4F4D 1E 10 F1 02 02              brset engine,crank,CrankTime ; If "crank" bit of "engine" bit field is set branch
                                                                           ; to CrankTime:
004F52 7F4F52 20 67                           bra   RunTime                ; Branch to RunTime:(no need to test "run" bit)
004F54 7F4F54                         CrankTime:
                                      ;*****************************************************************************************
                                      ; - Do ignition calculations for a 5.12uS time base.
                                      ;*****************************************************************************************
004F54 7F4F54 MACRO                       IGN_CALCS_512      ; Macro in igncalcsBPEM488.s
                                      ;***************************************************************************************** (IGN_CALCS_512)
                                      ; - Convert the Igntion Span(170 degrees) to time in 5.12uS resolution (Spantk)  (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
004F54 7F4F54 CC 06 A4                    ldd  #$06A4       ; Decimal 1700 -> Accu D (170 *10 for 0.1 degree resolution calcs) (IGN_CALCS_512)
004F57 7F4F57 FD 10 1D                    ldy  Degx10tk512  ;(Time for 1 degree of rotation in 5.12uS resolution x 10) (IGN_CALCS_512)
004F5A 7F4F5A 13                          emul              ;(D)x(Y)=Y:D "1700" * Degx10tk512                          (IGN_CALCS_512)
004F5B 7F4F5B CE 00 64                        ldx  #$0064       ; Decimal 100 -> Accu X                                (IGN_CALCS_512)
004F5E 7F4F5E 11                              ediv              ;(Y:D)/(X)=Y;Rem->D (("STandItrmx10" * Degx10tk512)/100 (IGN_CALCS_512)
                                                                ; = "Spantk"                                           (IGN_CALCS_512)
004F5F 7F4F5F 7C 10 37                        std  Spantk       ; Copy result to "Spantk"                              (IGN_CALCS_512)
                                      ;****************************************************************************************** (IGN_CALCS_512)
                                      ; - Multiply dwell time (mS*10) by the correction and divide by 1000 (%*10)("DwellFin") (IGN_CALCS_512)
                                      ;****************************************************************************************** (IGN_CALCS_512)
004F62 7F4F62 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (IGN_CALCS_512)
004F67 7F4F67 CD 08 00                    ldy  #stBins_E    ; Load index register Y with address of first configurable constant (IGN_CALCS_512)
                                                          ; on buffer RAM page 2 (stBins)                              (IGN_CALCS_512)
004F6A 7F4F6A EC EA 02 EC                 ldd  $02EC,Y    ; Load Accu D with value in buffer RAM page 2 offset 748 ("Dwell") (IGN_CALCS_512)
004F6E 7F4F6E FD 10 E4                    ldy   DwellCor      ; "DwellCor" -> Accu Y (%*10)                            (IGN_CALCS_512)
004F71 7F4F71 13                          emul                ;(D)x(Y)=Y:D "Dwell" * "DwellCor"                        (IGN_CALCS_512)
004F72 7F4F72 CE 03 E8                    ldx   #$03E8        ; Decimal 1000 -> Accu Y (for integer math)              (IGN_CALCS_512)
004F75 7F4F75 11                          ediv                ; (Y:D)/(X)=Y;Rem->D (("Dwell" * "DwellCor")/1000) = "DwellFin" (IGN_CALCS_512)
004F76 7F4F76 7D 10 E6                        sty   DwellFin      ; Copy result to "DwellFin                           (IGN_CALCS_512)
                                      ;****************************************************************************************** (IGN_CALCS_512)
                                      ; - Convert "DwellFin" to time in 5.12uS resolution.("DwellFintk")               (IGN_CALCS_512)
                                      ;****************************************************************************************** (IGN_CALCS_512)
004F79 7F4F79 FC 10 E6                        ldd   DwellFin      ; "DwellFin" -> Accu D                               (IGN_CALCS_512)
004F7C 7F4F7C CD 27 10                        ldy   #$2710        ; Load index register Y with decimal 10000 (for integer math) (IGN_CALCS_512)
004F7F 7F4F7F 13                              emul                ;(D)x(Y)=Y:D "DwellFin" * 10,000                     (IGN_CALCS_512)
004F80 7F4F80 CE 02 00                        ldx   #$200         ; Load index register X decimal 512                  (IGN_CALCS_512)
004F83 7F4F83 11                          ediv                ;(Y:D)/(X)=Y;Rem->D ("DwellFin" * 10,000) / 512 = "DwellFintk" (IGN_CALCS_512)
004F84 7F4F84 7D 10 39                    sty   DwellFintk    ; Copy result to "DwellFintk" (Time required for dwell after (IGN_CALCS_512)
                                                                  ; correction in 5.12uS resolution                    (IGN_CALCS_512)
004F87 7F4F87 7D 10 43                        sty   IgnOCadd2     ; Copy result to "IgnOCadd2" (Time required for dwell after (IGN_CALCS_512)
                                                                  ; correction in 5.12uS resolution                    (IGN_CALCS_512)
                                                              ; This is the second OC value loaded into the timer      (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
                                      ; - Correct the current ST value for trim (degrees*10)("STandItrmx10")           (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
004F8A 7F4F8A FC 10 E0                    ldd   STcurr      ; Current value in ST table (Degrees x 10) -> Accu D       (IGN_CALCS_512)
004F8D 7F4F8D C3 00 CB                    addd  #$00CB      ; (A:B)+(M:M+1)->A:B "STdeg" + decimal 200 = "Igncalc1" (Degrees*10) (IGN_CALCS_512)
004F90 7F4F90 F3 10 90                    addd  Itrmx10     ; (A:B)+(M:M+1)->A:B "Igncalc1" + Itrm10th) = "Igncalc2" (Degrees*10) (IGN_CALCS_512)
004F93 7F4F93 83 00 CB                    subd  #$00CB      ; Subtract (A:B)-(M:M+1)=>A:B  "Igncalc2" - decimal 200 = "STandItrm" (IGN_CALCS_512)
                                                                ;(Degrees*10)                                          (IGN_CALCS_512)
004F96 7F4F96 7C 10 E8                        std  STandItrmx10 ; Copy result to "STandItrmx10"(Degrees*10)            (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
                                      ; - Convert "STandItrmx10" to time in 5.12uS resolution ("STandItrmtk")          (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
004F99 7F4F99 FD 10 1D                    ldy  Degx10tk512  ;(Time for 1 degree of rotation in 2.56uS resolution x 10) (IGN_CALCS_512)
004F9C 7F4F9C 13                          emul              ;(D)x(Y)=Y:D "STandItrmx10" * Degx10tk512                  (IGN_CALCS_512)
004F9D 7F4F9D CE 00 64                        ldx  #$0064       ; Decimal 100 -> Accu X                                (IGN_CALCS_512)
004FA0 7F4FA0 11                              ediv              ;(Y:D)/(X)=Y;Rem->D (("STandItrmx10" * Degx10tk512)/100 (IGN_CALCS_512)
                                                                ; = "Spantk"                                           (IGN_CALCS_512)
004FA1 7F4FA1 7C 10 3B                        std  STandItrmtk  ; Copy result to "STandItrmtk"                         (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
                                      ; - Add "STandItrmtk" and "DwellFintk" = "Advancetk"                             (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
004FA4 7F4FA4 FC 10 3B                   ldd   STandItrmtk     ; "STandItrmtk" -> Accu D                               (IGN_CALCS_512)
004FA7 7F4FA7 F3 10 39                   addd  DwellFintk      ; (A:B)+(M:M+1)->A:B "STandItrmtk" + "DwellFintk" = "Advancetk" (IGN_CALCS_512)
004FAA 7F4FAA 7C 10 3D                   std   Advancetk       ; Copy result to "Advancetk"                            (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
                                      ; - Subtract "Advancetk" from "Spantk" = "Delaytk"                               (IGN_CALCS_512)
                                      ;***************************************************************************************** (IGN_CALCS_512)
004FAD 7F4FAD FC 10 37                        ldd   Spantk     ; "Spantk" -> Accu D                                    (IGN_CALCS_512)
004FB0 7F4FB0 B3 10 3D                        subd  Advancetk  ; Subtract (A:B)-(M:M+1)=>A:B "Spantk" - "Advancetk" = "Delaytk" (IGN_CALCS_512)
004FB3 7F4FB3 7C 10 3F                        std   Delaytk    ; Copy result to "Delaytk"                              (IGN_CALCS_512)
004FB6 7F4FB6 7C 10 41                        std   IgnOCadd1  ; Copy result to "IgnOCadd1"                            (IGN_CALCS_512)
004FB9 7F4FB9 20 65                           bra  IgnCalcsDone  ; Branch to IgnCalcsDone:
004FBB 7F4FBB                         RunTime:
                                      ;*****************************************************************************************
                                      ; - Do ignition calculations for a 2.56uS time base.
                                      ;*****************************************************************************************
004FBB 7F4FBB MACRO                       IGN_CALCS_256    ; Macro in igncalcsBPEM488.s
                                                           ; This is the first OC value loaded into the timer          (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
                                      ; - Convert the Igntion Span(170 degrees) to time in 2.56uS resolution (Spantk)  (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
004FBB 7F4FBB CC 06 A4                    ldd  #$06A4       ; Decimal 1700 -> Accu D (170 *10 for 0.1 degree resolution calcs) (IGN_CALCS_256)
004FBE 7F4FBE FD 10 1F                    ldy  Degx10tk256  ;(Time for 1 degree of rotation in 2.56uS resolution x 10) (IGN_CALCS_256)
004FC1 7F4FC1 13                          emul              ;(D)x(Y)=Y:D "1700" * Degx10tk256                          (IGN_CALCS_256)
004FC2 7F4FC2 CE 00 64                        ldx  #$0064       ; Decimal 100 -> Accu X                                (IGN_CALCS_256)
004FC5 7F4FC5 11                              ediv              ;(Y:D)/(X)=Y;Rem->D (("STandItrmx10" * Degx10tk256)/100 (IGN_CALCS_256)
                                                                ; = "Spantk"                                           (IGN_CALCS_256)
004FC6 7F4FC6 7C 10 37                        std  Spantk       ; Copy result to "Spantk"                              (IGN_CALCS_256)
                                      ;****************************************************************************************** (IGN_CALCS_256)
                                      ; - Multiply dwell time (mS*10) by the correction and divide by 1000 (%*10)("DwellFin") (IGN_CALCS_256)
                                      ;****************************************************************************************** (IGN_CALCS_256)
004FC9 7F4FC9 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE                   (IGN_CALCS_256)
004FCE 7F4FCE CD 08 00                    ldy  #stBins_E     ; Load index register Y with address of first configurable constant (IGN_CALCS_256)
                                                             ; on buffer RAM page 2 (stBins_E)                         (IGN_CALCS_256)
004FD1 7F4FD1 EC EA 02 EC                 ldd  $02EC,Y       ; Load Accu D with value in buffer RAM page 2 offset 748 ("Dwell") (IGN_CALCS_256)
004FD5 7F4FD5 FD 10 E4                    ldy  DwellCor      ; "DwellCor" -> Accu Y (%*10)                             (IGN_CALCS_256)
004FD8 7F4FD8 13                          emul               ;(D)x(Y)=Y:D "Dwell" * "DwellCor"                         (IGN_CALCS_256)
004FD9 7F4FD9 CE 03 E8                    ldx  #$03E8        ; Decimal 1000 -> Accu Y (for integer math)               (IGN_CALCS_256)
004FDC 7F4FDC 11                          ediv               ; (Y:D)/(X)=Y;Rem->D (("Dwell" * "DwellCor")/1000) = "DwellFin" (IGN_CALCS_256)
004FDD 7F4FDD 7D 10 E6                        sty  DwellFin      ; Copy result to "DwellFin                            (IGN_CALCS_256)
                                      ;****************************************************************************************** (IGN_CALCS_256)
                                      ; - Convert "DwellFin" to time in 2.56uS resolution.("DwellFintk")               (IGN_CALCS_256)
                                      ;****************************************************************************************** (IGN_CALCS_256)
004FE0 7F4FE0 FC 10 E6                        ldd   DwellFin      ; "DwellFin" -> Accu D                               (IGN_CALCS_256)
004FE3 7F4FE3 CD 27 10                        ldy   #$2710        ; Load index register Y with decimal 10000 (for integer math) (IGN_CALCS_256)
004FE6 7F4FE6 13                              emul                ;(D)x(Y)=Y:D "DwellFin" * 10,000                     (IGN_CALCS_256)
004FE7 7F4FE7 CE 01 00                        ldx   #$100         ; Load index register X decimal 256                  (IGN_CALCS_256)
004FEA 7F4FEA 11                          ediv                ;(Y:D)/(X)=Y;Rem->D ("DwellFin" * 10,000) / 256 = "DwellFintk" (IGN_CALCS_256)
004FEB 7F4FEB 7D 10 39                    sty   DwellFintk    ; Copy result to "DwellFintk" (Time required for dwell after (IGN_CALCS_256)
                                                                  ; correction in 2.56uS resolution                    (IGN_CALCS_256)
004FEE 7F4FEE 7D 10 43                        sty   IgnOCadd2     ; Copy result to "IgnOCadd2" (Time required for dwell after (IGN_CALCS_256)
                                                                  ; correction in 2.56uS resolution                    (IGN_CALCS_256)
                                                              ; This is the second OC value loaded into the timer      (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
                                      ; - Correct the current ST value for trim (degrees*10)("STandItrmx10")           (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
004FF1 7F4FF1 FC 10 E0                    ldd   STcurr      ; Current value in ST table (Degrees x 10) -> Accu D       (IGN_CALCS_256)
004FF4 7F4FF4 C3 00 CB                    addd  #$00CB      ; (A:B)+(M:M+1)->A:B "STdeg" + decimal 200 = "Igncalc1" (Degrees*10) (IGN_CALCS_256)
004FF7 7F4FF7 F3 10 90                    addd  Itrmx10     ; (A:B)+(M:M+1)->A:B "Igncalc1" + Itrm10th) = "Igncalc2" (Degrees*10) (IGN_CALCS_256)
004FFA 7F4FFA 83 00 CB                    subd  #$00CB      ; Subtract (A:B)-(M:M+1)=>A:B  "Igncalc2" - decimal 200 = "STandItrm" (IGN_CALCS_256)
                                                                ;(Degrees*10)                                          (IGN_CALCS_256)
004FFD 7F4FFD 7C 10 E8                        std  STandItrmx10 ; Copy result to "STandItrmx10"(Degrees*10)            (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
                                      ; - Convert "STandItrmx10" to time in 2.56uS resolution ("STandItrmtk")          (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
005000 7F5000 FD 10 1F                    ldy  Degx10tk256   ;(Time for 1 degree of rotation in 2.56uS resolution x 10) (IGN_CALCS_256)
005003 7F5003 13                          emul              ;(D)x(Y)=Y:D "STandItrmx10" * Degx10tk256                  (IGN_CALCS_256)
005004 7F5004 CE 00 64                        ldx  #$0064       ; Decimal 100 -> Accu X                                (IGN_CALCS_256)
005007 7F5007 11                              ediv              ;(Y:D)/(X)=Y;Rem->D (("STandItrmx10" * Degx10tk256)/100 (IGN_CALCS_256)
                                                                ; = "Spantk"                                           (IGN_CALCS_256)
005008 7F5008 7C 10 3B                        std  STandItrmtk  ; Copy result to "STandItrmtk"                         (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
                                      ; - Add "STandItrmtk" and "DwellFintk" = "Advancetk"                             (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
00500B 7F500B FC 10 3B                   ldd   STandItrmtk     ; "STandItrmtk" -> Accu D                               (IGN_CALCS_256)
00500E 7F500E F3 10 39                   addd  DwellFintk      ; (A:B)+(M:M+1)->A:B "STandItrmtk" + "DwellFintk" = "Advancetk" (IGN_CALCS_256)
005011 7F5011 7C 10 3D                   std   Advancetk       ; Copy result to "Advancetk"                            (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
                                      ; - Subtract "Advancetk" from "Spantk" = "Delaytk"                               (IGN_CALCS_256)
                                      ;***************************************************************************************** (IGN_CALCS_256)
005014 7F5014 FC 10 37                        ldd   Spantk     ; "Spantk" -> Accu D                                    (IGN_CALCS_256)
005017 7F5017 B3 10 3D                        subd  Advancetk  ; Subtract (A:B)-(M:M+1)=>A:B "Spantk" - "Advancetk" = "Delaytk" (IGN_CALCS_256)
00501A 7F501A 7C 10 3F                        std   Delaytk    ; Copy result to "Delaytk"                              (IGN_CALCS_256)
00501D 7F501D 7C 10 41                        std   IgnOCadd1  ; Copy result to "IgnOCadd1"                            (IGN_CALCS_256)
005020 7F5020                         IgnCalcsDone:
                                      ;*****************************************************************************************
                                      ; ---------------------- End Of Ignition Calculations Section ----------------------------
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; ------------------------ Injector Calculations Section ---------------------------------
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - The fuel injectors are wired in pairs arranged in the firing order 1&10, 9&4, 3&6, 5&8
                                      ;   7&2. This arrangement allows a "semi sequential" injection strategy with only 5
                                      ;   injector drivers. The cylinder pairs are 54 degrees apart in crankshaft rotation so
                                      ;   the injector pulse for the trailing cylinder will lag the leading cylinder by 54
                                      ;   degrees. The benefits of injector timing is an open question but its effect is most
                                      ;   felt at idle when the injection pulse can be timed to an opeing intake valve. At
                                      ;   higher speeds and loads the effect is less becasue the pulse width is longer than the
                                      ;   opening time of the valve. The engine has 10 trigger points on the crankshaft so
                                      ;   there is lots of choice where to refernce the start of the pulse from. I have chosen
                                      ;   to use the point when the intake valve on the leading cylinder is just starting to
                                      ;   open. Actual injector pulse start time can be delayed from this point by the value in
                                      ;   "InjDelDegx10". The delay in timer ticks will depend on the timer base rate of either
                                      ;   5.12 uS for cranking or 2.56uS for running.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; The determination of whether the engine is cranking or running is made in the
                                      ; State_BPEM488.s module within the Crank Angle Sensor interrupt. It is here that the
                                      ; "crank" and "run" bits of the "engine" bit field are set or cleared.
                                      ;*****************************************************************************************
005020 7F5020 1E 10 F1 02 04              brset engine,crank,CrankMode ; If "crank" bit of "engine" bit field is set branch
                                                                           ; to CrankMode:
005025 7F5025 18 20 00 DF                     bra   RunMode                ; Branch to RunMode:(no need to test "run" bit)
005029 7F5029                         CrankMode:
                                      ;    bset    engine,WUEon        ; Set "WUEon" bit of "engine" bit field
                                      ;    bset    engine,ASEon        ; Set "ASEon" bit of "engine" bit field
                                      ;    clr     ASEcnt              ; Clear the after-start enrichment counter variable
                                      ;*****************************************************************************************
                                      ; Check if we are in flood clear or normal crank mode
                                      ;*****************************************************************************************
005029 7F5029 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
00502E 7F502E CD 08 00                    ldy   #veBins_E     ; Load index register Y with address of first configurable
                                                              ; constant on buffer RAM page 1 (veBins_E)
005031 7F5031 EE EA 03 E4                 ldx   $03E4,Y       ; Load Accu X with value in buffer RAM page 1 offset 996
                                                              ; "FloodClear" (Flood Clear threshold)
005035 7F5035 BE 10 A0                    cpx   TpsPctx10     ; Compare "FloodClear" with "TpsPctx10"
005038 7F5038 22 0F                       bhi   NoFloodClear  ; If "FloodClear" is greater than "TpsPctx10", branch to
                                                                  ; NoFloodClear: ("TpsPctx10" below threshold so interpolate
                                                                                  ; the cranking pulse width)
00503A 7F503A 1C 10 F1 80                     bset  engine,FldClr ; Set "FldClr" bit of "engine" bit field
00503E 7F503E 18 79 10 5D                 clrw  CrankPWtk     ; Clear Cranking injector pulswidth timer ticks(uS x 5.12)
005042 7F5042 18 79 10 D4                     clrw  FDpw          ; Fuel delivery pulsewidth (PW - dead time)
                                                                  ; (mS x 1000)(116)
005046 7F5046 06 55 31                    job  MainLoopEnd    ; Jump or branch to "MainLoop" (keep looping here until no
                                                                  ; longer in flood clear mode
005049 7F5049                         NoFloodClear:
005049 7F5049 1D 10 F1 80                     bclr  engine,FldClr ; Clear "FldClr" bit of "engine" bit field
                                      ;*****************************************************************************************
                                      ; - Calculate the delay time to start injection in 5.12uS resoluion.
                                      ;*****************************************************************************************
00504D 7F504D MACRO                       INJ_DEL_CALC_512    ; Macro in tim_BPEM.s
                                                              ; (prescale 256, 5.12us resolution,                      (INJ_DEL_CALC_512)
                                                              ; max period 335.5ms) (time base for prime or crank modes) (INJ_DEL_CALC_512)
                                      ;***************************************************************************************** (INJ_DEL_CALC_512)
                                      ; - The fuel injectors are wired in pairs arranged in the firing order 1&10, 9&4, 3&6, 5&8 (INJ_DEL_CALC_512)
                                      ;   7&2. This arrangement allows a "semi sequential" injection strategy with only 5 (INJ_DEL_CALC_512)
                                      ;   injector drivers. The cylinder pairs are 54 degrees apart in crankshaft rotation so (INJ_DEL_CALC_512)
                                      ;   the injector pulse for the trailing cylinder will lag the leading cylinder by 54 (INJ_DEL_CALC_512)
                                      ;   degrees. The benefits of injector timing is an open question but its effect is most (INJ_DEL_CALC_512)
                                      ;   felt at idle when the injection pulse can be timed to an opeing intake valve. At (INJ_DEL_CALC_512)
                                      ;   higher speeds and loads the effect is less becasue the pulse width is longer than the (INJ_DEL_CALC_512)
                                      ;   opening time of the valve. The engine has 10 trigger points on the crankshaft so (INJ_DEL_CALC_512)
                                      ;   there is lots of choice where to refernce the start of the pulse from. I have chosen (INJ_DEL_CALC_512)
                                      ;   to use the point when the intake valve on the leading cylinder is just starting to (INJ_DEL_CALC_512)
                                      ;   open. Actual injector pulse start time can be delayed from this point by the value in (INJ_DEL_CALC_512)
                                      ;   "InjDelDegx10". The delay in timer ticks will depend on the timer base rate of either (INJ_DEL_CALC_512)
                                      ;   5.12 uS for cranking or 2.56uS for running.                                  (INJ_DEL_CALC_512)
                                      ;***************************************************************************************** (INJ_DEL_CALC_512)
                                      ;***************************************************************************************** (INJ_DEL_CALC_512)
                                      ; - Calculate the delay time from crankshaft trigger to start of the injector pulse in (INJ_DEL_CALC_512)
                                      ;   5.12uS resolution.                                                           (INJ_DEL_CALC_512)
                                      ;***************************************************************************************** (INJ_DEL_CALC_512)
00504D 7F504D 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (INJ_DEL_CALC_512)
005052 7F5052 CD 08 00                    ldy   #veBins_E   ; Load index register Y with address of first configurable (INJ_DEL_CALC_512)
                                                            ; constant on buffer RAM page 1 (vebins)                   (INJ_DEL_CALC_512)
005055 7F5055 EE EA 03 D8                 ldx   $03D8,Y     ; Load Accu X with value in buffer RAM page 1 (offset 984)($03D8) (INJ_DEL_CALC_512)
                                                            ; ("InjDelDegx10")                                         (INJ_DEL_CALC_512)
005059 7F5059 B7 54                       tfr  X,D          ; "InjDelDegx10" -> Accu D                                 (INJ_DEL_CALC_512)
00505B 7F505B FD 10 1D                    ldy  Degx10tk512  ;(Time for 1 degree of rotation in 5.12uS resolution x 10) (INJ_DEL_CALC_512)
00505E 7F505E 13                          emul              ;(D)x(Y)=Y:D "InjDelDegx10" * Degx10tk512                  (INJ_DEL_CALC_512)
00505F 7F505F CE 00 64                        ldx  #$0064       ; Decimal 100 -> Accu X                                (INJ_DEL_CALC_512)
005062 7F5062 11                              ediv              ;(Y:D)/(X)=Y;Rem->D ((InjDelDegx10" * Degx10tk512)/100 (INJ_DEL_CALC_512)
                                                                ; = "InjOCadd1"                                        (INJ_DEL_CALC_512)
005063 7F5063 7C 10 61                        std  InjOCadd1    ; Copy result to "InjOCadd1"                           (INJ_DEL_CALC_512)
                                      ;*****************************************************************************************
                                      ; - Interpolate injector deadband at current battery voltage
                                      ;*****************************************************************************************
005066 7F5066 MACRO                       DEADBAND_CALCS   ; Macro in injcalcs_BPEM488.s
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                      ; - Interpolate injector deadband at current battery voltage                     (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
005066 7F5066 CC 00 48                    ldd  #$0048      ; Decimal 72 (7.2 volts) -> Accu D                          (DEADBAND_CALCS)
005069 7F5069 3B                          pshd             ; Push to stack (V1)                                        (DEADBAND_CALCS)
00506A 7F506A FC 10 88                    ldd  BatVx10     ; "BatVx10"(battery volts x 10) -> Accu D                   (DEADBAND_CALCS)
00506D 7F506D 3B                          pshd             ; Push to stack (V)                                         (DEADBAND_CALCS)
00506E 7F506E CC 00 C0                    ldd  #$00C0      ; Decimal 192 (19.2 volts) -> Accu D                        (DEADBAND_CALCS)
005071 7F5071 3B                          pshd             ; Push to stack (V2)                                        (DEADBAND_CALCS)
005072 7F5072 FC 10 4B                        ldd  DdBndZ2     ;((Injector deadband at 13.2V) + (Injector deadband voltage (DEADBAND_CALCS)
                                                               ; correction * 6)) -> Accu D                            (DEADBAND_CALCS)
005075 7F5075 3B                          pshd             ; Push to stack (Z1)                                        (DEADBAND_CALCS)
005076 7F5076 FC 10 49                        ldd  DdBndZ1     ;((Injector deadband at 13.2V) - (Injector deadband voltage (DEADBAND_CALCS)
                                                               ; correction * 6)) -> Accu D                            (DEADBAND_CALCS)
005079 7F5079 3B                          pshd             ; Push to stack (Z2)                                        (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        Z2       |  SP+ 0                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        Z1       |  SP+ 2                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V2       |  SP+ 4                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V        |  SP+ 6                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V1       |  SP+ 8                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                      ;                     V      V1      V2      Z1    Z2                            (DEADBAND_CALCS)
00507A 7F507A MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ; ==========================                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ; result: D: interpolated result                                                 (DEADBAND_CALCS/2D_IPOL)
                                      ; SSTACK: none                                                                   (DEADBAND_CALCS/2D_IPOL)
                                      ;         no registers are preserved                                             (DEADBAND_CALCS/2D_IPOL)
                                      ;                                                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;    ^ V                                                                         (DEADBAND_CALCS/2D_IPOL)
                                      ;    |                                                                           (DEADBAND_CALCS/2D_IPOL)
                                      ;  Z2+....................*                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;    |                    :                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (DEADBAND_CALCS/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (DEADBAND_CALCS/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (DEADBAND_CALCS/2D_IPOL)
                                      ;    |   :       :        :                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ;                                                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
00507A 7F507A EC 86                                   LDD       \1    ; load V                                         (DEADBAND_CALCS/2D_IPOL)
00507C 7F507C A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (DEADBAND_CALCS/2D_IPOL)
00507E 7F507E B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
005080 7F5080 EC 80                                   LDD       \5    ; load Z2                                        (DEADBAND_CALCS/2D_IPOL)
005082 7F5082 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
005084 7F5084 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (DEADBAND_CALCS/2D_IPOL)
005086 7F5086 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
005088 7F5088 EC 84                                   LDD       \3    ; load V2                                        (DEADBAND_CALCS/2D_IPOL)
00508A 7F508A A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (DEADBAND_CALCS/2D_IPOL)
00508C 7F508C B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (DEADBAND_CALCS/2D_IPOL)
                                      ;*********************************************************************           (DEADBAND_CALCS/2D_IPOL)
00508E 7F508E 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (DEADBAND_CALCS/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (DEADBAND_CALCS/2D_IPOL)
005090 7F5090 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
005092 7F5092 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                      ; - Free stack space (result in D)                                               (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
005094 7F5094 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (DEADBAND_CALCS)
005096 7F5096 7C 11 05                    std  tmp4w      ; Copy result to "tmp4w" (Injector deadband at current battery (DEADBAND_CALCS)
                                                              ; voltage) (mSec x 100)                                  (DEADBAND_CALCS)
005099 7F5099 FC 11 05                    ldd  tmp4w      ; Result in "tmp4w" -> Accu D                                (DEADBAND_CALCS)
00509C 7F509C CE 00 0A                    ldx  #$000A     ; Decimal 10-> Accu X                                        (DEADBAND_CALCS)
00509F 7F509F 18 10                       idiv            ; (D)/(X)->Xrem->D ("tmp4w"/10="Deadband")(mSec*10)          (DEADBAND_CALCS)
0050A1 7F50A1 7E 10 CE                    stx  Deadband   ; Copy result to "Deadband"(mSec*10)                         (DEADBAND_CALCS)
                                      ;*****************************************************************************************
                                      ; - Look up the value for the cranking pulse width in 5.12uS resolution
                                      ;*****************************************************************************************
0050A4 7F50A4 MACRO                       CRANK_COR_LU       ; Macro in injcalcsBPEM.s
                                                               ; resolution)                                           (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ; --------------------------------- Cranking Mode ---------------------------------------- (CRANK_COR_LU)
                                      ; When the engine is cranking the injector pulse width is calculated by          (CRANK_COR_LU)
                                      ; multiplying the value in ReqFuel by the pertentage value in "Crankcor". "Crankcor" is (CRANK_COR_LU)
                                      ; interpolated from the Cranking Pulse table which plots engine temperature in degrees F (CRANK_COR_LU)
                                      ; to 0.1 degree resoluion against percent to 0.1 percent resolution.             (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ; - Look up current value in Cranking Pulsewidth Correction Table (Crankcor)     (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
0050A4 7F50A4 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (CRANK_COR_LU)
0050A9 7F50A9 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (CRANK_COR_LU)
                                                                  ; ->page where the desired curve resides             (CRANK_COR_LU)
0050AF 7F50AF 18 03 01 90 10 27           movw #$0190,CrvRowOfst  ; 400 -> Offset from the curve page to the curve row( (CRANK_COR_LU)
                                                                      ; tempTable2)(actual offset is 800)              (CRANK_COR_LU)
0050B5 7F50B5 18 03 01 B6 10 29           movw #$01B6,CrvColOfst  ; 438 -> Offset from the curve page to the curve column (CRANK_COR_LU)
                                                                      ; (crankPctTable)(actual offset is 876)          (CRANK_COR_LU)
0050BB 7F50BB 18 04 10 6E 10 2B           movw Cltx10,CrvCmpVal   ; Engine Coolant Temperature (Degrees F x 10) ->     (CRANK_COR_LU)
                                                                  ; Curve comparison value                             (CRANK_COR_LU)
0050C1 7F50C1 18 0B 09 10 2D              movb #$09,CrvBinCnt     ; 9 -> number of bins in the curve row or column minus 1 (CRANK_COR_LU)
0050C6 7F50C6 16 61 17                    jsr   CRV_LU_NP         ; Jump to subroutine at CRV_LU_NP:(located in interp_BEEM488.s (CRANK_COR_LU)
                                                                      ; module)                                        (CRANK_COR_LU)
0050C9 7F50C9 7C 10 C2                    std   Crankcor          ; Copy result to Cranking Pulsewidth Correction (% x 10) (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ; - Multiply "ReqFuel"(mS x 10) by "Crankcor" (%) = (mS * 10)                    (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
0050CC 7F50CC 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (CRANK_COR_LU)
0050D1 7F50D1 CD 08 00                    ldy   #veBins_E    ; Load index register Y with address of first configurable (CRANK_COR_LU)
                                                           ; constant on buffer RAM page 1 (vebins)                    (CRANK_COR_LU)
0050D4 7F50D4 EC EA 03 EC                 ldd   $03EC,Y    ; Load Accu X with value in buffer RAM page 1 (offset 1004)($03EC) (CRANK_COR_LU)
                                                           ; ("ReqFuel")                                               (CRANK_COR_LU)
0050D8 7F50D8 FD 10 C2                    ldy  Crankcor    ;Cranking Pulsewidth Correction (% x 10) -> Accu Y          (CRANK_COR_LU)
0050DB 7F50DB 13                          emul             ;(D)x(Y)=Y:D "ReqFuel" * "Crankcor"                         (CRANK_COR_LU)
0050DC 7F50DC CE 03 E8                        ldx  #$03E8      ; Decimal 1000 -> Accu X                                (CRANK_COR_LU)
0050DF 7F50DF 11                              ediv             ;(Y:D)/(X)=Y;Rem->D ("ReqFuel" * "Crankcor" )/10000     (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ; - Store the result as "FDpw"(fuel delivery pulse width)(mS x 10)               (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
0050E0 7F50E0 7D 10 D4                        sty  FDpw        ; Result -> "FDpw" (fuel delivery pulsewidth (mS x 10)  (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ; - Add "deadband and store the result as "CrankPW"(cranking injector pulsewidth)(mS x 10) (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
0050E3 7F50E3 FC 10 D4                    ldd  FDpw        ; "FDpw"-> Accu D                                           (CRANK_COR_LU)
0050E6 7F50E6 F3 10 CE                        addd Deadband    ; (A:B)+(M:M+1)->A:B ("FDpw"+"Deadband"="CrankPW"       (CRANK_COR_LU)
0050E9 7F50E9 7C 10 D2                        std  CrankPW     ; Result -> "CrankPW" (cranking injector pulsewidth) (mS x 10) (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ; - Divide "FDpw" by 10 and store as "FD" (Fuel burn calcs have to be in mS)     (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
0050EC 7F50EC FC 10 D4                        ldd  FDpw        ; "FDpw"->Accu D (mS x 10)                              (CRANK_COR_LU)
0050EF 7F50EF CE 00 0A                        ldx  #$000A      ; Decimal 10->Accu X                                    (CRANK_COR_LU)
0050F2 7F50F2 18 10                           idiv             ; (D)/(X)->Xrem->D ("FDpw"/10="FD")(mS)                 (CRANK_COR_LU)
0050F4 7F50F4 7E 10 D8                        stx  FD          ; Copy reslut to "FD"(mS)(Fuel burn calcs have to be in mS) (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
                                      ; - Convert the result to timer ticks in 5.12uS resolution                       (CRANK_COR_LU)
                                      ;***************************************************************************************** (CRANK_COR_LU)
0050F7 7F50F7 FC 10 D2                    ldd   CrankPW    ; "CrankPW"->Accu D (cranking injector pulsewidth) (mS x 10) (CRANK_COR_LU)
0050FA 7F50FA CD 27 10                        ldy   #$2710     ; Load index register Y with decimal 10000 (for integer math) (CRANK_COR_LU)
0050FD 7F50FD 13                              emul             ;(D)x(Y)=Y:D ("ReqFuel" * "crankcor" )/100) * 10,000)   (CRANK_COR_LU)
0050FE 7F50FE CE 02 00                        ldx   #$200      ; Decimal 512 -> Accu X                                 (CRANK_COR_LU)
005101 7F5101 11                          ediv             ;(Y:D)/(X)=Y;Rem->D                                         (CRANK_COR_LU)
                                                               ; ((("ReqFuel" * "crankcor" )/100) * 10,000) / 512 = "CrankPWtk" (CRANK_COR_LU)
005102 7F5102 7D 10 5D                    sty   CrankPWtk  ; Copy result to "CrankPWtk" (Cranking pulse width in 5.12uS (CRANK_COR_LU)
005105 7F5105 06 55 31                    job  MainLoopEnd   ; Jump or branch to "MainLoopEnd:" (keep looping here until no
                                                                 ; longer in crank mode
005108 7F5108                         RunMode:
                                      ;*****************************************************************************************
                                      ; - Calculate the delay time to start injection in 2.56uS resoluion.
                                      ;*****************************************************************************************
005108 7F5108 MACRO                       INJ_DEL_CALC_256    ; Macro in tim_BPEM.s
                                      ;***************************************************************************************** (INJ_DEL_CALC_256)
                                      ; - Calculate the delay time from crankshaft trigger to start of the injector pulse in (INJ_DEL_CALC_256)
                                      ;   2.56uS resolution.                                                           (INJ_DEL_CALC_256)
                                      ;***************************************************************************************** (INJ_DEL_CALC_256)
005108 7F5108 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (INJ_DEL_CALC_256)
00510D 7F510D CD 08 00                    ldy   #veBins_E   ; Load index register Y with address of first configurable (INJ_DEL_CALC_256)
                                                            ; constant on buffer RAM page 1 (vebins)                   (INJ_DEL_CALC_256)
005110 7F5110 EE EA 03 D8                 ldx   $03D8,Y     ; Load Accu X with value in buffer RAM page 1 (offset 984)($03D8) (INJ_DEL_CALC_256)
                                                            ; ("InjDelDegx10")                                         (INJ_DEL_CALC_256)
005114 7F5114 B7 54                       tfr  X,D          ; "InjDelDegx10" -> Accu D                                 (INJ_DEL_CALC_256)
005116 7F5116 FD 10 1F                    ldy  Degx10tk256  ;(Time for 1 degree of rotation in 2.56uS resolution x 10) (INJ_DEL_CALC_256)
005119 7F5119 13                          emul              ;(D)x(Y)=Y:D "InjDelDegx10" * Degx10tk256                  (INJ_DEL_CALC_256)
00511A 7F511A CE 00 64                        ldx  #$0064       ; Decimal 100 -> Accu X                                (INJ_DEL_CALC_256)
00511D 7F511D 11                              ediv              ;(Y:D)/(X)=Y;Rem->D ((InjDelDegx10" * Degx10tk256)/100 (INJ_DEL_CALC_256)
                                                                ; = "InjOCadd1"                                        (INJ_DEL_CALC_256)
00511E 7F511E 7C 10 61                        std  InjOCadd1    ; Copy result to "InjOCadd1"                           (INJ_DEL_CALC_256)
                                      ;*****************************************************************************************
                                      ; The base value for injector pulse width calculations in mS to 0.1mS resolution is called
                                      ; "ReqFuel". It represents the pulse width reqired to achieve 14.7:1 Air/Fuel Ratio at
                                      ; 100% volumetric efficiency. The VE table contains percentage values to 0.1 percent
                                      ; resolultion and plots intake manifold pressure in KPA to 0.1KPA resolution against RPM.
                                      ; These values are part of the injector pulse width calculations for a running engine.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Look up current value in VE table (veCurr)(%x10)
                                      ;*****************************************************************************************
005121 7F5121 MACRO                       VE_LU              ; Macro in injclacsBPEM.s
                                                               ; resolution)                                           (VE_LU)
                                      ;***************************************************************************************** (VE_LU)
                                      ; The base value for injector pulse width calculations in mS to 0.1mS resolution is called (VE_LU)
                                      ; "ReqFuel". It represents the pulse width reqired to achieve 14.7:1 Air/Fuel Ratio at (VE_LU)
                                      ; 100% volumetric efficiency. The VE table contains percentage values to 0.1 percent (VE_LU)
                                      ; resolultion and plots intake manifold pressure in KPA to 0.1KPA resolution against RPM. (VE_LU)
                                      ; These values are part of the injector pulse width calculations for a running engine. (VE_LU)
                                      ;***************************************************************************************** (VE_LU)
                                      ;***************************************************************************************** (VE_LU)
                                      ; - Look up current value in VE table (veCurr)(%x10)                             (VE_LU)
                                      ;***************************************************************************************** (VE_LU)
005121 7F5121 FE 10 80                    ldx   Mapx10     ; Load index register X with value in "Mapx10"(Column value Manifold (VE_LU)
                                                           ; Absolute Pressure x 10 )                                  (VE_LU)
005124 7F5124 FC 10 AE                    ldd   RPM        ; Load double accumulator D with value in "RPM" (Row value RPM) (VE_LU)
005127 7F5127 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (VE_LU)
00512C 7F512C CD 08 00                    ldy   #veBins_E    ; Load index register Y with address of the first value in VE table (VE_LU)
                                                           ;(in RAM)                                                   (VE_LU)
00512F 7F512F 16 5F 7F                    jsr   3D_LOOKUP  ; Jump to subroutine at 3D_LOOKUP:                          (VE_LU)
005132 7F5132 7C 10 B6                    std   VEcurr     ; Copy result to "VEcurr"(%x10)                             (VE_LU)
                                      ;*****************************************************************************************
                                      ; The Air/Fuel Ratio of the fuel mixture affects how an engine will run. Generally
                                      ; speaking AFRs of less than ~7:1 are too rich to ignite. Ratios of greater than ~20:1 are
                                      ; too lean to ignite. Stoichiometric ratio is at ~14.7:1. This is the ratio at which all
                                      ; the fuel and all the oxygen are consumed and is best for emmisions concerns. Best power
                                      ; is obtained between ratios of ~12:1 and ~13:1. Best economy is obtained as lean as ~18:1
                                      ; in some engines. This controller runs in open loop so the AFR numbers are used as
                                      ; a tuning aid only.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Look up current value in AFR table (afrCurr)(AFRx10)
                                      ;*****************************************************************************************
005135 7F5135 MACRO                       AFR_LU             ; Macro in injclacsBPEM.s
                                      ;***************************************************************************************** (AFR_LU)
                                      ; The Air/Fuel Ratio of the fuel mixture affects how an engine will run. Generally (AFR_LU)
                                      ; speaking AFRs of less than ~7:1 are too rich to ignite. Ratios of greater than ~20:1 are (AFR_LU)
                                      ; too lean to ignite. Stoichiometric ratio is at ~14.7:1. This is the ratio at which all (AFR_LU)
                                      ; the fuel and all the oxygen are consumed and is best for emmisions concerns. Best power (AFR_LU)
                                      ; is obtained between ratios of ~12:1 and ~13:1. Best economy is obtained as lean as ~18:1 (AFR_LU)
                                      ; in some engines. This controller runs in open loop so the AFR numbers are used as (AFR_LU)
                                      ; a tuning aid only.                                                             (AFR_LU)
                                      ;***************************************************************************************** (AFR_LU)
                                      ;***************************************************************************************** (AFR_LU)
                                      ; - Look up current value in AFR table (afrCurr)(AFRx10)                         (AFR_LU)
                                      ;***************************************************************************************** (AFR_LU)
005135 7F5135 FE 10 80                    ldx   Mapx10     ; Load index register X with value in "Mapx10"(Column value Manifold (AFR_LU)
                                                           ; Absolute Pressure x 10 )                                  (AFR_LU)
005138 7F5138 FC 10 AE                    ldd   RPM        ; Load double accumulator D with value in "RPM" (Row value RPM) (AFR_LU)
00513B 7F513B 18 0B FD 00 17              movb  #(BUF_RAM_P3_START>>16),EPAGE  ; Move $FD into EPAGE                   (AFR_LU)
005140 7F5140 CD 08 00                    ldy   #afrBins_E   ; Load index register Y with address of the first value in AFR table (AFR_LU)
                                                           ;(in RAM)                                                   (AFR_LU)
005143 7F5143 16 5F 7F                    jsr   3D_LOOKUP  ; Jump to subroutine at 3D_LOOKUP:                          (AFR_LU)
005146 7F5146 7C 10 B4                    std   AFRcurr    ; Copy result to "AFRcurr"                                  (AFR_LU)
                                      ;*****************************************************************************************
                                      ; ---------------------------- Warm Up Enrichment (WUEcor)--------------------------------
                                      ;
                                      ; Warm Up Enrichment is applied until the engine is up to full operating temperature.
                                      ; "WUEcor" specifies how much fuel is added as a percentage. It is interpolated from the
                                      ; Warm Up Enrichment table which plots engine temperature in degrees F to 0.1 degree
                                      ; resoluion against percent to 0.1 percent resolution and is part of the calculations
                                      ; to determine pulse width when the engine is running.
                                      ;
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; -------------------------- After Start Enrichment (ASEcor)------------------------------
005149 7F5149                         :
                                      ; Immediately after the engine has started it is normal to need additional fuel for a
                                      ; short period of time. "ASEcor"specifies how much fuel is added as a percentage. It is
                                      ; interpolated from the After Start Enrichment table which plots engine temperature in
                                      ; degrees F to 0.1 degree resoluion against percent to 0.1 percent resolution and is added
                                      ; to "WUEcor" as part of the calculations to determine pulse width when the engine is
                                      ; running.
                                      ;
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; ----------------------- After Start Enrichment Taper (ASErev)---------------------------
                                      ;
                                      ; After Start Enrichment is applied for a specified number of engine revolutions after
                                      ; start up. This number is interpolated from the After Start Enrichment Taper table which
                                      ; plots engine temperature in degrees F to 0.1 degree resoluion against revolutions.
                                      ; The ASE starts with the value of "ASEcor" first and is linearly interpolated down to
                                      ; zero after "ASErev" crankshaft revolutions.
                                      ;
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Determine if we require Warmup Enrichments and or After Start Enrichments
                                      ;*****************************************************************************************
005149 7F5149 1E 10 F1 08 0A              brset  engine,ASEon,CHECK_ASE   ; If "ASEon" bit of "engine" bit field is set, branch
                                                                              ; to CHECK_ASE:
00514E 7F514E 1F 10 F1 10 02              brclr  engine,WUEon,No_WUE_ASE1 ; If "WUEon" bit of "engine" bit field is clear
                                                                          ; Branch to No_WUE_ASE1: (engine is warm and ASE is
                                                                                                              ; not in progress so no enrichments are required)
005153 7F5153 20 03                       bra  CHECK_ASE                  ; branch to CHECK_ASE:
005155 7F5155                         No_WUE_ASE1:
005155 7F5155 06 52 2C                    job No_WUE_ASE                     ; Jump or branch to No_WUE_ASE (long branch)
005158 7F5158                         CHECK_ASE:
                                      ;*****************************************************************************************
                                      ; - WUE and or ASE is in progress so do the WUE/ASE calculations
                                      ;*****************************************************************************************
005158 7F5158 MACRO                       WUE_ASE_CALCS       ; Macro in injcalcsBPEM.s
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; ---------------------------- Warm Up Enrichment (WUEcor)-------------------------------- (WUE_ASE_CALCS)
                                      ;                                                                                (WUE_ASE_CALCS)
                                      ; Warm Up Enrichment is applied until the engine is up to full operating temperature. (WUE_ASE_CALCS)
                                      ; "WUEcor" specifies how much fuel is added as a percentage. It is interpolated from the (WUE_ASE_CALCS)
                                      ; Warm Up Enrichment table which plots engine temperature in degrees F to 0.1 degree (WUE_ASE_CALCS)
                                      ; resoluion against percent to 0.1 percent resolution and is part of the calculations (WUE_ASE_CALCS)
                                      ; to determine pulse width when the engine is running.                           (WUE_ASE_CALCS)
                                      ;                                                                                (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; -------------------------- After Start Enrichment (ASEcor)------------------------------ (WUE_ASE_CALCS)
005158 7F5158                         :                                                                                (WUE_ASE_CALCS)
                                      ; Immediately after the engine has started it is normal to need additional fuel for a (WUE_ASE_CALCS)
                                      ; short period of time. "ASEcor"specifies how much fuel is added as a percentage. It is (WUE_ASE_CALCS)
                                      ; interpolated from the After Start Enrichment table which plots engine temperature in (WUE_ASE_CALCS)
                                      ; degrees F to 0.1 degree resoluion against percent to 0.1 percent resolution and is added (WUE_ASE_CALCS)
                                      ; to "WUEcor" as part of the calculations to determine pulse width when the engine is (WUE_ASE_CALCS)
                                      ; running.                                                                       (WUE_ASE_CALCS)
                                      ;                                                                                (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; ----------------------- After Start Enrichment Taper (ASErev)--------------------------- (WUE_ASE_CALCS)
                                      ;                                                                                (WUE_ASE_CALCS)
                                      ; After Start Enrichment is applied for a specified number of engine revolutions after (WUE_ASE_CALCS)
                                      ; start up. This number is interpolated from the After Start Enrichment Taper table which (WUE_ASE_CALCS)
                                      ; plots engine temperature in degrees F to 0.1 degree resoluion against revolutions. (WUE_ASE_CALCS)
                                      ; The ASE starts with the value of "ASEcor" first and is linearly interpolated down to (WUE_ASE_CALCS)
                                      ; zero after "ASErev" crankshaft revolutions.                                    (WUE_ASE_CALCS)
                                      ;                                                                                (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; - Look up current value in Warmup Enrichment Table (WUEcor)                    (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
005158 7F5158 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (WUE_ASE_CALCS)
00515D 7F515D 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (WUE_ASE_CALCS)
                                                                  ; ->page where the desired curve resides             (WUE_ASE_CALCS)
005163 7F5163 18 03 01 86 10 27           movw #$0186,CrvRowOfst  ; 390 -> Offset from the curve page to the curve row (WUE_ASE_CALCS)
                                                                      ; (tempTable1)(actual offset is 780              (WUE_ASE_CALCS)
005169 7F5169 18 03 01 D4 10 29           movw #$01D4,CrvColOfst  ; 468 -> Offset from the curve page to the curve column( (WUE_ASE_CALCS)
                                                                      ; wueBins)(actual offset is 936)                 (WUE_ASE_CALCS)
00516F 7F516F 18 04 10 6E 10 2B           movw Cltx10,CrvCmpVal   ; Engine Coolant Temperature (Degrees F x 10) ->     (WUE_ASE_CALCS)
                                                                  ; Curve comparison value                             (WUE_ASE_CALCS)
005175 7F5175 18 0B 09 10 2D              movb #$09,CrvBinCnt     ; 9 -> number of bins in the curve row or column minus 1 (WUE_ASE_CALCS)
00517A 7F517A 16 61 17                    jsr   CRV_LU_NP         ; Jump to subroutine at CRV_LU_NP:(located in        (WUE_ASE_CALCS)
                                                                      ; interp_BEEM488.s module)                       (WUE_ASE_CALCS)
00517D 7F517D 7C 10 BC                    std   WUEcor            ; Copy result to Warmup Enrichment Correction (% x 10) (WUE_ASE_CALCS)
005180 7F5180 1F 10 F1 08 02              brclr engine,ASEon,WUEcheck1 ; If "ASEon" bit of "engine" bit field is clear, (WUE_ASE_CALCS)
                                                                      ; branch to WUEcheck1:(ASE is finished, see if we are (WUE_ASE_CALCS)
                                                                                                      ; still in warm up mode) (WUE_ASE_CALCS)
005185 7F5185 20 03                       bra  N0_WUEcheck_LONG_BRANCH ; Branch to N0_WUEcheck_LONG_BRANCH:            (WUE_ASE_CALCS)
005187 7F5187                         WUEcheck1:                                                                       (WUE_ASE_CALCS)
005187 7F5187 06 52 21                    job   WUEcheck              ; Jump or branch to WUEcheck: (long branch)      (WUE_ASE_CALCS)
00518A 7F518A                         N0_WUEcheck_LONG_BRANCH:                                                         (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; - Look up current value in Afterstart Enrichment Percentage Table (ASEcor)     (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
00518A 7F518A 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (WUE_ASE_CALCS)
00518F 7F518F 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (WUE_ASE_CALCS)
                                                                  ; ->page where the desired curve resides             (WUE_ASE_CALCS)
005195 7F5195 18 03 01 90 10 27           movw #$0190,CrvRowOfst  ; 400 -> Offset from the curve page to the curve row (WUE_ASE_CALCS)
                                                                      ; (tempTable2)(actual offset is 800)             (WUE_ASE_CALCS)
00519B 7F519B 18 03 01 C0 10 29           movw #$01C0,CrvColOfst  ; 448 -> Offset from the curve page to the curve column (WUE_ASE_CALCS)
                                                                      ; (asePctTable)(actual offset is 896)            (WUE_ASE_CALCS)
0051A1 7F51A1 18 04 10 6E 10 2B           movw Cltx10,CrvCmpVal   ; Engine Coolant Temperature (Degrees F x 10) ->     (WUE_ASE_CALCS)
                                                                  ; Curve comparison value                             (WUE_ASE_CALCS)
0051A7 7F51A7 18 0B 09 10 2D              movb #$09,CrvBinCnt     ; 9 -> number of bins in the curve row or column minus 1 (WUE_ASE_CALCS)
0051AC 7F51AC 16 61 17                    jsr   CRV_LU_NP         ; Jump to subroutine at CRV_LU_NP:(located in        (WUE_ASE_CALCS)
                                                                      ; interp_BEEM488.s module)                       (WUE_ASE_CALCS)
0051AF 7F51AF 7C 10 BE                    std   ASEcor            ; Copy result to  Afterstart Enrichmnet Correction (% x 10) (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; - Look up current value in Afterstart Enrichment Taper Table (ASErev)          (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
0051B2 7F51B2 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (WUE_ASE_CALCS)
0051B7 7F51B7 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (WUE_ASE_CALCS)
                                                                  ; ->page where the desired curve resides             (WUE_ASE_CALCS)
0051BD 7F51BD 18 03 01 90 10 27           movw #$0190,CrvRowOfst  ; 400 -> Offset from the curve page to the curve row (WUE_ASE_CALCS)
                                                                      ; (tempTable2)(actual offset is 800)             (WUE_ASE_CALCS)
0051C3 7F51C3 18 03 01 CA 10 29           movw #$01CA,CrvColOfst  ; 458 -> Offset from the curve page to the curve column (WUE_ASE_CALCS)
                                                                      ; (aseRevTable)(actual offset is 916)            (WUE_ASE_CALCS)
0051C9 7F51C9 18 04 10 6E 10 2B           movw Cltx10,CrvCmpVal   ; Engine Coolant Temperature (Degrees F x 10) ->     (WUE_ASE_CALCS)
                                                                  ; Curve comparison value                             (WUE_ASE_CALCS)
0051CF 7F51CF 18 0B 09 10 2D              movb #$09,CrvBinCnt     ; 9 -> number of bins in the curve row or column minus 1 (WUE_ASE_CALCS)
0051D4 7F51D4 16 61 17                    jsr   CRV_LU_NP         ; Jump to subroutine at CRV_LU_NP:(located in        (WUE_ASE_CALCS)
                                                                      ; interp_BEEM488.s module)                       (WUE_ASE_CALCS)
0051D7 7F51D7 7C 10 57                    std   ASErev            ; Copy result to Afterstart Enrichment Taper (revolutions) (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; Interpolate "ASEcor" as "ASErev" is decremented. ASErev is decremented every revolution (WUE_ASE_CALCS)
                                      ; in the Crank Angle Sensor interrupt in the state_BEEM488 module                (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
0051DA 7F51DA CC 00 00                    ldd  #$0000      ; Load double accumulator with zero (final value of "ASEcyc") (WUE_ASE_CALCS)
0051DD 7F51DD 3B                          pshd             ; Push to stack (V1)                                        (WUE_ASE_CALCS)
0051DE 7F51DE FC 10 59                    ldd  ASEcnt      ; Load double accumulator with "ASEcnt"                     (WUE_ASE_CALCS)
0051E1 7F51E1 3B                          pshd             ; Push to stack (V)                                         (WUE_ASE_CALCS)
0051E2 7F51E2 FC 10 57                    ldd  ASErev      ; Load double accumulator with (Start value of "ASErev")    (WUE_ASE_CALCS)
0051E5 7F51E5 3B                          pshd             ; Push to stack (V2)                                        (WUE_ASE_CALCS)
0051E6 7F51E6 CC 00 00                    ldd  #$0000      ; Load double accumulator with zero (Low range of "ASEcor") (WUE_ASE_CALCS)
0051E9 7F51E9 3B                          pshd             ; Push to stack (Z1)                                        (WUE_ASE_CALCS)
0051EA 7F51EA FC 10 BE                    ldd  ASEcor      ; Load double accumulator with (High range of "ASEcor")     (WUE_ASE_CALCS)
0051ED 7F51ED 3B                          pshd             ; Push to stack (Z2)                                        (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                                      ;    +--------+--------+                                         (WUE_ASE_CALCS)
                                                      ;    |        Z2       |  SP+ 0                                  (WUE_ASE_CALCS)
                                                      ;    +--------+--------+                                         (WUE_ASE_CALCS)
                                                      ;    |        Z1       |  SP+ 2                                  (WUE_ASE_CALCS)
                                                      ;    +--------+--------+                                         (WUE_ASE_CALCS)
                                                      ;    |        V2       |  SP+ 4                                  (WUE_ASE_CALCS)
                                                      ;    +--------+--------+                                         (WUE_ASE_CALCS)
                                                      ;    |        V        |  SP+ 6                                  (WUE_ASE_CALCS)
                                                      ;    +--------+--------+                                         (WUE_ASE_CALCS)
                                                      ;    |        V1       |  SP+ 8                                  (WUE_ASE_CALCS)
                                                      ;    +--------+--------+                                         (WUE_ASE_CALCS)
                                      ;                     V      V1      V2      Z1    Z2                            (WUE_ASE_CALCS)
0051EE 7F51EE MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (WUE_ASE_CALCS/2D_IPOL)
                                      ; ==========================                                                     (WUE_ASE_CALCS/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ; result: D: interpolated result                                                 (WUE_ASE_CALCS/2D_IPOL)
                                      ; SSTACK: none                                                                   (WUE_ASE_CALCS/2D_IPOL)
                                      ;         no registers are preserved                                             (WUE_ASE_CALCS/2D_IPOL)
                                      ;                                                                                (WUE_ASE_CALCS/2D_IPOL)
                                      ;    ^ V                                                                         (WUE_ASE_CALCS/2D_IPOL)
                                      ;    |                                                                           (WUE_ASE_CALCS/2D_IPOL)
                                      ;  Z2+....................*                                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;    |                    :                                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (WUE_ASE_CALCS/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (WUE_ASE_CALCS/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (WUE_ASE_CALCS/2D_IPOL)
                                      ;    |   :       :        :                                                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (WUE_ASE_CALCS/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (WUE_ASE_CALCS/2D_IPOL)
                                      ;                                                                                (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
0051EE 7F51EE EC 86                                   LDD       \1    ; load V                                         (WUE_ASE_CALCS/2D_IPOL)
0051F0 7F51F0 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (WUE_ASE_CALCS/2D_IPOL)
0051F2 7F51F2 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
0051F4 7F51F4 EC 80                                   LDD       \5    ; load Z2                                        (WUE_ASE_CALCS/2D_IPOL)
0051F6 7F51F6 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
0051F8 7F51F8 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (WUE_ASE_CALCS/2D_IPOL)
0051FA 7F51FA B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
0051FC 7F51FC EC 84                                   LDD       \3    ; load V2                                        (WUE_ASE_CALCS/2D_IPOL)
0051FE 7F51FE A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (WUE_ASE_CALCS/2D_IPOL)
005200 7F5200 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (WUE_ASE_CALCS/2D_IPOL)
                                      ;*********************************************************************           (WUE_ASE_CALCS/2D_IPOL)
005202 7F5202 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (WUE_ASE_CALCS/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (WUE_ASE_CALCS/2D_IPOL)
005204 7F5204 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS/2D_IPOL)
005206 7F5206 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (WUE_ASE_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; - Free stack space (result in D)                                               (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
005208 7F5208 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (WUE_ASE_CALCS)
00520A 7F520A 7C 10 BE                    std   ASEcor    ; Copy result to "ASEcor" ASE correction (%)                 (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; - "WUEcor" + "ASEcor" = "WUEandASEcor" (%*10)                                  (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
00520D 7F520D FC 10 BC                   ldd   WUEcor        ; "WUEcor" (%x10) -> Accu D                               (WUE_ASE_CALCS)
005210 7F5210 F3 10 BE                   addd  ASEcor        ; (A:B)+(M:M+1)->A:B "WUEcor" + "ASEcor" = "WUEcor" (%*10) (WUE_ASE_CALCS)
005213 7F5213 7C 10 C0                   std   WUEandASEcor  ; Copy result to "WUEandASEcor" (%*10)                    (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; - Check to see if we are finished with ASE                                     (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
005216 7F5216 FC 10 59                   ldd  ASEcnt     ; "ASEcnt" -> Accu D                                          (WUE_ASE_CALCS)
005219 7F5219 27 02                      beq  ASEdone    ; If "ASEcnt" has been decremented to zero branch to ASEdone: (WUE_ASE_CALCS)
00521B 7F521B 20 04                      bra  WUEcheck   ; Branch to WUEcheck:                                         (WUE_ASE_CALCS)
00521D 7F521D                         ASEdone:                                                                         (WUE_ASE_CALCS)
00521D 7F521D 1D 10 F1 08                bclr engine,ASEon  ; Clear "ASEon" bit of "engine" bit field                  (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
                                      ; - Check to see if we are finished with WUE                                     (WUE_ASE_CALCS)
                                      ;***************************************************************************************** (WUE_ASE_CALCS)
005221 7F5221                         WUEcheck:                                                                        (WUE_ASE_CALCS)
005221 7F5221 FC 10 BC                   ldd  WUEcor        ; "WUEcor" -> Accu D                                       (WUE_ASE_CALCS)
005224 7F5224 27 02                      beq  WUEdone       ; If "WUEcor" has been reduced to zero branch to WUEdone:  (WUE_ASE_CALCS)
005226 7F5226 20 04                      bra  WUEandASEdone ; Branch to WUEandASEdone:                                 (WUE_ASE_CALCS)
005228 7F5228                         WUEdone:                                                                         (WUE_ASE_CALCS)
005228 7F5228 1D 10 F1 10                bclr engine,WUEon  ; Clear "WUEon" bit of "engine" bit field                  (WUE_ASE_CALCS)
00522C 7F522C                         WUEandASEdone:        ; Finished with WUE and ASE                                (WUE_ASE_CALCS)
00522C 7F522C                         No_WUE_ASE:
                                      ;*****************************************************************************************
                                      ; - When the engine is running and the throttle is opened quickly a richer mixture is
                                      ;   required for a short period of time. This additional pulse width time is called
                                      ;   Throttle Opening Enrichment. Conversly, when the engine is in over run
                                      ;   conditions no fuel is required so the injectors can be turned off, subject to
                                      ;   permissives. This condtion is call Overrun Fuel Cut.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Determine if we are in steady state, TOE mode or OFC mode and do the calculations
                                      ;   accordingly.
                                      ;*****************************************************************************************
00522C 7F522C MACRO                       TOE_OFC_CALCS       ; Macro in injcalcsBPEM.s
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - When the engine is running and the throttle is opened quickly a richer mixture is (TOE_OFC_CALCS)
                                      ;   required for a short period of time. This additional pulse width time is called (TOE_OFC_CALCS)
                                      ;   Throttle Opening Enrichment. Conversly, when the engine is in over run       (TOE_OFC_CALCS)
                                      ;   conditions no fuel is required so the injectors can be turned off, subject to (TOE_OFC_CALCS)
                                      ;   permissives. This condtion is call Overrun Fuel Cut.                         (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Check to see if the throttle is opening or if it is at steady state or closing (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
00522C 7F522C                         TOE_OFC_CHK:                                                                     (TOE_OFC_CALCS)
00522C 7F522C FE 10 A0                    ldx   TpsPctx10       ; Load index register X with value in "TpsPctx10"      (TOE_OFC_CALCS)
00522F 7F522F BE 10 45                    cpx   TpsPctx10last   ; Compare with value in "TpsPctx10last"                (TOE_OFC_CALCS)
005232 7F5232 18 23 01 67                 bls   OFC_CHK         ; If "TpsPctx10" is equal to or less than "TpsPctx10last" branch to (TOE_OFC_CALCS)
                                                                    ; OFC_CHK:(Throttle is steady or closing so check for OFC permissives) (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Current Throttle position percent - throttle position percent 100mS ago = throttle position (TOE_OFC_CALCS)
                                      ;   percent difference over time in seconds "TpsPctx10" - "TpsPctx10last" = "TpsPctDOT" (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
005236 7F5236 18 B0 10 45                 subx  TpsPctx10last   ; (X)-(M:M-1)=>X Subtract "TpsPctx10last" from "tTpsPctx10" (TOE_OFC_CALCS)
00523A 7F523A 7E 10 C4                    stx   TpsPctDOT       ; Copy result to "TpsPctDOT"                           (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
                                      ; - The throttle is opening. Check to see if it is opening at a rate greater than the threshold (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
00523D 7F523D 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
005242 7F5242 CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                                ; on buffer RAM page 1 (veBins_E)                      (TOE_OFC_CALCS)
005245 7F5245 EE EA 03 D0                 ldx   $03D0,Y         ; Load Accu D with value in buffer RAM page 1 offset 976 (tpsThresh) (TOE_OFC_CALCS)
                                                                ;(TPSdot threshold)(offset = 970)($03CA)               (TOE_OFC_CALCS)
005249 7F5249 BE 10 C4                    cpx   TpsPctDOT       ; Compare "tpsThresh" with "TpsPctDOT"                 (TOE_OFC_CALCS)
00524C 7F524C 18 22 01 38                 bhi   TOE_CHK_TIME    ; If "tpsThresh" is greater than "TpsPctDOT", branch to TOE_CHK_TIME: (TOE_OFC_CALCS)
                                                                ; ("TpsPctDOT" below threshold so check if acceleration is done) (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
                                      ; - The throttle is opening at a rate greater then the threshold. Check to see if TOE is in (TOE_OFC_CALCS)
                                      ;   progress.                                                                    (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
005250 7F5250 1E 10 F1 20 29              brset engine,TOEon,TOE_CALC ; If "TOEon" bit of "engine" bit field           (TOE_OFC_CALCS)
                                                                ; is set, branch to TOE_CALC: (TOE in progress)        (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
                                      ;- The throttle is opening at a rate greater than the threshold and TOE is not in progress (TOE_OFC_CALCS)
                                      ;  so prepare to add in the enrichement.                                         (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
005255 7F5255 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
00525A 7F525A CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                              ; on buffer RAM page 1 (veBins_E)                        (TOE_OFC_CALCS)
00525D 7F525D EC EA 01 DE                 ldd   $01DE,Y       ; Load Accu D with value in buffer RAM page 1 offset 478 (First element (TOE_OFC_CALCS)
                                                              ; of "TOEbins" table)(Start with first element, will determine actual (TOE_OFC_CALCS)
                                                              ; next time around)(actual offset is 956)                (TOE_OFC_CALCS)
005261 7F5261 7C 10 C9                    std   TOEpct        ; Copy to Throttle Opening Enrichment percent(used in later calculations) (TOE_OFC_CALCS)
005264 7F5264 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
005269 7F5269 CD 08 00                    ldy   #veBins_E     ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                              ; on buffer RAM page 1 (veBins_E)                        (TOE_OFC_CALCS)
00526C 7F526C EC EA 03 D2                 ldd   $03D2,Y       ; Load Accu D with value in buffer RAM page 1 offset 978 (TOEtime_F) (TOE_OFC_CALCS)
005270 7F5270 7C 10 48                    std   TOEtim        ; Copy to "TOEtim" (Throttle Opening Enrichment duration (TOE_OFC_CALCS)
                                                                  ; (decremented every 100 mS))                        (TOE_OFC_CALCS)
005273 7F5273 1C 10 F1 20                 bset  engine,TOEon  ; Set "TOEon" bit of "engine" variable (in TOE mode)     (TOE_OFC_CALCS)
005277 7F5277 1D 10 F1 40                 bclr  engine,OFCon  ; Clear "OFCon" bit of "engine" variable (not in OFC mode) (TOE_OFC_CALCS)
00527B 7F527B 06 54 08                    job   OFC_LOOP      ; Jump or branch to OFC_LOOP:(fall through)              (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Calculate the cold temperature add-on enrichment "ColdAddpct" (%) from -39.72 (TOE_OFC_CALCS)
                                      ;   degrees to 179.9 degrees.                                                    (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
00527E 7F527E                         TOE_CALC:                                                                        (TOE_OFC_CALCS)
00527E 7F527E FC 10 6C                    ldd  cltADC       ; "cltADC" -> D                                            (TOE_OFC_CALCS)
005281 7F5281 8C 00 93                    cpd  #$0093       ; Compare "cltADC" with decimal 147(ADC @ 179.9F)          (TOE_OFC_CALCS)
005284 7F5284 23 02                       bls  RailColdAdd  ; If "cltADC" is lower or the same as 147, branch to RailColdAdd: (TOE_OFC_CALCS)
005286 7F5286 20 05                       bra  DoColdAdd    ; Branch to DoColdAdd:                                     (TOE_OFC_CALCS)
005288 7F5288                         RailColdAdd:                                                                     (TOE_OFC_CALCS)
005288 7F5288 79 10 C7                   clr   ColdAddpct   ; Clear "ColdAddpct" (no cold adder)                       (TOE_OFC_CALCS)
00528B 7F528B 20 3C                      bra   ColdAddDone  ; Branch to ColdAddDone: (skip over)                       (TOE_OFC_CALCS)
00528D 7F528D                         DoColdAdd:                                                                       (TOE_OFC_CALCS)
00528D 7F528D CC 00 93                    ldd  #$0093      ; Load double accumulator with decimal 147 (ADC @ 179.9F)   (TOE_OFC_CALCS)
005290 7F5290 3B                          pshd             ; Push to stack (V1)                                        (TOE_OFC_CALCS)
005291 7F5291 FC 10 6C                    ldd  cltAdc      ; Load double accumulator with "cltAdc"                     (TOE_OFC_CALCS)
005294 7F5294 3B                          pshd             ; Push to stack (V)                                         (TOE_OFC_CALCS)
005295 7F5295 CC 03 EB                    ldd  #$03EB      ; Load double accumulator with decimal 1003 (ADC @ -39.72F) (TOE_OFC_CALCS)
005298 7F5298 3B                          pshd             ; Push to stack (V2)                                        (TOE_OFC_CALCS)
005299 7F5299 CC 00 00                    ldd  #$0000      ; Load double accumulator with decimal 0 (added amount at 179.9F) (TOE_OFC_CALCS)
00529C 7F529C 3B                          pshd             ; Push to stack (Z1)                                        (TOE_OFC_CALCS)
00529D 7F529D 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
0052A2 7F52A2 CD 08 00                    ldy   #veBins_E    ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                           ; on buffer RAM page 1 (veBins_E)                           (TOE_OFC_CALCS)
0052A5 7F52A5 EC EA 03 D4                 ldd   $03D4,Y    ; Load Accu D with value in buffer RAM page 1 (ColdAdd_F)(offset 980) (TOE_OFC_CALCS)
                                                           ;(added amount at -39.72F)                                  (TOE_OFC_CALCS)
0052A9 7F52A9 3B                          pshd             ; Push to stack (Z2)                                        (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        Z2       |  SP+ 0                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        Z1       |  SP+ 2                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        V2       |  SP+ 4                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        V        |  SP+ 6                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        V1       |  SP+ 8                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                      ;                     V      V1      V2      Z1    Z2                            (TOE_OFC_CALCS)
0052AA 7F52AA MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ; ==========================                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ; result: D: interpolated result                                                 (TOE_OFC_CALCS/2D_IPOL)
                                      ; SSTACK: none                                                                   (TOE_OFC_CALCS/2D_IPOL)
                                      ;         no registers are preserved                                             (TOE_OFC_CALCS/2D_IPOL)
                                      ;                                                                                (TOE_OFC_CALCS/2D_IPOL)
                                      ;    ^ V                                                                         (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |                                                                           (TOE_OFC_CALCS/2D_IPOL)
                                      ;  Z2+....................*                                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |                    :                                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (TOE_OFC_CALCS/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |   :       :        :                                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ;                                                                                (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
0052AA 7F52AA EC 86                                   LDD       \1    ; load V                                         (TOE_OFC_CALCS/2D_IPOL)
0052AC 7F52AC A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (TOE_OFC_CALCS/2D_IPOL)
0052AE 7F52AE B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
0052B0 7F52B0 EC 80                                   LDD       \5    ; load Z2                                        (TOE_OFC_CALCS/2D_IPOL)
0052B2 7F52B2 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
0052B4 7F52B4 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (TOE_OFC_CALCS/2D_IPOL)
0052B6 7F52B6 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
0052B8 7F52B8 EC 84                                   LDD       \3    ; load V2                                        (TOE_OFC_CALCS/2D_IPOL)
0052BA 7F52BA A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (TOE_OFC_CALCS/2D_IPOL)
0052BC 7F52BC B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (TOE_OFC_CALCS/2D_IPOL)
                                      ;*********************************************************************           (TOE_OFC_CALCS/2D_IPOL)
0052BE 7F52BE 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (TOE_OFC_CALCS/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (TOE_OFC_CALCS/2D_IPOL)
0052C0 7F52C0 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
0052C2 7F52C2 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Free stack space (result in D)                                               (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
0052C4 7F52C4 1B 8A                       leas  10,SP       ; Stack pointer -> bottom of stack                         (TOE_OFC_CALCS)
0052C6 7F52C6 7B 10 C7                    stab  ColdAddpct  ; Copy result to "ColdAddpct" (%)(bins are byte values)    (TOE_OFC_CALCS)
0052C9 7F52C9                         ColdAddDone:                                                                     (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Calculate the cold temperature multiplier enrichment "ColdMulpct" (%), from -39.72 degrees (TOE_OFC_CALCS)
                                      ;   to 179.9 degrees.                                                            (TOE_OFC_CALCS)
                                      ;*********************************************************************************************** (TOE_OFC_CALCS)
0052C9 7F52C9 FC 10 6C                    ldd  cltADC       ; "cltADC" -> D                                            (TOE_OFC_CALCS)
0052CC 7F52CC 8C 00 93                    cpd  #$0093       ; Compare "cltADC" with decimal 147(ADC @ 179.9F)          (TOE_OFC_CALCS)
0052CF 7F52CF 23 02                       bls  RailColdMul  ; If "cltADC" is lower or the same as 147, branch to RailColdMul: (TOE_OFC_CALCS)
0052D1 7F52D1 20 07                       bra  DoColdMul    ; Branch to DoColdMul: (skip over)                         (TOE_OFC_CALCS)
0052D3 7F52D3                         RailColdMul:                                                                     (TOE_OFC_CALCS)
0052D3 7F52D3 18 0B 64 10 C8             movb #$64,ColdMulpct  ; Decimal 100 -> "ColdMulpct" (100% = no multiplier))   (TOE_OFC_CALCS)
0052D8 7F52D8 20 3C                      bra   ColdMulDone     ; Branch to ColdMulDone: (skip over)                    (TOE_OFC_CALCS)
0052DA 7F52DA                         DoColdMul:                                                                       (TOE_OFC_CALCS)
0052DA 7F52DA CC 00 93                    ldd  #$0093      ; Load double accumulator with decimal 147 (ADC @ 179.9F)   (TOE_OFC_CALCS)
0052DD 7F52DD 3B                          pshd             ; Push to stack (V1)                                        (TOE_OFC_CALCS)
0052DE 7F52DE FC 10 6C                    ldd  cltAdc      ; Load double accumulator with "cltAdc"                     (TOE_OFC_CALCS)
0052E1 7F52E1 3B                          pshd             ; Push to stack (V)                                         (TOE_OFC_CALCS)
0052E2 7F52E2 CC 03 EB                    ldd  #$03EB      ; Load double accumulator with decimal 1003 (ADC @ -39.72F) (TOE_OFC_CALCS)
0052E5 7F52E5 3B                          pshd             ; Push to stack (V2)                                        (TOE_OFC_CALCS)
0052E6 7F52E6 CC 00 64                    ldd  #$0064      ; Load double accumulator with decimal 100 (multiplier amount at 179.9F) (TOE_OFC_CALCS)
                                                           ;(1.00 multiplier at 180 degrees)                           (TOE_OFC_CALCS)
0052E9 7F52E9 3B                          pshd             ; Push to stack (Z1)                                        (TOE_OFC_CALCS)
0052EA 7F52EA 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
0052EF 7F52EF CD 08 00                    ldy   #veBins_E    ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                           ; on buffer RAM page 1 (veBins_E)                           (TOE_OFC_CALCS)
0052F2 7F52F2 EC EA 03 D6                 ldd   $03D6,Y    ; Load Accu D with value in buffer RAM page 1 "ColdMul_F"(offset 982) (TOE_OFC_CALCS)
                                                           ;(added amount at -39.72F)                                  (TOE_OFC_CALCS)
0052F6 7F52F6 3B                          pshd             ; Push to stack (Z2)                                        (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        Z2       |  SP+ 0                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        Z1       |  SP+ 2                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        V2       |  SP+ 4                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        V        |  SP+ 6                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                                      ;    |        V1       |  SP+ 8                                  (TOE_OFC_CALCS)
                                                      ;    +--------+--------+                                         (TOE_OFC_CALCS)
                                      ;                     V      V1      V2      Z1    Z2                            (TOE_OFC_CALCS)
0052F7 7F52F7 MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ; ==========================                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ; result: D: interpolated result                                                 (TOE_OFC_CALCS/2D_IPOL)
                                      ; SSTACK: none                                                                   (TOE_OFC_CALCS/2D_IPOL)
                                      ;         no registers are preserved                                             (TOE_OFC_CALCS/2D_IPOL)
                                      ;                                                                                (TOE_OFC_CALCS/2D_IPOL)
                                      ;    ^ V                                                                         (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |                                                                           (TOE_OFC_CALCS/2D_IPOL)
                                      ;  Z2+....................*                                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |                    :                                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (TOE_OFC_CALCS/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |   :       :        :                                                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (TOE_OFC_CALCS/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ;                                                                                (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
0052F7 7F52F7 EC 86                                   LDD       \1    ; load V                                         (TOE_OFC_CALCS/2D_IPOL)
0052F9 7F52F9 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (TOE_OFC_CALCS/2D_IPOL)
0052FB 7F52FB B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
0052FD 7F52FD EC 80                                   LDD       \5    ; load Z2                                        (TOE_OFC_CALCS/2D_IPOL)
0052FF 7F52FF A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
005301 7F5301 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (TOE_OFC_CALCS/2D_IPOL)
005303 7F5303 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
005305 7F5305 EC 84                                   LDD       \3    ; load V2                                        (TOE_OFC_CALCS/2D_IPOL)
005307 7F5307 A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (TOE_OFC_CALCS/2D_IPOL)
005309 7F5309 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (TOE_OFC_CALCS/2D_IPOL)
                                      ;*********************************************************************           (TOE_OFC_CALCS/2D_IPOL)
00530B 7F530B 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (TOE_OFC_CALCS/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (TOE_OFC_CALCS/2D_IPOL)
00530D 7F530D B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS/2D_IPOL)
00530F 7F530F E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (TOE_OFC_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Free stack space (result in D)                                               (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
005311 7F5311 1B 8A                       leas  10,SP         ; Stack pointer -> bottom of stack                       (TOE_OFC_CALCS)
005313 7F5313 7B 10 C8                    stab   ColdMulpct   ; Copy result to "ColdMulpct" (%) (bins are byte values) (TOE_OFC_CALCS)
005316 7F5316                         ColdMulDone:                                                                     (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; First determine "TpsPctDOT" ("TpsPctx10" - "TpsPctx10last") (both updated every 100mS (TOE_OFC_CALCS)
                                      ; in rti_BEEM488.s)                                                              (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
005316 7F5316 FE 10 A0                   ldx   TpsPctx10         ; "TpsPctx10" -> Accu X                               (TOE_OFC_CALCS)
005319 7F5319 18 B0 10 45                subx  TpsPctx10last     ; (X)-(M:M-1)=>X Subtract "TpsPctx10last" from "TpsPctx10" (TOE_OFC_CALCS)
00531D 7F531D 7E 10 C4                   stx   TpsPctDOT         ; Copy result to "TpsPctDOT"                          (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Look up current value in Throttle Opening Enrichment Table (TpsDOTcor)(%)(byte value) (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
005320 7F5320 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
005325 7F5325 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr    ; Address of the first value in VE table(in RAM)(page pointer) (TOE_OFC_CALCS)
                                                                   ; ->page where the desired curve resides            (TOE_OFC_CALCS)
00532B 7F532B 18 03 01 E2 10 27           movw #$01E2,CrvRowOfst   ; 482 -> Offset from the curve page to the curve row (TOE_OFC_CALCS)
                                                                       ; (TOERates_F)(actual offset is 964)            (TOE_OFC_CALCS)
005331 7F5331 18 03 01 DE 10 29           movw #$01DE,CrvColOfst   ; 478 -> Offset from the curve page to the curve column (TOE_OFC_CALCS)
                                                                       ; (TOEBins_F)(actual offset is 956)             (TOE_OFC_CALCS)
005337 7F5337 18 04 10 C4 10 2B           movw TpsPctDOT,CrvCmpVal ; TPS% difference over time (%/Sec)(update every 100mSec) (TOE_OFC_CALCS)
                                                                   ; -> Curve comparison value                         (TOE_OFC_CALCS)
00533D 7F533D 18 0B 03 10 2D              movb #$03,CrvBinCnt      ; 3 -> number of bins in the curve row or column minus 1 (TOE_OFC_CALCS)
005342 7F5342 16 60 4E                    jsr   CRV_LU_P           ; Jump to subroutine at CRV_LU_P:(located in interp_BEEM488.s module) (TOE_OFC_CALCS)
005345 7F5345 7B 10 C6                    stab  TpsDOTcor          ; Copy result to TpsDOTcor (%)(TOE bins use word values) (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Multiply "TpsDOTcor" by "ColdMulpct" and divide by 100                       (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ;    ldd   TpsDOTcor   ;  "TpsDOTcor" -> Accu D (%)                              (TOE_OFC_CALCS)
                                      ;       ldy   ColdMulpct  ; "ColdMulpct" -> Accu Y (%)                           (TOE_OFC_CALCS)
                                      ;       emul              ;(D)x(Y)=Y:D ("TpsDOTcor" * "ColdMulpct" )             (TOE_OFC_CALCS)
                                      ;       ldx   #$0064      ; Decimal 100 -> Accu X                                (TOE_OFC_CALCS)
                                      ;    ediv              ;(Y:D)/(X)=Y;Rem->D(("TpsDOTcor" * "ColdMulpct")/100)(%)  (TOE_OFC_CALCS)
005348 7F5348 B6 10 C6                    ldaa  TpsDOTcor      ; "TpsDOTcor" -> A (%)                                  (TOE_OFC_CALCS)
00534B 7F534B F6 10 C8                    ldab  ColdMulpct     ; "ColdMulpct" -> B (%)                                 (TOE_OFC_CALCS)
00534E 7F534E 12                          mul                  ; (A)x(B)->A:B (TpsDOTcor x ColdMulpct) result in D     (TOE_OFC_CALCS)
00534F 7F534F CE 00 64                    ldx   #$0064         ; Decimal 100 -> X                                      (TOE_OFC_CALCS)
005352 7F5352 18 10                       idiv                 ; (D)/(X)->(X)rem(D) ((TpsDOTcor x ColdMulpct)/100)(%)  (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Check the remainder and round up if >=5                                      (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
005354 7F5354 8C 00 05                    cpd   #$0005         ; Compare idiv remainder with decimal 5                 (TOE_OFC_CALCS)
005357 7F5357 2F 05                       ble   NO_ROUND_UP    ; If remainder of idiv <= 5, branch to NO_ROUND_UP:     (TOE_OFC_CALCS)
005359 7F5359 B7 50                       tfr   X,A            ; idiv result -> A                                      (TOE_OFC_CALCS)
00535B 7F535B 42                          inca                 ; idiv result + 1 -> A (round up)                       (TOE_OFC_CALCS)
00535C 7F535C 20 02                       bra   ADD_COLDADD    ; Branch to ADD_COLDADD:(fall through)                  (TOE_OFC_CALCS)
00535E 7F535E                         NO_ROUND_UP:                                                                     (TOE_OFC_CALCS)
00535E 7F535E B7 50                       tfr   X,A            ; idiv result -> A                                      (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Add the result with "ColdAddpct". Compare the result with the current "TOEpct" and (TOE_OFC_CALCS)
                                      ;   and save the highest value as "TOEpct". This is the final TOE value(%)       (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
005360 7F5360                         ADD_COLDADD:                                                                     (TOE_OFC_CALCS)
005360 7F5360 BB 10 C7                    adda  ColdAddpct     ; (A)+(M)->(A) (("TpsDOTcor" * ColdMulpct)/100) + "ColdAddpct") (TOE_OFC_CALCS)
005363 7F5363 7A 11 07                    staa  tmp5b           ; Copy to "tmp5b"(("TpsDOTcor" * ColdMulpct)/100) + "ColdAddpct") (TOE_OFC_CALCS)
005366 7F5366 B1 10 C9                    cmpa  TOEpct         ; Compare result with "TOEpct"                          (TOE_OFC_CALCS)
005369 7F5369 25 1D                       blo   TOE_CHK_TIME   ; If (A) is less than (M), branch to TOE_CHK_TIME: (result (TOE_OFC_CALCS)
                                                               ; < "TOEpct" so use this value for "TOEpct" and check if (TOE_OFC_CALCS)
                                                                                       ; acceleration is done)         (TOE_OFC_CALCS)
00536B 7F536B B6 11 07                    ldaa  tmp5b           ; "tmp5b" -> A(("TpsDOTcor" * ColdMulpct)/100) + "ColdAddpct") (TOE_OFC_CALCS)
00536E 7F536E 7A 10 C9                    staa  TOEpct         ; Copy result to "TOEpct"(result is higher than current (TOE_OFC_CALCS)
                                                               ; so update TOEpct with the higher value)               (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Calculate the Throttle Opening Enrichment adder for PW calculations.         (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
005371 7F5371 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
005376 7F5376 CD 08 00                    ldy   #veBins_E   ; Load index register Y with address of first configurable (TOE_OFC_CALCS)
                                                            ; constant on buffer RAM page 1 (veBins_E)                 (TOE_OFC_CALCS)
005379 7F5379 EC EA 03 EC                 ldd   $03EC,Y     ; Load Accu D with value in buffer RAM page 1 (offset 1004)($03EC) (TOE_OFC_CALCS)
                                                            ; ("reqFuel")                                              (TOE_OFC_CALCS)
                                      ;    tfr  X,D          ; "reqFuel" -> Accu D                                     (TOE_OFC_CALCS)
00537D 7F537D FD 10 C9                    ldy  TOEpct       ; "TOEpct" -> Accu D (% x 10)                              (TOE_OFC_CALCS)
005380 7F5380 13                          emul              ; (D)*(Y)->Y:D "reqFuel" * "TOEpct"                        (TOE_OFC_CALCS)
005381 7F5381 CE 00 64                        ldx  #$0064       ; Decimal 100 -> Accu X                                (TOE_OFC_CALCS)
005384 7F5384 11                              ediv              ;(Y:D)/)X)->Y;Rem->D ("ReqFuel"*"TOEpct")/1000="TOEpw" (TOE_OFC_CALCS)
005385 7F5385 7D 10 CA                        sty  TOEpw        ; Result -> "TOEpw" TOE adder (mS x 100)               (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Check to see if Throttle Opening Enrichment is done.                         (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
005388 7F5388                          TOE_CHK_TIME:                                                                   (TOE_OFC_CALCS)
005388 7F5388 1E 10 F1 40 07              brset  engine,OFCon,RESET_TOE ; If Overrun Fuel Cut bit of "Engine" bit field is set, (TOE_OFC_CALCS)
                                                                        ; branch to RESET_TOE:                         (TOE_OFC_CALCS)
00538D 7F538D B6 10 48                     ldaa  TOEtim       ; "TOEtim" -> Accu A                                     (TOE_OFC_CALCS)
005390 7F5390 27 02                            beq   RESET_TOE    ; If "TOEtim" = zero branch to RESET_TOE:(timer has timed out) (TOE_OFC_CALCS)
005392 7F5392 20 07                            bra   TOE_LOOP     ; Branch to "TOE_LOOP:(Timer hasn't timed out yet)   (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - The throttle is no longer opening and the duration timer has timed out so clear (TOE_OFC_CALCS)
                                      ;    "TOEpct" and the "TOEon" bit of "engine" bit field.                         (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
005394 7F5394                         RESET_TOE:                                                                       (TOE_OFC_CALCS)
005394 7F5394 79 10 C9                    clr    TOEpct       ; Clear Throttle Opening Enrichment % (0% enrich)        (TOE_OFC_CALCS)
005397 7F5397 1D 10 F1 20                 bclr   engine,TOEon ; Clear "TOEon" bit of "engine" bit field                (TOE_OFC_CALCS)
00539B 7F539B                         TOE_LOOP:                                                                        (TOE_OFC_CALCS)
00539B 7F539B 20 6B                       job  OFC_LOOP       ; Jump or branch to OFC_LOOP:(Finished with TOE, not in OFC so (TOE_OFC_CALCS)
                                                                  ; fall through)                                      (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Overrun Fuel Cut mode                                                        (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ;                                                                                (TOE_OFC_CALCS)
                                      ; - Engine overrun occurs when the the vehicle is in motion, the throttle is closed and (TOE_OFC_CALCS)
                                      ;   the engine is turning faster than the driver wants it to be, either because of vehicle (TOE_OFC_CALCS)
                                      ;   inertia or being on a negative grade. Under these conditions there will be a slight (TOE_OFC_CALCS)
                                      ;   increase in engine braking and some fuel can be saved if the fuel injectors are not (TOE_OFC_CALCS)
                                      ;   pulsed. In order to enter OFC mode some conditions have to be met. The throttle (TOE_OFC_CALCS)
                                      ;   opening must be less than the minimum permitted opening. The engine RPM must be more (TOE_OFC_CALCS)
                                      ;   than the minimum premitted RPM. The manifold pressure must be less than the minimum (TOE_OFC_CALCS)
                                      ;   permitted manifold pressure. When these conditions are met there is a delay time (TOE_OFC_CALCS)
                                      ;   before OFC is enabled. The purpose of this is to have some hysteresis to prevent (TOE_OFC_CALCS)
                                      ;   rapid changes in modes. When any of the  conditions are not met, OFC is disabled and (TOE_OFC_CALCS)
                                      ;   will not be enabled again until all condtions are met and the delay time has expired. (TOE_OFC_CALCS)
                                      ;                                                                                (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Check to see if we have permissives for Overrun Fuel Cut at steady state or closing (TOE_OFC_CALCS)
                                      ;   throttle.                                                                    (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
00539D 7F539D                         OFC_CHK:                                                                         (TOE_OFC_CALCS)
00539D 7F539D 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
0053A2 7F53A2 CD 08 00                    ldy   #veBins_E     ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                            ; on buffer RAM page 1 (veBins_E)                          (TOE_OFC_CALCS)
0053A5 7F53A5 EE EA 03 DA                 ldx   $03DA,Y     ; Load X with value in buffer RAM page 1 offset 986 (OFCtps) (TOE_OFC_CALCS)
                                                            ;(Overrun Fuel Cut min TPS%)                               (TOE_OFC_CALCS)
0053A9 7F53A9 BE 10 A0                    cpx  TpsPctx10    ; Compare it with value in "TpsPctx10"                     (TOE_OFC_CALCS)
0053AC 7F53AC 25 52                       blo  OFC_CHK_DONE ; If (X)>(M), branch to OFC_CHK_DONE:                      (TOE_OFC_CALCS)
                                                            ;(TPS is above minimum so no fuel cut)                     (TOE_OFC_CALCS)
0053AE 7F53AE 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (TOE_OFC_CALCS)
0053B3 7F53B3 CD 08 00                    ldy   #veBins_E     ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                            ; on buffer RAM page 1 (veBins_E)                          (TOE_OFC_CALCS)
0053B6 7F53B6 EE EA 03 DC                 ldx   $03DC,Y     ; Load X with value in buffer RAM page 1 offset 988 (OFCrpm) (TOE_OFC_CALCS)
                                                            ;(Overrun Fuel Cut min RPM)                                (TOE_OFC_CALCS)
0053BA 7F53BA BE 10 AE                    cpx  RPM          ; Compare it value in RPM                                  (TOE_OFC_CALCS)
0053BD 7F53BD 22 41                       bhi  OFC_CHK_DONE ; If (X)<(M), branch to OFC_CHK_DONE:                      (TOE_OFC_CALCS)
                                                            ;(RPM is below minimum so no fuel cut)                     (TOE_OFC_CALCS)
0053BF 7F53BF 18 0B FF 00 17                  movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE               (TOE_OFC_CALCS)
0053C4 7F53C4 CD 08 00                    ldy   #veBins_E     ; Load index register Y with address of first configurable constant (TOE_OFC_CALCS)
                                                            ; on buffer RAM page 1 (veBins_E)                          (TOE_OFC_CALCS)
0053C7 7F53C7 EE EA 03 DE                 ldx   $03DE,Y     ; Load X with value in buffer RAM page 1 offset 990 (OFCmap) (TOE_OFC_CALCS)
                                                            ;(Overrun Fuel Cut min manifold pressure)                  (TOE_OFC_CALCS)
0053CB 7F53CB BE 10 80                    cpx  Mapx10       ; Compare it to value in Manifold Absolute Pressure (KPAx10) (TOE_OFC_CALCS)
0053CE 7F53CE 25 30                       blo  OFC_CHK_DONE ; If (X)<(M), branch to OFC_CHK_DONE:                      (TOE_OFC_CALCS)
                                                            ;(Manifold pressure is above minimum so no fuel cut)       (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - We have permissives for Overrun Fuel Cut. Check to see if we are waiting for the OFC (TOE_OFC_CALCS)
                                      ;   timer to time out, or if OFC is already in place, or if we should start the timer for (TOE_OFC_CALCS)
                                      ;   OFC.                                                                         (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
0053D0 7F53D0 1E 10 F1 01 1A                  brset  engine,OFCdelon,OFC_DELAY ; If "OFCdelon" bit of "engine" bit field is set, branch (TOE_OFC_CALCS)
                                                                             ; to OFC_DELAY: (waiting for the OFC timer to time out) (TOE_OFC_CALCS)
0053D5 7F53D5 1E 10 F1 40 2E                  brset  engine,OFCon,OFC_LOOP   ; If "OFCdon" bit of "engine" bit field is set, branch (TOE_OFC_CALCS)
                                                                             ; to OFC_LOOP: (OFC is in place, waiting until (TOE_OFC_CALCS)
                                                                                                         ; permissives are no longer met)(fall through) (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - We have permissives for OFC. We are not waiting for the OFC timer to time out and OFC (TOE_OFC_CALCS)
                                      ;   is not already in place. Load "OFCdel" (Overrun Fuel Cut delay duration) with the (TOE_OFC_CALCS)
                                      ;   value in "OFCdel_F". Set the "OFCdelon" flag in "engine" bit field.          (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
0053DA 7F53DA 18 0B FF 00 17                  movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE               (TOE_OFC_CALCS)
0053DF 7F53DF CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable (TOE_OFC_CALCS)
                                                              ; constant on buffer RAM page 1 (veBins)                 (TOE_OFC_CALCS)
0053E2 7F53E2 A6 EA 03 E0                 ldaa   $03E0,Y      ; Load Accu A with value in buffer RAM page 1 offset 992 (TOE_OFC_CALCS)
                                                              ; (OFCdel_F) (Overrun Fuel Cut delay time)               (TOE_OFC_CALCS)
0053E6 7F53E6 7A 10 47                    staa  OFCdel        ; Copy to "OFCdel" (Overrun Fuel Cut delay duration)(decremented (TOE_OFC_CALCS)
                                                                  ; every 100mS in rti_BPEM488.s)                      (TOE_OFC_CALCS)
0053E9 7F53E9 1C 10 F1 01                     bset  engine,OFCdelon ; Set "OFCdelon" bit of "engine" bit field         (TOE_OFC_CALCS)
0053ED 7F53ED 20 19                       bra   OFC_LOOP      ; Branch to OFC_LOOP: (fall through)                     (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - We have permissives for OFC. We are waiting for the OFC timer to time out. Check to (TOE_OFC_CALCS)
                                      ;   see if "OFCdel" (Overrun Fuel Cut delay duration) has been decremented to zero. (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
0053EF 7F53EF                         OFC_DELAY:                                                                       (TOE_OFC_CALCS)
0053EF 7F53EF B6 10 47                    ldaa OFCdel     ; "OFCdel" -> Accu A                                         (TOE_OFC_CALCS)
0053F2 7F53F2 27 02                           beq  SET_OFC    ; If "OFCdel" = zero branch to SET_OFC:                  (TOE_OFC_CALCS)
0053F4 7F53F4 20 12                       bra  OFC_LOOP   ; (Branch to OFC_LOOP: (Timer not timed out so fall through) (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - We have permissives for OFC. The OFC timer has timed out. Clear the "OFCdelon" bit and (TOE_OFC_CALCS)
                                      ;   set the "OFCon" bit of "engine bit field. In the final pulse width calculations the (TOE_OFC_CALCS)
                                      ;   "OFCon" bit of "engine" bit field will be tested. If the bit is set the"PWtk" (TOE_OFC_CALCS)
                                      ;   (injector pulsewidth time value) will be loaded with zero.                   (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
0053F6 7F53F6                         SET_OFC:                                                                         (TOE_OFC_CALCS)
0053F6 7F53F6 1D 10 F1 01                 bclr engine,OFCdelon ; Clear "OFCdelon" bit of "engine" bit field            (TOE_OFC_CALCS)
0053FA 7F53FA 1C 10 F1 40                     bset engine,OFCon  ; Set "OFCon" bit of "engine" bit field (This bit will be tested (TOE_OFC_CALCS)
                                                                 ; in the final pulse width calculations, if set the pulse width (TOE_OFC_CALCS)
                                                                                 ; will be set to zero                 (TOE_OFC_CALCS)
0053FE 7F53FE 20 08                       bra  OFC_LOOP      ; (Branch to OFC_LOOP:(keep looping until permissives are no (TOE_OFC_CALCS)
                                                                 ; longer met)                                         (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
                                      ; - Permissives have not or no longer are being met. Clear the flags.            (TOE_OFC_CALCS)
                                      ;***************************************************************************************** (TOE_OFC_CALCS)
005400 7F5400                         OFC_CHK_DONE:                                                                    (TOE_OFC_CALCS)
005400 7F5400 1D 10 F1 01                 bclr engine,OFCdelon  ; Clear "OFCdelon" bit of "engine" bit field           (TOE_OFC_CALCS)
005404 7F5404 1D 10 F1 40                     bclr engine,OFCon     ; Clear "OFCon" bit of "engine" bit field          (TOE_OFC_CALCS)
005408 7F5408                         OFC_LOOP:                                                                        (TOE_OFC_CALCS)
                                      ;*****************************************************************************************
                                      ; - Injector dead band is the time required for the injectors to open and close and must
                                      ;   be included in the pulse width time. The amount of time will depend on battery voltge.
                                      ;   Battery voltage correction for injector deadband is calculated as a linear function
                                      ;   of battery voltage from 7.2 volts to 19.2 volts with 13.2 volts being the nominal
                                      ;   operating voltage where no correction is applied.
                                      ;*****************************************************************************************
005408 7F5408 MACRO                       DEADBAND_CALCS       ; Macro in injcalcsBPEM.s
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                      ; - Interpolate injector deadband at current battery voltage                     (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
005408 7F5408 CC 00 48                    ldd  #$0048      ; Decimal 72 (7.2 volts) -> Accu D                          (DEADBAND_CALCS)
00540B 7F540B 3B                          pshd             ; Push to stack (V1)                                        (DEADBAND_CALCS)
00540C 7F540C FC 10 88                    ldd  BatVx10     ; "BatVx10"(battery volts x 10) -> Accu D                   (DEADBAND_CALCS)
00540F 7F540F 3B                          pshd             ; Push to stack (V)                                         (DEADBAND_CALCS)
005410 7F5410 CC 00 C0                    ldd  #$00C0      ; Decimal 192 (19.2 volts) -> Accu D                        (DEADBAND_CALCS)
005413 7F5413 3B                          pshd             ; Push to stack (V2)                                        (DEADBAND_CALCS)
005414 7F5414 FC 10 4B                        ldd  DdBndZ2     ;((Injector deadband at 13.2V) + (Injector deadband voltage (DEADBAND_CALCS)
                                                               ; correction * 6)) -> Accu D                            (DEADBAND_CALCS)
005417 7F5417 3B                          pshd             ; Push to stack (Z1)                                        (DEADBAND_CALCS)
005418 7F5418 FC 10 49                        ldd  DdBndZ1     ;((Injector deadband at 13.2V) - (Injector deadband voltage (DEADBAND_CALCS)
                                                               ; correction * 6)) -> Accu D                            (DEADBAND_CALCS)
00541B 7F541B 3B                          pshd             ; Push to stack (Z2)                                        (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        Z2       |  SP+ 0                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        Z1       |  SP+ 2                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V2       |  SP+ 4                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V        |  SP+ 6                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                                      ;    |        V1       |  SP+ 8                                  (DEADBAND_CALCS)
                                                      ;    +--------+--------+                                         (DEADBAND_CALCS)
                                      ;                     V      V1      V2      Z1    Z2                            (DEADBAND_CALCS)
00541C 7F541C MACRO                       2D_IPOL     (6,SP), (8,SP), (4,SP), (2,SP), (0,SP) ; Go to 2D_IPOL Macro, interp_BEPM.s (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ; ==========================                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (DEADBAND_CALCS/2D_IPOL)
                                      ; result: D: interpolated result                                                 (DEADBAND_CALCS/2D_IPOL)
                                      ; SSTACK: none                                                                   (DEADBAND_CALCS/2D_IPOL)
                                      ;         no registers are preserved                                             (DEADBAND_CALCS/2D_IPOL)
                                      ;                                                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;    ^ V                                                                         (DEADBAND_CALCS/2D_IPOL)
                                      ;    |                                                                           (DEADBAND_CALCS/2D_IPOL)
                                      ;  Z2+....................*                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;    |                    :                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (DEADBAND_CALCS/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (DEADBAND_CALCS/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (DEADBAND_CALCS/2D_IPOL)
                                      ;    |   :       :        :                                                      (DEADBAND_CALCS/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ;                                                                                (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
00541C 7F541C EC 86                                   LDD       \1    ; load V                                         (DEADBAND_CALCS/2D_IPOL)
00541E 7F541E A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (DEADBAND_CALCS/2D_IPOL)
005420 7F5420 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
005422 7F5422 EC 80                                   LDD       \5    ; load Z2                                        (DEADBAND_CALCS/2D_IPOL)
005424 7F5424 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
005426 7F5426 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (DEADBAND_CALCS/2D_IPOL)
005428 7F5428 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
00542A 7F542A EC 84                                   LDD       \3    ; load V2                                        (DEADBAND_CALCS/2D_IPOL)
00542C 7F542C A3 88                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (DEADBAND_CALCS/2D_IPOL)
00542E 7F542E B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (DEADBAND_CALCS/2D_IPOL)
                                      ;*********************************************************************           (DEADBAND_CALCS/2D_IPOL)
005430 7F5430 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (DEADBAND_CALCS/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (DEADBAND_CALCS/2D_IPOL)
005432 7F5432 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS/2D_IPOL)
005434 7F5434 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (DEADBAND_CALCS/2D_IPOL)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
                                      ; - Free stack space (result in D)                                               (DEADBAND_CALCS)
                                      ;***************************************************************************************** (DEADBAND_CALCS)
005436 7F5436 1B 8A                       leas  10,SP     ; Stack pointer -> bottom of stack                           (DEADBAND_CALCS)
005438 7F5438 7C 11 05                    std  tmp4w      ; Copy result to "tmp4w" (Injector deadband at current battery (DEADBAND_CALCS)
                                                              ; voltage) (mSec x 100)                                  (DEADBAND_CALCS)
00543B 7F543B FC 11 05                    ldd  tmp4w      ; Result in "tmp4w" -> Accu D                                (DEADBAND_CALCS)
00543E 7F543E CE 00 0A                    ldx  #$000A     ; Decimal 10-> Accu X                                        (DEADBAND_CALCS)
005441 7F5441 18 10                       idiv            ; (D)/(X)->Xrem->D ("tmp4w"/10="Deadband")(mSec*10)          (DEADBAND_CALCS)
005443 7F5443 7E 10 CE                    stx  Deadband   ; Copy result to "Deadband"(mSec*10)                         (DEADBAND_CALCS)
                                      ;*****************************************************************************************
                                      ; - Calculate injector pulse width for a running engine "PW" (mS x 10)
                                      ;*****************************************************************************************
005446 7F5446 MACRO                       RUN_PW_CALCS       ; Macro in injcalcsBPEM.s
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Calculate injector pulse width for a running engine "PW" (mS x 10)           (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ;barocor:      ds 2 ; Barometric Pressure Correction (% x 10) (104)              (RUN_PW_CALCS)
                                      ;matcor:       ds 2 ; Manifold Air Temperature Correction (% x 10)(108)          (RUN_PW_CALCS)
                                      ;Mapx10:       ds 2 ; Manifold Absolute Pressure (KPAx10)(update every revolution) (24) (RUN_PW_CALCS)
                                      ;Ftrmx10:      ds 2 ; Fuel Trim (% x 10)(update every mSec)(+-20%) (36)          (RUN_PW_CALCS)
                                      ;WUEandASEcor: ds 2 ; The sum of WUEcor and ASEcor (% x 10)                      (RUN_PW_CALCS)
                                      ;veCurr:       ds 2 ; Current value in VE table (% x 10) (72)                    (RUN_PW_CALCS)
                                      ;PWcalc1:      ds 2 ; PW calculations result 1                                   (RUN_PW_CALCS)
                                      ;PWcalc2:      ds 2 ; PW calculations result 2                                   (RUN_PW_CALCS)
                                      ;PWcalc3:      ds 2 ; PW calculations result 3                                   (RUN_PW_CALCS)
                                      ;PWcalc4:      ds 2 ; PW calculations result 4                                   (RUN_PW_CALCS)
                                      ;PWcalc5:      ds 2 ; PW calculations result 5                                   (RUN_PW_CALCS)
                                      ;reqFuel:      ds 2 ; Pulse width for 14.7 AFR @ 100% VE (mS x 10)               (RUN_PW_CALCS)
                                      ;PWlessTOE:    ds 2 ; Injector pulse width before "TOEpw" and "Deadband" (mS x 10) (RUN_PW_CALCS)
                                      ;TOEpw:        ds 2 ; Throttle Opening Enrichment adder (mS x 100)               (RUN_PW_CALCS)
                                      ;Deadband:     ds 2 ; injector deadband at current battery voltage mS*100        (RUN_PW_CALCS)
                                      ;FDpw:         ds 2 ; Fuel Delivery pulse width (PW - Deadband) (mS x 10)        (RUN_PW_CALCS)
                                      ;PW:           ds 2 ; Running engine injector pulsewidth (mS x 10)               (RUN_PW_CALCS)
                                      ;PWtk:         ds 2 ; Running engine injector pulsewidth (uS x 2.56)(102)        (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Method:                                                                      (RUN_PW_CALCS)
                                      ;                                                                                (RUN_PW_CALCS)
                                      ; ("barocor" * "matcor") / 1000 = "PWcalc1" (0.1% resolution)                    (RUN_PW_CALCS)
                                      ; ("Mapx10" * "Ftrmx10") / 1000 = "PWcalc2" (0.1% resolution)                    (RUN_PW_CALCS)
                                      ; ("PWcalc1" * "PWcalc2") / 1000 = "PWcalc3" (0.1% resolution)                   (RUN_PW_CALCS)
                                      ; ("WUEandASEcor" * "veCurr") / 1000 = "PWcalc4" (0.1% resolution)               (RUN_PW_CALCS)
                                      ; ("PWcalc3" * "PWcalc4") / 1000 = "PWcalc5" (0.1% resolution)                   (RUN_PW_CALCS)
                                      ; ("PWcalc5" * reqFuel") / 1000 = "PWlessTOE" (0.1mS resolution)                 (RUN_PW_CALCS)
                                      ; "PWlessTOE" + "TOEpw" = "FDpw"  (0.1mS resolution)                             (RUN_PW_CALCS)
                                      ; "FDpw" + "Deadband" = "PW"  (0.1mS resolution)                                 (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Look up current value in Barometric Correction Table (barocor)               (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
005446 7F5446 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (RUN_PW_CALCS)
00544B 7F544B 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (RUN_PW_CALCS)
                                                                  ; -> page where the desired curve resides            (RUN_PW_CALCS)
005451 7F5451 18 03 01 68 10 27           movw #$0168,CrvRowOfst  ; 360 -> Offset from the curve page to the curve row(barCorVals) (RUN_PW_CALCS)
                                                                      ; (actual offset is 720)                         (RUN_PW_CALCS)
005457 7F5457 18 03 01 71 10 29           movw #$0171,CrvColOfst  ; 369 -> Offset from the curve page to the curve column(barCorDelta) (RUN_PW_CALCS)
                                                                      ; (actual offset is 738)                         (RUN_PW_CALCS)
00545D 7F545D 18 04 10 84 10 2B           movw Barox10,CrvCmpVal  ; Barometric Pressure (KPAx10) -> Curve comparison value (RUN_PW_CALCS)
005463 7F5463 18 0B 08 10 2D              movb #$08,CrvBinCnt     ; 8 -> number of bins in the curve row or column minus 1 (RUN_PW_CALCS)
005468 7F5468 16 60 4E                    jsr   CRV_LU_P   ; Jump to subroutine at CRV_LU_P:(located in interp_BEEM488.s module) (RUN_PW_CALCS)
00546B 7F546B 7C 10 B8                    std   barocor    ; Copy result to Barometric correction (% x 10)             (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Look up current value in MAT Air Density Table (matcor)                      (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
00546E 7F546E 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (RUN_PW_CALCS)
005473 7F5473 18 03 08 00 10 25           movw #veBins_E,CrvPgPtr   ; Address of the first value in VE table(in RAM)(page pointer) (RUN_PW_CALCS)
                                                                  ;  ->page where the desired curve resides            (RUN_PW_CALCS)
005479 7F5479 18 03 01 9A 10 27           movw #$019A,CrvRowOfst  ; 410 -> Offset from the curve page to the curve row(matCorrTemps2) (RUN_PW_CALCS)
                                                                      ; (actual offset is 820)                         (RUN_PW_CALCS)
00547F 7F547F 18 03 01 A3 10 29           movw #$01A3,CrvColOfst  ; 419 -> Offset from the curve page to the curve column(matCorrDelta2) (RUN_PW_CALCS)
                                                                      ; (actual offset is 838)                         (RUN_PW_CALCS)
005485 7F5485 18 04 10 72 10 2B           movw Matx10,CrvCmpVal   ; Manifold Air Temperature (Degrees F x 10) ->       (RUN_PW_CALCS)
                                                                  ; Curve comparison value                             (RUN_PW_CALCS)
00548B 7F548B 18 0B 08 10 2D              movb #$08,CrvBinCnt     ; 8 -> number of bins in the curve row or column minus 1 (RUN_PW_CALCS)
005490 7F5490 16 61 17                    jsr   CRV_LU_NP  ; Jump to subroutine at CRV_LU_NP:(located in interp_BEEM488.s module) (RUN_PW_CALCS)
005493 7F5493 7C 10 BA                    std   matcor     ; Copy result to Manifold Air Temperature Correction (% x 10) (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Calculate total corrections before Throttle Opening Enrichment and deadband. (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
005496 7F5496 FC 10 B8                    ldd  barocor      ; "barocor" -> Accu D (% x 10)                             (RUN_PW_CALCS)
005499 7F5499 FD 10 BA                    ldy  matcor       ; "matcor" -> Accu D (% x 10)                              (RUN_PW_CALCS)
00549C 7F549C 13                          emul              ; (D)*(Y)->Y:D "barocor" * "matcor"                        (RUN_PW_CALCS)
00549D 7F549D CE 03 E8                        ldx  #$03E8       ; Decimal 1000 -> Accu X                               (RUN_PW_CALCS)
0054A0 7F54A0 11                              ediv              ;(Y:D)/)X)->Y;Rem->D ("barocor"*"matcor")/1000="PWcalc1" (RUN_PW_CALCS)
0054A1 7F54A1 7D 10 4D                        sty  PWcalc1      ; Result -> "PWcalc1"                                  (RUN_PW_CALCS)
0054A4 7F54A4 FC 10 80                    ldd  Mapx10       ; "Mapx10" -> Accu D (% x 10)                              (RUN_PW_CALCS)
0054A7 7F54A7 FD 10 8C                    ldy  Ftrmx10      ; "Ftrmx10" -> Accu D (% x 10)                             (RUN_PW_CALCS)
0054AA 7F54AA 13                          emul              ; (D)*(Y)->Y:D "Mapx10" * "Ftrmx10"                        (RUN_PW_CALCS)
0054AB 7F54AB CE 03 E8                        ldx  #$03E8       ; Decimal 1000 -> Accu X                               (RUN_PW_CALCS)
0054AE 7F54AE 11                              ediv              ;(Y:D)/)X)->Y;Rem->D ("Mapx10"*"Ftrmx10")/1000="PWcalc2" (RUN_PW_CALCS)
0054AF 7F54AF 7D 10 4F                        sty  PWcalc2      ; Result -> "PWcalc2"                                  (RUN_PW_CALCS)
0054B2 7F54B2 FC 10 4D                    ldd  PWcalc1      ; "PWcalc1" -> Accu D (% x 10)                             (RUN_PW_CALCS)
0054B5 7F54B5 FD 10 4F                    ldy  PWcalc2      ; "PWcalc2" -> Accu D (% x 10)                             (RUN_PW_CALCS)
0054B8 7F54B8 13                          emul              ; (D)*(Y)->Y:D "PWcalc1" * "PWcalc2"                       (RUN_PW_CALCS)
0054B9 7F54B9 CE 03 E8                        ldx  #$03E8       ; Decimal 1000 -> Accu X                               (RUN_PW_CALCS)
0054BC 7F54BC 11                              ediv              ;(Y:D)/)X)->Y;Rem->D ("PWcalc1"*"PWcalc2")/1000="PWcalc3" (RUN_PW_CALCS)
0054BD 7F54BD 7D 10 51                        sty  PWcalc3      ; Result -> "PWcalc3"                                  (RUN_PW_CALCS)
0054C0 7F54C0 FC 10 C0                    ldd  WUEandASEcor ; "WUEandASEcor" -> Accu D (% x 10)                        (RUN_PW_CALCS)
0054C3 7F54C3 FD 10 B6                    ldy  veCurr       ; "veCurr" -> Accu D (% x 10)                              (RUN_PW_CALCS)
0054C6 7F54C6 13                          emul              ; (D)*(Y)->Y:D "WUEandASEcor" * "veCurr"                   (RUN_PW_CALCS)
0054C7 7F54C7 CE 03 E8                        ldx  #$03E8       ; Decimal 1000 -> Accu X                               (RUN_PW_CALCS)
0054CA 7F54CA 11                              ediv              ;(Y:D)/)X)->Y;Rem->D ("WUEandASEcor"*"veCurr")/1000="PWcalc4" (RUN_PW_CALCS)
0054CB 7F54CB 7D 10 53                        sty  PWcalc4      ; Result -> "PWcalc4"                                  (RUN_PW_CALCS)
0054CE 7F54CE FC 10 51                    ldd  PWcalc3      ; "PWcalc3" -> Accu D (% x 10)                             (RUN_PW_CALCS)
0054D1 7F54D1 FD 10 53                    ldy  PWcalc4      ; "PWcalc4" -> Accu D (% x 10)                             (RUN_PW_CALCS)
0054D4 7F54D4 13                          emul              ; (D)*(Y)->Y:D "PWcalc3" * "PWcalc4"                       (RUN_PW_CALCS)
0054D5 7F54D5 CE 03 E8                        ldx  #$03E8       ; Decimal 1000 -> Accu X                               (RUN_PW_CALCS)
0054D8 7F54D8 11                              ediv              ;(Y:D)/)X)->Y;Rem->D ("PWcalc3"*"PWcalc4")/1000="PWcalc5" (RUN_PW_CALCS)
0054D9 7F54D9 7D 10 55                        sty  PWcalc5      ; Result -> "PWcalc5"(total corrections before Throttle Opening (RUN_PW_CALCS)
                                                                ; Enrichment and deadband)                             (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Calculate injector pulse width before Throttle Opening Enrichment pulse width and (RUN_PW_CALCS)
                                      ;   Deadband.                                                                    (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
0054DC 7F54DC FC 10 55                    ldd  PWcalc5      ; "PWcalc5" -> Accu D (% x 10)                             (RUN_PW_CALCS)
0054DF 7F54DF 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE                   (RUN_PW_CALCS)
0054E4 7F54E4 CD 08 00                    ldy   #veBins_E   ; Load index register Y with address of first configurable (RUN_PW_CALCS)
                                                            ; constant on buffer RAM page 1 (veBins_E)                 (RUN_PW_CALCS)
0054E7 7F54E7 EE EA 03 EC                 ldx   $03EC,Y     ; Load Accu X with value in buffer RAM page 1 (offset 1004)($03EC) (RUN_PW_CALCS)
                                                            ; ("reqFuel")                                              (RUN_PW_CALCS)
0054EB 7F54EB B7 56                       tfr  X,Y          ; "reqFuel" -> Accu Y                                      (RUN_PW_CALCS)
0054ED 7F54ED 13                          emul              ; (D)*(Y)->Y:D "PWcalc5" * "matcor"                        (RUN_PW_CALCS)
0054EE 7F54EE CE 03 E8                        ldx  #$03E8       ; Decimal 1000 -> Accu X                               (RUN_PW_CALCS)
0054F1 7F54F1 11                              ediv              ;(Y:D)/)X)->Y;Rem->D ("PWcalc5"*"reqFuel")/1000="PWlessTOE" (RUN_PW_CALCS)
0054F2 7F54F2 7D 10 CC                        sty  PWlessTOE    ; Result -> "PWlessTOE" (mS x 10)                      (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Add the Throttle Opening Enricment pulse width and store as "FDpw"(fuel delivery (RUN_PW_CALCS)
                                      ;   pulse width)(mS x 10)                                                        (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
0054F5 7F54F5 B7 64                       tfr  Y,D          ; "PWlessTOE" -> Accu D                                    (RUN_PW_CALCS)
0054F7 7F54F7 F3 10 CA                        addd TOEpw        ; (A:B)+(M:M+1)->A:B ("PWlessTOE"+"TOEpw"="FDpw"       (RUN_PW_CALCS)
0054FA 7F54FA 7C 10 D4                        std  FDpw         ; Result -> "FDpw" (fuel delivery pulsewidth (mS x 10) (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Add "deadband" and store the result as "PW"(final injector pulsewidth)(mS x 10) (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
0054FD 7F54FD F3 10 CE                        addd Deadband    ; (A:B)+(M:M+1)->A:B ("FDpw"+"Deadband"="PW"            (RUN_PW_CALCS)
005500 7F5500 7C 10 D6                        std  PW          ; Result -> "PW" (final injector pulsewidth) (mS x 10)  (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Divide "FDpw" by 10 and store as "FD" (Fuel burn calcs have to be in mS)     (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
005503 7F5503 FC 10 D4                        ldd  FDpw        ; "FDpw"->Accu D (mS x 10)                              (RUN_PW_CALCS)
005506 7F5506 CE 00 0A                        ldx  #$000A      ; Decimal 10->Accu X                                    (RUN_PW_CALCS)
005509 7F5509 18 10                           idiv             ; (D)/(X)->Xrem->D ("FDpw"/10="FD")(mS)                 (RUN_PW_CALCS)
00550B 7F550B 7E 10 D8                        stx  FD          ; Copy reslut to "FD"(mS)(Fuel burn cals have to be in mS) (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Convert "PW" to timer ticks in 2.56uS resolution.                            (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
00550E 7F550E FC 10 D6                    ldd   PW         ; "PW" -> Accu D                                            (RUN_PW_CALCS)
005511 7F5511 CD 27 10                        ldy   #$2710     ; Load index register Y with decimal 10000 (for integer math) (RUN_PW_CALCS)
005514 7F5514 13                              emul             ;(D)x(Y)=Y:D "PW" * 10,000                              (RUN_PW_CALCS)
005515 7F5515 CE 01 00                        ldx   #$100      ; Decimal 256 -> Accu X                                 (RUN_PW_CALCS)
005518 7F5518 11                          ediv             ;(Y:D)/(X)=Y;Rem->D "PW" * 10,000 / 256 = "PWtk"            (RUN_PW_CALCS)
005519 7F5519 7D 10 5F                    sty   PWtk       ; Copy result to "PWtk" (Running engine injector pulsewidth) (RUN_PW_CALCS)
                                                               ; (uS x 2.56)                                           (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Injector duty cycle percentage is the time the injector takes to inject the fuel (RUN_PW_CALCS)
                                      ;   divided by the time available x 100. The time available is the engine cycle which is (RUN_PW_CALCS)
                                      ;   two crankshaft revolutions. It is important to know what our duty cycle is at high (RUN_PW_CALCS)
                                      ;   engine speeds and loads. 80% is considered a safe maximum. The crank angle period is (RUN_PW_CALCS)
                                      ;   measured over 72 degrees of crank rotation. In run mode the timer is set to a 2.56uS (RUN_PW_CALCS)
                                      ;   time base and the pulse width timer value is in 2.56uS resolution. The engine cycle (RUN_PW_CALCS)
                                      ;   period in 2.56uS resolution can be calculated by multiplying the period by 10, for (RUN_PW_CALCS)
                                      ;   the two revolutions in the cycle. The duty cycle percentage is calculated by (RUN_PW_CALCS)
                                      ;   dividing "PWtk" by the cycle period and dividing by 100.                     (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
                                      ; - Calculate injector duty cycle                                                (RUN_PW_CALCS)
                                      ;***************************************************************************************** (RUN_PW_CALCS)
00551C 7F551C FC 10 5F                    ldd  PWtk          ; "PWtk" -> Accu D                                        (RUN_PW_CALCS)
00551F 7F551F CD 27 10                        ldy  #$2710        ; Load index register Y with decimal 10000 (for integer math) (RUN_PW_CALCS)
005522 7F5522 13                              emul               ;(D)x(Y)=Y:D "PWtk" * 10,000                          (RUN_PW_CALCS)
005523 7F5523 FE 10 AA                        ldx  CASprd256     ; "CASprd256"-> Accu X                                (RUN_PW_CALCS)
005526 7F5526 11                          ediv               ;(Y:D)/(X)=Y;Rem->D ("PWtk"*10,000)/"CASprd256"           (RUN_PW_CALCS)
005527 7F5527 B7 54                           tfr  X,D           ; Result-> Accu D                                     (RUN_PW_CALCS)
005529 7F5529 CE 00 64                        ldx  #$0064        ; Decimal 100 -> Accu X                               (RUN_PW_CALCS)
00552C 7F552C 18 10                       idiv               ; (D)/(X)->(X)rem(D) (("PWtk"*10,000)/"CASprd256")/100    (RUN_PW_CALCS)
                                                                 ; ="DutyCyclex10"                                     (RUN_PW_CALCS)
00552E 7F552E 7E 10 F8                    stx  DutyCyclex10  ; Copy result to "DutyCyclex10" (Injector duty cycle x 10) (RUN_PW_CALCS)
                                      ;*****************************************************************************************
                                      ; ----------------------- End Of Injector Calculations Section ---------------------------
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Increment "LoopCntr" (counter for "LoopTime")
                                      ;*****************************************************************************************
005531 7F5531                         MainLoopEnd:
005531 7F5531 18 72 10 FD                     incw LoopCntr  ; Increment "LoopCntr"(counter for "LoopTime")
005535 7F5535 06 49 DA                    job  MainLoop  ; Jump or branch to "MainLoop" (end of main loop, start again)
                                      ;*****************************************************************************************
                                      ; --------------------------------- End of Main Loop -------------------------------------
                                      ;*****************************************************************************************
005538 7F5538 -> $5538                BPEM488_CODE_END                EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
005538 7F5538 -> $7F5538              BPEM488_CODE_END_LIN    EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
0062A2 7F62A2                                                 ORG     BPEM488_TABS_START, BPEM488_TABS_START_LIN
0062A2 7F62A2 -> $7F62A2              BPEM488_TABS_START_LIN  EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
                                      ;*********************************************************************
                                      ; Page 1 copied into RAM on start up. All pages 1024 bytes
                                      ; VE table, ranges and other configurable constants
                                      ; veBins values are %x10, verpmBins values are RPM, vemapBins values
                                      ; are KPAx10
                                      ;*********************************************************************
0062A2 7F62A2                         veBins_F:         ; (% X 10) (648 bytes)(offset = 0)
                                             ;ROW------------>
0062A2 7F62A2 02 30 02 30 02 30 02 30     dw $230,$230,$230,$230,$226,$208,$1F4,$17C,$172,$168,$168,$172,$172,$172,$136,$136,$136,$136 ; C
              02 26 02 08 01 F4 01 7C 
              01 72 01 68 01 68 01 72 
              01 72 01 72 01 36 01 36 
              01 36 01 36             
                                      ;       560, 560, 560, 560, 550, 520, 500, 380, 370, 360, 360, 370, 370, 370, 310, 310, 310, 310 ; O
0062C6 7F62C6 02 30 02 30 02 30 02 30     dw $230,$230,$230,$230,$226,$208,$1F4,$17C,$172,$168,$168,$172,$172,$172,$136,$136,$136,$136 ; L
              02 26 02 08 01 F4 01 7C 
              01 72 01 68 01 68 01 72 
              01 72 01 72 01 36 01 36 
              01 36 01 36             
                                      ;       560, 560, 560, 560, 550, 520, 500, 380, 370, 360, 360, 370, 370, 370, 310, 310, 310, 310 ; |
0062EA 7F62EA 02 30 02 30 02 30 02 30     dw $230,$230,$230,$230,$226,$208,$1F4,$17C,$172,$168,$168,$172,$172,$172,$136,$136,$136,$136 ; |
              02 26 02 08 01 F4 01 7C 
              01 72 01 68 01 68 01 72 
              01 72 01 72 01 36 01 36 
              01 36 01 36             
                                      ;       560, 560, 560, 560, 550, 520, 500, 380, 370, 360, 360, 370, 370, 370, 310, 310, 310, 310 ; |
00630E 7F630E 02 30 02 30 02 30 02 30     dw $230,$230,$230,$230,$230,$208,$1F4,$1F4,$212,$230,$23A,$24E,$24E,$244,$23A,$212,$212,$212 ; |
              02 30 02 08 01 F4 01 F4 
              02 12 02 30 02 3A 02 4E 
              02 4E 02 44 02 3A 02 12 
              02 12 02 12             
                                      ;       560, 560, 560, 560, 560, 520, 500, 500, 530, 560, 570, 590, 590, 580, 570, 530, 530, 530 ; |
006332 7F6332 02 44 02 44 02 44 02 44     dw $244,$244,$244,$244,$230,$208,$208,$212,$21C,$230,$23A,$24E,$276,$26C,$26C,$24E,$24E,$24E ; |
              02 30 02 08 02 08 02 12 
              02 1C 02 30 02 3A 02 4E 
              02 76 02 6C 02 6C 02 4E 
              02 4E 02 4E             
                                      ;       580, 580, 580, 580, 560, 520, 520, 530, 540, 560, 570, 590, 630, 620, 620, 590, 590, 590 ; |
006356 7F6356 02 58 02 58 02 58 02 58     dw $258,$258,$258,$258,$244,$21C,$21C,$226,$230,$23A,$258,$26C,$26C,$26C,$26C,$26C,$26C,$26C ; V
              02 44 02 1C 02 1C 02 26 
              02 30 02 3A 02 58 02 6C 
              02 6C 02 6C 02 6C 02 6C 
              02 6C 02 6C             
                                      ;       600, 600, 600, 600, 580, 540, 540, 550, 560, 570, 600, 620, 620, 620, 620, 620, 620, 620 ;
00637A 7F637A 02 F8 02 F8 02 D0 02 A8     dw $2F8,$2F8,$2D0,$2A8,$26C,$230,$23A,$244,$24E,$26C,$276,$280,$28A,$28A,$28A,$28A,$28A,$28A ;
              02 6C 02 30 02 3A 02 44 
              02 4E 02 6C 02 76 02 80 
              02 8A 02 8A 02 8A 02 8A 
              02 8A 02 8A             
                                      ;       760, 760, 720, 680, 620, 560, 570, 580, 590, 620, 630, 640, 650, 650, 650, 650, 650, 650 ;
00639E 7F639E 03 0C 03 0C 02 E4 02 BC     dw $30C,$30C,$2E4,$2BC,$294,$262,$262,$262,$262,$26C,$276,$28A,$294,$294,$294,$294,$294,$294 ;
              02 94 02 62 02 62 02 62 
              02 62 02 6C 02 76 02 8A 
              02 94 02 94 02 94 02 94 
              02 94 02 94             
                                      ;       780, 780, 740, 700, 660, 610, 610, 610, 610, 620, 630, 650, 660, 660, 660, 660, 660, 660 ;
0063C2 7F63C2 03 3E 03 3E 03 0C 02 E4     dw $33E,$33E,$30C,$2E4,$29E,$26C,$26C,$276,$280,$28A,$28A,$28A,$294,$294,$294,$294,$294,$294 ;
              02 9E 02 6C 02 6C 02 76 
              02 80 02 8A 02 8A 02 8A 
              02 94 02 94 02 94 02 94 
              02 94 02 94             
                                      ;       830, 830, 780, 740, 670, 620, 620, 630, 640, 650, 650, 650, 660, 660, 660, 660, 660, 660 ;
0063E6 7F63E6 03 52 03 52 03 3E 03 34     dw $352,$352,$33E,$334,$2E4,$28A,$280,$280,$28A,$294,$294,$294,$294,$294,$294,$294,$294,$294 ;
              02 E4 02 8A 02 80 02 80 
              02 8A 02 94 02 94 02 94 
              02 94 02 94 02 94 02 94 
              02 94 02 94             
                                      ;       850, 850, 830, 820, 740, 650, 640, 640, 650, 660, 660, 660, 660, 660, 660, 660, 660, 660 ;
00640A 7F640A 03 66 03 66 03 52 03 48     dw $366,$366,$352,$348,$2EE,$294,$28A,$28A,$294,$29E,$29E,$29E,$29E,$29E,$29E,$29E,$29E,$29E ;
              02 EE 02 94 02 8A 02 8A 
              02 94 02 9E 02 9E 02 9E 
              02 9E 02 9E 02 9E 02 9E 
              02 9E 02 9E             
                                      ;       870, 870, 850, 840, 750, 660, 650, 650, 660, 670, 670, 670, 670, 670, 670, 670, 670, 670 ;
00642E 7F642E 03 66 03 66 03 66 03 66     dw $366,$366,$366,$366,$2F8,$28A,$294,$294,$2A8,$2A8,$2A8,$2A8,$2A8,$2A8,$2A8,$2A8,$2A8,$2A8 ;
              02 F8 02 8A 02 94 02 94 
              02 A8 02 A8 02 A8 02 A8 
              02 A8 02 A8 02 A8 02 A8 
              02 A8 02 A8             
                                      ;       870, 870, 870, 870, 760, 650, 660, 660, 680, 680, 680, 680, 680, 680, 680, 680, 680, 680 ;
006452 7F6452 03 7A 03 7A 03 7A 03 7A     dw $37A,$37A,$37A,$37A,$316,$2BC,$29E,$29E,$2B2,$2B2,$2B2,$2B2,$2B2,$2B2,$2B2,$2B2,$2B2,$2B2 ;
              03 16 02 BC 02 9E 02 9E 
              02 B2 02 B2 02 B2 02 B2 
              02 B2 02 B2 02 B2 02 B2 
              02 B2 02 B2             
                                      ;       890, 890, 890, 890, 790, 700, 670, 670, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690 ;
006476 7F6476 03 B6 03 B6 03 8E 03 8E     dw $3B6,$3B6,$38E,$38E,$35C,$352,$32A,$334,$348,$35C,$37A,$3A2,$3A2,$366,$366,$366,$366,$366 ;
              03 5C 03 52 03 2A 03 34 
              03 48 03 5C 03 7A 03 A2 
              03 A2 03 66 03 66 03 66 
              03 66 03 66             
                                      ;       950, 950, 910, 910, 860, 850, 810, 820, 840, 860, 890, 930, 930, 870, 870, 870, 870, 870 ;
00649A 7F649A 03 CA 03 CA 03 CA 03 CA     dw $3CA,$3CA,$3CA,$3CA,$3CA,$3CA,$3E8,$406,$406,$41A,$41A,$424,$42E,$41A,$41A,$41A,$41A,$41A ;
              03 CA 03 CA 03 E8 04 06 
              04 06 04 1A 04 1A 04 24 
              04 2E 04 1A 04 1A 04 1A 
              04 1A 04 1A             
                                      ;       970, 970, 970, 970, 970, 970,1000,1030,1030,1050,1050,1060,1070,1050,1050,1050,1050,1050 ;
0064BE 7F64BE 03 D4 03 D4 03 D4 03 D4     dw $3D4,$3D4,$3D4,$3D4,$3D4,$3D4,$3E8,$406,$410,$41A,$42E,$438,$442,$438,$438,$438,$438,$438 ;
              03 D4 03 D4 03 E8 04 06 
              04 10 04 1A 04 2E 04 38 
              04 42 04 38 04 38 04 38 
              04 38 04 38             
                                      ;       980, 980, 980, 980, 980, 980,1000,1030,1040,1050,1070,1080,1090,1080,1080,1080,1080,1080 ;
0064E2 7F64E2 03 D4 03 D4 03 D4 03 D4     dw $3D4,$3D4,$3D4,$3D4,$3D4,$3D4,$3FC,$410,$41A,$438,$442,$456,$460,$460,$44C,$44C,$44C,$44C ;
              03 D4 03 D4 03 FC 04 10 
              04 1A 04 38 04 42 04 56 
              04 60 04 60 04 4C 04 4C 
              04 4C 04 4C             
                                      ;       980, 980, 980, 980, 980, 980,1020,1040,1050,1080,1090,1110,1120,1120,1100,1100,1100,1100 ;
006506 7F6506 03 D4 03 D4 03 D4 03 D4     dw $3D4,$3D4,$3D4,$3D4,$3D4,$3D4,$3FC,$410,$41A,$438,$442,$456,$460,$460,$44C,$44C,$44C,$44C ;
              03 D4 03 D4 03 FC 04 10 
              04 1A 04 38 04 42 04 56 
              04 60 04 60 04 4C 04 4C 
              04 4C 04 4C             
                                      ;       980, 980, 980, 980, 980, 980,1020,1040,1050,1080,1090,1110,1120,1120,1100,1100,1100,1100 ;
00652A 7F652A                         verpmBins_F:       ; row bin(36 bytes)(offset = 648)($0288)
00652A 7F652A 01 90 02 71 03 52 04 33     dw $190,$271,$352,$433,$514,$5F5,$6D6,$7B7,$898,$979,$A5A,$B3B,$C1C,$CFD,$DDE,$EBF,$FA0,$1081
              05 14 05 F5 06 D6 07 B7 
              08 98 09 79 0A 5A 0B 3B 
              0C 1C 0C FD 0D DE 0E BF 
              0F A0 10 81             
                                      ; RPM   400, 625, 850,1075,1300,1525,1750,1975,2200,2425,2650,2875,3100,3325,3550,3775,4000,4225
00654E 7F654E                         vemapBins_F:       ; column bins(36 bytes)(offset = 684)($02AC)
00654E 7F654E 00 96 00 C8 00 FA 01 2C     dw $96,$C8,$FA,$12C,$15E,$190,$1C2,$1F4,$226,$258,$28A,$2BC,$2EE,$320,$352,$384,$3B6,$3E8
              01 5E 01 90 01 C2 01 F4 
              02 26 02 58 02 8A 02 BC 
              02 EE 03 20 03 52 03 84 
              03 B6 03 E8             
                                      ;KPAx10 150,200,250,300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950,1000
                                      ; ADC   42, 89,136, 183, 230, 277, 323, 370, 417, 464, 511, 558, 605, 652, 699, 746, 793,840
                                      ; V    .20,.43,.66, .89,1.12,1.35,1.58,1.81,2.04,2.27,2.50,2.73,2.96,3.19,3.42,3.65,3.88,4.11
006572 7F6572                         barCorVals_F:      ; 18 bytes for barometric correction values (KpA x 10)(offset = 720)($02D0)
006572 7F6572 03 16 03 34 03 52 03 70     dw $0316,$0334,$0352,$0370,$038E,$03AC,$03CA,$03E8,$0406
              03 8E 03 AC 03 CA 03 E8 
              04 06                   
                                      ;        790,  820,  850,  880,  910,  940,  970, 1000, 1030
006584 7F6584                         barCorDelta_F:     ; 18 bytes for barometric correction  (% x 10)(offset = 738)($02E2)
006584 7F6584 04 56 04 42 04 2E 04 24     dw $0456,$0442,$042E,$0424,$0410,$0406,$03FC,$03E8,$03DE
              04 10 04 06 03 FC 03 E8 
              03 DE                   
                                      ;       1110, 1090, 1070, 1060, 1040, 1030, 1020, 1000, 990
006596 7F6596                         dwellvolts_F:      ; 12 bytes for dwell battery correction (volts x 10)(offset = 756)($02F4)
006596 7F6596 00 3C 00 50 00 64 00 78     dw $003C,$0050,$0064,$0078,$008C,$00A0
              00 8C 00 A0             
                                      ;         60,   80,  100,  120,  140,  160
0065A2 7F65A2                         dwellcorr_F:       ; 12 bytes for dwell battery correction (% x 10)(offset = 768)($0300)
0065A2 7F65A2 13 88 09 B0 06 90 05 00     dw $1388,$09B0,$0690,$0500,$03FC,$0370
              03 FC 03 70             
                                      ;       5000, 2480, 1680, 1280, 1020,  880
0065AE 7F65AE                         tempTable1_F:      ; 20 bytes for table common temperature values (degrees C or F x 10)(offset = 780)($030C)
0065AE 7F65AE FE 70 FF FE 00 02 00 C8     dw $FE70,$FFFE,$0002,$00C8,$0190,$0258,$0320,$03E8,$0514,$0708
              01 90 02 58 03 20 03 E8 
              05 14 07 08             
                                      ;       -400,   -2,    2,  200,  400,  600,  800, 1000, 1300, 1800
0065C2 7F65C2                         tempTable2_F:      ; 20 bytes for table common temperature values (degrees C or F x 10)(offset = 800)($0320)
0065C2 7F65C2 FF 9C FF FE 00 02 02 16     dw $FF9C,$FFFE,$0002,$0216,$02E9,$03BC,$048F,$0562,$0635,$0708
              02 E9 03 BC 04 8F 05 62 
              06 35 07 08             
                                      ;        -100,  -2,    2,  534,  745, 956, 1167, 1378, 1589, 1800
0065D6 7F65D6                         matCorrTemps2_F:   ; 18 bytes for MAT correction temperature (degrees C or F x 10)(offset = 820)($0334)
0065D6 7F65D6 FE 70 FF FE 00 02 02 4E     dw $FE70,$FFFE,$0002,$024E,$035C,$046A,$0578,$0794,$09B0
              03 5C 04 6A 05 78 07 94 
              09 B0                   
                                      ;       -400,   -2,    2,  590,  860, 1130, 1400, 1940, 2480
0065E8 7F65E8                         matCorrDelta2_F:   ; 18 bytes for MAT correction (% x 10)(offset = 838)($0346)
0065E8 7F65E8 04 E9 04 7D 04 7C 03 F9     dw $04E9,$047D,$047C,$03F9,$03C7,$0399,$0370,$0327,$02EA
              03 C7 03 99 03 70 03 27 
              02 EA                   
                                      ;       1257, 1149, 1148, 1017,  967,  921,  880,  807,  746
0065FA 7F65FA                         primePWTable_F:    ; 20 bytes for priming pulse width (msec x 10)(offset = 856)($0358)
0065FA 7F65FA 02 8F 02 82 02 81 02 1D     dw $028F,$0282,$0281,$021D,$01EE,$01AB,$015D,$0121,$00E1,$009E
              01 EE 01 AB 01 5D 01 21 
              00 E1 00 9E             
                                      ;        655,  642,  641,  541,  494,  427,  349,  289,  225,  158
00660E 7F660E                         crankPctTable_F:   ; 20 bytes for cranking pulsewidth adder (% x 10 of reqFuel)(offset = 876)($036C)
00660E 7F660E 0C B2 0C 3E 0C 3A 09 C4     dw $0CB2,$0C3E,$0C3A,$09C4,$08CA,$07D0,$06D6,$05DC,$04E2,$03E8
              08 CA 07 D0 06 D6 05 DC 
              04 E2 03 E8             
                                      ;       3250, 3134, 3130, 2500, 2250, 2000, 1750, 1500, 1250, 1000
006622 7F6622                         asePctTable_F:     ; 20 bytes for after start enrichment adder (% x 10)(offset = 896)($0380)
006622 7F6622 02 08 01 FA 01 FA 01 AE     dw $0208,$01FA,$01FA,$01AE,$0190,$0172,$0154,$0136,$0118,$00FA
              01 90 01 72 01 54 01 36 
              01 18 00 FA             
                                      ;        520,  506,  506,  430,  400,  370,  340,  310,  280,  250
006636 7F6636                         aseRevTable_F:     ; 20 bytes for after start enrichment time (engine revolutions)(offset = 916)($0394)
006636 7F6636 01 5E 01 55 01 54 01 22     dw $015E,$0155,$0154,$0122,$010E,$00FA,$00E6,$00D2,$00BE,$00AA
              01 0E 00 FA 00 E6 00 D2 
              00 BE 00 AA             
                                      ;        350,  341,  340,  290,  270,  250,  230,  210,  190,  170
00664A 7F664A                         wueBins_F:         ; 20 bytes for after warm up enrichment adder (% x 10)(offset = 936)($03A8)
00664A 7F664A 07 6C 06 A5 06 A4 06 40     dw $076C,$06A5,$06A4,$0640,$05DC,$0578,$0514,$04B0,$044C,$03E8
              05 DC 05 78 05 14 04 B0 
              04 4C 03 E8             
                                      ;       1900, 1701, 1700, 1600, 1500, 1400, 1300, 1200, 1100, 1000
00665E 7F665E                         TOEbins_F:         ; 8 bytes for Throttle Opening Enrichment adder (%)(offset = 956)($03BC)
00665E 7F665E 00 14 00 19 00 1E 00 23     dw $0014,$0019,$001E,$0023
                                      ;         20,   25,   30,   35
006666 7F6666                         TOErates_F:        ; 8 bytes for Throttle Opening Enrichment rate (TpsPctDOT x 10)(offset = 964)($03C4)
006666 7F6666 01 F4 03 E8 09 C4 13 88     dw $01F4,$03E8,$09C4,$1388
                                      ;        500, 1000, 2500, 5000
00666E 7F666E                         DdBndBase_F:       ; 2 bytes for injector deadband at 13.2V (mSec * 100)(offset = 972)($03CC)
00666E 7F666E 00 5A                       dw $005A       ; 90 = .9mS
006670 7F6670                         DdBndCor_F:        ; 2 bytes for injector deadband voltage correction (mSec/V x 100)(offset = 974)($03CE)
006670 7F6670 00 12                       dw $0012       ; 18 = .18mS/V
006672 7F6672                         tpsThresh_F:       ; 2 bytes for Throttle Opening Enrichment threshold (TpsPctx10/100mS)(offset = 976)($03D0)
006672 7F6672 01 C2                       dw $01C2       ; 450 = 45% per Sec
006674 7F6674                         TOEtime_F:         ; 2 bytes for Throttle Opening Enrich time in 100mS increments(mSx10)(offset = 978)($03D2)
006674 7F6674 00 14                       dw $0014       ; 20 = 2mS
006676 7F6676                         ColdAdd_F:         ; 2 bytes for Throttle Opening Enrichment cold temperature adder at -40F (%)(offset = 980)($03D4)
006676 7F6676 00 14                       dw $0014       ; 20%
006678 7F6678                         ColdMul_F:         ; 2 bytes for Throttle Opening Enrichment multiplyer at -40F (%)(offset = 982)($03D6)
006678 7F6678 00 82                       dw $0082         ; 130%
00667A 7F667A                         InjDelDegx10_F:    ; 2 bytes for Injection delay from trigger to start of injection (deg x 10) (offset = 984)($03D8)
00667A 7F667A 00 01                       dw $0001       ; 1 = 0.1 degree
00667C 7F667C                         OFCtps_F:          ; 2 bytes for Overrun Fuel Cut min TpS%x10(offset = 986)($03DA)
00667C 7F667C 00 14                       dw $0014       ; 20 = 2%
00667E 7F667E                         OFCrpm_F:          ; 2 bytes for Overrun Fuel Cut min RPM(offset = 988)($03DC)
00667E 7F667E 03 84                       dw $0384       ; 900
006680 7F6680                         OFCmap_F:          ; 2 bytes for Overrun Fuel Cut maximum manifold pressure permissive (KPAx10)(offset = 990)($03DE)
006680 7F6680 00 FA                       dw $00FA       ; 250 = 25.0KPA
006682 7F6682                         OFCdel_F:          ; 2 bytes for Overrun Fuel Cut delay time (Sec x 10)(offset = 992)($03E0)
006682 7F6682 00 32                       dw $0032         ; 50 = 5.0Sec
006684 7F6684                         crankingRPM_F:     ; 2 bytes for crank/run transition (RPM)(offset = 994)($03E2)
006684 7F6684 01 5E                       dw $015E       ; 350
006686 7F6686                         floodClear_F:      ; 2 bytes for TPS position for flood clear (% x 10)(offset = 996)($03E4)
006686 7F6686 03 84                       dw $0384       ; 900
006688 7F6688                         Stallcnt_F:        ; 2 bytes for no crank or stall condition counter (1mS increments) (offset = 998)($03E6)
006688 7F6688 07 D0                       dw $07D0       ; 2000 = 2 seconds
00668A 7F668A                         tpsMin_F:          ; 2 bytes for TPS calibration closed throttle ADC(offset = 1000)($03E8)
00668A 7F668A 00 32                       dw $0032       ; 50
00668C 7F668C                         tpsMax_F:          ; 2 bytes for TPS calibration wide open throttle ADC(offset = 1002)($03EA)
00668C 7F668C 03 E8                       dw $03E8       ; 1000
00668E 7F668E                         reqFuel_F:         ; 2 bytes for Pulse width for 14.7 AFR @ 100% VE (mS x 10)(offset = 1004)($03EC)
00668E 7F668E 08 52                       dw $0852       ; 2130 = 21.30 mS
006690 7F6690                         enginesize_F:      ; 2 bytes for displacement of two engine cylinders (for TS reqFuel calcs only)(cc)(offset = 1006)($03EE)
006690 7F6690 06 40                       dw $640        ; 1600
006692 7F6692                         InjPrFlo_F         ; 2 bytes for Pair of injectors flow rate (L/hr x 100)(offset = 1008)($03F0)
006692 7F6692 01 90                       dw $0190       ; Decimal 400 = 40L/Hr
006694 7F6694                         staged_pri_size_F: ; 1 byte for flow rate of 1 injector (for TS reqFuel calcs only)(cc)(offset = 1010)($03F2)
006694 7F6694 FC                          db $FC         ; 252
006695 7F6695                         alternate_F:       ; 1 byte for injector staging bit field (for TS reqFuel calcs only)(offset = 1011)($03F3)
006695 7F6695 00                          db $00         ; 0
006696 7F6696                         nCylinders_F:      ; 1 byte for number of engine cylinders bit field (for TS reqFuel calcs only)(offset = 1012)($03F4)
006696 7F6696 02                          db $02         ; 2
006697 7F6697                         nInjectors_F:      ; 1 byte for number of injectors bit field (for TS reqFuel calcs only)(offset = 1013)($03F5)
006697 7F6697 02                          db $02         ; 2
006698 7F6698                         divider_F:         ; 1 byte for squirts per cycle bit field (for TS reqFuel calcs only)(offset = 1014)($03F6)
006698 7F6698 01                          db $01         ; 1
                                      ; 1015 bytes used, 1024 - 1015 = 9 bytes left
                                      ;*********************************************************************
                                      ; Page 2 copied into RAM on start up. All pages 1024 bytes
                                      ; ST table, ranges and other configurable constants
                                      ; stBins values are degrees x10, strpmBins values are RPM,
                                      ; stmapBins values are KPAx10
                                      ;*********************************************************************
006699 7F6699                         stBins_F:         ; (Degrees X 10)(648 bytes)(offset = 0)
                                             ;ROW------------>
006699 7F6699 00 96 00 96 00 96 00 96     dw $0096,$0096,$0096,$0096,$00D2,$0154,$0154,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E ; C
              00 D2 01 54 01 54 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E             
                                      ;        150,  150,  150,  150,  210,  340,  340,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350 ; O
0066BD 7F66BD 00 96 00 96 00 96 00 96     dw $0096,$0096,$0096,$0096,$00D2,$0154,$0154,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E ; L
              00 D2 01 54 01 54 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E             
                                      ;        150,  150,  150,  150,  210,  340,  340,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350 ; |
0066E1 7F66E1 00 96 00 96 00 96 00 96     dw $0096,$0096,$0096,$0096,$00D2,$0154,$0154,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E ; |
              00 D2 01 54 01 54 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E             
                                      ;        150,  150,  150,  150,  210,  340,  340,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350 ; |
006705 7F6705 00 96 00 96 00 96 00 96     dw $0096,$0096,$0096,$0096,$00FA,$0154,$0154,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E ; |
              00 FA 01 54 01 54 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E             
                                      ;        150,  150,  150,  150,  250,  340,  340,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350 ; |
006729 7F6729 00 96 00 96 00 96 00 96     dw $0096,$0096,$0096,$0096,$00FA,$0154,$0154,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E,$015E ; |
              00 FA 01 54 01 54 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E 01 5E 01 5E 
              01 5E 01 5E             
                                      ;        150,  150,  150,  150,  250,  340,  340,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350,  350 ; |
00674D 7F674D 00 C8 00 C8 00 C8 00 C8     dw $00C8,$00C8,$00C8,$00C8,$00FA,$014A,$014A,$0154,$0154,$0154,$0154,$0154,$0154,$0154,$0154,$0154,$0154,$0154 ; V
              00 FA 01 4A 01 4A 01 54 
              01 54 01 54 01 54 01 54 
              01 54 01 54 01 54 01 54 
              01 54 01 54             
                                      ;        200,  200,  200,  200,  250,  330,  330,  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,  340 ;
006771 7F6771 00 E6 00 E6 01 04 01 22     dw $00E6,$00E6,$0104,$0122,$0140,$0140,$0140,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A ;
              01 40 01 40 01 40 01 4A 
              01 4A 01 4A 01 4A 01 4A 
              01 4A 01 4A 01 4A 01 4A 
              01 4A 01 4A             
                                      ;        230,  230,  260,  290,  320,  320,  320,  330,  330,  330,  330,  330,  330,  330,  330,  330,  330,  330 ;
006795 7F6795 01 04 01 04 01 18 01 2C     dw $0104,$0104,$0118,$012C,$0140,$0140,$0140,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A,$014A ;
              01 40 01 40 01 40 01 4A 
              01 4A 01 4A 01 4A 01 4A 
              01 4A 01 4A 01 4A 01 4A 
              01 4A 01 4A             
                                      ;        260,  260,  280,  300,  320,  320,  320,  330,  330,  330,  330,  330,  330,  330,  330,  330,  330,  330 ;
0067B9 7F67B9 00 FA 00 FA 01 0E 01 22     dw $00FA,$00FA,$010E,$0122,$0136,$0136,$0136,$0140,$0140,$0140,$0140,$0140,$0140,$0140,$0140,$0140,$0140,$0140 ;
              01 36 01 36 01 36 01 40 
              01 40 01 40 01 40 01 40 
              01 40 01 40 01 40 01 40 
              01 40 01 40             
                                      ;        250,  250,  270,  290,  310,  310,  310,  320,  320,  320,  320,  320,  320,  320,  320,  320,  320,  320 ;
0067DD 7F67DD 00 F0 00 F0 00 FA 01 0E     dw $00F0,$00F0,$00FA,$010E,$0122,$0122,$0122,$012C,$012C,$012C,$012C,$012C,$012C,$012C,$012C,$012C,$012C,$012C ;
              01 22 01 22 01 22 01 2C 
              01 2C 01 2C 01 2C 01 2C 
              01 2C 01 2C 01 2C 01 2C 
              01 2C 01 2C             
                                      ;        240,  240,  250,  270,  290,  290,  290,  300,  300,  300,  300,  300,  300,  300,  300,  300,  300,  300 ;
006801 7F6801 00 E6 00 E6 00 F0 00 FA     dw $00E6,$00E6,$00F0,$00FA,$0118,$0118,$0118,$0122,$0122,$0122,$0122,$0122,$0122,$0122,$0122,$0122,$0122,$0122 ;
              01 18 01 18 01 18 01 22 
              01 22 01 22 01 22 01 22 
              01 22 01 22 01 22 01 22 
              01 22 01 22             
                                      ;        230,  230,  240,  250,  280,  280,  280,  290,  290,  290,  290,  290,  290,  290,  290,  290,  290,  290 ;
006825 7F6825 00 DC 00 DC 00 DC 00 E6     dw $00DC,$00DC,$00DC,$00E6,$00FA,$00FA,$00FA,$0104,$0104,$0104,$0104,$0104,$0104,$0104,$0104,$0104,$0104,$0104 ;
              00 FA 00 FA 00 FA 01 04 
              01 04 01 04 01 04 01 04 
              01 04 01 04 01 04 01 04 
              01 04 01 04             
                                      ;        220,  220,  220,  230,  250,  250,  250,  260,  260,  260,  260,  260,  260,  260,  260,  260,  260,  260 ;
006849 7F6849 00 D2 00 D2 00 D2 00 DC     dw $00D2,$00D2,$00D2,$00DC,$00DC,$00DC,$00E6,$00E6,$00E6,$00F0,$00F0,$00FA,$00FA,$00FA,$00FA,$00FA,$00FA,$00FA ;
              00 DC 00 DC 00 E6 00 E6 
              00 E6 00 F0 00 F0 00 FA 
              00 FA 00 FA 00 FA 00 FA 
              00 FA 00 FA             
                                      ;        210,  210,  210,  220,  220,  220,  230,  230,  230,  240,  240,  250,  250,  250,  250,  250,  250,  250 ;
00686D 7F686D 00 B4 00 B4 00 B4 00 BE     dw $00B4,$00B4,$00B4,$00BE,$00C8,$00D2,$00D2,$00DC,$00DC,$00E6,$00E6,$00F0,$00F0,$00F0,$00F0,$00F0,$00F0,$00F0 ;
              00 C8 00 D2 00 D2 00 DC 
              00 DC 00 E6 00 E6 00 F0 
              00 F0 00 F0 00 F0 00 F0 
              00 F0 00 F0             
                                      ;        180,  180,  180,  190,  200,  210,  210,  220,  220,  230,  230,  240,  240,  240,  240,  240,  240,  240 ;
006891 7F6891 00 A0 00 A0 00 A0 00 A0     dw $00A0,$00A0,$00A0,$00A0,$00A0,$00AA,$00B4,$00BE,$00C8,$00D2,$00DC,$00E6,$00E6,$00E6,$00E6,$00E6,$00E6,$00E6 ;
              00 A0 00 AA 00 B4 00 BE 
              00 C8 00 D2 00 DC 00 E6 
              00 E6 00 E6 00 E6 00 E6 
              00 E6 00 E6             
                                      ;        160,  160,  160,  160,  160,  170,  180,  190,  200,  210,  220,  230,  230,  230,  230,  230,  230,  230 ;
0068B5 7F68B5 00 8C 00 8C 00 8C 00 8C     dw $008C,$008C,$008C,$008C,$0096,$00A0,$00AA,$00B4,$00BE,$00C8,$00D2,$00DC,$00DC,$00DC,$00DC,$00DC,$00DC,$00DC ;
              00 96 00 A0 00 AA 00 B4 
              00 BE 00 C8 00 D2 00 DC 
              00 DC 00 DC 00 DC 00 DC 
              00 DC 00 DC             
                                      ;        140,  140,  140,  140,  150,  160,  170,  180,  190,  200,  210,  220,  220,  220,  220,  220,  220,  220 ;
0068D9 7F68D9 00 78 00 78 00 78 00 78     dw $0078,$0078,$0078,$0078,$0082,$008C,$0096,$00A0,$00AA,$00B4,$00BE,$00C8,$00D2,$00D2,$00D2,$00D2,$00D2,$00D2 ;
              00 82 00 8C 00 96 00 A0 
              00 AA 00 B4 00 BE 00 C8 
              00 D2 00 D2 00 D2 00 D2 
              00 D2 00 D2             
                                      ;        120,  120,  120,  120,  130,  140,  150,  160,  170,  180,  190,  200,  210,  210,  210,  210,  210,  210 ;
0068FD 7F68FD 00 64 00 64 00 6E 00 78     dw $0064,$0064,$006E,$0078,$0082,$008C,$0096,$00A0,$00AA,$00B4,$00BE,$00C8,$00D2,$00D2,$00D2,$00D2,$00D2,$00D2 ;
              00 82 00 8C 00 96 00 A0 
              00 AA 00 B4 00 BE 00 C8 
              00 D2 00 D2 00 D2 00 D2 
              00 D2 00 D2             
                                      ;        100,  100,  110,  120,  130,  140,  150,  160,  170,  180,  190,  200,  210,  210,  210,  210,  210,  210 ;
006921 7F6921                         strpmBins_F:       ; row bins (36 bytes)(offset = 648)($0288)
006921 7F6921 01 90 02 71 03 52 04 33     dw $190,$271,$352,$433,$514,$5F5,$6D6,$7B7,$898,$979,$A5A,$B3B,$C1C,$CFD,$DDE,$EBF,$FA0,$1081
              05 14 05 F5 06 D6 07 B7 
              08 98 09 79 0A 5A 0B 3B 
              0C 1C 0C FD 0D DE 0E BF 
              0F A0 10 81             
                                      ; RPM   400, 625, 850,1075,1300,1525,1750,1975,2200,2425,2650,2875,3100,3325,3550,3775,4000,4225
006945 7F6945                         stmapBins_F:       ; column bins 936 bytes)(offset = 684)($02AC)
006945 7F6945 00 96 00 C8 00 FA 01 2C     dw $96,$C8,$FA,$12C,$15E,$190,$1C2,$1F4,$226,$258,$28A,$2BC,$2EE,$320,$352,$384,$3B6,$3E8
              01 5E 01 90 01 C2 01 F4 
              02 26 02 58 02 8A 02 BC 
              02 EE 03 20 03 52 03 84 
              03 B6 03 E8             
                                      ;KPAx10 150,200,250,300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950,1000
                                      ; ADC   42, 89,136, 183, 230, 277, 323, 370, 417, 464, 511, 558, 605, 652, 699, 746, 793,840
                                      ; V    .20,.43,.66, .89,1.12,1.35,1.58,1.81,2.04,2.27,2.50,2.73,2.96,3.19,3.42,3.65,3.88,4.11
006969 7F6969                         heton_F:      ; 2 bytes for High engine temperature alarm on set point (degF*10)(offset = 720)($02D0)
006969 7F6969 08 66                       dw $0866  ; Decimal 2150 = 215 degF
00696B 7F696B                         hetoff_F:     ; 2 bytes for High engine temperature alarm off set point (degF*10)(offset = 722)($02D2)
00696B 7F696B 08 34                       dw $0834  ; Decimal 2100 = 210 degF
00696D 7F696D                         hoton_F:      ; 2 bytes for High oil temperature alarm on set point (degF*10)(offset = 724)($02D4)
00696D 7F696D 08 FC                       dw $08FC  ; Decimal 2300 = 230 degF
00696F 7F696F                         hotoff_F:     ; 2 bytes for High oil temperature alarm off set point (degF*10)(offset = 726)($02D6)
00696F 7F696F 08 98                       dw $0898  ; Decimal 2200 = 220 degF
006971 7F6971                         hfton_F:      ; 2 bytes for High fuel temperature alarm on set point (degF*10)(offset = 728)($02D8)
006971 7F6971 08 66                       dw $0866  ; Decimal 2150 = 215 degF
006973 7F6973                         hftoff_F:     ; 2 bytes for High fuel temperature alarm off set point (degF*10)(offset = 730)($02DA)
006973 7F6973 08 34                       dw $0834  ; Decimal 2100 = 210 degF
006975 7F6975                         hegton_F:      ; 2 bytes for High exhaust gas temperature alarm on set point (degF)(offset = 732)($02DC)
006975 7F6975 04 B0                       dw $04B0   ; Decimal 1200 = 1200 degF
006977 7F6977                         hegtoff_F:     ; 2 bytes for High exhaust gas temperature alarm off set point (deg)(offset = 734)($02DE)
006977 7F6977 04 4C                       dw $044C   ; Decimal 1100 = 1100 degF
006979 7F6979                         lopon_F:      ; 2 bytes for Low engine oil pressure alarm on set point (psi*10)(offset = 736)($02E0)
006979 7F6979 00 64                       dw $0064  ; Decimal 100 = 10PSI
00697B 7F697B                         lopoff_F:     ; 2 bytes for Low oil engine pressure alarm off set point (psi*10)(offset = 738)($02E2)
00697B 7F697B 00 96                       dw $0096  ; Decimal 150 = 15PSI
00697D 7F697D                         hfpon_F:      ; 2 bytes for High fuel pressure alarm on set point (psi*10)(offset = 740)($02E4)
00697D 7F697D 02 26                       dw $0226  ; Decimal 550 = 55PSI
00697F 7F697F                         hfpoff_F:     ; 2 bytes for High fuel pressure alarm off set point (psi*10)(offset = 742)($02E6)
00697F 7F697F 01 F4                       dw $01F4  ; Decimal 500 = 50PSI
006981 7F6981                         lfpon_F:      ; 2 bytes for Low fuel pressure alarm on set point (psi*10)(offset = 744)($02E8)
006981 7F6981 01 5E                       dw $015E  ; Decimal 350 = 35PSI
006983 7F6983                         lfpoff_F:     ; 2 bytes for Low fuel pressure alarm off set point (psi*10)(offset = 746)($02EA)
006983 7F6983 01 90                       dw $0190  ; Decimal 400 = 40PSI
006985 7F6985                         Dwell_F       ; 2 bytes for run mode dwell time (mSec*10)(offset = 748)($02EC)
006985 7F6985 00 28                      dw $0028   ; 40 = 4.0mSec
006987 7F6987                         CrnkDwell_F   ; 2 bytes for crank mode dwell time (mSec*10)(offset = 750)($02EE)
006987 7F6987 00 3C                      dw $003C   ; 60 = 6.0 mSec
006989 7F6989                         CrnkAdv_F     ; 2 bytes for crank mode ignition advance (Deg*10)(offset = 752)($02F0)
006989 7F6989 00 64                      dw $0064   ; 100 = 10.0 degrees
                                      ; 752 + 2 = 754 bytes used, 1024 - 754 = 270 bytes left
                                      ;*********************************************************************
                                      ; Page 3 copied into RAM on start up. All pages 1024 bytes
                                      ; AFR table, ranges and other configurable constants
                                      ; afrBins values are Air Fuel Ratio x10, afrrpmBins values are RPM,
                                      ; afrmapBins values are KPAx10
                                      ;*********************************************************************
00698B 7F698B                         afrBins_F:         ; (AFR X 100) (648 bytes)(offset = 0)
                                             ;ROW------------>
00698B 7F698B 05 14 05 78 05 78 05 78     dw  $514, $578, $578, $578, $640, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4 ; C
              06 40 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4             
                                      ;       1300, 1400, 1400, 1400, 1600, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700 ; O
0069AF 7F69AF 05 14 05 78 05 78 05 78     dw  $514, $578, $578, $578, $640, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4 ; L
              06 40 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4             
                                      ;       1300, 1400, 1400, 1400, 1600, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700 ; |
0069D3 7F69D3 05 14 05 78 05 78 05 78     dw  $514, $578, $578, $578, $640, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4 ; |
              06 40 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4             
                                      ;       1300, 1400, 1400, 1400, 1600, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700 ; |
0069F7 7F69F7 05 14 05 78 05 78 05 78     dw  $514, $578, $578, $578, $640, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4, $6A4; |
              06 40 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4 06 A4 06 A4 
              06 A4 06 A4             
                                      ;       1300, 1400, 1400, 1400, 1600, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700 ; |
006A1B 7F6A1B 05 14 05 78 05 78 05 78     dw  $514, $578, $578, $578, $6A4, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ; |
              06 A4 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1400, 1700, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ; |
006A3F 7F6A3F 05 14 05 78 05 78 05 DC     dw  $514, $578, $578, $5DC, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ; V
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1500, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006A63 7F6A63 05 14 05 78 05 78 06 40     dw  $514, $578, $578, $640, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ;
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1600, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006A87 7F6A87 05 14 05 78 05 78 06 40     dw  $514, $578, $578, $640, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ;
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1600, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006AAB 7F6AAB 05 14 05 78 05 78 06 40     dw  $514, $578, $578, $640, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ;
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1600, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006ACF 7F6ACF 05 14 05 78 05 78 06 40     dw  $514, $578, $578, $640, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ;
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1640, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006AF3 7F6AF3 05 14 05 78 05 78 06 40     dw  $514, $578, $578, $640, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ;
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1600, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006B17 7F6B17 05 14 05 78 05 78 06 40     dw  $514, $578, $578, $640, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ;
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1400, 1400, 1600, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006B3B 7F6B3B 05 14 05 14 05 14 06 40     dw  $514, $514, $514, $640, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708, $708 ;
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08 07 08 07 08 
              07 08 07 08             
                                      ;       1300, 1300, 1300, 1600, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800 ;
006B5F 7F6B5F 05 14 05 14 05 14 05 DC     dw  $514, $514, $514, $5DC, $640, $640, $640, $640, $640, $640, $640, $640, $640, $640, $640, $640, $640, $640 ;
              06 40 06 40 06 40 06 40 
              06 40 06 40 06 40 06 40 
              06 40 06 40 06 40 06 40 
              06 40 06 40             
                                      ;       1300, 1300, 1300, 1500, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600 ;
006B83 7F6B83 05 14 05 14 05 14 05 14     dw  $514, $514, $514, $514, $514, $514, $514, $514, $514, $514, $514, $514, $514, $514, $50A, $50A, $50A, $500 ;
              05 14 05 14 05 14 05 14 
              05 14 05 14 05 14 05 14 
              05 14 05 14 05 0A 05 0A 
              05 0A 05 00             
                                      ;       1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1290, 1290, 1290, 1280 ;
006BA7 7F6BA7 05 14 05 14 05 14 05 14     dw  $514, $514, $514, $514, $514, $514, $514, $50A, $50A, $50A, $500, $500, $500, $4F6, $4F6, $4F6, $4EC, $4EC ;
              05 14 05 14 05 14 05 0A 
              05 0A 05 0A 05 00 05 00 
              05 00 04 F6 04 F6 04 F6 
              04 EC 04 EC             
                                      ;       1300, 1300, 1300, 1300, 1300, 1300, 1300, 1290, 1290, 1290, 1280, 1280, 1280, 1270, 1270, 1270, 1260, 1260 ;
006BCB 7F6BCB 05 14 05 14 05 14 05 14     dw  $514, $514, $514, $514, $50A, $50A, $50A, $500, $500, $500, $4F6, $4F6, $4F6, $4EC, $4EC, $4EC, $4E2, $4E2 ;
              05 0A 05 0A 05 0A 05 00 
              05 00 05 00 04 F6 04 F6 
              04 F6 04 EC 04 EC 04 EC 
              04 E2 04 E2             
                                      ;       1300, 1300, 1300, 1300, 1290, 1290, 1290, 1280, 1280, 1280, 1270, 1270, 1270, 1260, 1260, 1260, 1250, 1250 ;
006BEF 7F6BEF 05 14 05 14 05 14 05 14     dw  $514, $514, $514, $514, $50A, $50A, $50A, $500, $500, $500, $4F6, $4F6, $4F6, $4EC, $4EC, $4EC, $4E2, $4E2 ;
              05 0A 05 0A 05 0A 05 00 
              05 00 05 00 04 F6 04 F6 
              04 F6 04 EC 04 EC 04 EC 
              04 E2 04 E2             
                                      ;       1300, 1300, 1300, 1300, 1290, 1290, 1290, 1280, 1280, 1280, 1270, 1270, 1270, 1260, 1260, 1260, 1250, 1250 ;
006C13 7F6C13                         afrrpmBins_F:       ; row bins (36 bytes)(offset = 648)($0288)
006C13 7F6C13 01 90 02 71 03 52 04 33     dw $190,$271,$352,$433,$514,$5F5,$6D6,$7B7,$898,$979,$A5A,$B3B,$C1C,$CFD,$DDE,$EBF,$FA0,$1081
              05 14 05 F5 06 D6 07 B7 
              08 98 09 79 0A 5A 0B 3B 
              0C 1C 0C FD 0D DE 0E BF 
              0F A0 10 81             
                                      ; RPM   400, 625, 850,1075,1300,1525,1750,1975,2200,2425,2650,2875,3100,3325,3550,3775,4000,4225
006C37 7F6C37                         afrmapBins_F:       ; column bins (36 bytes)(offset = 684)($02AC)
006C37 7F6C37 00 96 00 C8 00 FA 01 2C     dw $96,$C8,$FA,$12C,$15E,$190,$1C2,$1F4,$226,$258,$28A,$2BC,$2EE,$320,$352,$384,$3B6,$3E8
              01 5E 01 90 01 C2 01 F4 
              02 26 02 58 02 8A 02 BC 
              02 EE 03 20 03 52 03 84 
              03 B6 03 E8             
                                      ;KPAx10 150,200,250,300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950,1000
                                      ; ADC   42, 89,136, 183, 230, 277, 323, 370, 417, 464, 511, 558, 605, 652, 699, 746, 793,840
                                      ; V    .20,.43,.66, .89,1.12,1.35,1.58,1.81,2.04,2.27,2.50,2.73,2.96,3.19,3.42,3.65,3.88,4.11
                                      ; 720 bytes used, 1024 - 720 = 304 bytes left
006C5B 7F6C5B -> $6C5B                BPEM488_TABS_END                EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
006C5B 7F6C5B -> $7F6C5B              BPEM488_TABS_END_LIN    EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (base_BPEM488.s)                                                           *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module bundles all the BPEM488 engine controller modules into one             *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project (This module)            *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 25 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C5B 7F6C5B S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001000 0FD000                                                 ORG     BASE_VARS_START, BASE_VARS_START_LIN
001000 0FD000 -> $1000                VECTAB_VARS_START           EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001000 0FD000 -> $FD000               VECTAB_VARS_START_LIN   EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001002 0FD002                                                 ORG     VECTAB_VARS_END, VECTAB_VARS_END_LIN
001002 0FD002 -> $1002                EEEM_VARS_START         EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001002 0FD002 -> $FD002               EEEM_VARS_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001002 0FD002                                                 ORG     EEEM_VARS_END, EEEM_VARS_END_LIN
001002 0FD002 -> $1002                CLOCK_VARS_START                    EQU *     ; * Represents the current value of the paged
                                                                            ; program counter
001002 0FD002 -> $FD002               CLOCK_VARS_START_LIN        EQU @     ; @ Represents the current value of the linear
                                                                            ; program counter
001002 0FD002                                                 ORG     CLOCK_VARS_END, CLOCK_VARS_END_LIN
001002 0FD002 -> $1002                RTI_VARS_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001002 0FD002 -> $FD002               RTI_VARS_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001006 0FD006                                                 ORG     RTI_VARS_END, RTI_VARS_END_LIN
001006 0FD006 -> $1006                SCI0_VARS_START         EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
001006 0FD006 -> $FD006               SCI0_VARS_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001012 0FD012                                                 ORG     SCI0_VARS_END, SCI0_VARS_END_LIN
001012 0FD012 -> $1012                ADC0_VARS_START         EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
001012 0FD012 -> $FD012               ADC0_VARS_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001012 0FD012                                                 ORG     ADC0_VARS_END, ADC0_VARS_END_LIN
001012 0FD012 -> $1012                GPIO_VARS_START             EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001012 0FD012 -> $FD012               GPIO_VARS_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001012 0FD012                                                 ORG     GPIO_VARS_END, GPIO_VARS_END_LIN
001012 0FD012 -> $1012                ECT_VARS_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001012 0FD012 -> $FD012               ECT_VARS_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001014 0FD014                                                 ORG     ECT_VARS_END, ECT_VARS_END_LIN
001014 0FD014 -> $1014                TIM_VARS_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001014 0FD014 -> $FD014               TIM_VARS_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001014 0FD014                                                 ORG     TIM_VARS_END, TIM_VARS_END_LIN
001014 0FD014 -> $1014                STATE_VARS_START            EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001014 0FD014 -> $FD014               STATE_VARS_START_LIN    EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
001025 0FD025                                                 ORG     STATE_VARS_END, STATE_VARS_END_LIN
001025 0FD025 -> $1025                INTERP_VARS_START           EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
001025 0FD025 -> $FD025               INTERP_VARS_START_LIN   EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
001037 0FD037                                                 ORG     INTERP_VARS_END, INTERP_VARS_END_LIN
001037 0FD037 -> $1037                IGNCALCS_VARS_START             EQU * ; * Represents the current value of the paged
                                                                        ; program counter
001037 0FD037 -> $FD037               IGNCALCS_VARS_START_LIN     EQU @ ; @ Represents the current value of the linear
                                                                        ; program counter
001045 0FD045                                                 ORG     IGNCALCS_VARS_END, IGNCALCS_VARS_END_LIN
001045 0FD045 -> $1045                INJCALCS_VARS_START             EQU * ; * Represents the current value of the paged
                                                                        ; program counter
001045 0FD045 -> $FD045               INJCALCS_VARS_START_LIN     EQU @ ; @ Represents the current value of the linear
                                                                        ; program counter
00106A 0FD06A                                                 ORG     INJCALCS_VARS_END, INJCALCS_VARS_END_LIN
00106A 0FD06A -> $106A                DODGETHERM_VARS_START       EQU *     ; * Represents the current value of the paged
                                                                            ; program counter
00106A 0FD06A -> $FD06A               DODGETHERM_VARS_START_LIN       EQU @     ; @ Represents the current value of the linear
                                                                            ; program counter
00106A 0FD06A                                                 ORG     DODGETHERM_VARS_END, DODGETHERM_VARS_END_LIN
00106A 0FD06A -> $106A                BASE_VARS_END               EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
00106A 0FD06A -> $FD06A               BASE_VARS_END_LIN           EQU @     ; @ Represents the current value of the linear
                                                            ; program counter
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005538 7F5538                                                 ORG     BASE_CODE_START, BASE_CODE_START_LIN
005538 7F5538 -> $5538                VECTAB_CODE_START           EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
005538 7F5538 -> $7F5538              VECTAB_CODE_START_LIN   EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
00581A 7F581A                                                 ORG     VECTAB_CODE_END, VECTAB_CODE_END_LIN
00581A 7F581A -> $581A                EEEM_CODE_START     EQU *     ; * Represents the current value of the paged
                                                                    ; program counter
00581A 7F581A -> $7F581A              EEEM_CODE_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
00581A 7F581A                                                 ORG     EEEM_CODE_END, EEEM_CODE_END_LIN
00581A 7F581A -> $581A                CLOCK_CODE_START            EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
00581A 7F581A -> $7F581A              CLOCK_CODE_START_LIN    EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
00581A 7F581A                                                 ORG     CLOCK_CODE_END, CLOCK_CODE_END_LIN
00581A 7F581A -> $581A                RTI_CODE_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
00581A 7F581A -> $7F581A              RTI_CODE_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
005878 7F5878                                                 ORG     RTI_CODE_END, RTI_CODE_END_LIN
005878 7F5878 -> $5878                SCI0_CODE_START         EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
005878 7F5878 -> $7F5878              SCI0_CODE_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
005B60 7F5B60                                                 ORG     SCI0_CODE_END, SCI0_CODE_END_LIN
005B60 7F5B60 -> $5B60                ADC0_CODE_START         EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
005B60 7F5B60 -> $7F5B60              ADC0_CODE_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
005B60 7F5B60                                                 ORG     ADC0_CODE_END, ADC0_CODE_END_LIN
005B60 7F5B60 -> $5B60                GPIO_CODE_START     EQU *     ; * Represents the current value of the paged
                                                                    ; program counter
005B60 7F5B60 -> $7F5B60              GPIO_CODE_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
005B60 7F5B60                                                 ORG     GPIO_CODE_END, GPIO_CODE_END_LIN
005B60 7F5B60 -> $5B60                ECT_CODE_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
005B60 7F5B60 -> $7F5B60              ECT_CODE_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
005B9D 7F5B9D                                                 ORG     ECT_CODE_END, ECT_CODE_END_LIN
005B9D 7F5B9D -> $5B9D                TIM_CODE_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
005B9D 7F5B9D -> $7F5B9D              TIM_CODE_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
005C4E 7F5C4E                                                 ORG     TIM_CODE_END, TIM_CODE_END_LIN
005C4E 7F5C4E -> $5C4E                STATE_CODE_START            EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
005C4E 7F5C4E -> $7F5C4E              STATE_CODE_START_LIN    EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
005F7F 7F5F7F                                                 ORG     STATE_CODE_END, STATE_CODE_END_LIN
005F7F 7F5F7F -> $5F7F                INTERP_CODE_START           EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
005F7F 7F5F7F -> $7F5F7F              INTERP_CODE_START_LIN   EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
0062A2 7F62A2                                                 ORG     INTERP_CODE_END, INTERP_CODE_END_LIN
0062A2 7F62A2 -> $62A2                IGNCALCS_CODE_START             EQU     * ; * Represents the current value of the paged
                                                                        ; program counter
0062A2 7F62A2 -> $7F62A2              IGNCALCS_CODE_START_LIN     EQU @ ; @ Represents the current value of the linear
                                                                        ; program counter
0062A2 7F62A2                                                 ORG     IGNCALCS_CODE_END, IGNCALCS_CODE_END_LIN
0062A2 7F62A2 -> $62A2                INJCALCS_CODE_START             EQU     * ; * Represents the current value of the paged
                                                                        ; program counter
0062A2 7F62A2 -> $7F62A2              INJCALCS_CODE_START_LIN     EQU @ ; @ Represents the current value of the linear
                                                                        ; program counter
0062A2 7F62A2                                                 ORG     INJCALCS_CODE_END, INJCALCS_CODE_END_LIN
0062A2 7F62A2 -> $62A2                DODGETHERM_CODE_START       EQU *     ; * Represents the current value of the paged
                                                                            ; program counter
0062A2 7F62A2 -> $7F62A2              DODGETHERM_CODE_START_LIN       EQU     @     ; @ Represents the current value of the linear
                                                                            ; program counter
0062A2 7F62A2                                                 ORG     DODGETHERM_CODE_END, DODGETHERM_CODE_END_LIN
0062A2 7F62A2 -> $62A2                BASE_CODE_END               EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
0062A2 7F62A2 -> $7F62A2              BASE_CODE_END_LIN           EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C5B 7F6C5B                                                 ORG     BASE_TABS_START, BASE_TABS_START_LIN
006C5B 7F6C5B -> $6C5B                VECTAB_TABS_START           EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006C5B 7F6C5B -> $7F6C5B              VECTAB_TABS_START_LIN   EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
006C5B 7F6C5B                                                 ORG     VECTAB_TABS_END, VECTAB_TABS_END_LIN
006C5B 7F6C5B -> $6C5B                EEEM_TABS_START     EQU *     ; * Represents the current value of the paged
                                                                    ; program counter
006C5B 7F6C5B -> $7F6C5B              EEEM_TABS_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
006C5B 7F6C5B                                                 ORG     EEEM_TABS_END, EEEM_TABS_END_LIN
006C5B 7F6C5B -> $6C5B                CLOCK_TABS_START            EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006C5B 7F6C5B -> $7F6C5B              CLOCK_TABS_START_LIN    EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
006C5B 7F6C5B                                                 ORG     CLOCK_TABS_END, CLOCK_TABS_END_LIN
006C5B 7F6C5B -> $6C5B                RTI_TABS_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006C5B 7F6C5B -> $7F6C5B              RTI_TABS_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
006C5B 7F6C5B                                                 ORG     RTI_TABS_END, RTI_TABS_END_LIN
006C5B 7F6C5B -> $6C5B                SCI0_TABS_START         EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
006C5B 7F6C5B -> $7F6C5B              SCI0_TABS_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
006C67 7F6C67                                                 ORG     SCI0_TABS_END, SCI0_TABS_END_LIN
006C67 7F6C67 -> $6C67                ADC0_TABS_START         EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
006C67 7F6C67 -> $7F6C67              ADC0_TABS_START_LIN         EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
006C67 7F6C67                                                 ORG     ADC0_TABS_END, ADC0_TABS_END_LIN
006C67 7F6C67 -> $6C67                GPIO_TABS_START     EQU *     ; * Represents the current value of the paged
                                                                    ; program counter
006C67 7F6C67 -> $7F6C67              GPIO_TABS_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
006C67 7F6C67                                                 ORG     GPIO_TABS_END, GPIO_TABS_END_LIN
006C67 7F6C67 -> $6C67                ECT_TABS_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006C67 7F6C67 -> $7F6C67              ECT_TABS_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
006C67 7F6C67                                                 ORG     ECT_TABS_END, ECT_TABS_END_LIN
006C67 7F6C67 -> $6C67                TIM_TABS_START              EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006C67 7F6C67 -> $7F6C67              TIM_TABS_START_LIN          EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
006C67 7F6C67                                                 ORG     TIM_TABS_END, TIM_TABS_END_LIN
006C67 7F6C67 -> $6C67                STATE_TABS_START            EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006C67 7F6C67 -> $7F6C67              STATE_TABS_START_LIN    EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
006D67 7F6D67                                                 ORG     STATE_TABS_END, STATE_TABS_END_LIN
006D67 7F6D67 -> $6D67                INTERP_TABS_START           EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
006D67 7F6D67 -> $7F6D67              INTERP_TABS_START_LIN   EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
006D67 7F6D67                                                 ORG     INTERP_TABS_END, INTERP_TABS_END_LIN
006D67 7F6D67 -> $6D67                IGNCALCS_TABS_START             EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
006D67 7F6D67 -> $7F6D67              IGNCALCS_TABS_START_LIN     EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
006D67 7F6D67                                                 ORG     IGNCALCS_TABS_END, IGNCALCS_TABS_END_LIN
006D67 7F6D67 -> $6D67                INJCALCS_TABS_START             EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
006D67 7F6D67 -> $7F6D67              INJCALCS_TABS_START_LIN     EQU @     ; @ Represents the current value of the linear
                                                                        ; program counter
006D67 7F6D67                                                 ORG     INJCALCS_TABS_END, INJCALCS_TABS_END_LIN
006D67 7F6D67 -> $6D67                DODGETHERM_TABS_START       EQU *     ; * Represents the current value of the paged
                                                                            ; program counter
006D67 7F6D67 -> $7F6D67              DODGETHERM_TABS_START_LIN       EQU     @     ; @ Represents the current value of the linear
                                                                            ; program counter
007565 7F7565                                                 ORG     DODGETHERM_TABS_END, DODGETHERM_TABS_END_LIN
007565 7F7565 -> $7565                BASE_TABS_END               EQU *     ; * Represents the current value of the paged
                                                                        ; program counter
007565 7F7565 -> $7F7565              BASE_TABS_END_LIN           EQU @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (regdefs_BPEM488.s)                                                        *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module contains the 9S12XEP100 register definitions for the BPEM488 project   *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map (This module)                         *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 19 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
007565 7F7565 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port A equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0000                PORTA:       equ $0000 ; Port A Data Register (pg 108)
007565 7F7565 -> $0080                PA7:         equ $80   ; %10000000 Port A General purpose I/O data bit 7 pin #64
007565 7F7565 -> $0040                PA6:         equ $40   ; %01000000 Port A General purpose I/O data bit 6 pin #63
007565 7F7565 -> $0020                PA5:         equ $20   ; %00100000 Port A General purpose I/O data bit 5 pin #62
007565 7F7565 -> $0010                PA4:         equ $10   ; %00010000 Port A General purpose I/O data bit 4 pin #61
007565 7F7565 -> $0008                PA3:         equ $08   ; %00001000 Port A General purpose I/O data bit 3 pin #60
007565 7F7565 -> $0004                PA2:         equ $04   ; %00000100 Port A General purpose I/O data bit 2 pin #59
007565 7F7565 -> $0002                PA1:         equ $02   ; %00000010 Port A General purpose I/O data bit 1 pin #58
007565 7F7565 -> $0001                PA0:         equ $01   ; %00000001 Port A General purpose I/O data bit 0 pin #57
007565 7F7565 -> $0002                DDRA:        equ $0002 ; Port A Data Direction Register (pg 109)
                                                             ; 1 = output, 0 = HiZ input
007565 7F7565 -> $0080                DDRA7:       equ $80   ; %10000000 Port A Data Direction bit 7 pin #64
007565 7F7565 -> $0040                DDRA6:       equ $40   ; %01000000 Port A Data Direction bit 6 pin #63
007565 7F7565 -> $0020                DDRA5:       equ $20   ; %00100000 Port A Data Direction bit 5 pin #62
007565 7F7565 -> $0010                DDRA4:       equ $10   ; %00010000 Port A Data Direction bit 4 pin #61
007565 7F7565 -> $0008                DDRA3:       equ $08   ; %00001000 Port A Data Direction bit 3 pin #60
007565 7F7565 -> $0004                DDRA2:       equ $04   ; %00000100 Port A Data Direction bit 2 pin #59
007565 7F7565 -> $0002                DDRA1:       equ $02   ; %00000010 Port A Data Direction bit 1 pin #58
007565 7F7565 -> $0001                DDRA0:       equ $01   ; %00000001 Port A Data Direction bit 0 pin #57
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port B equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0001                PORTB:       equ $0001 ; Port B Data Register (pg 108)
007565 7F7565 -> $0080                PB7:         equ $80   ; %10000000 Port B General purpose I/O data bit 7 pin #31
007565 7F7565 -> $0040                PB6:         equ $40   ; %01000000 Port B General purpose I/O data bit 6 pin #30
007565 7F7565 -> $0020                PB5:         equ $20   ; %00100000 Port B General purpose I/O data bit 5 pin #29
007565 7F7565 -> $0010                PB4:         equ $10   ; %00010000 Port B General purpose I/O data bit 4 pin #28
007565 7F7565 -> $0008                PB3:         equ $08   ; %00001000 Port B General purpose I/O data bit 3 pin #27
007565 7F7565 -> $0004                PB2:         equ $04   ; %00000100 Port B General purpose I/O data bit 2 pin #26
007565 7F7565 -> $0002                PB1:         equ $02   ; %00000010 Port B General purpose I/O data bit 1 pin #25
007565 7F7565 -> $0001                PB0:         equ $01   ; %00000001 Port B General purpose I/O data bit 0 pin #24
007565 7F7565 -> $0003                DDRB:        equ $0003 ; Port B Data Direction Register (pg 109)
                                                             ; 1 = output, 0 = HiZ input
007565 7F7565 -> $0080                DDRB7:       equ $80   ; %10000000 Port B Data Direction bit 7 pin #31
007565 7F7565 -> $0040                DDRB6:       equ $40   ; %01000000 Port B Data Direction bit 6 pin #30
007565 7F7565 -> $0020                DDRB5:       equ $20   ; %00100000 Port B Data Direction bit 5 pin #29
007565 7F7565 -> $0010                DDRB4:       equ $10   ; %00010000 Port B Data Direction bit 4 pin #28
007565 7F7565 -> $0008                DDRB3:       equ $08   ; %00001000 Port B Data Direction bit 3 pin #27
007565 7F7565 -> $0004                DDRB2:       equ $04   ; %00000100 Port B Data Direction bit 2 pin #26
007565 7F7565 -> $0002                DDRB1:       equ $02   ; %00000010 Port B Data Direction bit 1 pin #25
007565 7F7565 -> $0001                DDRB0:       equ $01   ; %00000001 Port B Data Direction bit 0 pin #24
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port E equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0008                PORTE:       equ $0008 ; Port E Data Register (pg 113)
007565 7F7565 -> $0080                PE7:         equ $80   ; %10000000 Port B General purpose I/O data bit 7 pin #36
007565 7F7565 -> $0040                PE6:         equ $40   ; %01000000 Port B General purpose I/O data bit 6 pin #37
007565 7F7565 -> $0020                PE5:         equ $20   ; %00100000 Port B General purpose I/O data bit 5 pin #38
007565 7F7565 -> $0010                PE4:         equ $10   ; %00010000 Port B General purpose I/O data bit 4 pin #39
007565 7F7565 -> $0008                PE3:         equ $08   ; %00001000 Port B General purpose I/O data bit 3 pin #53
007565 7F7565 -> $0004                PE2:         equ $04   ; %00000100 Port B General purpose I/O data bit 2 pin #54
007565 7F7565 -> $0002                PE1:         equ $02   ; %00000010 Port B General purpose input data and interrupt bit 1 pin #55
007565 7F7565 -> $0001                PE0:         equ $01   ; %00000001 Port B General purpose input data and interrupt bit 0 pin #56
007565 7F7565 -> $0009                DDRE:        equ $0009 ; Port B Data Direction Register (pg 114)
                                                             ; 1 = output, 0 = HiZ input
007565 7F7565 -> $0080                DDRE7:       equ $80   ; %10000000 Port B Data Direction bit 7 pin #36
007565 7F7565 -> $0040                DDRE6:       equ $40   ; %01000000 Port B Data Direction bit 6 pin #37
007565 7F7565 -> $0020                DDRE5:       equ $20   ; %00100000 Port B Data Direction bit 5 pin #38
007565 7F7565 -> $0010                DDRE4:       equ $10   ; %00010000 Port B Data Direction bit 4 pin #39
007565 7F7565 -> $0008                DDRE3:       equ $08   ; %00001000 Port B Data Direction bit 3 pin #53
007565 7F7565 -> $0004                DDRE2:       equ $04   ; %00000100 Port B Data Direction bit 2 pin #54
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) PUCR equates
                                      ;*****************************************************************************************
007565 7F7565 -> $000C                PUCR:        equ $000C ; S12X_EBI ports, BKGD pin Pull-up Control Register (pg 114)
                                                             ; 1 = pull-up device enabled, 0 = pull-up device disabled
007565 7F7565 -> $0080                PUPKE:       equ $80   ; %10000000 Pull-up Port K Enable bit 7
007565 7F7565 -> $0040                BKPUE:       equ $40   ; %01000000 BKGD pin pull-up Enable bit 6
007565 7F7565 -> $0010                PUPEE:       equ $10   ; %00010000 Pull-up Port E Enable bit 4
007565 7F7565 -> $0008                PUPDE:       equ $08   ; %00001000 Pull-up Port D Enable bit 3
007565 7F7565 -> $0004                PUPCE:       equ $04   ; %00000100 Pull-up Port C Enable bit 2
007565 7F7565 -> $0002                PUPBE:       equ $02   ; %00000010 Pull-up Port B Enable bit 1
007565 7F7565 -> $0001                PUPAE:       equ $01   ; %00000001 Pull-up Port A Enable bit 0
                                      ;*****************************************************************************************
                                      ; - Memory Mapping Control (S12XMMCV4) equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0017                EPAGE:       equ $0017 ;EEEPROM Page Index Register (pg 203)
007565 7F7565 -> $0080                EP7:         equ $80   ; %10000000 EEPROM Page Index bit 7
007565 7F7565 -> $0040                EP6:         equ $40   ; %01000000 EEPROM Page Index bit 6
007565 7F7565 -> $0020                EP5:         equ $20   ; %00100000 EEPROM Page Index bit 5
007565 7F7565 -> $0010                EP4:         equ $10   ; %00010000 EEPROM Page Index bit 4
007565 7F7565 -> $0008                EP3:         equ $08   ; %00001000 EEPROM Page Index bit 3
007565 7F7565 -> $0004                EP2:         equ $04   ; %00000100 EEPROM Page Index bit 2
007565 7F7565 -> $0002                EP1:         equ $02   ; %00000010 EEPROM Page Index bit 1
007565 7F7565 -> $0001                EP0:         equ $01   ; %00000001 EEPROM Page Index bit 0
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) IRQCR equates
                                      ;*****************************************************************************************
007565 7F7565 -> $001E                IRQCR:       equ $001E ; IRQ Control Register (pg 119)
007565 7F7565 -> $0080                IRQE:        equ $80   ; %10000000 IRQ Select Edge Sensitive Only bit 7
007565 7F7565 -> $0040                IRQEN:       equ $40   ; %01000000 External IRQ Enable bit 6
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port K equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0032                PORTK:       equ $0032 ; Port K Data Register (pg 120)
007565 7F7565 -> $0080                PK7:         equ $80   ; %10000000 Port K general purpose I/O data bit 7 pin #108
007565 7F7565 -> $0040                PK6:         equ $40   ; %01000000 N/C
007565 7F7565 -> $0020                PK5:         equ $20   ; %00100000 Port K general purpose I/O data bit 5 pin #19
007565 7F7565 -> $0010                PK4:         equ $10   ; %00010000 Port K general purpose I/O data bit 4 pin #20
007565 7F7565 -> $0008                PK3:         equ $08   ; %00001000 Port K general purpose I/O data bit 3 pin #5
007565 7F7565 -> $0004                PK2:         equ $04   ; %00000100 Port K general purpose I/O data bit 2 pin #6
007565 7F7565 -> $0002                PK1:         equ $02   ; %00000010 Port K general purpose I/O data bit 1 pin #7
007565 7F7565 -> $0001                PK0:         equ $01   ; %00000001 Port K general purpose I/O data bit 0 pin #8
007565 7F7565 -> $0033                DDRK:        equ $0033 ; Port K Data Direction Register (pg 120)
                                                             ; 1 = output, 0 = HiZ input
007565 7F7565 -> $0080                DDRK7:       equ $80   ; %10000000 Port K Data Direction bit 7 pin #108
007565 7F7565 -> $0040                DDRK6:       equ $40   ; %01000000 N/C
007565 7F7565 -> $0020                DDRK5:       equ $20   ; %00100000 Port K Data Direction bit 5 pin #19
007565 7F7565 -> $0010                DDRK4:       equ $10   ; %00010000 Port K Data Direction bit 4 pin #20
007565 7F7565 -> $0008                DDRK3:       equ $08   ; %00001000 Port K Data Direction bit 3 pin #5
007565 7F7565 -> $0004                DDRK2:       equ $04   ; %00000100 Port K Data Direction bit 2 pin #6
007565 7F7565 -> $0002                DDRK1:       equ $02   ; %00000010 Port K Data Direction bit 1 pin #7
007565 7F7565 -> $0001                DDRK0:       equ $01   ; %00000001 Port K Data Direction bit 0 pin #8
                                      ;*****************************************************************************************
                                      ; - Enhanced Capture Timer (ECT16B8CV3) equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0040                ECT_TIOS:    equ $0040 ; Timer Input Capture/Output Compare Select Register (pg 535)
                                                             ; 1 = input capture, 0 = output compare
007565 7F7565 -> $0080                IOS7:        equ $80   ; %10000000 Input Capture or Output Compare Channel Config bit 7
007565 7F7565 -> $0040                IOS6:        equ $40   ; %01000000 Input Capture or Output Compare Channel Config bit 6
007565 7F7565 -> $0020                IOS5:        equ $20   ; %00100000 Input Capture or Output Compare Channel Config bit 5
007565 7F7565 -> $0010                IOS4:        equ $10   ; %00010000 Input Capture or Output Compare Channel Config bit 4
007565 7F7565 -> $0008                IOS3:        equ $08   ; %00001000 Input Capture or Output Compare Channel Config bit 3
007565 7F7565 -> $0004                IOS2:        equ $04   ; %00000100 Input Capture or Output Compare Channel Config bit 2
007565 7F7565 -> $0002                IOS1:        equ $02   ; %00000010 Input Capture or Output Compare Channel Config bit 1
007565 7F7565 -> $0001                IOS0:        equ $01   ; %00000001 Input Capture or Output Compare Channel Config bit 0
007565 7F7565 -> $0041                ECT_CFORC:   equ $0041 ; Timer Compare Force Register (pg 536)
007565 7F7565 -> $0080                FOC7:        equ $80   ; %10000000 Force Output Compare Action For Channel 7 bit 7
007565 7F7565 -> $0040                FOC6:        equ $40   ; %01000000 Force Output Compare Action For Channel 6 bit 6
007565 7F7565 -> $0020                FOC5:        equ $20   ; %00100000 Force Output Compare Action For Channel 5 bit 5
007565 7F7565 -> $0010                FOC4:        equ $10   ; %00010000 Force Output Compare Action For Channel 4 bit 4
007565 7F7565 -> $0008                FOC3:        equ $08   ; %00001000 Force Output Compare Action For Channel 3 bit 3
007565 7F7565 -> $0004                FOC2:        equ $04   ; %00000100 Force Output Compare Action For Channel 2 bit 2
007565 7F7565 -> $0002                FOC1:        equ $02   ; %00000010 Force Output Compare Action For Channel 1 bit 1
007565 7F7565 -> $0001                FOC0:        equ $01   ; %00000001 Force Output Compare Action For Channel 0 bit 0
007565 7F7565 -> $0042                ECT_OC7M:    equ $0042 ; Output Compare 7 Mask Register (pg 536)
007565 7F7565 -> $0080                OC7M7:       equ $80   ; %10000000 Output Compare 7 Mask bit 7
007565 7F7565 -> $0040                OC7M6:       equ $40   ; %01000000 Output Compare 7 Mask bit 6
007565 7F7565 -> $0020                OC7M5:       equ $20   ; %00100000 Output Compare 7 Mask bit 5
007565 7F7565 -> $0010                OC7M4:       equ $10   ; %00010000 Output Compare 7 Mask bit 4
007565 7F7565 -> $0008                OC7M3:       equ $08   ; %00001000 Output Compare 7 Mask bit 3
007565 7F7565 -> $0004                OC7M2:       equ $04   ; %00000100 Output Compare 7 Mask bit 2
007565 7F7565 -> $0002                OC7M1:       equ $02   ; %00000010 Output Compare 7 Mask bit 1
007565 7F7565 -> $0001                OC7M0:       equ $01   ; %00000001 Output Compare 7 Mask bit 0
007565 7F7565 -> $0043                ECT_OC7D:    equ $0043 ; Output Compare 7 Data Register (pg 537)
007565 7F7565 -> $0080                OC7D7:       equ $80   ; %10000000 Output Compare 7 Data bit 7
007565 7F7565 -> $0040                OC7D6:       equ $40   ; %01000000 Output Compare 7 Data bit 6
007565 7F7565 -> $0020                OC7D5:       equ $20   ; %00100000 Output Compare 7 Data bit 5
007565 7F7565 -> $0010                OC7D4:       equ $10   ; %00010000 Output Compare 7 Data bit 4
007565 7F7565 -> $0008                OC7D3:       equ $08   ; %00001000 Output Compare 7 Data bit 3
007565 7F7565 -> $0004                OC7D2:       equ $04   ; %00000100 Output Compare 7 Data bit 2
007565 7F7565 -> $0002                OC7D1:       equ $02   ; %00000010 Output Compare 7 Data bit 1
007565 7F7565 -> $0001                OC7D0:       equ $01   ; %00000001 Output Compare 7 Data bit 0
007565 7F7565 -> $0044                ECT_TCNTH:   equ $0044 ; Timer Count Register High (pg 537)
007565 7F7565 -> $0080                TCNT15:      equ $80   ; %10000000 Timer Count Data bit 15
007565 7F7565 -> $0040                TCNT14:      equ $40   ; %01000000 Timer Count Data bit 14
007565 7F7565 -> $0020                TCNT13:      equ $20   ; %00100000 Timer Count Data bit 13
007565 7F7565 -> $0010                TCNT12:      equ $10   ; %00010000 Timer Count Data bit 12
007565 7F7565 -> $0008                TCNT11:      equ $08   ; %00001000 Timer Count Data bit 11
007565 7F7565 -> $0004                TCNT10:      equ $04   ; %00000100 Timer Count Data bit 10
007565 7F7565 -> $0002                TCNT9:       equ $02   ; %00000010 Timer Count Data bit 9
007565 7F7565 -> $0001                TCNT8:       equ $01   ; %00000001 Timer Count Data bit 8
007565 7F7565 -> $0045                ECT_TCNTL:   equ $0045 ; Timer Count Register Low (pg 537)
007565 7F7565 -> $0080                TCNT7:       equ $80   ; %10000000 Timer Count Data bit 7
007565 7F7565 -> $0040                TCNT6:       equ $40   ; %01000000 Timer Count Data bit 6
007565 7F7565 -> $0020                TCNT5:       equ $20   ; %00100000 Timer Count Data bit 5
007565 7F7565 -> $0010                TCNT4:       equ $10   ; %00010000 Timer Count Data bit 4
007565 7F7565 -> $0008                TCNT3:       equ $08   ; %00001000 Timer Count Data bit 3
007565 7F7565 -> $0004                TCNT2:       equ $04   ; %00000100 Timer Count Data bit 2
007565 7F7565 -> $0002                TCNT1:       equ $02   ; %00000010 Timer Count Data bit 1
007565 7F7565 -> $0001                TCNT0:       equ $01   ; %00000001 Timer Count Data bit 0
007565 7F7565 -> $0046                ECT_TSCR1:   equ $0046 ; Timer System Control Register 1 (pg 538)
007565 7F7565 -> $0080                TEN:         equ $80   ; %10000000 Timer Enable bit 7
007565 7F7565 -> $0040                TSWAI:       equ $40   ; %01000000 Timer Module Stops While In Wait bit 6
007565 7F7565 -> $0020                TSFRZ:       equ $20   ; %00100000 Timer and Modulus Counter Stop While In Wait bit 5
007565 7F7565 -> $0010                TFFCA:       equ $10   ; %00010000 Timer Fast Flag Clear All bit 4
007565 7F7565 -> $0008                PRNT:        equ $08   ; %00001000 Precision Timer bit 3
007565 7F7565 -> $0047                ECT_TTOV:    equ $0047 ; Timer Toggle On Overflow Register 1 (pg 539)
007565 7F7565 -> $0080                TOV7:        equ $80   ; %10000000 Toggle on Overflow bit 7
007565 7F7565 -> $0040                TOV6:        equ $40   ; %01000000 Toggle on Overflow bit 6
007565 7F7565 -> $0020                TOV5:        equ $20   ; %00100000 Toggle on Overflow bit 5
007565 7F7565 -> $0010                TOV4:        equ $10   ; %00100000 Toggle on Overflow bit 4
007565 7F7565 -> $0008                TOV3:        equ $08   ; %00001000 Toggle on Overflow bit 3
007565 7F7565 -> $0004                TOV2:        equ $04   ; %00000100 Toggle on Overflow bit 2
007565 7F7565 -> $0002                TOV1:        equ $02   ; %00000010 Toggle on Overflow bit 1
007565 7F7565 -> $0001                TOV0:        equ $01   ; %00000001 Toggle on Overflow bit 0
007565 7F7565 -> $0048                ECT_TCTL1:   equ $0048 ; Timer Control Register 1 (pg 540)
007565 7F7565 -> $0080                OM7:         equ $80   ; %10000000 Output Mode 7 bit 7
007565 7F7565 -> $0040                OL7:         equ $40   ; %01000000 Output Level 7 bit 6
007565 7F7565 -> $0020                OM6:         equ $20   ; %00100000 Output Mode 6 bit 5
007565 7F7565 -> $0010                OL6:         equ $10   ; %0010000Output Level 6 bit 4
007565 7F7565 -> $0008                OM5:         equ $08   ; %00001000 Output Mode 5 bit 3
007565 7F7565 -> $0004                OL5:         equ $04   ; %00000100 Output Level 5 bit 2
007565 7F7565 -> $0002                OM4:         equ $02   ; %00000010 Output Mode 4 bit 1
007565 7F7565 -> $0001                OL4:         equ $01   ; %00000001 Output Level 4 bit 0
007565 7F7565 -> $0049                ECT_TCTL2:   equ $0049 ; Timer Control Register 2 (pg 540)
007565 7F7565 -> $0080                OM3:         equ $80   ; %10000000 Output Mode 3 bit 7
007565 7F7565 -> $0040                OL3:         equ $40   ; %01000000 Output Level 3 bit 6
007565 7F7565 -> $0020                OM2:         equ $20   ; %00100000 Output Mode 2 bit 5
007565 7F7565 -> $0010                OL2:         equ $10   ; %0010000Output Level 2 bit 4
007565 7F7565 -> $0008                OM1:         equ $08   ; %00001000 Output Mode 1 bit 3
007565 7F7565 -> $0004                OL1:         equ $04   ; %00000100 Output Level 1 bit 2
007565 7F7565 -> $0002                OM0:         equ $02   ; %00000010 Output Mode 0 bit 1
007565 7F7565 -> $0001                OL0:         equ $01   ; %00000001 Output Level 0 bit 0
007565 7F7565 -> $004A                ECT_TCTL3:   equ $004A ; Timer Control Register 3 (pg 541)
007565 7F7565 -> $0080                EDG7B:       equ $80   ; %10000000 Input Capture Edge Control 7B bit 7
007565 7F7565 -> $0040                EDG7A:       equ $40   ; %01000000 Input Capture Edge Control 7A bit 6
007565 7F7565 -> $0020                EDG6B:       equ $20   ; %00100000 Input Capture Edge Control 6B bit 5
007565 7F7565 -> $0010                EDG6A:       equ $10   ; %00010000 Input Capture Edge Control 6A bit 4
007565 7F7565 -> $0008                EDG5B:       equ $08   ; %00001000 Input Capture Edge Control 5B bit 3
007565 7F7565 -> $0004                EDG5A:       equ $04   ; %00000100 Input Capture Edge Control 5A bit 2
007565 7F7565 -> $0002                EDG4B:       equ $02   ; %00000010 Input Capture Edge Control 4B bit 1
007565 7F7565 -> $0001                EDG4A:       equ $01   ; %00000001 Input Capture Edge Control 4A bit 0
007565 7F7565 -> $004B                ECT_TCTL4:   equ $004B ; Timer Control Register 4 (pg 541)
007565 7F7565 -> $0080                EDG3B:       equ $80   ; %10000000 Input Capture Edge Control 3B bit 7
007565 7F7565 -> $0040                EDG3A:       equ $40   ; %01000000 Input Capture Edge Control 3A bit 6
007565 7F7565 -> $0020                EDG2B:       equ $20   ; %00100000 Input Capture Edge Control 2B bit 5
007565 7F7565 -> $0010                EDG2A:       equ $10   ; %00010000 Input Capture Edge Control 2A bit 4
007565 7F7565 -> $0008                EDG1B:       equ $08   ; %00001000 Input Capture Edge Control 1B bit 3
007565 7F7565 -> $0004                EDG1A:       equ $04   ; %00000100 Input Capture Edge Control 1A bit 2
007565 7F7565 -> $0002                EDG0B:       equ $02   ; %00000010 Input Capture Edge Control 0B bit 1
007565 7F7565 -> $0001                EDG0A:       equ $01   ; %00000001 Input Capture Edge Control 0A bit 0
007565 7F7565 -> $004C                ECT_TIE:     equ $004C ; Timer Interrupt Enable Register (pg 542)
                                                             ; 0 = interrupt disabled, 1 = interrupts enabled
007565 7F7565 -> $0080                C7I:         equ $80   ; %10000000 IC/OC "X" Interrupt Enable bit 7
007565 7F7565 -> $0040                C6I:         equ $40   ; %01000000 IC/OC "X" Interrupt Enable bit 6
007565 7F7565 -> $0020                C5I:         equ $20   ; %00100000 IC/OC "X" Interrupt Enable bit 5
007565 7F7565 -> $0010                C4I:         equ $10   ; %00010000 IC/OC "X" Interrupt Enable bit 4
007565 7F7565 -> $0008                C3I:         equ $08   ; %00001000 IC/OC "X" Interrupt Enable bit 3
007565 7F7565 -> $0004                C2I:         equ $04   ; %00000100 IC/OC "X" Interrupt Enable bit 2
007565 7F7565 -> $0002                C1I:         equ $02   ; %00000010 IC/OC "X" Interrupt Enable bit 1
007565 7F7565 -> $0001                C0I:         equ $01   ; %00000001 IC/OC "X" Interrupt Enable bit 0
007565 7F7565 -> $004D                ECT_TSCR2:   equ $004D ; Timer System Control Register 2 (pg 543)
007565 7F7565 -> $0080                TOI:         equ $80   ; %10000000 Timer Overflow Interrupt Enable bit 7
007565 7F7565 -> $0008                TCRE:        equ $08   ; %00001000 Timer Counter Register Enable bit 3
007565 7F7565 -> $0004                PR2:         equ $04   ; %00000100 Timer Prescaler Select bit 2
007565 7F7565 -> $0002                PR1:         equ $02   ; %00000010 Timer Prescaler Select bit 1
007565 7F7565 -> $0001                PR0:         equ $01   ; %00000001 Timer Prescaler Select bit 0
007565 7F7565 -> $004E                ECT_TFLG1:   equ $004E ; Main Timer Interrupt Flag 1 (pg 545)
007565 7F7565 -> $0080                C7F:         equ $80   ; %10000000 IC/OC Channel "x" Flag bit 7
007565 7F7565 -> $0040                C6F:         equ $40   ; %10000000 IC/OC Channel "x" Flag bit 6
007565 7F7565 -> $0020                C5F:         equ $20   ; %10000000 IC/OC Channel "x" Flag bit 5
007565 7F7565 -> $0010                C4F:         equ $10   ; %10000000 IC/OC Channel "x" Flag bit 4
007565 7F7565 -> $0008                C3F:         equ $08   ; %10000000 IC/OC Channel "x" Flag bit 3
007565 7F7565 -> $0004                C2F:         equ $04   ; %10000000 IC/OC Channel "x" Flag bit 2
007565 7F7565 -> $0002                C1F:         equ $02   ; %10000000 IC/OC Channel "x" Flag bit 1
007565 7F7565 -> $0001                C0F:         equ $01   ; %10000000 IC/OC Channel "x" Flag bit 0
007565 7F7565 -> $004F                ECT_TFLG2:   equ $004F ; Main Timer Interrupt Flag 2 (pg 545)
007565 7F7565 -> $0080                TOF:         equ $80   ; %10000000 Timer Overflow Flag
007565 7F7565 -> $0050                ECT_TC0H:    equ $0050 ; Timer IC/OC Register0 Hi (pg 546)
007565 7F7565 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $0051                ECT_TC0L:    equ $0051 ; Timer IC/OC Register0 Lo (pg 546)
007565 7F7565 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $0052                ECT_TC1H:    equ $0052 ; Timer IC/OC Register1 Hi (pg 546)
007565 7F7565 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $0053                ECT_TC1L:    equ $0053 ; Timer IC/OC Register1 Lo (pg 547)
007565 7F7565 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $0054                ECT_TC2H:    equ $0054 ; Timer IC/OC Register2 Hi (pg 547)
007565 7F7565 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $0055                ECT_TC2L:    equ $0055 ; Timer IC/OC Register2 Lo (pg 547)
007565 7F7565 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $0056                ECT_TC3H:    equ $0056 ; Timer IC/OC Register3 Hi (pg 547)
007565 7F7565 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $0057                ECT_TC3L:    equ $0057 ; Timer IC/OC Register3 Lo (pg 547)
007565 7F7565 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $0058                ECT_TC4H:    equ $0058 ; Timer IC/OC Register4 Hi (pg 547)
007565 7F7565 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $0059                ECT_TC4L:    equ $0059 ; Timer IC/OC Register4 Lo (pg 548)
007565 7F7565 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $005A                ECT_TC5H:    equ $005A ; Timer IC/OC Register5 Hi (pg 548)
007565 7F7565 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $005B                ECT_TC5L:    equ $005B ; Timer IC/OC Register5 Lo (pg 548)
007565 7F7565 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $005C                ECT_TC6H:    equ $005C ; Timer IC/OC Register6 Hi (pg 548)
007565 7F7565 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $005D                ECT_TC6L:    equ $005D ; Timer IC/OC Register6 Lo (pg 548)
007565 7F7565 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $005E                ECT_TC7H:    equ $005E ; Timer IC/OC Register7 Hi (pg 548)
007565 7F7565 -> $0080                Bit15:       equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:       equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:       equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:       equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:       equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:       equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $005F                ECT_TC7L:    equ $005F ; Timer IC/OC Register7 Lo (pg 549)
007565 7F7565 -> $0080                Bit7:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:        equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:        equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $0060                ECT_PACTL:    equ $0060 ; 16-Bit Pulse Accumulator Control Register (pg 549)
007565 7F7565 -> $0040                PAEN:         equ $40   ; %01000000 Pulse Accumulator System Enable(bit 6)
007565 7F7565 -> $0020                PAMOD:        equ $20   ; %00100000 Pulse Accumulator Mode(bit 5)
007565 7F7565 -> $0010                PEDGE:        equ $10   ; %00010000 Pulse Accumulator Edge Control(bit 4)
007565 7F7565 -> $0008                CLK1:         equ $08   ; %00001000 Clock Select(bit 3)
007565 7F7565 -> $0004                CLK0:         equ $04   ; %00000100 Clock Select(bit 2)
007565 7F7565 -> $0002                PAOV1:        equ $02   ; %00000010 Pulse Accumulator Overflow Interrupt Enable(bit 1)
007565 7F7565 -> $0001                PAI:          equ $01   ; %00000001 Pulse Accumulator Input Interrupt Enable(bit 0)
007565 7F7565 -> $0061                ECT_PAFLG:    equ $0061 ; Pulse Accumulator Flag Register (pg 551)
007565 7F7565 -> $0002                PAOVF:        equ $02   ; %00000010 Pulse Accumulator Overflow Flag(bit 1)
007565 7F7565 -> $0001                PAIF:         equ $01   ; %00000001 Pulse Accumulator input edge Flag(bit 0)
007565 7F7565 -> $0062                ECT_PACN3:   equ $0062 ; Pulse Accumulator Count Register 3 (pg 551)
007565 7F7565 -> $0080                PACNT15:     equ $80   ; %10000000 Pulse Accumulator Count Data bit 15
007565 7F7565 -> $0040                PACNT14:     equ $40   ; %01000000 Pulse Accumulator Count Data bit 14
007565 7F7565 -> $0020                PACNT13:     equ $20   ; %00100000 Pulse Accumulator Count Data bit 13
007565 7F7565 -> $0010                PACNT12:     equ $10   ; %00010000 Pulse Accumulator Count Data bit 12
007565 7F7565 -> $0008                PACNT11:     equ $08   ; %00001000 Pulse Accumulator Count Data bit 11
007565 7F7565 -> $0004                PACNT10:     equ $04   ; %00000100 Pulse Accumulator Count Data bit 10
007565 7F7565 -> $0002                PACNT9:      equ $02   ; %00000010 Pulse Accumulator Count Data bit 9
007565 7F7565 -> $0001                PACNT8:      equ $01   ; %00000001 Pulse Accumulator Count Data bit 8
007565 7F7565 -> $0063                ECT_PACN2:   equ $0063 ; Pulse Accumulator Count Register 2 (pg 552)
007565 7F7565 -> $0080                PACNT7:      equ $80   ; %10000000 Pulse Accumulator Count Data bit 15
007565 7F7565 -> $0040                PACNT6:      equ $40   ; %01000000 Pulse Accumulator Count Data bit 14
007565 7F7565 -> $0020                PACNT5:      equ $20   ; %00100000 Pulse Accumulator Count Data bit 13
007565 7F7565 -> $0010                PACNT4:      equ $10   ; %00010000 Pulse Accumulator Count Data bit 12
007565 7F7565 -> $0008                PACNT3:      equ $08   ; %00001000 Pulse Accumulator Count Data bit 11
007565 7F7565 -> $0004                PACNT2:      equ $04   ; %00000100 Pulse Accumulator Count Data bit 10
007565 7F7565 -> $0002                PACNT1:      equ $02   ; %00000010 Pulse Accumulator Count Data bit 9
007565 7F7565 -> $0001                PACNT`:      equ $01   ; %00000001 Pulse Accumulator Count Data bit 8
007565 7F7565 -> $0064                ECT_PACN1:   equ $0064 ; Pulse Accumulator Count Register 1 (pg 552)
007565 7F7565 -> $0080                PACNT15:     equ $80   ; %10000000 Pulse Accumulator Count Data bit 15
007565 7F7565 -> $0040                PACNT14:     equ $40   ; %01000000 Pulse Accumulator Count Data bit 14
007565 7F7565 -> $0020                PACNT13:     equ $20   ; %00100000 Pulse Accumulator Count Data bit 13
007565 7F7565 -> $0010                PACNT12:     equ $10   ; %00010000 Pulse Accumulator Count Data bit 12
007565 7F7565 -> $0008                PACNT11:     equ $08   ; %00001000 Pulse Accumulator Count Data bit 11
007565 7F7565 -> $0004                PACNT10:     equ $04   ; %00000100 Pulse Accumulator Count Data bit 10
007565 7F7565 -> $0002                PACNT9:      equ $02   ; %00000010 Pulse Accumulator Count Data bit 9
007565 7F7565 -> $0001                PACNT8:      equ $01   ; %00000001 Pulse Accumulator Count Data bit 8
007565 7F7565 -> $0065                ECT_PACN20:   equ $0065 ; Pulse Accumulator Count Register 0 (pg 552)
007565 7F7565 -> $0080                PACNT7:      equ $80   ; %10000000 Pulse Accumulator Count Data bit 15
007565 7F7565 -> $0040                PACNT6:      equ $40   ; %01000000 Pulse Accumulator Count Data bit 14
007565 7F7565 -> $0020                PACNT5:      equ $20   ; %00100000 Pulse Accumulator Count Data bit 13
007565 7F7565 -> $0010                PACNT4:      equ $10   ; %00010000 Pulse Accumulator Count Data bit 12
007565 7F7565 -> $0008                PACNT3:      equ $08   ; %00001000 Pulse Accumulator Count Data bit 11
007565 7F7565 -> $0004                PACNT2:      equ $04   ; %00000100 Pulse Accumulator Count Data bit 10
007565 7F7565 -> $0002                PACNT1:      equ $02   ; %00000010 Pulse Accumulator Count Data bit 9
007565 7F7565 -> $0001                PACNT`:      equ $01   ; %00000001 Pulse Accumulator Count Data bit 8
007565 7F7565 -> $006C                ECT_OCPD:     equ $006C ; Output Compare Pin Disconnect Register (pg 559)
007565 7F7565 -> $0080                OCPD7:        equ $80   ; %10000000 Output Compare Pin Disconnect bit 7
007565 7F7565 -> $0040                OCPD6:        equ $40   ; %01000000 Output Compare Pin Disconnect bit 6
007565 7F7565 -> $0020                OCPD5:        equ $20   ; %00100000 Output Compare Pin Disconnect bit 5
007565 7F7565 -> $0010                OCPD4:        equ $10   ; %00010000 Output Compare Pin Disconnect bit 4
007565 7F7565 -> $0008                OCPD3:        equ $08   ; %00001000 Output Compare Pin Disconnect bit 3
007565 7F7565 -> $0004                OCPD2:        equ $04   ; %00000100 Output Compare Pin Disconnect bit 2
007565 7F7565 -> $0002                OCPD1:        equ $02   ; %00000010 Output Compare Pin Disconnect bit 1
007565 7F7565 -> $0001                OCPD0:        equ $01   ; %00000001 Output Compare Pin Disconnect bit 0
007565 7F7565 -> $006E                ECT_PTPSR:   equ $006E ; Precision Timer Prescaler Select Register (pg 559)
007565 7F7565 -> $0080                PTPS7:       equ $80   ; %10000000 Precision Timer Prescaler Select bit 7
007565 7F7565 -> $0040                PTPS6:       equ $40   ; %01000000 Precision Timer Prescaler Select bit 6
007565 7F7565 -> $0020                PTPS5:       equ $20   ; %00100000 Precision Timer Prescaler Select bit 5
007565 7F7565 -> $0010                PTPS4:       equ $10   ; %00010000 Precision Timer Prescaler Select bit 4
007565 7F7565 -> $0008                PTPS3:       equ $08   ; %00001000 Precision Timer Prescaler Select bit 3
007565 7F7565 -> $0004                PTPS2:       equ $04   ; %00000100 Precision Timer Prescaler Select bit 2
007565 7F7565 -> $0002                PTPS1:       equ $02   ; %00000010 Precision Timer Prescaler Select bit 1
007565 7F7565 -> $0001                PTPS0:       equ $01   ; %00000001 Precision Timer Prescaler Select bit 0
                                      ;*****************************************************************************************
                                      ; - 1024KB Flash Module (S12XFTM1024K5V2)
                                      ;*****************************************************************************************
007565 7F7565 -> $0100                FCLKDIV:     equ $0100 ; Flash Clock Divider Register (pg 1152)
007565 7F7565 -> $0080                FDIVLD:      equ $80   ; %10000000 Clock Divider Loaded bit 7
007565 7F7565 -> $0040                FDIV6:       equ $40   ; %01000000 Clock Divider Bits bit 6
007565 7F7565 -> $0020                FDIV5:       equ $20   ; %00100000 Clock Divider Bits bit 5
007565 7F7565 -> $0010                FDIV4:       equ $10   ; %00010000 Clock Divider Bits bit 4
007565 7F7565 -> $0008                FDIV3:       equ $08   ; %00001000 Clock Divider Bits bit 3
007565 7F7565 -> $0004                FDIV2:       equ $04   ; %00000100 Clock Divider Bits bit 2
007565 7F7565 -> $0002                FDIV1:       equ $02   ; %00000010 Clock Divider Bits bit 1
007565 7F7565 -> $0001                FDIV0:       equ $01   ; %00000001 Clock Divider Bits bit 0
007565 7F7565 -> $0102                FCCOBIX:     equ $0102 ; Flash CCOB Index Register ( pg 1155)
007565 7F7565 -> $0004                CCOBIX2:     equ $04   ; %00000100 Common Command Register Index bit 2
007565 7F7565 -> $0002                CCOBIX1:     equ $02   ; %00000010 Common Command Register Index bit 1
007565 7F7565 -> $0001                CCOBIX0:     equ $01   ; %00000001 Common Command Register Index bit 0
007565 7F7565 -> $0106                FSTAT:       equ $0106 ; Flash Status Register (pg 1158)
007565 7F7565 -> $0080                CCIF:        equ $80   ; %10000000 Command Complete Interrupt Flag bit 7
007565 7F7565 -> $0020                ACCERR:      equ $20   ; %00100000 Flash Access Error Flag bit 5
007565 7F7565 -> $0010                FPVIOL:      equ $10   ; %00010000 Flash Protection Violation Flag bit 4
007565 7F7565 -> $0008                MGBUSY:      equ $08   ; %00001000 Memory Controller Busy Flag bit 3
007565 7F7565 -> $0004                RSVD:        equ $04   ; %00000100 Reserved Bit bit 2
007565 7F7565 -> $0002                MGSTAT1:     equ $02   ; %00000010 Memory Controller Command Completion Status Flag bit 1
007565 7F7565 -> $0001                MGSTAT0:     equ $01   ; %00000001 Memory Controller Command Completion Status Flag bit 0
007565 7F7565 -> $0107                FERSTAT:     equ $0107 ; Flash Error Status Register (pg 1159)
007565 7F7565 -> $0080                ERSERIF:     equ $80   ; %10000000 EEE Erase Error Interrupt Flag bit 7
007565 7F7565 -> $0020                PGMERIF:     equ $20   ; %00100000 EEE Program Error Interrupt Flag bit 5
007565 7F7565 -> $0010                EPVIOLIF:    equ $10   ; %00010000 EEE Protection Violation Interrupt Flag bit 4
007565 7F7565 -> $0008                ERSVIF1:     equ $08   ; %00001000 EEE Error Interrupt 1 Flag bit 3
007565 7F7565 -> $0004                ERSVIF0:     equ $04   ; %00000100 EEE Error Interrupt 0 Flag bit 2
007565 7F7565 -> $0002                DFDIF:       equ $02   ; %00000010 Double Bit Fault Detect Interrupt Flag bit 1
007565 7F7565 -> $0001                SFDIF:       equ $01   ; %00000001 Single Bit Fault Detect Interrupt Flag bit 0
007565 7F7565 -> $010A                FCCOBHI:     equ $010A ; Flash Common Command Object High Register (pg 1166)
007565 7F7565 -> $010B                FCCOBLO:     equ $010B ; Flash Common Command Object Low Register (pg 1166)
007565 7F7565 -> $010C                ETAGHI:      equ $010C ; EEE Tag Counter Register High (pg 1167)
007565 7F7565 -> $010D                ETAGLO:      equ $010D ; EEE Tag Counter Register Low (pg 1167)
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port T equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0240                PTT:         equ $0240 ; Port T Data Register (pg 121)
007565 7F7565 -> $0080                PT7:         equ $80   ; %10000000 Port T general purpose I/O data bit 7 pin #18
007565 7F7565 -> $0040                PT6:         equ $40   ; %01000000 Port T general purpose I/O data bit 6 pin #17
007565 7F7565 -> $0020                PT5:         equ $20   ; %00100000 Port T general purpose I/O data bit 5 pin #16
007565 7F7565 -> $0010                PT4:         equ $10   ; %00010000 Port T general purpose I/O data bit 4 pin #15
007565 7F7565 -> $0008                PT3:         equ $08   ; %00001000 Port T general purpose I/O data bit 3 pin #12
007565 7F7565 -> $0004                PT2:         equ $04   ; %00000100 Port T general purpose I/O data bit 2 pin #11
007565 7F7565 -> $0002                PT1:         equ $02   ; %00000010 Port T general purpose I/O data bit 1 pin #10
007565 7F7565 -> $0001                PT0:         equ $01   ; %00000001 Port T general purpose I/O data bit 0 pin #9
007565 7F7565 -> $0242                DDRT:        equ $0242 ; Port T Data Direction Register (pg 122)
                                                             ; 1 = output, 0 = input
007565 7F7565 -> $0080                DDRT7:       equ $80   ; %10000000 Port T data direction bit 7 pin #18
007565 7F7565 -> $0040                DDRT6:       equ $40   ; %01000000 Port T data direction bit 6 pin #17
007565 7F7565 -> $0020                DDRT5:       equ $20   ; %00100000 Port T data direction bit 5 pin #16
007565 7F7565 -> $0010                DDRT4:       equ $10   ; %00010000 Port T data direction bit 4 pin #15
007565 7F7565 -> $0008                DDRT3:       equ $08   ; %00001000 Port T data direction bit 3 pin #12
007565 7F7565 -> $0004                DDRT2:       equ $04   ; %00000100 Port T data direction bit 2 pin #11
007565 7F7565 -> $0002                DDRT1:       equ $02   ; %00000010 Port T data direction bit 1 pin #10
007565 7F7565 -> $0001                DDRT0:       equ $01   ; %00000001 Port T data direction bit 0 pin #9
007565 7F7565 -> $0244                PERT:        equ $0244 ; Port T Pull Device Enable Register (pg 123)
007565 7F7565 -> $0080                PERT7:       equ $80   ; %10000000 Port T pull Device Enable Register bit 7
007565 7F7565 -> $0040                PERT6:       equ $40   ; %01000000 Port T pull Device Enable Register bit 6
007565 7F7565 -> $0020                PERT5:       equ $20   ; %00100000 Port T pull Device Enable Register bit 5
007565 7F7565 -> $0010                PERT4:       equ $10   ; %10010000 Port T pull Device Enable Register bit 4
007565 7F7565 -> $0008                PERT3:       equ $08   ; %00001000 Port T pull Device Enable Register bit 3
007565 7F7565 -> $0004                PERT2:       equ $04   ; %00000100 Port T pull Device Enable Register bit 2
007565 7F7565 -> $0002                PERT1:       equ $02   ; %00000010 Port T pull Device Enable Register bit 1
007565 7F7565 -> $0001                PERT0:       equ $01   ; %00000001 Port T pull Device Enable Register bit 0
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port S equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0248                PTS:         equ $0248 ; Port S Data Register (pg 125)
007565 7F7565 -> $0080                PS7:         equ $80   ; %10000000 Port S general purpose I/O data bit 7 pin #96
007565 7F7565 -> $0040                PS6:         equ $40   ; %01000000 Port S general purpose I/O data bit 6 pin #95
007565 7F7565 -> $0020                PS5:         equ $20   ; %00100000 Port S general purpose I/O data bit 5 pin #94
007565 7F7565 -> $0010                PS4:         equ $10   ; %00010000 Port S general purpose I/O data bit 4 pin #93
007565 7F7565 -> $0008                PS3:         equ $08   ; %00001000 Port S general purpose I/O data bit 3 pin #92
007565 7F7565 -> $0004                PS2:         equ $04   ; %00000100 Port S general purpose I/O data bit 2 pin #91
007565 7F7565 -> $0002                PS1:         equ $02   ; %00000010 Port S general purpose I/O data bit 1 pin #90
007565 7F7565 -> $0001                PS0:         equ $01   ; %00000001 Port S general purpose I/O data bit 0 pin #89
007565 7F7565 -> $024A                DDRS:        equ $024A ; Port S Data Direction Register (pg 126)
                                                             ; 1 = output, 0 = input
007565 7F7565 -> $0080                DDRS7:       equ $80   ; %10000000 Port S data direction bit 7 pin #96
007565 7F7565 -> $0040                DDRS6:       equ $40   ; %01000000 Port S data direction bit 6 pin #95
007565 7F7565 -> $0020                DDRS5:       equ $20   ; %00100000 Port S data direction bit 5 pin #94
007565 7F7565 -> $0010                DDRS4:       equ $10   ; %00010000 Port S data direction bit 4 pin #93
007565 7F7565 -> $0008                DDRS3:       equ $08   ; %00001000 Port S data direction bit 3 pin #92
007565 7F7565 -> $0004                DDRS2:       equ $04   ; %00000100 Port S data direction bit 2 pin #91
007565 7F7565 -> $0002                DDRS1:       equ $02   ; %00000010 Port S data direction bit 1 pin #90
007565 7F7565 -> $0001                DDRS0:       equ $01   ; %00000001 Port S data direction bit 0 pin #89
007565 7F7565 -> $024D                PPSS:        equ $024D ; Port S Polarity Select Register (pg 128)
                                                             ; 1 = pull down selected, 0 = pull up selected
007565 7F7565 -> $0080                PPSS7:       equ $80   ; Port S pull device select bit 7 pin #96
007565 7F7565 -> $0040                PPSS6:       equ $40   ; Port S pull device select bit 6 pin #95
007565 7F7565 -> $0020                PPSS5:       equ $20   ; Port S pull device select bit 5 pin #94
007565 7F7565 -> $0010                PPSS4:       equ $10   ; Port S pull device select bit 4 pin #93
007565 7F7565 -> $0008                PPSS3:       equ $08   ; Port S pull device select bit 3 pin #92
007565 7F7565 -> $0004                PPSS2:       equ $04   ; Port S pull device select bit 2 pin #91
007565 7F7565 -> $0002                PPSS1:       equ $02   ; Port S pull device select bit 1 pin #90
007565 7F7565 -> $0001                PPSS0:       equ $01   ; Port S pull device select bit 0 pin #89
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port M equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0250                PTM:          equ $0250 ; Port M Data Register (pg 131)
007565 7F7565 -> $0080                PM7:          equ $80   ; %10000000 Port M general purpose I/O data bit 7 pin #87
007565 7F7565 -> $0040                PM6:          equ $40   ; %01000000 Port M general purpose I/O data bit 6 pin #88
007565 7F7565 -> $0020                PM5:          equ $20   ; %00100000 Port M general purpose I/O data bit 5 pin #100
007565 7F7565 -> $0010                PM4:          equ $10   ; %00010000 Port M general purpose I/O data bit 4 pin #101
007565 7F7565 -> $0008                PM3:          equ $08   ; %00001000 Port M general purpose I/O data bit 3 pin #102
007565 7F7565 -> $0004                PM2:          equ $04   ; %00000100 Port M general purpose I/O data bit 2 pin #103
007565 7F7565 -> $0002                PM1:          equ $02   ; %00000010 Port M general purpose I/O data bit 1 pin #104
007565 7F7565 -> $0001                PM0:          equ $01   ; %00000001 Port M general purpose I/O data bit 0 pin #105
007565 7F7565 -> $0252                DDRM:         equ $0252 ; Port M Data Direction Register (pg 132)
                                                              ; 1 = output, 0 = input
007565 7F7565 -> $0080                DDRM7:        equ $80   ; %10000000 Port M data direction bit 7 pin # 87
007565 7F7565 -> $0040                DDRM6:        equ $40   ; %01000000 Port M data direction bit 6 pin # 88
007565 7F7565 -> $0020                DDRM5:        equ $20   ; %00100000 Port M data direction bit 5 pin # 100
007565 7F7565 -> $0010                DDRM4:        equ $10   ; %00010000 Port M data direction bit 4 pin # 101
007565 7F7565 -> $0008                DDRM3:        equ $08   ; %00001000 Port M data direction bit 3 pin # 102
007565 7F7565 -> $0004                DDRM2:        equ $04   ; %00000100 Port M data direction bit 2 pin # 103
007565 7F7565 -> $0002                DDRM1:        equ $02   ; %00000010 Port M data direction bit 1 pin # 104
007565 7F7565 -> $0001                DDRM0:        equ $01   ; %00000001 Port M data direction bit 0 pin # 105
007565 7F7565 -> $0254                PERM:         equ $0254 ; Port M Pull Device Enable Register pg 134
                                                              ; 1 = pull device enabled, 0 = pull device disabled
007565 7F7565 -> $0080                PERM7:        equ $80   ; %10000000  Port M pull device enable bit 7 pin #87
007565 7F7565 -> $0040                PERM6:        equ $40   ; %01000000  Port M pull device enable bit 6 pin #88
007565 7F7565 -> $0020                PERM5:        equ $20   ; %00100000  Port M pull device enable bit 5 pin #100
007565 7F7565 -> $0010                PERM4:        equ $10   ; %00010000  Port M pull device enable bit 4 pin #101
007565 7F7565 -> $0008                PERM3:        equ $08   ; %00001000  Port M pull device enable bit 3 pin #102
007565 7F7565 -> $0004                PERM2:        equ $04   ; %00000100  Port M pull device enable bit 2 pin #103
007565 7F7565 -> $0002                PERM1:        equ $02   ; %00000010  Port M pull device enable bit 1 pin #104
007565 7F7565 -> $0001                PERM0:        equ $01   ; %00000001  Port M pull device enable bit 0 pin #105
007565 7F7565 -> $0255                PPSM:         equ $0255 ; Port M Polarity Select Register pg 135
                                                              ; 1 = pull down device, 0 = pull up device
007565 7F7565 -> $0080                PPSM7:        equ $80   ; %10000000  Port M pull device select bit 7
007565 7F7565 -> $0040                PPSM6:        equ $40   ; %01000000  Port M pull device select bit 6
007565 7F7565 -> $0020                PPSM5:        equ $20   ; %00100000  Port M pull device select bit 5
007565 7F7565 -> $0010                PPSM4:        equ $10   ; %00010000  Port M pull device select bit 4
007565 7F7565 -> $0008                PPSM3:        equ $08   ; %00001000  Port M pull device select bit 3
007565 7F7565 -> $0004                PPSM2:        equ $04   ; %00000100  Port M pull device select bit 2
007565 7F7565 -> $0002                PPSM1:        equ $02   ; %00000010  Port M pull device select bit 1
007565 7F7565 -> $0001                PPSM0:        equ $01   ; %00000001  Port M pull device select bit 0
007565 7F7565 -> $0256                WOMM:         equ $0256 ; Port M Wired-Or Mode Register pg 135
                                                              ; 1 = open drain output, 0 = push pull output
007565 7F7565 -> $0080                WOMM7:        equ $80   ; %10000000  Port M wired or mode bit 7
007565 7F7565 -> $0040                WOMM6:        equ $40   ; %01000000  Port M wired or mode bit 6
007565 7F7565 -> $0020                WOMM5:        equ $20   ; %00100000  Port M wired or mode bit 5
007565 7F7565 -> $0010                WOMM4:        equ $10   ; %00010000  Port M wired or mode bit 4
007565 7F7565 -> $0008                WOMM3:        equ $08   ; %00001000  Port M wired or mode bit 3
007565 7F7565 -> $0004                WOMM2:        equ $04   ; %00000100  Port M wired or mode bit 2
007565 7F7565 -> $0002                WOMM1:        equ $02   ; %00000010  Port M wired or mode bit 1
007565 7F7565 -> $0001                WOMM0:        equ $01   ; %00000001  Port M wired or mode bit 0
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Module Routing Register for CAN0, CAN4, SPIO0,
                                      ;   SPIO1, SPIO2
                                      ;*****************************************************************************************
007565 7F7565 -> $0257                MODRR:        equ $0257 ; Module Routing Register pg 135 see table 2-40
007565 7F7565 -> $0040                MODRR6:       equ $40   ; %01000000  Module Routing Register bit 6
007565 7F7565 -> $0020                MODRR5:       equ $20   ; %00100000  Module Routing Register bit 5
007565 7F7565 -> $0010                MODRR4:       equ $10   ; %00010000  Module Routing Register bit 4
007565 7F7565 -> $0008                MODRR3:       equ $08   ; %00001000  Module Routing Register bit 3
007565 7F7565 -> $0004                MODRR2:       equ $04   ; %00000100  Module Routing Register bit 2
007565 7F7565 -> $0002                MODRR1:       equ $02   ; %00000010  Module Routing Register bit 1
007565 7F7565 -> $0001                MODRR0:       equ $01   ; %00000001  Module Routing Register bit 0
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port P equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0258                PTP:          equ $0258 ; Port P Data Register (pg 137)
007565 7F7565 -> $0080                PP7:          equ $80   ; %10000000 Port P general purpose I/O data bit 7 pin #109
007565 7F7565 -> $0040                PP6:          equ $40   ; %01000000 Port P general purpose I/O data bit 6 pin #110
007565 7F7565 -> $0020                PP5:          equ $20   ; %00100000 Port P general purpose I/O data bit 5 pin #111
007565 7F7565 -> $0010                PP4:          equ $10   ; %00010000 Port P general purpose I/O data bit 4 pin #112
007565 7F7565 -> $0008                PP3:          equ $08   ; %00001000 Port P general purpose I/O data bit 3 pin #1
007565 7F7565 -> $0004                PP2:          equ $04   ; %00000100 Port P general purpose I/O data bit 2 pin #2
007565 7F7565 -> $0002                PP1:          equ $02   ; %00000010 Port P general purpose I/O data bit 1 pin #3
007565 7F7565 -> $0001                PP0:          equ $01   ; %00000001 Port P general purpose I/O data bit 0 pin #4
007565 7F7565 -> $025A                DDRP:         equ $025A ; Port P Data Direction Register (DDRP) pg 139
                                                             ; 1 = output, 0 = input
007565 7F7565 -> $0080                DDRP7:        equ $80   ; %10000000 Port P data direction bit 7 pin #109
007565 7F7565 -> $0040                DDRP6:        equ $40   ; %01000000 Port P data direction bit 6 pin #110
007565 7F7565 -> $0020                DDRP5:        equ $20   ; %00100000 Port P data direction bit 5 pin #111
007565 7F7565 -> $0010                DDRP4:        equ $10   ; %00010000 Port P data direction bit 4 pin #112
007565 7F7565 -> $0008                DDRP3:        equ $08   ; %00001000 Port P data direction bit 3 pin #1
007565 7F7565 -> $0004                DDRP2:        equ $04   ; %00000100 Port P data direction bit 2 pin #2
007565 7F7565 -> $0002                DDRP1:        equ $02   ; %00000010 Port P data direction bit 1 pin #3
007565 7F7565 -> $0001                DDRP0:        equ $01   ; %00000001 Port P data direction bit 0 pin #4
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port H equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0260                PTH:          equ $0260 ; Port H Data Register (pg 142)
007565 7F7565 -> $0080                PH7:          equ $80   ; %10000000 Port H general purpose I/O data bit 7 pin #32
007565 7F7565 -> $0040                PH6:          equ $40   ; %01000000 Port H general purpose I/O data bit 6 pin #33
007565 7F7565 -> $0020                PH5:          equ $20   ; %00100000 Port H general purpose I/O data bit 5 pin #34
007565 7F7565 -> $0010                PH4:          equ $10   ; %00010000 Port H general purpose I/O data bit 4 pin #35
007565 7F7565 -> $0008                PH3:          equ $08   ; %00001000 Port H general purpose I/O data bit 3 pin #49
007565 7F7565 -> $0004                PH2:          equ $04   ; %00000100 Port H general purpose I/O data bit 2 pin #50
007565 7F7565 -> $0002                PH1:          equ $02   ; %00000010 Port H general purpose I/O data bit 1 pin #51
007565 7F7565 -> $0001                PH0:          equ $01   ; %00000001 Port H general purpose I/O data bit 0 pin #52
007565 7F7565 -> $0262                DDRH:         equ $0262 ;Port H Data Direction Register (pg 144)
                                                             ; 1 = output, 0 = input
007565 7F7565 -> $0080                DDRH7:        equ $80   ; %10000000 Port H Data Direction bit 7 pin #32
007565 7F7565 -> $0040                DDRH6:        equ $40   ; %01000000 Port H Data Direction bit 6 pin #33
007565 7F7565 -> $0020                DDRH5:        equ $20   ; %00100000 Port H Data Direction bit 5 pin #34
007565 7F7565 -> $0010                DDRH4:        equ $10   ; %00010000 Port H Data Direction bit 4 pin #35
007565 7F7565 -> $0008                DDRH3:        equ $08   ; %00001000 Port H Data Direction bit 3 pin #49
007565 7F7565 -> $0004                DDRH2:        equ $04   ; %00000100 Port H Data Direction bit 2 pin #50
007565 7F7565 -> $0002                DDRH1:        equ $02   ; %00000010 Port H Data Direction bit 1 pin #51
007565 7F7565 -> $0001                DDRH0:        equ $01   ; %00000001 Port H Data Direction bit 0 pin #52
007565 7F7565 -> $0264                PERH:         equ $0264 ; Port H Pull Device Enable Register (pg 147)
                                                             ; 1 = pull device enabled, 0 = pull device disabled
007565 7F7565 -> $0080                PERH7:        equ $80   ; %10000000 Port H pull device enable bit 7 pin #32
007565 7F7565 -> $0040                PERH6:        equ $40   ; %01000000 Port H pull device enable bit 6 pin #33
007565 7F7565 -> $0020                PERH5:        equ $20   ; %00100000 Port H pull device enable bit 5 pin #34
007565 7F7565 -> $0010                PERH4:        equ $10   ; %00010000 Port H pull device enable bit 4 pin #35
007565 7F7565 -> $0008                PERH3:        equ $08   ; %00001000 Port H pull device enable bit 3 pin #49
007565 7F7565 -> $0004                PERH2:        equ $04   ; %00000100 Port H pull device enable bit 2 pin #50
007565 7F7565 -> $0002                PERH1:        equ $02   ; %00000010 Port H pull device enable bit 1 pin #51
007565 7F7565 -> $0001                PERH0:        equ $01   ; %00000001 Port H pull device enable bit 0 pin #52
007565 7F7565 -> $0265                PPSH:         equ $0265 ; Port H Polarity Select Register (pg 147)
                                                             ; 1 = rising edge and pull down
                                                             ; 0 = falling edge and pull up
007565 7F7565 -> $0080                PPSH7:        equ $80   ; %10000000 Port H Pull Device Select bit 7 pin #32
007565 7F7565 -> $0040                PPSH6:        equ $40   ; %01000000 Port H Pull Device Select bit 6 pin #33
007565 7F7565 -> $0020                PPSH5:        equ $20   ; %00100000 Port H Pull Device Select bit 5 pin #34
007565 7F7565 -> $0010                PPSH4:        equ $10   ; %00010000 Port H Pull Device Select bit 4 pin #35
007565 7F7565 -> $0008                PPSH3:        equ $08   ; %00001000 Port H Pull Device Select bit 3 pin #49
007565 7F7565 -> $0004                PPSH2:        equ $04   ; %00000100 Port H Pull Device Select bit 2 pin #50
007565 7F7565 -> $0002                PPSH1:        equ $02   ; %00000010 Port H Pull Device Select bit 1 pin #51
007565 7F7565 -> $0001                PPSH0:        equ $01   ; %00000001 Port H Pull Device Select bit 0 pin #52
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port J equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0268                PTJ:          equ $0268 ; Port J Data Register (pg 149)
007565 7F7565 -> $0080                PJ7:          equ $80   ; %10000000 Port J general purpose I/O data bit 7 pin #98
007565 7F7565 -> $0040                PJ6:          equ $40   ; %01000000 Port J general purpose I/O data bit 6 pin #99
007565 7F7565 -> $0020                PJ5:          equ $20   ; N/C
007565 7F7565 -> $0010                PJ4:          equ $10   ; N/C
007565 7F7565 -> $0008                PJ3:          equ $08   ; N/C
007565 7F7565 -> $0004                PJ2:          equ $04   ; N/C
007565 7F7565 -> $0002                PJ1:          equ $02   ; %00000010 Port J general purpose I/O data bit 1 pin #21
007565 7F7565 -> $0001                PJ0:          equ $01   ; %00000001 Port J general purpose I/O data bit 0 pin #20
007565 7F7565 -> $026A                DDRJ:         equ $026A ; Port J Data Direction Register (pg 150)
                                                              ; 1 = output, 0 = input
007565 7F7565 -> $0080                DDRJ7:        equ $80   ; %10000000 Port J data direction bit 7 pin #98
007565 7F7565 -> $0040                DDRJ6:        equ $40   ; %01000000 Port J data direction bit 6 pin #99
007565 7F7565 -> $0020                DDRJ5:        equ $20   ; %00100000 Port J data direction bit 5
007565 7F7565 -> $0010                DDRJ4:        equ $10   ; %00010000 Port J data direction bit 4
007565 7F7565 -> $0008                DDRJ3:        equ $08   ; %00001000 Port J data direction bit 3
007565 7F7565 -> $0004                DDRJ2:        equ $04   ; %00000100 Port J data direction bit 2
007565 7F7565 -> $0002                DDRJ1:        equ $02   ; %00000010 Port J data direction bit 1 pin #21
007565 7F7565 -> $0001                DDRJ0:        equ $01   ; %00000001 Port J data direction bit 0 pin #20
                                      ;*****************************************************************************************
                                      ; - Port Integration Module (S12XEPIMV1) Port AD0 equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0270                PT0AD0:       equ $0270 ; Port AD0 Data Register 0 (pg 155)
                                                              ; ATD0 analog inputs AN[15:8] on PAD[15:8]
007565 7F7565 -> $0080                PT0AD07:      equ $80   ; %10000000 Port AD0 general purpose input/output data bit 7 pin 82
007565 7F7565 -> $0040                PT0AD06:      equ $40   ; %01000000 Port AD0 general purpose input/output data bit 6 pin 80
007565 7F7565 -> $0020                PT0AD05:      equ $20   ; %00100000 Port AD0 general purpose input/output data bit 5 pin 78
007565 7F7565 -> $0010                PT0AD04:      equ $10   ; %00010000 Port AD0 general purpose input/output data bit 4 pin 76
007565 7F7565 -> $0008                PT0AD03:      equ $08   ; %00001000 Port AD0 general purpose input/output data bit 3 pin 74
007565 7F7565 -> $0004                PT0AD02:      equ $04   ; %00000100 Port AD0 general purpose input/output data bit 2 pin 72
007565 7F7565 -> $0002                PT0AD01:      equ $02   ; %00000010 Port AD0 general purpose input/output data bit 1 pin 70
007565 7F7565 -> $0001                PT0AD00:      equ $01   ; %00000001 Port AD0 general purpose input/output data bit 0 pin 68
007565 7F7565 -> $0271                PT1AD0:       equ $0271 ; Port AD0 Data Register 1 (pg 155)
                                                              ; ATD0 analog inputs AN[7:0] on PAD[7:0]
007565 7F7565 -> $0080                PT1AD07:      equ $80   ; %10000000 Port AD0 general purpose input/output data bit 7 pin 81
007565 7F7565 -> $0040                PT1AD06:      equ $40   ; %01000000 Port AD0 general purpose input/output data bit 6 pin 79
007565 7F7565 -> $0020                PT1AD05:      equ $20   ; %00100000 Port AD0 general purpose input/output data bit 5 pin 77
007565 7F7565 -> $0010                PT1AD04:      equ $10   ; %00010000 Port AD0 general purpose input/output data bit 4 pin 75
007565 7F7565 -> $0008                PT1AD03:      equ $08   ; %00001000 Port AD0 general purpose input/output data bit 3 pin 73
007565 7F7565 -> $0004                PT1AD02:      equ $04   ; %00000100 Port AD0 general purpose input/output data bit 2 pin 71
007565 7F7565 -> $0002                PT1AD01:      equ $02   ; %00000010 Port AD0 general purpose input/output data bit 1 pin 69
007565 7F7565 -> $0001                PT1AD00:      equ $01   ; %00000001 Port AD0 general purpose input/output data bit 0 pin 67
007565 7F7565 -> $0272                DDR0AD0:      equ $0272 ; Port AD0 Data Direcction Register 0 (pg 156)
                                                              ; Data direction pins 15 through 8. 1 = output, 0 = input
007565 7F7565 -> $0080                DDR0AD07:     equ $80   ; %10000000 Port AD0 data direction bit 7
007565 7F7565 -> $0040                DDR0AD06:     equ $40   ; %01000000 Port AD0 data direction bit 6
007565 7F7565 -> $0020                DDR0AD05:     equ $20   ; %00100000 Port AD0 data direction bit 5
007565 7F7565 -> $0010                DDR0AD04:     equ $10   ; %00010000 Port AD0 data direction bit 4
007565 7F7565 -> $0008                DDR0AD03:     equ $08   ; %00001000 Port AD0 data direction bit 3
007565 7F7565 -> $0004                DDR0AD02:     equ $04   ; %00000100 Port AD0 data direction bit 2
007565 7F7565 -> $0002                DDR0AD01:     equ $02   ; %00000010 Port AD0 data direction bit 1
007565 7F7565 -> $0001                DDR0AD00:     equ $01   ; %00000001 Port AD0 data direction bit 0
007565 7F7565 -> $0273                DDR1AD0:      equ $0273 ; Port AD0 Data Direcction Register 1 (pg 156)
                                                              ; Data direction pins 7 through 0. 1 = output, 0 = input
007565 7F7565 -> $0080                DDR1AD07:     equ $80   ; %10000000 Port AD0 data direction bit 7
007565 7F7565 -> $0040                DDR1AD06:     equ $40   ; %01000000 Port AD0 data direction bit 6
007565 7F7565 -> $0020                DDR1AD05:     equ $20   ; %00100000 Port AD0 data direction bit 5
007565 7F7565 -> $0010                DDR1AD04:     equ $10   ; %00010000 Port AD0 data direction bit 4
007565 7F7565 -> $0008                DDR1AD03:     equ $08   ; %00001000 Port AD0 data direction bit 3
007565 7F7565 -> $0004                DDR1AD02:     equ $04   ; %00000100 Port AD0 data direction bit 2
007565 7F7565 -> $0002                DDR1AD01:     equ $02   ; %00000010 Port AD0 data direction bit 1
007565 7F7565 -> $0001                DDR1AD00:     equ $01   ; %00000001 Port AD0 data direction bit 0
007565 7F7565 -> $0274                RDR0AD0:      equ $0274 ; Port AD0 Reduced Drive Register 0 (pg 157)
                                                              ; Drive strength for pins 15 through 8. 1 = reduced, 0 = full
007565 7F7565 -> $0080                RDR0AD07:     equ $80   ; %10000000 Port AD0 reduced drive bit 7
007565 7F7565 -> $0040                RDR0AD06:     equ $40   ; %01000000 Port AD0 reduced drive bit 6
007565 7F7565 -> $0020                RDR0AD05:     equ $20   ; %00100000 Port AD0 reduced drive bit 5
007565 7F7565 -> $0010                RDR0AD04:     equ $10   ; %00010000 Port AD0 reduced drive bit 4
007565 7F7565 -> $0008                RDR0AD03:     equ $08   ; %00001000 Port AD0 reduced drive bit 3
007565 7F7565 -> $0004                RDR0AD02:     equ $04   ; %00000100 Port AD0 reduced drive bit 2
007565 7F7565 -> $0002                RDR0AD01:     equ $02   ; %00000010 Port AD0 reduced drive bit 1
007565 7F7565 -> $0001                RDR0AD00:     equ $01   ; %00000001 Port AD0 reduced drive bit 0
007565 7F7565 -> $0275                RDR1AD0:      equ $0275 ; Port AD0 Reduced Drive Register 1 (pg 158)
                                                              ; Drive strength for pins 7 through 0. 1 = reduced, 0 = full
007565 7F7565 -> $0080                RDR1AD07:     equ $80   ; %10000000 Port AD0 reduced drive bit 7
007565 7F7565 -> $0040                RDR1AD06:     equ $40   ; %01000000 Port AD0 reduced drive bit 6
007565 7F7565 -> $0020                RDR1AD05:     equ $20   ; %00100000 Port AD0 reduced drive bit 5
007565 7F7565 -> $0010                RDR1AD04:     equ $10   ; %00010000 Port AD0 reduced drive bit 4
007565 7F7565 -> $0008                RDR1AD03:     equ $08   ; %00001000 Port AD0 reduced drive bit 3
007565 7F7565 -> $0004                RDR1AD02:     equ $04   ; %00000100 Port AD0 reduced drive bit 2
007565 7F7565 -> $0002                RDR1AD01:     equ $02   ; %00000010 Port AD0 reduced drive bit 1
007565 7F7565 -> $0001                RDR1AD00:     equ $01   ; %00000001 Port AD0 reduced drive bit 0
007565 7F7565 -> $0276                PER0AD0:      equ $0276 ; Port AD0 Pull Up Enable Register 0 (pg 158)
                                                              ; Pull device enable for pins 15 through 8. 1 = enabled, 0 = disabled
007565 7F7565 -> $0080                PER0AD07:     equ $80   ; %00000000 Port AD0 pull device enable bit 7
007565 7F7565 -> $0040                PER0AD06:     equ $40   ; %01000000 Port AD0 pull device enable bit 6
007565 7F7565 -> $0020                PER0AD05:     equ $20   ; %00100000 Port AD0 pull device enable bit 5
007565 7F7565 -> $0010                PER0AD04:     equ $10   ; %00010000 Port AD0 pull device enable bit 4
007565 7F7565 -> $0008                PER0AD03:     equ $08   ; %00001000 Port AD0 pull device enable bit 3
007565 7F7565 -> $0004                PER0AD02:     equ $04   ; %00000100 Port AD0 pull device enable bit 2
007565 7F7565 -> $0002                PER0AD01:     equ $02   ; %00000010 Port AD0 pull device enable bit 1
007565 7F7565 -> $0001                PER0AD00:     equ $01   ; %00000001 Port AD0 pull device enable bit 0
007565 7F7565 -> $0277                PER1AD0:      equ $0277 ; Port AD0 Pull Up Enable Register 1 (pg 159)
                                                              ; Pull device enable for pins 7 through 0. 1 = enabled, 0 = disabled
007565 7F7565 -> $0080                PER1AD07:     equ $80   ; %00000000 Port AD0 pull device enable bit 7
007565 7F7565 -> $0040                PER1AD06:     equ $40   ; %01000000 Port AD0 pull device enable bit 6
007565 7F7565 -> $0020                PER1AD05:     equ $20   ; %00100000 Port AD0 pull device enable bit 5
007565 7F7565 -> $0010                PER1AD04:     equ $10   ; %00010000 Port AD0 pull device enable bit 4
007565 7F7565 -> $0008                PER1AD03:     equ $08   ; %00001000 Port AD0 pull device enable bit 3
007565 7F7565 -> $0004                PER1AD02:     equ $04   ; %00000100 Port AD0 pull device enable bit 2
007565 7F7565 -> $0002                PER1AD01:     equ $02   ; %00000010 Port AD0 pull device enable bit 1
007565 7F7565 -> $0001                PER1AD00:     equ $01   ; %00000001 Port AD0 pull device enable bit 0
                                      ;*****************************************************************************************
                                      ; - S12XE Clocks and Reset Generator (S12XECRGV1) equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0034                SYNR:        equ $0034 ; S12XECRG Synthesizer Register (pg 473)
007565 7F7565 -> $0080                VCOFRQ1:     equ $80   ; %10000000 VCO Frequency bit 7
007565 7F7565 -> $0040                VCOFRQ0:     equ $40   ; %01000000 VCO Frequency bit 6
007565 7F7565 -> $0020                SYNDIV5:     equ $20   ; %00100000 IPLL multification factor bit 5
007565 7F7565 -> $0010                SYNDIV4:     equ $10   ; %00010000 IPLL multification factor bit 5
007565 7F7565 -> $0008                SYNDIV3:     equ $08   ; %00001000 IPLL multification factor bit 5
007565 7F7565 -> $0004                SYNDIV2:     equ $04   ; %00000100 IPLL multification factor bit 5
007565 7F7565 -> $0002                SYNDIV1:     equ $02   ; %00000010 IPLL multification factor bit 5
007565 7F7565 -> $0001                SYNDIV0:     equ $01   ; %00000001 IPLL multification factor bit 5
007565 7F7565 -> $0035                REFDV:       equ $0035 ; S12XECRG Reference Divider Register (pg 474)
007565 7F7565 -> $0080                REFFRQ1:     equ $80   ; %10000000 Reference Frequency bit 7
007565 7F7565 -> $0040                REFFRQ0:     equ $40   ; %01000000 Reference Frequency bit 6
007565 7F7565 -> $0020                REFDIV5:     equ $20   ; %00100000 Reference Divider bit 5
007565 7F7565 -> $0010                REFDIV4:     equ $10   ; %00010000 Reference Divider bit 4
007565 7F7565 -> $0008                REFDIV3:     equ $08   ; %00001000 Reference Divider bit 3
007565 7F7565 -> $0004                REFDIV2:     equ $04   ; %00000100 Reference Divider bit 2
007565 7F7565 -> $0002                REFDIV1:     equ $02   ; %00000010 Reference Divider bit 1
007565 7F7565 -> $0001                REFDIV0:     equ $01   ; %00000001 Reference Divider bit 0
007565 7F7565 -> $0036                POSTDIV:     equ $0036 ; S12XECRG Post Divider Register (pg 474)
007565 7F7565 -> $0010                POSTDIV4:    equ $10   ; %00010000 Post Divider bit 4
007565 7F7565 -> $0008                POSTDIV3:    equ $08   ; %00010000 Post Divider bit 3
007565 7F7565 -> $0004                POSTDIV2:    equ $04   ; %00010000 Post Divider bit 2
007565 7F7565 -> $0002                POSTDIV1:    equ $02   ; %00010000 Post Divider bit 1
007565 7F7565 -> $0001                POSTDIV0:    equ $01   ; %00010000 Post Divider bit 0
007565 7F7565 -> $0037                CRGFLG:      equ $0037 ; S12XECRG Flags Register (pg 475)
007565 7F7565 -> $0080                RTIF:        equ $80   ; %10000000 Real Time Interrupt Flag Bit 7
007565 7F7565 -> $0040                PORF:        equ $40   ; %01000000 Power on Reset Flag Bit 6
007565 7F7565 -> $0020                LVRF:        equ $20   ; %00100000 Low Voltage Reset Flag Bit 5
007565 7F7565 -> $0010                LOCKIF:      equ $10   ; %00010000 PLL Lock Interrupt Flag Bit 4
007565 7F7565 -> $0008                LOCK:        equ $08   ; %00001000 Lock Status Bit 3
007565 7F7565 -> $0004                ILAF:        equ $04   ; %00000100 Illegal Address Reset Flag Bit 2
007565 7F7565 -> $0002                SCMIF:       equ $02   ; %00000010 Self Clock Mode Interrupt Flag Bit 1
007565 7F7565 -> $0001                SCM:         equ $01   ; %00000001 Self Clock Mode Status Bit 0
007565 7F7565 -> $0038                CRGINT:      equ $0038 ; S12XECRG Interrupt Enable Register (pg 476)
007565 7F7565 -> $0080                RTIE:        equ $80   ; %10000000 Real Time Interrupt Enable Bit 7
007565 7F7565 -> $0010                LOCKIE:      equ $10   ; %00010000 Lock Interrupt Enable Bit 4
007565 7F7565 -> $0002                SCMIE:       equ $02   ; %00000010 Self Clock Mode Interrupt Enable Bit1
007565 7F7565 -> $0039                CLKSEL:      equ $0039 ; S12XECRG Clock Select Register (pg 477)
007565 7F7565 -> $0080                PLLSEL:      equ $80   ; %10000000 PLL Select Bit 7
007565 7F7565 -> $0040                PSTP:        equ $40   ; %01000000 Pseudo Stop Bit 6
007565 7F7565 -> $0020                XCLKS:       equ $20   ; %00100000 Oscillator Configurtion Status bit 5
007565 7F7565 -> $0008                PLLWAI:      equ $08   ; %00001000 PLL Stops in Wait Mode Bit 3
007565 7F7565 -> $0002                RTIWAI:      equ $02   ; %00000010 RTI Stops in Wait Mode Bit 1
007565 7F7565 -> $0001                COPWAI:      equ $01   ; %00000001 COP Stops in Wait Mode Bit 0
007565 7F7565 -> $003A                PLLCTL:      equ $003A ; S12XECRG PLL Control Register (pg 478)
007565 7F7565 -> $0080                CME:         equ $80   ; %10000000 Clock Monitor Enable Bit 7
007565 7F7565 -> $0040                PLLON:       equ $40   ; %01000000 Phase Lock Loop On Bit 6
007565 7F7565 -> $0020                FM1:         equ $20   ; %00100000 IPLL Frequency Modulation Enable Bit 5
007565 7F7565 -> $0010                FM0:         equ $10   ; %00010000 IPLL Frequency Modulation Enable Bit 4
007565 7F7565 -> $0008                FSTWKP:      equ $08   ; %00001000 Fast Wake-up From Full Stop Bit 3
007565 7F7565 -> $0004                PRE:         equ $04   ; %00000100 RTI Enable During Pseudo Stop Bit 2
007565 7F7565 -> $0002                PCE:         equ $02   ; %00000010 COP Enable During Psuedo Stop Bit 1
007565 7F7565 -> $0001                SCME:        equ $01   ; %00000001 Self Clock Mode Enable Bit 0
007565 7F7565 -> $003B                RTICTL:      equ $003B ; S12XECRG RTI Control Register (pg 480)
007565 7F7565 -> $0080                RTDEC:       equ $80   ; %10000000 Decimal or Binary Divider Select Bit 7
007565 7F7565 -> $0040                RTR6:        equ $40   ; %01000000 Real Time Int Prscle Rate Select Bit 6
007565 7F7565 -> $0020                RTR5:        equ $20   ; %00100000 Real Time Int Prscle Rate Select Bit 5
007565 7F7565 -> $0010                RTR4:        equ $10   ; %00010000 Real Time Int Prscle Rate Select Bit 4
007565 7F7565 -> $0008                RTR3:        equ $08   ; %00001000 Real Time Int Mod Cntr Select Bit 3
007565 7F7565 -> $0004                RTR2:        equ $04   ; %00000100 Real Time Int Mod Cntr Select Bit 2
007565 7F7565 -> $0002                RTR1:        equ $02   ; %00000010 Real Time Int Mod Cntr Select Bit 1
007565 7F7565 -> $0001                RTR0:        equ $01   ; %00000001 Real Time Int Mod Cntr Select Bit 0
007565 7F7565 -> $003C                COPCTL:      equ $003C ; S12XSCRG COP Control Register (pg 482)
007565 7F7565 -> $0080                WCOP:        equ $80   ; Window COP Mode bit 7
007565 7F7565 -> $0040                RSBCK:       equ $40   ; COP and RTI Stop in Active BDM Mode bit 6
007565 7F7565 -> $0020                WRTMASK:     equ $20   ; Write Mask for WCOP and CR[2:0] bit 5
007565 7F7565 -> $0004                CR2:         equ $04   ; COP Watchdog Timer Rate Select bit 2
007565 7F7565 -> $0002                CR1:         equ $02   ; COP Watchdog Timer Rate Select bit 1
007565 7F7565 -> $0001                CR0:         equ $01   ; COP Watchdog Timer Rate Select bit 0
                                      ;*****************************************************************************************
                                      ; - Interrupt (S12XINTV2) equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0121                IVBR:        equ $0121 ; Interrupt Vector Base Register (pg 267)
007565 7F7565 -> $0080                IVB_ADDR7:   equ $80   ; %10000000 Interrupt Vector Base Address Bit 7
007565 7F7565 -> $0040                IVB_ADDR6:   equ $40   ; %01000000 Interrupt Vector Base Address Bit 6
007565 7F7565 -> $0020                IVB_ADDR5:   equ $20   ; %00100000 Interrupt Vector Base Address Bit 5
007565 7F7565 -> $0010                IVB_ADDR4:   equ $10   ; %00010000 Interrupt Vector Base Address Bit 4
007565 7F7565 -> $0008                IVB_ADDR3:   equ $08   ; %00001000 Interrupt Vector Base Address Bit 3
007565 7F7565 -> $0004                IVB_ADDR2:   equ $04   ; %00000100 Interrupt Vector Base Address Bit 2
007565 7F7565 -> $0002                IVB_ADDR1:   equ $02   ; %00000010 Interrupt Vector Base Address Bit 1
007565 7F7565 -> $0001                IVB_ADDR0:   equ $01   ; %00000001 Interrupt Vector Base Address Bit 0
007565 7F7565 -> $0126                INT_XGPRIO:  equ $0126 ; XGATE Int Priority Config Register (pg 267)
007565 7F7565 -> $0004                XILVL2:      equ $04   ; %00000100 XGATE Int Priority Level Bit 2
007565 7F7565 -> $0002                XILVL1:      equ $02   ; %00000010 XGATE Int Priority Level Bit 1
007565 7F7565 -> $0001                XILVL0:      equ $01   ; %00000001 XGATE Int Priority Level Bit 0
007565 7F7565 -> $0127                INT_CFADDR:  equ $0127 ; Int Request Config Addr Register (pg 268)
007565 7F7565 -> $0080                INT_CFADDR7: equ $80   ; %10000000 Int Req Config Data Reg Sel Bit 7
007565 7F7565 -> $0040                INT_CFADDR6: equ $40   ; %01000000 Int Req Config Data Reg Sel Bit 6
007565 7F7565 -> $0020                INT_CFADDR5: equ $20   ; %00100000 Int Req Config Data Reg Sel Bit 5
007565 7F7565 -> $0010                INT_CFADDR4: equ $10   ; %00010000 Int Req Config Data Reg Sel Bit 4
007565 7F7565 -> $0128                INT_CFDATA0: equ $0128 ; Interrupt Req Config Data Reg 0 (pg 269)
007565 7F7565 -> $0129                INT_CFDATA1: equ $0129 ; Interrupt Req Config Data Reg 1 (pg 269)
007565 7F7565 -> $012A                INT_CFDATA2: equ $012A ; Interrupt Req Config Data Reg 2 (pg 269)
007565 7F7565 -> $012B                INT_CFDATA3: equ $012B ; Interrupt Req Config Data Reg 3 (pg 269)
007565 7F7565 -> $012C                INT_CFDATA4: equ $012C ; Interrupt Req Config Data Reg 4 (pg 270)
007565 7F7565 -> $012D                INT_CFDATA5: equ $012D ; Interrupt Req Config Data Reg 5 (pg 270)
007565 7F7565 -> $012E                INT_CFDATA6: equ $012E ; Interrupt Req Config Data Reg 6 (pg 270)
007565 7F7565 -> $012F                INT_CFDATA7: equ $012F ; Interrupt Req Config Data Reg 7 (pg 270)
007565 7F7565 -> $0080                RQST:        equ $80   ; %10000000 XGATE Request Enable Bit 7
007565 7F7565 -> $0004                PRIOLVL2:    equ $04   ; %00000100 Int Requ Priority Level Bit 2
007565 7F7565 -> $0002                PRIOLVL1:    equ $02   ; %00000010 Int Requ Priority Level Bit 1
007565 7F7565 -> $0001                PRIOLVL0:    equ $01   ; %00000001 Int Requ Priority Level Bit 0
                                      ;*****************************************************************************************
                                      ; - Memory Mapping Control (S12XMMCV4) equates
                                      ;*****************************************************************************************
007565 7F7565 -> $000B                MODE:        equ $000B ; Mode Register (pg 195)
007565 7F7565 -> $0080                MODC:        equ $80   ; External mode pin #23 (MODC/BKGD) bit 7
007565 7F7565 -> $0040                MODB:        equ $40   ; External mode pin #37 (MODB/PE6) bit 6
007565 7F7565 -> $0020                MODA:        equ $20   ; External mode pin #38 (MODA/PE5) bit 5
                                      ;*****************************************************************************************
                                      ; - Analog to Digital Converter (ADC12B16V1) equates
                                      ;*****************************************************************************************
007565 7F7565 -> $02C0                ATD0CTL0:  equ $02C0 ; ATD0 Control Register 0 (pg 508)
007565 7F7565 -> $0008                WRAP3:     equ $08   ; %00001000 Wrap Around Channel Select Bit 3
007565 7F7565 -> $0004                WRAP2:     equ $04   ; %00000100 Wrap Around Channel Select Bit 2
007565 7F7565 -> $0002                WRAP1:     equ $02   ; %00000010 Wrap Around Channel Select Bit 1
007565 7F7565 -> $0001                WRAP0:     equ $01   ; %00000001 Wrap Around Channel Select Bit 0
007565 7F7565 -> $02C1                ATD0CTL1:   equ $02C1 ; ATD0 Control Register 1 (pg 509)
007565 7F7565 -> $0080                ETRIGSEL:  equ $80   ; %10000000 External Trigger Source Select Bit 7
007565 7F7565 -> $0040                SRES1:     equ $40   ; %01000000 A/D Resolution Select bit 6
007565 7F7565 -> $0020                SRES0:     equ $20   ; %00100000 A/D Resolution Select bit 5
007565 7F7565 -> $0010                SMP_DIS:   equ $10   ; %00010000 Discharge Before Sampling bit 4
007565 7F7565 -> $0008                ETRIGCH3:  equ $08   ; %00001000 External Trigger Channel Select Bit 3
007565 7F7565 -> $0004                ETRIGCH2:  equ $04   ; %00000100 External Trigger Channel Select Bit 2
007565 7F7565 -> $0002                ETRIGCH1:  equ $02   ; %00000010 External Trigger Channel Select Bit 1
007565 7F7565 -> $0001                ETRIGCH0:  equ $01   ; %00000001 External Trigger Channel Select Bit 0
007565 7F7565 -> $02C2                ATD0CTL2:   equ $02C2 ; ATD0 Control Register 2 (pg 511)
007565 7F7565 -> $0040                AFFC:      equ $40   ; %01000000 ATD Fast Flag Clear All Bit 6
007565 7F7565 -> $0020                ICLKSTP:   equ $20   ; %00100000 Internal Clock in Stop Mode bit 5
007565 7F7565 -> $0010                ETRIGLE:   equ $10   ; %00010000 External Trigger Level/Edge Control Bit 4
007565 7F7565 -> $0008                ETRIGP:    equ $08   ; %00001000 External Trigger Polarity Bit 3
007565 7F7565 -> $0004                ETRIGE:    equ $04   ; %00000100 External Trigger Mode Enable Bit 2
007565 7F7565 -> $0002                ASCIE:     equ $02   ; %00000010 ATD Seq Complete Interrupt Enable Bit 1
007565 7F7565 -> $0001                ACMPIE:    equ $01   ; %00000001  ATD Compare Interrupt Enable bit 0
007565 7F7565 -> $02C3                ATD0CTL3:   equ $02C3 ; ATD0 Control Register 3 (pg 512)
007565 7F7565 -> $0080                DJM:       equ $80   ; %10000000 Result Register Data Justification bit 7
007565 7F7565 -> $0040                S8C:       equ $40   ; %01000000 Conversion Sequence Length bit 6
007565 7F7565 -> $0020                S4C:       equ $20   ; %00100000 Conversion Sequence Length bit 5
007565 7F7565 -> $0010                S2C:       equ $10   ; %00010000 Conversion Sequence Length bit 4
007565 7F7565 -> $0008                S1C:       equ $08   ; %00001000 Conversion Sequence Length bit 3
007565 7F7565 -> $0004                FIFO:      equ $04   ; %00000100 Result Register FIFO Mode bit 2
007565 7F7565 -> $0002                FRZ1:      equ $02   ; %00000010 Background Debug Freeze Enable bit 1
007565 7F7565 -> $0001                FRZ0:      equ $01   ; %00000001 Background Debug Freeze Enable bit 0
007565 7F7565 -> $02C4                ATD0CTL4:   equ $02C4 ; ATD0 Control Register 4 (pg 514)
007565 7F7565 -> $0080                SMP2:      equ $80   ; %10000000 Sample Time Select Bit 7
007565 7F7565 -> $0040                SMP1:      equ $40   ; %01000000 Sample Time Select Bit 6
007565 7F7565 -> $0020                SMP0:      equ $20   ; %00100000 Sample Time Select Bit 5
007565 7F7565 -> $0010                PRS4:      equ $10   ; %00010000 ATD Clock Prescaler Bit 4
007565 7F7565 -> $0008                PRS3:      equ $08   ; %00001000 ATD Clock Prescaler Bit 3
007565 7F7565 -> $0004                PRS2:      equ $04   ; %00000100 ATD Clock Prescaler Bit 2
007565 7F7565 -> $0002                PRS1:      equ $02   ; %00000010 ATD Clock Prescaler Bit 1
007565 7F7565 -> $0001                PRS0:      equ $01   ; %00000001 ATD Clock Prescaler Bit 0
007565 7F7565 -> $02C5                ATD0CTL5:   equ $02C5 ; ATD0 Control Register 5 (pg 515)
007565 7F7565 -> $0040                SC:        equ $40   ; %01000000 Special Channel Conversion bit 6
007565 7F7565 -> $0020                SCAN:      equ $20   ; %00100000 Continous Conversion Sequence Mode Bit 5
007565 7F7565 -> $0010                MULT:      equ $10   ; %00010000 Multi-Channel Sample Mode Bit 4
007565 7F7565 -> $0008                CD:        equ $08   ; %00001000 Analog Input Channel Select Code Bit 3
007565 7F7565 -> $0004                CC:        equ $04   ; %00000100 Analog Input Channel Select Code Bit 2
007565 7F7565 -> $0002                CB:        equ $02   ; %00000010 Analog Input Channel Select Code Bit 1
007565 7F7565 -> $0001                CA:        equ $01   ; %00000001 Analog Input Channel Select Code Bit 0
007565 7F7565 -> $02C6                ATD0STAT0:  equ $02C6 ; ATD0 Status Register 0 (pg 517)
007565 7F7565 -> $0080                SCF:       equ $80   ; %10000000 Sequence Complete Flag Bit 7
007565 7F7565 -> $0020                ETORF:     equ $20   ; %00100000 External Trigger Overrun Flag Bit 5
007565 7F7565 -> $0010                FIFOR:     equ $10   ; %00010000 Result Register Over Run Flag Bit 4
007565 7F7565 -> $0008                CC3:       equ $08   ; %00001000 Conversion Counter Bit 3
007565 7F7565 -> $0004                CC2:       equ $04   ; %00000100 Conversion Counter Bit 2
007565 7F7565 -> $0002                CC1:       equ $02   ; %00000010 Conversion Counter Bit 1
007565 7F7565 -> $0001                CC0:       equ $01   ; %00000001 Conversion Counter Bit 0
                                      ;$02C7 reserved
007565 7F7565 -> $02C8                ATD0CMPEH: equ $02C8 ; ATD0 Compare Enable Register Hi Byte (pg 518)
007565 7F7565 -> $0080                CMPE15:   equ $80   ; Compare Enable for Conversion Number n bit 15
007565 7F7565 -> $0040                CMPE14:   equ $40   ; Compare Enable for Conversion Number n bit 14
007565 7F7565 -> $0020                CMPE13:   equ $20   ; Compare Enable for Conversion Number n bit 13
007565 7F7565 -> $0010                CMPE12:   equ $10   ; Compare Enable for Conversion Number n bit 12
007565 7F7565 -> $0008                CMPE11:   equ $08   ; Compare Enable for Conversion Number n bit 11
007565 7F7565 -> $0004                CMPE10:   equ $04   ; Compare Enable for Conversion Number n bit 10
007565 7F7565 -> $0002                CMPE9:    equ $02   ; Compare Enable for Conversion Number n bit 9
007565 7F7565 -> $0001                CMPE8:    equ $01   ; Compare Enable for Conversion Number n bit 8
007565 7F7565 -> $02C9                ATD0CMPEL: equ $02C9 ; ATD0 Compare Enable Register Lo Byte (pg 518)
007565 7F7565 -> $0080                CMPE7:    equ $80   ; Compare Enable for Conversion Number n bit 7
007565 7F7565 -> $0040                CMPE6:    equ $40   ; Compare Enable for Conversion Number n bit 6
007565 7F7565 -> $0020                CMPE5:    equ $20   ; Compare Enable for Conversion Number n bit 5
007565 7F7565 -> $0010                CMPE4:    equ $10   ; Compare Enable for Conversion Number n bit 4
007565 7F7565 -> $0008                CMPE3:    equ $08   ; Compare Enable for Conversion Number n bit 3
007565 7F7565 -> $0004                CMPE2:    equ $04   ; Compare Enable for Conversion Number n bit 2
007565 7F7565 -> $0002                CMPE1:    equ $02   ; Compare Enable for Conversion Number n bit 1
007565 7F7565 -> $0001                CMPE0:    equ $01   ; Compare Enable for Conversion Number n bit 0
007565 7F7565 -> $02CA                ATD0STAT2H: equ $02CA ; ATD0 Status Register 2 Hi Byte (pg 520)
007565 7F7565 -> $0080                CCF15:    equ $80   ; Conversion Complete Flag n bit 15
007565 7F7565 -> $0040                CCF14:    equ $40   ; Conversion Complete Flag n bit 14
007565 7F7565 -> $0020                CCF13:    equ $20   ; Conversion Complete Flag n bit 13
007565 7F7565 -> $0010                CCF12:    equ $10   ; Conversion Complete Flag n bit 12
007565 7F7565 -> $0008                CCF11:    equ $08   ; Conversion Complete Flag n bit 11
007565 7F7565 -> $0004                CCF10:    equ $04   ; Conversion Complete Flag n bit 10
007565 7F7565 -> $0002                CCF9:     equ $02   ; Conversion Complete Flag n bit 9
007565 7F7565 -> $0001                CCF8:     equ $01   ; Conversion Complete Flag n bit 8
007565 7F7565 -> $02CB                ATD0STAT2L: equ $02CB ; ATD0 Status Register 2 Lo Byte (pg 520)
007565 7F7565 -> $0080                CCF7:     equ $80   ; Conversion Complete Flag n bit 7
007565 7F7565 -> $0040                CCF6:     equ $40   ; Conversion Complete Flag n bit 6
007565 7F7565 -> $0020                CCF5:     equ $20   ; Conversion Complete Flag n bit 5
007565 7F7565 -> $0010                CCF4:     equ $10   ; Conversion Complete Flag n bit 4
007565 7F7565 -> $0008                CCF3:     equ $08   ; Conversion Complete Flag n bit 3
007565 7F7565 -> $0004                CCF2:     equ $04   ; Conversion Complete Flag n bit 2
007565 7F7565 -> $0002                CCF1:     equ $02   ; Conversion Complete Flag n bit 1
007565 7F7565 -> $0001                CCF0:     equ $01   ; Conversion Complete Flag n bit 0
007565 7F7565 -> $02CC                ATD0DIENH: equ $02CC ; ATD0 Input Enable Register Hi Byte (pg 521)
                                                          ; 1 = enable digital input buffer, 0 = disable digital input buffer
007565 7F7565 -> $0080                IEN15:    equ $80   ; %10000000 ATD Digital Input Enable on Channel Bit 7
007565 7F7565 -> $0040                IEN14:    equ $40   ; %01000000 ATD Digital Input Enable on Channel Bit 6
007565 7F7565 -> $0020                IEN13:    equ $20   ; %00100000 ATD Digital Input Enable on Channel Bit 5
007565 7F7565 -> $0010                IEN12:    equ $10   ; %00010000 ATD Digital Input Enable on Channel Bit 4
007565 7F7565 -> $0008                IEN11:    equ $08   ; %00001000 ATD Digital Input Enable on Channel Bit 3
007565 7F7565 -> $0004                IEN10:    equ $04   ; %00000100 ATD Digital Input Enable on Channel Bit 2
007565 7F7565 -> $0002                IEN9:     equ $02   ; %00000010 ATD Digital Input Enable on Channel Bit 1
007565 7F7565 -> $0001                IEN8:     equ $01   ; %00000001 ATD Digital Input Enable on Channel Bit 0
007565 7F7565 -> $02CD                ATD0DIENL: equ $02CD ; ATD0 Input Enable Register Lo Byte (pg 521)
                                                          ; 1 = enable digital input buffer, 0 = disable digital input buffer
007565 7F7565 -> $0080                IEN7:     equ $80   ; %10000000 ATD Digital Input Enable on Channel Bit 7
007565 7F7565 -> $0040                IEN6:     equ $40   ; %01000000 ATD Digital Input Enable on Channel Bit 6
007565 7F7565 -> $0020                IEN5:     equ $20   ; %00100000 ATD Digital Input Enable on Channel Bit 5
007565 7F7565 -> $0010                IEN4:     equ $10   ; %00010000 ATD Digital Input Enable on Channel Bit 4
007565 7F7565 -> $0008                IEN3:     equ $08   ; %00001000 ATD Digital Input Enable on Channel Bit 3
007565 7F7565 -> $0004                IEN2:     equ $04   ; %00000100 ATD Digital Input Enable on Channel Bit 2
007565 7F7565 -> $0002                IEN1:     equ $02   ; %00000010 ATD Digital Input Enable on Channel Bit 1
007565 7F7565 -> $0001                IEN0:     equ $01   ; %00000001 ATD Digital Input Enable on Channel Bit 0
007565 7F7565 -> $02CE                ATD0CMPHTH: equ $02CE ; ATD0 Compare Higher Than Register Hi Byte (pg 521)
007565 7F7565 -> $0080                CMPHT15:  equ $80   ; Compare Operation Higher Than Enable for conversion number n bit 15
007565 7F7565 -> $0040                CMPHT14:  equ $40   ; Compare Operation Higher Than Enable for conversion number n bit 14
007565 7F7565 -> $0020                CMPHT13:  equ $20   ; Compare Operation Higher Than Enable for conversion number n bit 13
007565 7F7565 -> $0010                CMPHT12:  equ $10   ; Compare Operation Higher Than Enable for conversion number n bit 12
007565 7F7565 -> $0008                CMPHT11:  equ $08   ; Compare Operation Higher Than Enable for conversion number n bit 11
007565 7F7565 -> $0004                CMPHT10:  equ $04   ; Compare Operation Higher Than Enable for conversion number n bit 10
007565 7F7565 -> $0002                CMPHT9:   equ $02   ; Compare Operation Higher Than Enable for conversion number n bit 9
007565 7F7565 -> $0001                CMPHT8:   equ $01   ; Compare Operation Higher Than Enable for conversion number n bit 8
007565 7F7565 -> $02CF                ATD0CMPHTL: equ $02CF ; ATD0 Compare Higher Than Register Lo Byte (pg 521)
007565 7F7565 -> $0080                CMPHT7:   equ $80   ; Compare Operation Higher Than Enable for conversion number n bit 7
007565 7F7565 -> $0040                CMPHT6:   equ $40   ; Compare Operation Higher Than Enable for conversion number n bit 6
007565 7F7565 -> $0020                CMPHT5:   equ $20   ; Compare Operation Higher Than Enable for conversion number n bit 5
007565 7F7565 -> $0010                CMPHT4:   equ $10   ; Compare Operation Higher Than Enable for conversion number n bit 4
007565 7F7565 -> $0008                CMPHT3:   equ $08   ; Compare Operation Higher Than Enable for conversion number n bit 3
007565 7F7565 -> $0004                CMPHT2:   equ $04   ; Compare Operation Higher Than Enable for conversion number n bit 2
007565 7F7565 -> $0002                CMPHT1:   equ $02   ; Compare Operation Higher Than Enable for conversion number n bit 1
007565 7F7565 -> $0001                CMPHT0:   equ $01   ; Compare Operation Higher Than Enable for conversion number n bit 0
007565 7F7565 -> $02D0                ATD0DR0H:  equ $02D0 ; ATD0 Conversion Result Register 0 Hi Byte (pg 522)
007565 7F7565 -> $02D1                ATD0DR0L:  equ $02D1 ; ATD0 Conversion Result Register 0 Lo Byte (pg 522)
007565 7F7565 -> $02D2                ATD0DR1H:  equ $02D2 ; ATD0 Conversion Result Register 1 Hi Byte (pg 522)
007565 7F7565 -> $02D3                ATD0DR1L:  equ $02D3 ; ATD0 Conversion Result Register 1 Lo Byte (pg 522)
007565 7F7565 -> $02D4                ATD0DR2H:  equ $02D4 ; ATD0 Conversion Result Register 2 Hi Byte (pg 522)
007565 7F7565 -> $02D5                ATD0DR2L:  equ $02D5 ; ATD0 Conversion Result Register 2 Lo Byte (pg 522)
007565 7F7565 -> $02D6                ATD0DR3H:  equ $02D6 ; ATD0 Conversion Result Register 3 Hi Byte (pg 522)
007565 7F7565 -> $02D7                ATD0DR3L:  equ $02D7 ; ATD0 Conversion Result Register 3 Lo Byte (pg 522)
007565 7F7565 -> $02D8                ATD0DR4H:  equ $02D8 ; ATD0 Conversion Result Register 4 Hi Byte (pg 522)
007565 7F7565 -> $02D9                ATD0DR4L:  equ $02D9 ; ATD0 Conversion Result Register 4 Lo Byte (pg 522)
007565 7F7565 -> $02DA                ATD0DR5H:  equ $02DA ; ATD0 Conversion Result Register 5 Hi Byte (pg 522)
007565 7F7565 -> $02DB                ATD0DR5L:  equ $02DB ; ATD0 Conversion Result Register 5 Lo Byte (pg 522)
007565 7F7565 -> $02DC                ATD0DR6H:  equ $02DC ; ATD0 Conversion Result Register 6 Hi Byte (pg 522)
007565 7F7565 -> $02DD                ATD0DR6L:  equ $02DD ; ATD0 Conversion Result Register 6 Lo Byte (pg 522)
007565 7F7565 -> $02DE                ATD0DR7H:  equ $02DE ; ATD0 Conversion Result Register 7 Hi Byte (pg 522)
007565 7F7565 -> $02DF                ATD0DR7L:  equ $02DF ; ATD0 Conversion Result Register 7 Lo Byte (pg 522)
007565 7F7565 -> $02E0                ATD0DR8H:  equ $02E0 ; ATD0 Conversion Result Register 8 Hi Byte (pg 522)
007565 7F7565 -> $02E1                ATD0DR8L:  equ $02E1 ; ATD0 Conversion Result Register 8 Lo Byte (pg 522)
007565 7F7565 -> $02E2                ATD0DR9H:  equ $02E2 ; ATD0 Conversion Result Register 9 Hi Byte (pg 522)
007565 7F7565 -> $02E3                ATD0DR9L:  equ $02E3 ; ATD0 Conversion Result Register 9 Lo Byte (pg 522)
007565 7F7565 -> $02E4                ATD0DR10H:  equ $02E4 ; ATD0 Conversion Result Register 10 Hi Byte (pg 522)
007565 7F7565 -> $02E5                ATD0DR10L:  equ $02E5 ; ATD0 Conversion Result Register 10 Lo Byte (pg 522)
007565 7F7565 -> $02E6                ATD0DR11H:  equ $02E6 ; ATD0 Conversion Result Register 11 Hi Byte (pg 522)
007565 7F7565 -> $02E7                ATD0DR11L:  equ $02E7 ; ATD0 Conversion Result Register 11 Lo Byte (pg 522)
007565 7F7565 -> $02E8                ATD0DR12H:  equ $02E8 ; ATD0 Conversion Result Register 12 Hi Byte (pg 522)
007565 7F7565 -> $02E9                ATD0DR12L:  equ $02E9 ; ATD0 Conversion Result Register 12 Lo Byte (pg 522)
007565 7F7565 -> $02EA                ATD0DR13H:  equ $02EA ; ATD0 Conversion Result Register 13 Hi Byte (pg 522)
007565 7F7565 -> $02EB                ATD0DR13L:  equ $02EB ; ATD0 Conversion Result Register 13 Lo Byte (pg 522)
007565 7F7565 -> $02EC                ATD0DR14H:  equ $02EC ; ATD0 Conversion Result Register 14 Hi Byte (pg 522)
007565 7F7565 -> $02ED                ATD0DR14L:  equ $02ED ; ATD0 Conversion Result Register 14 Lo Byte (pg 522)
007565 7F7565 -> $02EE                ATD0DR15H:  equ $02EE ; ATD0 Conversion Result Register 15 Hi Byte (pg 522)
007565 7F7565 -> $02EF                ATD0DR15L:  equ $02EF ; ATD0 Conversion Result Register 15 Lo Byte (pg 522)
                                      ;*****************************************************************************************
                                      ; - Serial Communications Interface (S12SCIV5) equates
                                      ;*****************************************************************************************
007565 7F7565 -> $00C8                SCI0BDH:   equ $00C8 ; SCI0 Baud Rate Register Hi Byte (pg 728)
007565 7F7565 -> $0080                IREN:      equ $80   ; %10000000 Infrared Enable Bit 7
007565 7F7565 -> $0040                TNP1:      equ $40   ; %01000000 Transmitter Narrow Pulse Bit 6
007565 7F7565 -> $0020                TNP0:      equ $20   ; %00100000 Transmitter Narrow Pulse Bit 5
007565 7F7565 -> $0010                SBR12:     equ $10   ; %00010000 SCI Baud Rate Bit 4
007565 7F7565 -> $0008                SBR11:     equ $08   ; %00001000 SCI Baud Rate Bit 3
007565 7F7565 -> $0004                SBR10:     equ $04   ; %00000100 SCI Baud Rate Bit 2
007565 7F7565 -> $0002                SBR9:      equ $02   ; %00000010 SCI Baud Rate Bit 1
007565 7F7565 -> $0001                SBR8:      equ $01   ; %00000001 SCI Baud Rate Bit 0
007565 7F7565 -> $00C9                SCI0BDL:   equ $00C9 ; SCI0 Baud Rate Register Lo Byte (pg 728
007565 7F7565 -> $0080                SBR7:      equ $80   ; %10000000 SCI Baud Rate Bit 7
007565 7F7565 -> $0040                SBR6:      equ $40   ; %01000000 SCI Baud Rate Bit 6
007565 7F7565 -> $0020                SBR5:      equ $20   ; %00100000 SCI Baud Rate Bit 5
007565 7F7565 -> $0010                SBR4:      equ $10   ; %00010000 SCI Baud Rate Bit 4
007565 7F7565 -> $0008                SBR3:      equ $08   ; %00001000 SCI Baud Rate Bit 3
007565 7F7565 -> $0004                SBR2:      equ $04   ; %00000100 SCI Baud Rate Bit 2
007565 7F7565 -> $0002                SBR1:      equ $02   ; %00000010 SCI Baud Rate Bit 1
007565 7F7565 -> $0001                SBR0:      equ $01   ; %00000001 SCI Baud Rate Bit 0
007565 7F7565 -> $00CA                SCI0CR1:   equ $00CA ; SCI0 Control Register 1 (pg 729)
007565 7F7565 -> $0080                LOOPS:     equ $80   ; %10000000 Loop Select Bit 7
007565 7F7565 -> $0040                SCISWAI:   equ $40   ; %01000000 SCI Stop in Wait Mode Bit 6
007565 7F7565 -> $0020                RSRC:      equ $20   ; %00100000 Receiver Source Bit 5
007565 7F7565 -> $0010                M:         equ $10   ; %00010000 Data Format Mode Bit 4
007565 7F7565 -> $0008                WAKE:      equ $08   ; %00001000 Wakeup Condition Bit 3
007565 7F7565 -> $0004                ILT:       equ $04   ; %00000100 Idle Line Type Bit 2
007565 7F7565 -> $0002                PE:        equ $02   ; %00000010 Parity Enable Bit 1
007565 7F7565 -> $0001                PT:        equ $01   ; %00000001 Parity Type Bit 0
007565 7F7565 -> $00CB                SCI0CR2:   equ $00CB ; SCI0 Control Register 2 (pg 734)
007565 7F7565 -> $0080                TXIE:      equ $80   ; %10000000 Transmitter Interrupt Enable Bit 7
007565 7F7565 -> $0040                TCIE:      equ $40   ; %01000000 Transmission Complete Int En Bit 6
007565 7F7565 -> $0020                RIE:       equ $20   ; %00100000 Receiver Full Interrupt Enable Bit 5
007565 7F7565 -> $0010                ILIE:      equ $10   ; %00010000 Idle Line Interrupt Enable Bit 4
007565 7F7565 -> $0008                TE:        equ $08   ; %00001000 Transmitter Enable Bit 3
007565 7F7565 -> $0004                RE:        equ $04   ; %00000100 Receiver Enable Bit 2
007565 7F7565 -> $0002                RWU:       equ $02   ; %00000010 Receiver Wakeup Bit 1
007565 7F7565 -> $0001                SBK:       equ $01   ; %00000001 Send Break Bit 0
007565 7F7565 -> $00CC                SCI0SR1:   equ $00CC ; SCI0 Status Register 1 (pg 735)
007565 7F7565 -> $0080                TDRE:      equ $80   ; %10000000 Transmit Data Register Empty Flag Bit 7
007565 7F7565 -> $0040                TC:        equ $40   ; %01000000 Transmit Complete Bit 6
007565 7F7565 -> $0020                RDRF:      equ $20   ; %00100000 Receive Data Register Full Flag Bit 5
007565 7F7565 -> $0010                IDLE:      equ $10   ; %00010000 Idle Line Flag Bit 4
007565 7F7565 -> $0008                OR:        equ $08   ; %00001000 Overrun Flag Bit 3
007565 7F7565 -> $0004                NF:        equ $04   ; %00000100 Noise Flag Bit 2
007565 7F7565 -> $0002                FE:        equ $02   ; %00000010 Framing Error Flag Bit 1
007565 7F7565 -> $0001                PF:        equ $01   ; %00000001 Parity Error Flag Bit 0
007565 7F7565 -> $00CE                SCI0DRH:   equ $00CE ; SCI0 Data Register Hi byte (pg 738)
007565 7F7565 -> $0080                R8:        equ $80   ; %10000000 bit 7
007565 7F7565 -> $0040                T8:        equ $40   ; 010000000 bit 6
007565 7F7565 -> $00CF                SCI0DRL:   equ $00CF ; SCI0 Data Register Lo Byte (pg 738)
007565 7F7565 -> $0080                R7:        equ $80   ; %10000000 Receive Bit 7
007565 7F7565 -> $0040                R6:        equ $40   ; %01000000 Receive Bit 6
007565 7F7565 -> $0020                R5:        equ $20   ; %00100000 Receive Bit 5
007565 7F7565 -> $0010                R4:        equ $10   ; %00010000 Receive Bit 4
007565 7F7565 -> $0008                R3:        equ $08   ; %00001000 Receive Bit 3
007565 7F7565 -> $0004                R2:        equ $04   ; %00000100 Receive Bit 2
007565 7F7565 -> $0002                R1:        equ $02   ; %00000010 Receive Bit 1
007565 7F7565 -> $0001                R0:        equ $01   ; %00000001 Receive Bit 0
007565 7F7565 -> $0080                T7:        equ $80   ; %10000000 Transmit Bit 7
007565 7F7565 -> $0040                T6:        equ $40   ; %01000000 Transmit Bit 6
007565 7F7565 -> $0020                T5:        equ $20   ; %00100000 Transmit Bit 5
007565 7F7565 -> $0010                T4:        equ $10   ; %00010000 Transmit Bit 4
007565 7F7565 -> $0008                T3:        equ $08   ; %00001000 Transmit Bit 3
007565 7F7565 -> $0004                T2:        equ $04   ; %00000100 Transmit Bit 2
007565 7F7565 -> $0002                T1:        equ $02   ; %00000010 Transmit Bit 1
007565 7F7565 -> $0001                T0:        equ $01   ; %00000001 Transmit Bit 0
007565 7F7565 -> $00D0                SCI1BDH:   equ $00D0 ; SCI1 Baud Rate Register Hi Byte (pg 728)
007565 7F7565 -> $0080                IREN:      equ $80   ; %10000000 Infrared Enable Bit 7
007565 7F7565 -> $0040                TNP1:      equ $40   ; %01000000 Transmitter Narrow Pulse Bit 6
007565 7F7565 -> $0020                TNP0:      equ $20   ; %00100000 Transmitter Narrow Pulse Bit 5
007565 7F7565 -> $0010                SBR12:     equ $10   ; %00010000 SCI Baud Rate Bit 4
007565 7F7565 -> $0008                SBR11:     equ $08   ; %00001000 SCI Baud Rate Bit 3
007565 7F7565 -> $0004                SBR10:     equ $04   ; %00000100 SCI Baud Rate Bit 2
007565 7F7565 -> $0002                SBR9:      equ $02   ; %00000010 SCI Baud Rate Bit 1
007565 7F7565 -> $0001                SBR8:      equ $01   ; %00000001 SCI Baud Rate Bit 0
007565 7F7565 -> $00D1                SCI1BDL:   equ $00D1 ; SCI1 Baud Rate Register Lo Byte (pg 728
007565 7F7565 -> $0080                SBR7:      equ $80   ; %10000000 SCI Baud Rate Bit 7
007565 7F7565 -> $0040                SBR6:      equ $40   ; %01000000 SCI Baud Rate Bit 6
007565 7F7565 -> $0020                SBR5:      equ $20   ; %00100000 SCI Baud Rate Bit 5
007565 7F7565 -> $0010                SBR4:      equ $10   ; %00010000 SCI Baud Rate Bit 4
007565 7F7565 -> $0008                SBR3:      equ $08   ; %00001000 SCI Baud Rate Bit 3
007565 7F7565 -> $0004                SBR2:      equ $04   ; %00000100 SCI Baud Rate Bit 2
007565 7F7565 -> $0002                SBR1:      equ $02   ; %00000010 SCI Baud Rate Bit 1
007565 7F7565 -> $0001                SBR0:      equ $01   ; %00000001 SCI Baud Rate Bit 0
007565 7F7565 -> $00D2                SCI1CR1:   equ $00D2 ; SCI1 Control Register 1 (pg 729)
007565 7F7565 -> $0080                LOOPS:     equ $80   ; %10000000 Loop Select Bit 7
007565 7F7565 -> $0040                SCISWAI:   equ $40   ; %01000000 SCI Stop in Wait Mode Bit 6
007565 7F7565 -> $0020                RSRC:      equ $20   ; %00100000 Receiver Source Bit 5
007565 7F7565 -> $0010                M:         equ $10   ; %00010000 Data Format Mode Bit 4
007565 7F7565 -> $0008                WAKE:      equ $08   ; %00001000 Wakeup Condition Bit 3
007565 7F7565 -> $0004                ILT:       equ $04   ; %00000100 Idle Line Type Bit 2
007565 7F7565 -> $0002                PE:        equ $02   ; %00000010 Parity Enable Bit 1
007565 7F7565 -> $0001                PT:        equ $01   ; %00000001 Parity Type Bit 0
007565 7F7565 -> $00D3                SCI1CR2:   equ $00D3 ; SCI1 Control Register 2 (pg 734)
007565 7F7565 -> $0080                TXIE:      equ $80   ; %10000000 Transmitter Interrupt Enable Bit 7
007565 7F7565 -> $0040                TCIE:      equ $40   ; %01000000 Transmission Complete Int En Bit 6
007565 7F7565 -> $0020                RIE:       equ $20   ; %00100000 Receiver Full Interrupt Enable Bit 5
007565 7F7565 -> $0010                ILIE:      equ $10   ; %00010000 Idle Line Interrupt Enable Bit 4
007565 7F7565 -> $0008                TE:        equ $08   ; %00001000 Transmitter Enable Bit 3
007565 7F7565 -> $0004                RE:        equ $04   ; %00000100 Receiver Enable Bit 2
007565 7F7565 -> $0002                RWU:       equ $02   ; %00000010 Receiver Wakeup Bit 1
007565 7F7565 -> $0001                SBK:       equ $01   ; %00000001 Send Break Bit 0
007565 7F7565 -> $00D4                SCI1SR1:   equ $00D4 ; SCI1 Status Register 1 (pg 735)
007565 7F7565 -> $0080                TDRE:      equ $80   ; %10000000 Transmit Data Register Empty Flag Bit 7
007565 7F7565 -> $0040                TC:        equ $40   ; %01000000 Transmit Complete Bit 6
007565 7F7565 -> $0020                RDRF:      equ $20   ; %00100000 Receive Data Register Full Flag Bit 5
007565 7F7565 -> $0010                IDLE:      equ $10   ; %00010000 Idle Line Flag Bit 4
007565 7F7565 -> $0008                OR:        equ $08   ; %00001000 Overrun Flag Bit 3
007565 7F7565 -> $0004                NF:        equ $04   ; %00000100 Noise Flag Bit 2
007565 7F7565 -> $0002                FE:        equ $02   ; %00000010 Framing Error Flag Bit 1
007565 7F7565 -> $0001                PF:        equ $01   ; %00000001 Parity Error Flag Bit 0
007565 7F7565 -> $00D6                SCI1DRH:   equ $00D6 ; SCI1 Data Register Hi byte (pg 738)
007565 7F7565 -> $0080                R8:        equ $80   ; %10000000 bit 7
007565 7F7565 -> $0040                T8:        equ $40   ; 010000000 bit 6
007565 7F7565 -> $00D7                SCI1DRL:   equ $00D7 ; SCI1 Data Register Lo Byte (pg 738)
007565 7F7565 -> $0080                R7:        equ $80   ; %10000000 Receive Bit 7
007565 7F7565 -> $0040                R6:        equ $40   ; %01000000 Receive Bit 6
007565 7F7565 -> $0020                R5:        equ $20   ; %00100000 Receive Bit 5
007565 7F7565 -> $0010                R4:        equ $10   ; %00010000 Receive Bit 4
007565 7F7565 -> $0008                R3:        equ $08   ; %00001000 Receive Bit 3
007565 7F7565 -> $0004                R2:        equ $04   ; %00000100 Receive Bit 2
007565 7F7565 -> $0002                R1:        equ $02   ; %00000010 Receive Bit 1
007565 7F7565 -> $0001                R0:        equ $01   ; %00000001 Receive Bit 0
007565 7F7565 -> $0080                T7:        equ $80   ; %10000000 Transmit Bit 7
007565 7F7565 -> $0040                T6:        equ $40   ; %01000000 Transmit Bit 6
007565 7F7565 -> $0020                T5:        equ $20   ; %00100000 Transmit Bit 5
007565 7F7565 -> $0010                T4:        equ $10   ; %00010000 Transmit Bit 4
007565 7F7565 -> $0008                T3:        equ $08   ; %00001000 Transmit Bit 3
007565 7F7565 -> $0004                T2:        equ $04   ; %00000100 Transmit Bit 2
007565 7F7565 -> $0002                T1:        equ $02   ; %00000010 Transmit Bit 1
007565 7F7565 -> $0001                T0:        equ $01   ; %00000001 Transmit Bit 0
                                      ;*****************************************************************************************
                                      ; - Serial Peripherial Interface (S12SPIV5) equates
                                      ;*****************************************************************************************
007565 7F7565 -> $00D8                SPI0CR1:   equ $00D8 ; SPI0 Control Register (page 765)
007565 7F7565 -> $0080                SPIE:      equ $80   ; %10000000 SPI Interrupt Enable Bit 7
007565 7F7565 -> $0040                SPE:       equ $40   ; %01000000 SPI System Enable Bit 6
007565 7F7565 -> $0020                SPTIE:     equ $20   ; %00100000 SPI Tansmit Interrupt Enable Bit 5
007565 7F7565 -> $0010                MSTR:      equ $10   ; %00010000 SPI Master/Slave Mode Select Bit 4
007565 7F7565 -> $0008                CPOL:      equ $08   ; %00001000 SPI Clock Polarity  Bit 3
007565 7F7565 -> $0004                CPHA:      equ $04   ; %00000100 SPI Clock Phase Bit 2
007565 7F7565 -> $0002                SSOE:      equ $02   ; %00000010 Slave Select Output Enable Bit 1
007565 7F7565 -> $0001                LSBFE:     equ $01   ; %00000001 LSB-First Enable Bit 0
007565 7F7565 -> $00D9                SPI0CR2:  equ $00D9  ; SPI0 Control Register 2 (page 766)
                                      ;U/I:     equ $80    ; %10000000 Unimplemented Bit 7
007565 7F7565 -> $0040                XFRW:     equ $40    ; %01000000 Transfer Width Bit 6
                                      ;U/I:     equ $20    ; %00100000 Unimplemented Bit 5
007565 7F7565 -> $0010                MODFN:    equ $10    ; %00010000 Mode Fault Enable Bit 4
007565 7F7565 -> $0008                BIDIROE:  equ $08    ; %00001000 Output Enable in the Bidirectionsal Mode of Opersation  Bit 3
                                      ;U/I:     equ $04    ; %00000100 Unimplemented Bit 2
007565 7F7565 -> $0002                SPISWAI:  equ $02    ; %00000010 SPI Stop in Wait Mode Bit 1
007565 7F7565 -> $0001                SPCO:     equ $01    ; %00000001 Serial Pin Control Bit 0
007565 7F7565 -> $00DA                SPI0BR:   equ $00DA  ; SPI0 Baud Rate Register (page 768)
                                      ;U/I:     equ $80    ; %10000000 Unimplemented Bit 7
007565 7F7565 -> $0040                SPPR2:    equ $40    ; %01000000 SPI Baud Rate Preselection Bit 6
007565 7F7565 -> $0020                SPPR1:    equ $20    ; %00100000 SPI Baud Rate Preselection Bit 5
007565 7F7565 -> $0010                SPPR0:    equ $10    ; %00010000 SPI Baud Rate Preselection Bit 4
                                      ;U/I:     equ $08    ; %00001000 Unimplemented  Bit 3
007565 7F7565 -> $0004                SPR2:     equ $04    ; %00000100 SPI Baud Rate Selection Bit 2
007565 7F7565 -> $0002                SPR1:     equ $02    ; %00000010 SPI Baud Rate Selection Bit 1
007565 7F7565 -> $0001                SPR0:     equ $01    ; %00000001 SPI Baud Rate Selection Bit 0
007565 7F7565 -> $00DB                SPI0SR:   equ $00DB  ; SPI0 Status Register (page 770)
007565 7F7565 -> $0080                SPIF:     equ $80    ; %10000000 SPIF Interrupt Flag Bit 7
                                      ;U/I:     equ $40    ; %01000000 Unimplemented Bit 6
007565 7F7565 -> $0020                SPTEF:    equ $20    ; %00100000 SPI Transmit Empty Interrupt Flag Bit 5
007565 7F7565 -> $0010                MODF:     equ $10    ; %00010000 Mode Fault Flag Bit 4
                                      ;U/I:     equ $08    ; %00001000 Unimplemented  Bit 3
                                      ;U/I:     equ $04    ; %00000100 Unimplemented Bit 2
                                      ;U/I:     equ $02    ; %00000010 Unimplemented Bit 1
                                      ;U/I:     equ $01    ; %00000001 Unimplemented Bit 0
007565 7F7565 -> $00DC                SPI0DRH:  equ $00DC  ; SPI0 Data Register Hi Byte(page 772)
                                      ;R15:     equ $80    ; %10000000 SPI Data Bit 15
                                      ;R14:     equ $40    ; %01000000 SPI Data Bit 14
                                      ;R13:     equ $20    ; %00100000 SPI Data Bit 13
                                      ;R12:     equ $10    ; %00010000 SPI Data Bit 12
                                      ;R11:     equ $08    ; %00001000 SPI Data Bit 11
                                      ;R10:     equ $04    ; %00000100 SPI Data Bit 10
                                      ;R9:      equ $02    ; %00000010 SPI Data Bit 9
                                      ;R8:      equ $01    ; %00000001 SPI Data Bit 8
007565 7F7565 -> $00DD                SPI0DRL:  equ $00DD  ; SPI0 Data Register Hi Byte(page 772)
                                      ;R7:      equ $80    ; %10000000 SPI Data Bit 7
                                      ;R6:      equ $40    ; %01000000 SPI Data Bit 6
                                      ;R5:      equ $20    ; %00100000 SPI Data Bit 5
                                      ;R4:      equ $10    ; %00010000 SPI Data Bit 4
                                      ;R3:      equ $08    ; %00001000 SPI Data Bit 3
                                      ;R2:      equ $04    ; %00000100 SPI Data Bit 2
                                      ;R1:      equ $02    ; %00000010 SPI Data Bit 1
                                      ;R0:      equ $01    ; %00000001 SPI Data Bit 0
007565 7F7565 -> $00F0                SPI1CR1:   equ $00F0 ; SPI1 Control Register (page 765)
007565 7F7565 -> $0080                SPIE:      equ $80   ; %10000000 SPI Interrupt Enable Bit 7
007565 7F7565 -> $0040                SPE:       equ $40   ; %01000000 SPI System Enable Bit 6
007565 7F7565 -> $0020                SPTIE:     equ $20   ; %00100000 SPI Tansmit Interrupt Enable Bit 5
007565 7F7565 -> $0010                MSTR:      equ $10   ; %00010000 SPI Master/Slave Mode Select Bit 4
007565 7F7565 -> $0008                CPOL:      equ $08   ; %00001000 SPI Clock Polarity  Bit 3
007565 7F7565 -> $0004                CPHA:      equ $04   ; %00000100 SPI Clock Phase Bit 2
007565 7F7565 -> $0002                SSOE:      equ $02   ; %00000010 Slave Select Output Enable Bit 1
007565 7F7565 -> $0001                LSBFE:     equ $01   ; %00000001 LSB-First Enable Bit 0
007565 7F7565 -> $00F1                SPI1CR2:  equ $00F1  ; SPI1 Control Register 2 (page 766)
                                      ;U/I:     equ $80    ; %10000000 Unimplemented Bit 7
007565 7F7565 -> $0040                XFRW:     equ $40    ; %01000000 Transfer Width Bit 6
                                      ;U/I:     equ $20    ; %00100000 Unimplemented Bit 5
007565 7F7565 -> $0010                MODFN:    equ $10    ; %00010000 Mode Fault Enable Bit 4
007565 7F7565 -> $0008                BIDIROE:  equ $08    ; %00001000 Output Enable in the Bidirectionsal Mode of Opersation  Bit 3
                                      ;U/I:     equ $04    ; %00000100 Unimplemented Bit 2
007565 7F7565 -> $0002                SPISWAI:  equ $02    ; %00000010 SPI Stop in Wait Mode Bit 1
007565 7F7565 -> $0001                SPCO:     equ $01    ; %00000001 Serial Pin Control Bit 0
007565 7F7565 -> $00F2                SPI1BR:   equ $00F2  ; SPI1 Baud Rate Register (page 768)
                                      ;U/I:     equ $80    ; %10000000 Unimplemented Bit 7
007565 7F7565 -> $0040                SPPR2:    equ $40    ; %01000000 SPI Baud Rate Preselection Bit 6
007565 7F7565 -> $0020                SPPR1:    equ $20    ; %00100000 SPI Baud Rate Preselection Bit 5
007565 7F7565 -> $0010                SPPR0:    equ $10    ; %00010000 SPI Baud Rate Preselection Bit 4
                                      ;U/I:     equ $08    ; %00001000 Unimplemented  Bit 3
007565 7F7565 -> $0004                SPR2:     equ $04    ; %00000100 SPI Baud Rate Selection Bit 2
007565 7F7565 -> $0002                SPR1:     equ $02    ; %00000010 SPI Baud Rate Selection Bit 1
007565 7F7565 -> $0001                SPR0:     equ $01    ; %00000001 SPI Baud Rate Selection Bit 0
007565 7F7565 -> $00F3                SPI1SR:   equ $00F3  ; SPI1 Status Register (page 770)
007565 7F7565 -> $0080                SPIF:     equ $80    ; %10000000 SPIF Interrupt Flag Bit 7
                                      ;U/I:     equ $40    ; %01000000 Unimplemented Bit 6
007565 7F7565 -> $0020                SPTEF:    equ $20    ; %00100000 SPI Transmit Empty Interrupt Flag Bit 5
007565 7F7565 -> $0010                MODF:     equ $10    ; %00010000 Mode Fault Flag Bit 4
                                      ;U/I:     equ $08    ; %00001000 Unimplemented  Bit 3
                                      ;U/I:     equ $04    ; %00000100 Unimplemented Bit 2
                                      ;U/I:     equ $02    ; %00000010 Unimplemented Bit 1
                                      ;U/I:     equ $01    ; %00000001 Unimplemented Bit 0
007565 7F7565 -> $00F4                SPI1DRH:  equ $00F4  ; SPI1 Data Register Hi Byte(page 772)
                                      ;R15:     equ $80    ; %10000000 SPI Data Bit 15
                                      ;R14:     equ $40    ; %01000000 SPI Data Bit 14
                                      ;R13:     equ $20    ; %00100000 SPI Data Bit 13
                                      ;R12:     equ $10    ; %00010000 SPI Data Bit 12
                                      ;R11:     equ $08    ; %00001000 SPI Data Bit 11
                                      ;R10:     equ $04    ; %00000100 SPI Data Bit 10
                                      ;R9:      equ $02    ; %00000010 SPI Data Bit 9
                                      ;R8:      equ $01    ; %00000001 SPI Data Bit 8
007565 7F7565 -> $00F5                SPI1DRL:  equ $00F5  ; SPI1 Data Register Hi Byte(page 772)
                                      ;R7:      equ $80    ; %10000000 SPI Data Bit 7
                                      ;R6:      equ $40    ; %01000000 SPI Data Bit 6
                                      ;R5:      equ $20    ; %00100000 SPI Data Bit 5
                                      ;R4:      equ $10    ; %00010000 SPI Data Bit 4
                                      ;R3:      equ $08    ; %00001000 SPI Data Bit 3
                                      ;R2:      equ $04    ; %00000100 SPI Data Bit 2
                                      ;R1:      equ $02    ; %00000010 SPI Data Bit 1
                                      ;R0:      equ $01    ; %00000001 SPI Data Bit 0
007565 7F7565 -> $00F8                SPI2CR1:   equ $00F8 ; SPI2 Control Register (page 765)
007565 7F7565 -> $0080                SPIE:      equ $80   ; %10000000 SPI Interrupt Enable Bit 7
007565 7F7565 -> $0040                SPE:       equ $40   ; %01000000 SPI System Enable Bit 6
007565 7F7565 -> $0020                SPTIE:     equ $20   ; %00100000 SPI Tansmit Interrupt Enable Bit 5
007565 7F7565 -> $0010                MSTR:      equ $10   ; %00010000 SPI Master/Slave Mode Select Bit 4
007565 7F7565 -> $0008                CPOL:      equ $08   ; %00001000 SPI Clock Polarity  Bit 3
007565 7F7565 -> $0004                CPHA:      equ $04   ; %00000100 SPI Clock Phase Bit 2
007565 7F7565 -> $0002                SSOE:      equ $02   ; %00000010 Slave Select Output Enable Bit 1
007565 7F7565 -> $0001                LSBFE:     equ $01   ; %00000001 LSB-First Enable Bit 0
007565 7F7565 -> $00F9                SPI2CR2:  equ $00F9  ; SPI2 Control Register 2 (page 766)
                                      ;U/I:     equ $80    ; %10000000 Unimplemented Bit 7
007565 7F7565 -> $0040                XFRW:     equ $40    ; %01000000 Transfer Width Bit 6
                                      ;U/I:     equ $20    ; %00100000 Unimplemented Bit 5
007565 7F7565 -> $0010                MODFN:    equ $10    ; %00010000 Mode Fault Enable Bit 4
007565 7F7565 -> $0008                BIDIROE:  equ $08    ; %00001000 Output Enable in the Bidirectionsal Mode of Opersation  Bit 3
                                      ;U/I:     equ $04    ; %00000100 Unimplemented Bit 2
007565 7F7565 -> $0002                SPISWAI:  equ $02    ; %00000010 SPI Stop in Wait Mode Bit 1
007565 7F7565 -> $0001                SPCO:     equ $01    ; %00000001 Serial Pin Control Bit 0
007565 7F7565 -> $00FA                SPI2BR:   equ $00FA  ; SPI2 Baud Rate Register (page 768)
                                      ;U/I:     equ $80    ; %10000000 Unimplemented Bit 7
007565 7F7565 -> $0040                SPPR2:    equ $40    ; %01000000 SPI Baud Rate Preselection Bit 6
007565 7F7565 -> $0020                SPPR1:    equ $20    ; %00100000 SPI Baud Rate Preselection Bit 5
007565 7F7565 -> $0010                SPPR0:    equ $10    ; %00010000 SPI Baud Rate Preselection Bit 4
                                      ;U/I:     equ $08    ; %00001000 Unimplemented  Bit 3
007565 7F7565 -> $0004                SPR2:     equ $04    ; %00000100 SPI Baud Rate Selection Bit 2
007565 7F7565 -> $0002                SPR1:     equ $02    ; %00000010 SPI Baud Rate Selection Bit 1
007565 7F7565 -> $0001                SPR0:     equ $01    ; %00000001 SPI Baud Rate Selection Bit 0
007565 7F7565 -> $00FB                SPI2SR:   equ $00FB  ; SPI1 Status Register (page 770)
007565 7F7565 -> $0080                SPIF:     equ $80    ; %10000000 SPIF Interrupt Flag Bit 7
                                      ;U/I:     equ $40    ; %01000000 Unimplemented Bit 6
007565 7F7565 -> $0020                SPTEF:    equ $20    ; %00100000 SPI Transmit Empty Interrupt Flag Bit 5
007565 7F7565 -> $0010                MODF:     equ $10    ; %00010000 Mode Fault Flag Bit 4
                                      ;U/I:     equ $08    ; %00001000 Unimplemented  Bit 3
                                      ;U/I:     equ $04    ; %00000100 Unimplemented Bit 2
                                      ;U/I:     equ $02    ; %00000010 Unimplemented Bit 1
                                      ;U/I:     equ $01    ; %00000001 Unimplemented Bit 0
007565 7F7565 -> $00FC                SPI2DRH:  equ $00FC  ; SPI1 Data Register Hi Byte(page 772)
                                      ;R15:     equ $80    ; %10000000 SPI Data Bit 15
                                      ;R14:     equ $40    ; %01000000 SPI Data Bit 14
                                      ;R13:     equ $20    ; %00100000 SPI Data Bit 13
                                      ;R12:     equ $10    ; %00010000 SPI Data Bit 12
                                      ;R11:     equ $08    ; %00001000 SPI Data Bit 11
                                      ;R10:     equ $04    ; %00000100 SPI Data Bit 10
                                      ;R9:      equ $02    ; %00000010 SPI Data Bit 9
                                      ;R8:      equ $01    ; %00000001 SPI Data Bit 8
007565 7F7565 -> $00FD                SPI2DRL:  equ $00FD  ; SPI1 Data Register Hi Byte(page 772)
                                      ;R7:      equ $80    ; %10000000 SPI Data Bit 7
                                      ;R6:      equ $40    ; %01000000 SPI Data Bit 6
                                      ;R5:      equ $20    ; %00100000 SPI Data Bit 5
                                      ;R4:      equ $10    ; %00010000 SPI Data Bit 4
                                      ;R3:      equ $08    ; %00001000 SPI Data Bit 3
                                      ;R2:      equ $04    ; %00000100 SPI Data Bit 2
                                      ;R1:      equ $02    ; %00000010 SPI Data Bit 1
                                      ;R0:      equ $01    ; %00000001 SPI Data Bit 0
007565 7F7565 -> $036F                PTRRR:    equ $036F   ;Port R Routing Register (page 167)
007565 7F7565 -> $0080                PTRRR7:   equ $80     ; %10000000 Port R routing bit 7
007565 7F7565 -> $0040                PTRRR6:   equ $40     ; %01000000 Port R routing bit 6
007565 7F7565 -> $0020                PTRRR5:   equ $20     ; %00100000 Port R routing bit 5
007565 7F7565 -> $0010                PTRRR4:   equ $10     ; %00010000 Port R routing bit 4
007565 7F7565 -> $0008                PTRRR3:   equ $08     ; %00001000 Port R routing bit 3
007565 7F7565 -> $0004                PTRRR2:   equ $04     ; %00000100 Port R routing bit 2
007565 7F7565 -> $0002                PTRRR1:   equ $02     ; %00000010 Port R routing bit 1
007565 7F7565 -> $0001                PTRRR0:   equ $01     ; %00000001 Port R routing bit 0
                                      ;*****************************************************************************************
                                      ; - XGATE (S12XGATEV3) equates
                                      ;*****************************************************************************************
007565 7F7565 -> $0380                XGMCTL:     equ $0380 ; XGATE Control Register (pg 359)
007565 7F7565 -> $8000                XGEM:       equ $8000 ; XGE Mask bit 15
007565 7F7565 -> $4000                XGFRZM:     equ $4000 ; XGFRZ Mask bit 14
007565 7F7565 -> $2000                XGDBGM:     equ $2000 ; XGDBG Mask bit 13
007565 7F7565 -> $1000                XGSSM:      equ $1000 ; XGSS Mask bit 12
007565 7F7565 -> $0800                XGFACTM:    equ $0800 ; XGFACT Mask bit 11
007565 7F7565 -> $0200                XGSWEFM:    equ $0200 ; XGSWEF Mask bit 10
007565 7F7565 -> $0100                XGIEM:      equ $0100 ; XGIE Mask bit 9
007565 7F7565 -> $0080                XGE:        equ $0080 ; XGATE Module Enable (Request Enable) bit 7
007565 7F7565 -> $0040                XGFRZ:      equ $0040 ; Halt XGATE in Freeze Mode bit 6
007565 7F7565 -> $0020                XGDBG:      equ $0020 ; XGATE Debug Mode bit 5
007565 7F7565 -> $0010                XGSS:       equ $0010 ; XGATE Single Step bit 4
007565 7F7565 -> $0008                XGFACT:     equ $0008 ; Fake XGATE Activity bit 3
007565 7F7565 -> $0002                XGSWEF:     equ $0002 ; XGATE Software Error Flag bit 1
007565 7F7565 -> $0001                XGIE:       equ $0001 ; XGATE interrupt Enable bit 0
007565 7F7565 -> $0382                XGCHID:     equ $0382 ; XGATE Channel ID Register (pg 361)
007565 7F7565 -> $0383                XGCHPL:     equ $0383 ; XGATE Channel Priority Level (pg 362)
007565 7F7565 -> $0385                XGISPSEL:   equ $0385 ; XGATE Initial Stack Pointer Select Register (pg 362)
007565 7F7565 -> $0386                XGVBR:      equ $0386 ; XGATE Vector Base Address Register (pg 364)
007565 7F7565 -> $0388                XGIF_7F_78: equ $0388 ; XGATE Channel Interrupt Flag Vector Ch7F to Ch78 (pg 365)
007565 7F7565 -> $0080                XGIF_7F:    equ $80   ; Ch7F interrupt Flag bit 7 (not used)
007565 7F7565 -> $0040                XGIF_7E:    equ $40   ; Ch7E interrupt Flag bit 6 (not used)
007565 7F7565 -> $0020                XGIF_7D:    equ $20   ; Ch7D interrupt Flag bit 5 (not used)
007565 7F7565 -> $0010                XGIF_7C:    equ $10   ; Ch7C interrupt Flag bit 4 (not used)
007565 7F7565 -> $0008                XGIF_7B:    equ $08   ; Ch7B interrupt Flag bit 3 (not used)
007565 7F7565 -> $0004                XGIF_7A:    equ $04   ; Ch7A interrupt Flag bit 2 (not used)
007565 7F7565 -> $0002                XGIF_79:    equ $02   ; Ch79 interrupt Flag bit 1 (not used)
007565 7F7565 -> $0001                XGIF_78:    equ $01   ; Ch78 interrupt Flag bit 0
007565 7F7565 -> $0389                XGIF_77_70: equ $0389 ; XGATE Channel Interrupt Flag Vector Ch77 to Ch70 (pg 365)
007565 7F7565 -> $0080                XGIF_77:    equ $80   ; Ch77 interrupt Flag bit 7
007565 7F7565 -> $0040                XGIF_76:    equ $40   ; Ch76 interrupt Flag bit 6
007565 7F7565 -> $0020                XGIF_75:    equ $20   ; Ch75 interrupt Flag bit 5
007565 7F7565 -> $0010                XGIF_74:    equ $10   ; Ch74 interrupt Flag bit 4
007565 7F7565 -> $0008                XGIF_73:    equ $08   ; Ch73 interrupt Flag bit 3
007565 7F7565 -> $0004                XGIF_72:    equ $04   ; Ch72 interrupt Flag bit 2
007565 7F7565 -> $0002                XGIF_71:    equ $02   ; Ch71 interrupt Flag bit 1
007565 7F7565 -> $0001                XGIF_70:    equ $01   ; Ch70 interrupt Flag bit 0
007565 7F7565 -> $038A                XGIF_6F_68: equ $038A ; XGATE Channel Interrupt Flag Vector Ch6F to Ch68 (pg 365)
007565 7F7565 -> $0080                XGIF_6F:    equ $80   ; Ch6F interrupt Flag bit 7
007565 7F7565 -> $0040                XGIF_6E:    equ $40   ; Ch6E interrupt Flag bit 6
007565 7F7565 -> $0020                XGIF_6D:    equ $20   ; Ch6D interrupt Flag bit 5
007565 7F7565 -> $0010                XGIF_6C:    equ $10   ; Ch6C interrupt Flag bit 4
007565 7F7565 -> $0008                XGIF_6B:    equ $08   ; Ch6B interrupt Flag bit 3
007565 7F7565 -> $0004                XGIF_6A:    equ $04   ; Ch6A interrupt Flag bit 2
007565 7F7565 -> $0002                XGIF_69:    equ $02   ; Ch69 interrupt Flag bit 1
007565 7F7565 -> $0001                XGIF_68:    equ $01   ; Ch68 interrupt Flag bit 0
007565 7F7565 -> $038B                XGIF_67_60: equ $038B ; XGATE Channel Interrupt Flag Vector Ch67 to Ch60 (pg 365)
007565 7F7565 -> $0080                XGIF_67:    equ $80   ; Ch67 interrupt Flag bit 7
007565 7F7565 -> $0040                XGIF_66:    equ $40   ; Ch66 interrupt Flag bit 6
007565 7F7565 -> $0020                XGIF_65:    equ $20   ; Ch65 interrupt Flag bit 5
007565 7F7565 -> $0010                XGIF_64:    equ $10   ; Ch64 interrupt Flag bit 4
007565 7F7565 -> $0008                XGIF_63:    equ $08   ; Ch63 interrupt Flag bit 3
007565 7F7565 -> $0004                XGIF_62:    equ $04   ; Ch62 interrupt Flag bit 2
007565 7F7565 -> $0002                XGIF_61:    equ $02   ; Ch61 interrupt Flag bit 1
007565 7F7565 -> $0001                XGIF_60:    equ $01   ; Ch60 interrupt Flag bit 0
007565 7F7565 -> $038C                XGIF_5F_58: equ $038C ; XGATE Channel Interrupt Flag Vector Ch5F to Ch58 (pg 365)
007565 7F7565 -> $0080                XGIF_5F:    equ $80   ; Ch5F interrupt Flag bit 7
007565 7F7565 -> $0040                XGIF_5E:    equ $40   ; Ch5E interrupt Flag bit 6
007565 7F7565 -> $0020                XGIF_5D:    equ $20   ; Ch5D interrupt Flag bit 5
007565 7F7565 -> $0010                XGIF_5C:    equ $10   ; Ch5C interrupt Flag bit 4
007565 7F7565 -> $0008                XGIF_5B:    equ $08   ; Ch5B interrupt Flag bit 3
007565 7F7565 -> $0004                XGIF_5A:    equ $04   ; Ch5A interrupt Flag bit 2
007565 7F7565 -> $0002                XGIF_59:    equ $02   ; Ch59 interrupt Flag bit 1
007565 7F7565 -> $0001                XGIF_58:    equ $01   ; Ch58 interrupt Flag bit 0
007565 7F7565 -> $038D                XGIF_57_50: equ $038D ; XGATE Channel Interrupt Flag Vector Ch57 to Ch50 (pg 365)
007565 7F7565 -> $0080                XGIF_57:    equ $80   ; Ch57 interrupt Flag bit 7
007565 7F7565 -> $0040                XGIF_56:    equ $40   ; Ch56 interrupt Flag bit 6
007565 7F7565 -> $0020                XGIF_55:    equ $20   ; Ch55 interrupt Flag bit 5
007565 7F7565 -> $0010                XGIF_54:    equ $10   ; Ch54 interrupt Flag bit 4
007565 7F7565 -> $0008                XGIF_53:    equ $08   ; Ch53 interrupt Flag bit 3
007565 7F7565 -> $0004                XGIF_52:    equ $04   ; Ch52 interrupt Flag bit 2
007565 7F7565 -> $0002                XGIF_51:    equ $02   ; Ch51 interrupt Flag bit 1
007565 7F7565 -> $0001                XGIF_50:    equ $01   ; Ch50 interrupt Flag bit 0
007565 7F7565 -> $038E                XGIF_4F_48: equ $038E ; XGATE Channel Interrupt Flag Vector Ch4F to Ch48 (pg 365)
007565 7F7565 -> $0080                XGIF_4F:    equ $80   ; Ch4F interrupt Flag bit 7
007565 7F7565 -> $0040                XGIF_4E:    equ $40   ; Ch4E interrupt Flag bit 6
007565 7F7565 -> $0020                XGIF_4D:    equ $20   ; Ch4D interrupt Flag bit 5
007565 7F7565 -> $0010                XGIF_4C:    equ $10   ; Ch4C interrupt Flag bit 4
007565 7F7565 -> $0008                XGIF_4B:    equ $08   ; Ch4B interrupt Flag bit 3
007565 7F7565 -> $0004                XGIF_4A:    equ $04   ; Ch4A interrupt Flag bit 2
007565 7F7565 -> $0002                XGIF_49:    equ $02   ; Ch49 interrupt Flag bit 1
007565 7F7565 -> $0001                XGIF_48:    equ $01   ; Ch48 interrupt Flag bit 0
007565 7F7565 -> $038F                XGIF_47_40: equ $038F ; XGATE Channel Interrupt Flag Vector Ch47 to Ch40 (pg 365)
007565 7F7565 -> $0080                XGIF_47:    equ $80   ; Ch47 interrupt Flag bit 7
007565 7F7565 -> $0040                XGIF_46:    equ $40   ; Ch46 interrupt Flag bit 6
007565 7F7565 -> $0020                XGIF_45:    equ $20   ; Ch45 interrupt Flag bit 5
007565 7F7565 -> $0010                XGIF_44:    equ $10   ; Ch44 interrupt Flag bit 4
007565 7F7565 -> $0008                XGIF_43:    equ $08   ; Ch43 interrupt Flag bit 3
007565 7F7565 -> $0004                XGIF_42:    equ $04   ; Ch42 interrupt Flag bit 2
007565 7F7565 -> $0002                XGIF_41:    equ $02   ; Ch41 interrupt Flag bit 1
007565 7F7565 -> $0001                XGIF_40:    equ $01   ; Ch40 interrupt Flag bit 0
007565 7F7565 -> $0390                XGIF_3F_38: equ $0390 ; XGATE Channel Interrupt Flag Vector Ch3F to Ch38 (pg 366)
007565 7F7565 -> $0080                XGIF_3F:    equ $80   ; Ch3F interrupt Flag bit 7
007565 7F7565 -> $0040                XGIF_3E:    equ $40   ; Ch3E interrupt Flag bit 6
007565 7F7565 -> $0020                XGIF_3D:    equ $20   ; Ch3D interrupt Flag bit 5
007565 7F7565 -> $0010                XGIF_3C:    equ $10   ; Ch3C interrupt Flag bit 4
007565 7F7565 -> $0008                XGIF_3B:    equ $08   ; Ch3B interrupt Flag bit 3
007565 7F7565 -> $0004                XGIF_3A:    equ $04   ; Ch3A interrupt Flag bit 2
007565 7F7565 -> $0002                XGIF_39:    equ $02   ; Ch39 interrupt Flag bit 1
007565 7F7565 -> $0001                XGIF_38:    equ $01   ; Ch38 interrupt Flag bit 0
007565 7F7565 -> $0391                XGIF_37_30: equ $0391 ; XGATE Channel Interrupt Flag Vector Ch37 to Ch30 (pg 366)
007565 7F7565 -> $0080                XGIF_37:    equ $80   ; Ch37 interrupt Flag bit 7
007565 7F7565 -> $0040                XGIF_36:    equ $40   ; Ch36 interrupt Flag bit 6
007565 7F7565 -> $0020                XGIF_35:    equ $20   ; Ch35 interrupt Flag bit 5
007565 7F7565 -> $0010                XGIF_34:    equ $10   ; Ch34 interrupt Flag bit 4
007565 7F7565 -> $0008                XGIF_33:    equ $08   ; Ch33 interrupt Flag bit 3
007565 7F7565 -> $0004                XGIF_32:    equ $04   ; Ch32 interrupt Flag bit 2
007565 7F7565 -> $0002                XGIF_31:    equ $02   ; Ch31 interrupt Flag bit 1
007565 7F7565 -> $0001                XGIF_30:    equ $01   ; Ch30 interrupt Flag bit 0
007565 7F7565 -> $0392                XGIF_2F_28: equ $0392 ; XGATE Channel Interrupt Flag Vector Ch2F to Ch28 (pg 366)
007565 7F7565 -> $0080                XGIF_2F:    equ $80   ; Ch2F interrupt Flag bit 7
007565 7F7565 -> $0040                XGIF_2E:    equ $40   ; Ch2E interrupt Flag bit 6
007565 7F7565 -> $0020                XGIF_2D:    equ $20   ; Ch2D interrupt Flag bit 5
007565 7F7565 -> $0010                XGIF_2C:    equ $10   ; Ch2C interrupt Flag bit 4
007565 7F7565 -> $0008                XGIF_2B:    equ $08   ; Ch2B interrupt Flag bit 3
007565 7F7565 -> $0004                XGIF_2A:    equ $04   ; Ch2A interrupt Flag bit 2
007565 7F7565 -> $0002                XGIF_29:    equ $02   ; Ch29 interrupt Flag bit 1
007565 7F7565 -> $0001                XGIF_28:    equ $01   ; Ch28 interrupt Flag bit 0
007565 7F7565 -> $0393                XGIF_27_20: equ $0393 ; XGATE Channel Interrupt Flag Vector Ch27 to Ch20 (pg 366)
007565 7F7565 -> $0080                XGIF_27:    equ $80   ; Ch27 interrupt Flag bit 7
007565 7F7565 -> $0040                XGIF_26:    equ $40   ; Ch26 interrupt Flag bit 6
007565 7F7565 -> $0020                XGIF_25:    equ $20   ; Ch25 interrupt Flag bit 5
007565 7F7565 -> $0010                XGIF_24:    equ $10   ; Ch24 interrupt Flag bit 4
007565 7F7565 -> $0008                XGIF_23:    equ $08   ; Ch23 interrupt Flag bit 3
007565 7F7565 -> $0004                XGIF_22:    equ $04   ; Ch22 interrupt Flag bit 2
007565 7F7565 -> $0002                XGIF_21:    equ $02   ; Ch21 interrupt Flag bit 1
007565 7F7565 -> $0001                XGIF_20:    equ $01   ; Ch20 interrupt Flag bit 0
007565 7F7565 -> $0394                XGIF_1F_18: equ $0394 ; XGATE Channel Interrupt Flag Vector Ch1F to Ch18 (pg 366)
007565 7F7565 -> $0080                XGIF_1F:    equ $80   ; Ch1F interrupt Flag bit 7
007565 7F7565 -> $0040                XGIF_1E:    equ $40   ; Ch1E interrupt Flag bit 6
007565 7F7565 -> $0020                XGIF_1D:    equ $20   ; Ch1D interrupt Flag bit 5
007565 7F7565 -> $0010                XGIF_1C:    equ $10   ; Ch1C interrupt Flag bit 4
007565 7F7565 -> $0008                XGIF_1B:    equ $08   ; Ch1B interrupt Flag bit 3
007565 7F7565 -> $0004                XGIF_1A:    equ $04   ; Ch1A interrupt Flag bit 2
007565 7F7565 -> $0002                XGIF_19:    equ $02   ; Ch19 interrupt Flag bit 1
007565 7F7565 -> $0001                XGIF_18:    equ $01   ; Ch18 interrupt Flag bit 0
007565 7F7565 -> $0395                XGIF_17_10: equ $0395 ; XGATE Channel Interrupt Flag Vector Ch17 to Ch10 (pg 366)
007565 7F7565 -> $0080                XGIF_17:    equ $80   ; Ch17 interrupt Flag bit 7
007565 7F7565 -> $0040                XGIF_16:    equ $40   ; Ch16 interrupt Flag bit 6
007565 7F7565 -> $0020                XGIF_15:    equ $20   ; Ch15 interrupt Flag bit 5
007565 7F7565 -> $0010                XGIF_14:    equ $10   ; Ch14 interrupt Flag bit 4
007565 7F7565 -> $0008                XGIF_13:    equ $08   ; Ch13 interrupt Flag bit 3
007565 7F7565 -> $0004                XGIF_12:    equ $04   ; Ch12 interrupt Flag bit 2
007565 7F7565 -> $0002                XGIF_11:    equ $02   ; Ch11 interrupt Flag bit 1
007565 7F7565 -> $0001                XGIF_10:    equ $01   ; Ch10 interrupt Flag bit 0
007565 7F7565 -> $0396                XGIF_0F_08: equ $0396 ; XGATE Channel Interrupt Flag Vector Ch0F to Ch08 (pg 366)
007565 7F7565 -> $0080                XGIF_0F:    equ $80   ; Ch0F interrupt Flag bit 7
007565 7F7565 -> $0040                XGIF_0E:    equ $40   ; Ch0E interrupt Flag bit 6
007565 7F7565 -> $0020                XGIF_0D:    equ $20   ; Ch0D interrupt Flag bit 5
007565 7F7565 -> $0010                XGIF_0C:    equ $10   ; Ch0C interrupt Flag bit 4 (not used)
007565 7F7565 -> $0008                XGIF_0B:    equ $08   ; Ch0B interrupt Flag bit 3 (not used)
007565 7F7565 -> $0004                XGIF_0A:    equ $04   ; Ch0A interrupt Flag bit 2 (not used)
007565 7F7565 -> $0002                XGIF_09:    equ $02   ; Ch09 interrupt Flag bit 1 (not used)
007565 7F7565 -> $0001                XGIF_08:    equ $01   ; Ch08 interrupt Flag bit 0 (not used)
007565 7F7565 -> $0397                XGIF_07_00: equ $0397 ; XGATE Channel Interrupt Flag Vector Ch07 to Ch00 (pg 366)
007565 7F7565 -> $0080                XGIF_07:    equ $80   ; Ch07 interrupt Flag bit 7 (not used)
007565 7F7565 -> $0040                XGIF_06:    equ $40   ; Ch06 interrupt Flag bit 6 (not used)
007565 7F7565 -> $0020                XGIF_05:    equ $20   ; Ch05 interrupt Flag bit 5 (not used)
007565 7F7565 -> $0010                XGIF_04:    equ $10   ; Ch04 interrupt Flag bit 4 (not used)
007565 7F7565 -> $0008                XGIF_03:    equ $08   ; Ch03 interrupt Flag bit 3 (not used)
007565 7F7565 -> $0004                XGIF_02:    equ $04   ; Ch02 interrupt Flag bit 2 (not used)
007565 7F7565 -> $0002                XGIF_01:    equ $02   ; Ch01 interrupt Flag bit 1 (not used)
007565 7F7565 -> $0001                XGIF_00:    equ $01   ; Ch00 interrupt Flag bit 0 (not used)
007565 7F7565 -> $0398                XGSWT:      equ $0398 ; XGATE Software Trigger Register (pg 367)
007565 7F7565 -> $039A                XGSEM:      equ $039A ;XGATE Semaphore Register (pg 368)
                                      ; $039C reserved
007565 7F7565 -> $039D                XGCCR:      equ $039D ; XGATE Condition Code Register (pg 369)
007565 7F7565 -> $0008                XGN:        equ $08   ; Sign flag bit 3
007565 7F7565 -> $0004                XGZ:        equ $04   ; Zero flag bit 2
007565 7F7565 -> $0002                XGV:        equ $02   ; Overflow flag bit 1
007565 7F7565 -> $0001                XGC:        equ $01   ; Carry flag bit 0
007565 7F7565 -> $039E                XGPC        equ $039E ; XGATE Program Counter Register (pg 370)
                                      ; $03A0 to $03A1 reserved
007565 7F7565 -> $03A2                XGR1:       equ $03A2 ; XGATE Register 1 (pg 370)
007565 7F7565 -> $03A4                XGR2:       equ $03A4 ; XGATE Register 2 (pg 371)
007565 7F7565 -> $03A6                XGR3:       equ $03A6 ; XGATE Register 3 (pg 371)
007565 7F7565 -> $03A8                XGR4:       equ $03A8 ; XGATE Register 4 (pg 372)
007565 7F7565 -> $03AA                XGR5:       equ $03AA ; XGATE Register 5 (pg 372)
007565 7F7565 -> $03AC                XGR6:       equ $03AC ; XGATE Register 6 (pg 373)
007565 7F7565 -> $03AE                XGR7:       equ $03AE ; XGATE Register 7 (pg 373)
                                      ;*****************************************************************************************
                                      ; - Timer module (TIM16B8CV3) equates
                                      ;*****************************************************************************************
007565 7F7565 -> $03D0                TIM_TIOS:    equ $03D0 ; Timer Input Capture/Output Compare Select Register (pg 794)
                                                             ; 1 = input capture, 0 = output compare
007565 7F7565 -> $0080                IOS7:        equ $80   ; %10000000 Input Capture or Output Compare Channel Config bit 7
007565 7F7565 -> $0040                IOS6:        equ $40   ; %01000000 Input Capture or Output Compare Channel Config bit 6
007565 7F7565 -> $0020                IOS5:        equ $20   ; %00100000 Input Capture or Output Compare Channel Config bit 5
007565 7F7565 -> $0010                IOS4:        equ $10   ; %00010000 Input Capture or Output Compare Channel Config bit 4
007565 7F7565 -> $0008                IOS3:        equ $08   ; %00001000 Input Capture or Output Compare Channel Config bit 3
007565 7F7565 -> $0004                IOS2:        equ $04   ; %00000100 Input Capture or Output Compare Channel Config bit 2
007565 7F7565 -> $0002                IOS1:        equ $02   ; %00000010 Input Capture or Output Compare Channel Config bit 1
007565 7F7565 -> $0001                IOS0:        equ $01   ; %00000001 Input Capture or Output Compare Channel Config bit 0
007565 7F7565 -> $03D1                TIM_CFORC:   equ $03D1 ; Timer Compare Force Register (pg 794)
007565 7F7565 -> $0080                FOC7:        equ $80   ; %10000000 Force output Compare Action for Channel bit 7
007565 7F7565 -> $0040                FOC6:        equ $40   ; %01000000 Force output Compare Action for Channel bit 6
007565 7F7565 -> $0020                FOC5:        equ $20   ; %00100000 Force output Compare Action for Channel bit 5
007565 7F7565 -> $0010                FOC4:        equ $10   ; %00010000 Force output Compare Action for Channel bit 4
007565 7F7565 -> $0008                FOC3:        equ $08   ; %00001000 Force output Compare Action for Channel bit 3
007565 7F7565 -> $0004                FOC2:        equ $04   ; %00000100 Force output Compare Action for Channel bit 2
007565 7F7565 -> $0002                FOC1:        equ $02   ; %00000010 Force output Compare Action for Channel bit 1
007565 7F7565 -> $0001                FOC0:        equ $01   ; %00000001 Force output Compare Action for Channel bit 0
007565 7F7565 -> $03D2                TIM_OC7M:    equ $03D2 ; Output Compare 7 Mask Register (pg 795)
007565 7F7565 -> $0080                OC7M7:       equ $80   ; %10000000 Output Compare 7 Mask bit 7
007565 7F7565 -> $0040                OC7M6:       equ $40   ; %01000000 Output Compare 7 Mask bit 6
007565 7F7565 -> $0020                OC7M5:       equ $20   ; %00100000 Output Compare 7 Mask bit 5
007565 7F7565 -> $0010                OC7M4:       equ $10   ; %00010000 Output Compare 7 Mask bit 4
007565 7F7565 -> $0008                OC7M3:       equ $08   ; %00001000 Output Compare 7 Mask bit 3
007565 7F7565 -> $0004                OC7M2:       equ $04   ; %00000100 Output Compare 7 Mask bit 2
007565 7F7565 -> $0002                OC7M1:       equ $02   ; %00000010 Output Compare 7 Mask bit 1
007565 7F7565 -> $0001                OC7M0:       equ $01   ; %00000001 Output Compare 7 Mask bit 0
007565 7F7565 -> $03D3                TIM_OC7D:    equ $03D3 ; Output Compare 7 Data Register (pg 796)
007565 7F7565 -> $0080                OC7D7:       equ $80   ; %10000000 Output Compare 7 Data bit 7
007565 7F7565 -> $0040                OC7D6:       equ $40   ; %01000000 Output Compare 7 Data bit 6
007565 7F7565 -> $0020                OC7D5:       equ $20   ; %00100000 Output Compare 7 Data bit 5
007565 7F7565 -> $0010                OC7D4:       equ $10   ; %00010000 Output Compare 7 Data bit 4
007565 7F7565 -> $0008                OC7D3:       equ $08   ; %00001000 Output Compare 7 Data bit 3
007565 7F7565 -> $0004                OC7D2:       equ $04   ; %00000100 Output Compare 7 Data bit 2
007565 7F7565 -> $0002                OC7D1:       equ $02   ; %00000010 Output Compare 7 Data bit 1
007565 7F7565 -> $0001                OC7D0:       equ $01   ; %00000001 Output Compare 7 Data bit 0
007565 7F7565 -> $03D4                TIM_TCNTH:    equ $03D4 ; Timer Count Register High (pg 796)
007565 7F7565 -> $0080                TCNT15:       equ $80   ; %10000000 Timer Count Data bit 15
007565 7F7565 -> $0040                TCNT14:       equ $40   ; %01000000 Timer Count Data bit 14
007565 7F7565 -> $0020                TCNT13:       equ $20   ; %00100000 Timer Count Data bit 13
007565 7F7565 -> $0010                TCNT12:       equ $10   ; %00010000 Timer Count Data bit 12
007565 7F7565 -> $0008                TCNT11:       equ $08   ; %00001000 Timer Count Data bit 11
007565 7F7565 -> $0004                TCNT10:       equ $04   ; %00000100 Timer Count Data bit 10
007565 7F7565 -> $0002                TCNT9:        equ $02   ; %00000010 Timer Count Data bit 9
007565 7F7565 -> $0001                TCNT8:        equ $01   ; %00000001 Timer Count Data bit 8
007565 7F7565 -> $03D5                TIM_TCNTL:    equ $03D5 ; Timer Count Register Low (pg 796)
007565 7F7565 -> $0080                TCNT7:        equ $80   ; %10000000 Timer Count Data bit 7
007565 7F7565 -> $0040                TCNT6:        equ $40   ; %01000000 Timer Count Data bit 6
007565 7F7565 -> $0020                TCNT5:        equ $20   ; %00100000 Timer Count Data bit 5
007565 7F7565 -> $0010                TCNT4:        equ $10   ; %00010000 Timer Count Data bit 4
007565 7F7565 -> $0008                TCNT3:        equ $08   ; %00001000 Timer Count Data bit 3
007565 7F7565 -> $0004                TCNT2:        equ $04   ; %00000100 Timer Count Data bit 2
007565 7F7565 -> $0002                TCNT1:        equ $02   ; %00000010 Timer Count Data bit 1
007565 7F7565 -> $0001                TCNT0:        equ $01   ; %00000001 Timer Count Data bit 0
007565 7F7565 -> $03D6                TIM_TSCR1:    equ $03D6 ; Timer System Control Register 1 (pg 797)
007565 7F7565 -> $0080                TEN:          equ $80   ; %10000000 Timer Enable bit 7
007565 7F7565 -> $0040                TSWAI:        equ $40   ; %01000000 Timer Module Stops While In Wait bit 6
007565 7F7565 -> $0020                TSFRZ:        equ $20   ; %00100000 Timer and Modulus Counter Stop While In Wait bit 5
007565 7F7565 -> $0010                TFFCA:        equ $10   ; %00010000 Timer Fast Flag Clear All bit 4
007565 7F7565 -> $0008                PRNT:         equ $08   ; %00001000 Precision Timer bit 3
007565 7F7565 -> $03D7                TIM_TTOV:     equ $03D7 ; Timer Toggle On Overflow Register 1 (pg 798)
007565 7F7565 -> $0080                TOV7:         equ $80   ; %10000000 Toggle on Overflow bit 7
007565 7F7565 -> $0040                TOV6:         equ $40   ; %01000000 Toggle on Overflow bit 6
007565 7F7565 -> $0020                TOV5:         equ $20   ; %00100000 Toggle on Overflow bit 5
007565 7F7565 -> $0010                TOV4:         equ $10   ; %00100000 Toggle on Overflow bit 4
007565 7F7565 -> $0008                TOV3:         equ $08   ; %00001000 Toggle on Overflow bit 3
007565 7F7565 -> $0004                TOV2:         equ $04   ; %00000100 Toggle on Overflow bit 2
007565 7F7565 -> $0002                TOV1:         equ $02   ; %00000010 Toggle on Overflow bit 1
007565 7F7565 -> $0001                TOV0:         equ $01   ; %00000001 Toggle on Overflow bit 0
007565 7F7565 -> $03D8                TIM_TCTL1:    equ $03D8 ; Timer Control Register 1 (pg 799)
007565 7F7565 -> $0080                OM7:          equ $80   ; %10000000 Output Mode 7 bit 7
007565 7F7565 -> $0040                OL7:          equ $40   ; %01000000 Output Level 7 bit 6
007565 7F7565 -> $0020                OM6:          equ $20   ; %00100000 Output Mode 6 bit 5
007565 7F7565 -> $0010                OL6:          equ $10   ; %0010000Output Level 6 bit 4
007565 7F7565 -> $0008                OM5:          equ $08   ; %00001000 Output Mode 5 bit 3
007565 7F7565 -> $0004                OL5:          equ $04   ; %00000100 Output Level 5 bit 2
007565 7F7565 -> $0002                OM4:          equ $02   ; %00000010 Output Mode 4 bit 1
007565 7F7565 -> $0001                OL4:          equ $01   ; %00000001 Output Level 4 bit 0
007565 7F7565 -> $03D9                TIM_TCTL2:    equ $03D9 ; Timer Control Register 2 (pg 799)
007565 7F7565 -> $0080                OM3:          equ $80   ; %10000000 Output Mode 3 bit 7
007565 7F7565 -> $0040                OL3:          equ $40   ; %01000000 Output Level 3 bit 6
007565 7F7565 -> $0020                OM2:          equ $20   ; %00100000 Output Mode 2 bit 5
007565 7F7565 -> $0010                OL2:          equ $10   ; %0010000Output Level 2 bit 4
007565 7F7565 -> $0008                OM1:          equ $08   ; %00001000 Output Mode 1 bit 3
007565 7F7565 -> $0004                OL1:          equ $04   ; %00000100 Output Level 1 bit 2
007565 7F7565 -> $0002                OM0:          equ $02   ; %00000010 Output Mode 0 bit 1
007565 7F7565 -> $0001                OL0:          equ $01   ; %00000001 Output Level 0 bit 0
007565 7F7565 -> $03DA                TIM_TCTL3:    equ $03DA ; Timer Control Register 3 (pg 800)
007565 7F7565 -> $0080                EDG7B:        equ $80   ; %10000000 Input Capture Edge Control 7B bit 7
007565 7F7565 -> $0040                EDG7A:        equ $40   ; %01000000 Input Capture Edge Control 7A bit 6
007565 7F7565 -> $0020                EDG6B:        equ $20   ; %00100000 Input Capture Edge Control 6B bit 5
007565 7F7565 -> $0010                EDG6A:        equ $10   ; %00010000 Input Capture Edge Control 6A bit 4
007565 7F7565 -> $0008                EDG5B:        equ $08   ; %00001000 Input Capture Edge Control 5B bit 3
007565 7F7565 -> $0004                EDG5A:        equ $04   ; %00000100 Input Capture Edge Control 5A bit 2
007565 7F7565 -> $0002                EDG4B:        equ $02   ; %00000010 Input Capture Edge Control 4B bit 1
007565 7F7565 -> $0001                EDG4A:        equ $01   ; %00000001 Input Capture Edge Control 4A bit 0
007565 7F7565 -> $03DB                TIM_TCTL4:    equ $03DB ; Timer Control Register 4 (pg 800)
007565 7F7565 -> $0080                EDG3B:        equ $80   ; %10000000 Input Capture Edge Control 3B bit 7
007565 7F7565 -> $0040                EDG3A:        equ $40   ; %01000000 Input Capture Edge Control 3A bit 6
007565 7F7565 -> $0020                EDG2B:        equ $20   ; %00100000 Input Capture Edge Control 2B bit 5
007565 7F7565 -> $0010                EDG2A:        equ $10   ; %00010000 Input Capture Edge Control 2A bit 4
007565 7F7565 -> $0008                EDG1B:        equ $08   ; %00001000 Input Capture Edge Control 1B bit 3
007565 7F7565 -> $0004                EDG1A:        equ $04   ; %00000100 Input Capture Edge Control 1A bit 2
007565 7F7565 -> $0002                EDG0B:        equ $02   ; %00000010 Input Capture Edge Control 0B bit 1
007565 7F7565 -> $0001                EDG0A:        equ $01   ; %00000001 Input Capture Edge Control 0A bit 0
007565 7F7565 -> $03DC                TIM_TIE:      equ $03DC ; Timer Interrupt Enable Register (pg 801)
                                                             ; 0 = interrupt disabled, 1 = interrupts enabled
007565 7F7565 -> $0080                C7I:          equ $80   ; %10000000 IC/OC "X" Interrupt Enable bit 7
007565 7F7565 -> $0040                C6I:          equ $40   ; %01000000 IC/OC "X" Interrupt Enable bit 6
007565 7F7565 -> $0020                C5I:          equ $20   ; %00100000 IC/OC "X" Interrupt Enable bit 5
007565 7F7565 -> $0010                C4I:          equ $10   ; %00010000 IC/OC "X" Interrupt Enable bit 4
007565 7F7565 -> $0008                C3I:          equ $08   ; %00001000 IC/OC "X" Interrupt Enable bit 3
007565 7F7565 -> $0004                C2I:          equ $04   ; %00000100 IC/OC "X" Interrupt Enable bit 2
007565 7F7565 -> $0002                C1I:          equ $02   ; %00000010 IC/OC "X" Interrupt Enable bit 1
007565 7F7565 -> $0001                C0I:          equ $01   ; %00000001 IC/OC "X" Interrupt Enable bit 0
007565 7F7565 -> $03DD                TIM_TSCR2:    equ $03DD ; Timer System Control Register 2 (pg 802)
007565 7F7565 -> $0080                TOI:          equ $80   ; %10000000 Timer Overflow Interrupt Enable bit 7
007565 7F7565 -> $0008                TCRE:         equ $08   ; %00001000 Timer Counter Register Enable bit 3
007565 7F7565 -> $0004                PR2:          equ $04   ; %00000100 Timer Prescaler Select bit 2
007565 7F7565 -> $0002                PR1:          equ $02   ; %00000010 Timer Prescaler Select bit 1
007565 7F7565 -> $0001                PR0:          equ $01   ; %00000001 Timer Prescaler Select bit 0
007565 7F7565 -> $03DE                TIM_TFLG1:    equ $03DE ; Main Timer Interrupt Flag 1 (pg 803)
007565 7F7565 -> $0080                C7F:          equ $80   ; %10000000 IC/OC Channel "x" Flag bit 7
007565 7F7565 -> $0040                C6F:          equ $40   ; %10000000 IC/OC Channel "x" Flag bit 6
007565 7F7565 -> $0020                C5F:          equ $20   ; %10000000 IC/OC Channel "x" Flag bit 5
007565 7F7565 -> $0010                C4F:          equ $10   ; %10000000 IC/OC Channel "x" Flag bit 4
007565 7F7565 -> $0008                C3F:          equ $08   ; %10000000 IC/OC Channel "x" Flag bit 3
007565 7F7565 -> $0004                C2F:          equ $04   ; %10000000 IC/OC Channel "x" Flag bit 2
007565 7F7565 -> $0002                C1F:          equ $02   ; %10000000 IC/OC Channel "x" Flag bit 1
007565 7F7565 -> $0001                C0F:          equ $01   ; %10000000 IC/OC Channel "x" Flag bit 0
007565 7F7565 -> $03DF                TIM_TFLG2:    equ $03DF ; Main Timer Interrupt Flag 2 (pg 803)
007565 7F7565 -> $0080                TOF:          equ $80   ; %10000000 Timer Overflow Flag
007565 7F7565 -> $03E0                TIM_TC0H:     equ $03E0 ; Timer IC/OC Register0 Hi (pg 804)
007565 7F7565 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03E1                TIM_TC0L:     equ $03E1 ; Timer IC/OC Register0 Lo (pg 804)
007565 7F7565 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03E2                TIM_TC1H:     equ $03E2 ; Timer IC/OC Register1 Hi (pg 804)
007565 7F7565 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03E3                TIM_TC1L:     equ $03E3 ; Timer IC/OC Register1 Lo (pg 804)
007565 7F7565 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03E4                TIM_TC2H:     equ $03E4 ; Timer IC/OC Register2 Hi (pg 804)
007565 7F7565 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03E5                TIM_TC2L:     equ $03E5 ; Timer IC/OC Register2 Lo (pg 804)
007565 7F7565 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03E6                TIM_TC3H:     equ $03E6 ; Timer IC/OC Register3 Hi (pg 804)
007565 7F7565 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03E7                TIM_TC3L:     equ $03E7 ; Timer IC/OC Register3 Lo (pg 804)
007565 7F7565 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03E8                TIM_TC4H:     equ $03E8 ; Timer IC/OC Register4 Hi (pg 804)
007565 7F7565 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03E9                TIM_TC4L:     equ $03E9 ; Timer IC/OC Register4 Lo (pg 804)
007565 7F7565 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03EA                TIM_TC5H:     equ $03EA ; Timer IC/OC Register5 Hi (pg 804)
007565 7F7565 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03EB                TIM_TC5L:     equ $03EB ; Timer IC/OC Register5 Lo (pg 804)
007565 7F7565 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03EC                TIM_TC6H:     equ $03EC ; Timer IC/OC Register6 Hi (pg 804)
007565 7F7565 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03ED                TIM_TC6L:     equ $03ED ; Timer IC/OC Register6 Lo (pg 804)
007565 7F7565 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03EE                TIM_TC7H:     equ $03EE ; Timer IC/OC Register6 Lo (pg 804)
007565 7F7565 -> $0080                Bit15:        equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit14:        equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit13:        equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit12:        equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit11:        equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit10:        equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit9:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit8:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03EF                TIM_TC7L:     equ $03EF ; Timer IC/OC Register7 Lo (pg 804)
007565 7F7565 -> $0080                Bit7:         equ $80   ; %10000000 (bit 7)
007565 7F7565 -> $0040                Bit6:         equ $40   ; %01000000 (bit 6)
007565 7F7565 -> $0020                Bit5:         equ $20   ; %00100000 (bit 5)
007565 7F7565 -> $0010                Bit4:         equ $10   ; %00010000 (bit 4)
007565 7F7565 -> $0008                Bit3:         equ $08   ; %00001000 (bit 3)
007565 7F7565 -> $0004                Bit2:         equ $04   ; %00000100 (bit 2)
007565 7F7565 -> $0002                Bit1:         equ $02   ; %00000010 (bit 1)
007565 7F7565 -> $0001                Bit0:         equ $01   ; %00000001 (bit 0)
007565 7F7565 -> $03F0                TIM_PACTL:    equ $03F0 ; 16-Bit Pulse Accumulator Control Register (pg 805)
007565 7F7565 -> $0040                PAEN:         equ $40   ; %01000000 Pulse Accumulator System Enable(bit 6)
007565 7F7565 -> $0020                PAMOD:        equ $20   ; %00100000 Pulse Accumulator Mode(bit 5)
007565 7F7565 -> $0010                PEDGE:        equ $10   ; %00010000 Pulse Accumulator Edge Control(bit 4)
007565 7F7565 -> $0008                CLK1:         equ $08   ; %00001000 Clock Select(bit 3)
007565 7F7565 -> $0004                CLK0:         equ $04   ; %00000100 Clock Select(bit 2)
007565 7F7565 -> $0002                PAOV1:        equ $02   ; %00000010 Pulse Accumulator Overflow Interrupt Enable(bit 1)
007565 7F7565 -> $0001                PAI:          equ $01   ; %00000001 Pulse Accumulator Input Interrupt Enable(bit 0)
007565 7F7565 -> $03F1                TIM_PAFLG:    equ $03F1 ; Pulse Accumulator Flag Register (pg 806)
007565 7F7565 -> $0002                PAOVF:        equ $02   ; %00000010 Pulse Accumulator Overflow Flag(bit 1)
007565 7F7565 -> $0001                PAIF:         equ $01   ; %00000001 Pulse Accumulator input edge Flag(bit 0)
007565 7F7565 -> $03F2                TIM_PACNTH:   equ $03F2 ; Pulse Accumulator Count Register High (pg 807)
007565 7F7565 -> $0080                PACN15:       equ $80   ; %10000000 Pulse Accumulator Count Data bit 15
007565 7F7565 -> $0040                PACN14:       equ $40   ; %01000000 Pulse Accumulator Count Data bit 14
007565 7F7565 -> $0020                PACN13:       equ $20   ; %00100000 Pulse Accumulator Count Data bit 13
007565 7F7565 -> $0010                PACN12:       equ $10   ; %00010000 Pulse Accumulator Count Data bit 12
007565 7F7565 -> $0008                PACN11:       equ $08   ; %00001000 Pulse Accumulator Count Data bit 11
007565 7F7565 -> $0004                PACN10:       equ $04   ; %00000100 Pulse Accumulator Count Data bit 10
007565 7F7565 -> $0002                PACN9:        equ $02   ; %00000010 Pulse Accumulator Count Data bit 9
007565 7F7565 -> $0001                PACN8:        equ $01   ; %00000001 Pulse Accumulator Count Data bit 8
007565 7F7565 -> $03F3                TIM_PACNTL:   equ $03F3 ; Pulse Accumulators Count Register Low (pg 807)
007565 7F7565 -> $0080                PACN7:        equ $80   ; %10000000 Pulse Accumulator Count Data bit 7
007565 7F7565 -> $0040                PACN6:        equ $40   ; %01000000 Pulse Accumulator Count Data bit 6
007565 7F7565 -> $0020                PACN5:        equ $20   ; %00100000 Pulse Accumulator Count Data bit 5
007565 7F7565 -> $0010                PACN4:        equ $10   ; %00010000 Pulse Accumulator Count Data bit 4
007565 7F7565 -> $0008                PACN3:        equ $08   ; %00001000 Pulse Accumulator Count Data bit 3
007565 7F7565 -> $0004                PACN2:        equ $04   ; %00000100 Pulse Accumulator Count Data bit 2
007565 7F7565 -> $0002                PACN1:        equ $02   ; %00000010 Pulse Accumulator Count Data bit 1
007565 7F7565 -> $0001                PACN0:        equ $01   ; %00000001 Pulse Accumulator Count Data bit 0
                                      ;$03F4 to $03FB reserved
007565 7F7565 -> $03FC                TIM_OCPD:     equ $03FC ; Output Compare Pin Disconnect Register (pg 808)
007565 7F7565 -> $0080                OCPD7:        equ $80   ; %10000000 Output Compare Pin Disconnect bit 7
007565 7F7565 -> $0040                OCPD6:        equ $40   ; %01000000 Output Compare Pin Disconnect bit 6
007565 7F7565 -> $0020                OCPD5:        equ $20   ; %00100000 Output Compare Pin Disconnect bit 5
007565 7F7565 -> $0010                OCPD4:        equ $10   ; %00010000 Output Compare Pin Disconnect bit 4
007565 7F7565 -> $0008                OCPD3:        equ $08   ; %00001000 Output Compare Pin Disconnect bit 3
007565 7F7565 -> $0004                OCPD2:        equ $04   ; %00000100 Output Compare Pin Disconnect bit 2
007565 7F7565 -> $0002                OCPD1:        equ $02   ; %00000010 Output Compare Pin Disconnect bit 1
007565 7F7565 -> $0001                OCPD0:        equ $01   ; %00000001 Output Compare Pin Disconnect bit 0
                                      ;$03FD reserved
007565 7F7565 -> $03FE                TIM_PTPSR:    equ $03FE ; Precision Timer Prescaler Select Register (pg 808)
007565 7F7565 -> $0080                PTPS7:        equ $80   ; %10000000 Precision Timer Prescaler Select bit 7
007565 7F7565 -> $0040                PTPS6:        equ $40   ; %01000000 Precision Timer Prescaler Select bit 6
007565 7F7565 -> $0020                PTPS5:        equ $20   ; %00100000 Precision Timer Prescaler Select bit 5
007565 7F7565 -> $0010                PTPS4:        equ $10   ; %00010000 Precision Timer Prescaler Select bit 4
007565 7F7565 -> $0008                PTPS3:        equ $08   ; %00001000 Precision Timer Prescaler Select bit 3
007565 7F7565 -> $0004                PTPS2:        equ $04   ; %00000100 Precision Timer Prescaler Select bit 2
007565 7F7565 -> $0002                PTPS1:        equ $02   ; %00000010 Precision Timer Prescaler Select bit 1
007565 7F7565 -> $0001                PTPS0:        equ $01   ; %00000001 Precision Timer Prescaler Select bit 0
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (vectabs_BPEM488.s)                                                        *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    CPU vector tables for 9S12XEP100                                                   *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project(This module)  *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 25 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
007565 7F7565 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Constants -                                                                         *
                                      ;*****************************************************************************************
                                      ; - "ResetFlgs" bit field variable equates -
007565 7F7565 -> $0001                uiISR      equ $01  ; Unimplimented ISR %00000001 (set bit 0)
007565 7F7565 -> $0002                PoLvExrst  equ $02  ; Power on, Lo Volt, Ext reset  %00000010 (set bit 1)
007565 7F7565 -> $0004                Cmrst      equ $04  ; Clock Monitor reset  %00000100 (set bit 2)
007565 7F7565 -> $0008                Coprst     equ $08  ; COP reset  %00001000 (set bit 3)
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001000 0FD000                                     ORG     VECTAB_VARS_START, VECTAB_VARS_START_LIN
001000 0FD000 -> $FD000               VECTAB_VARS_START_LIN   EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
001000 0FD000                         ResetFlgs:  ds 1 ; Reset Flags bit field variable
001001 0FD001                         VecDebug:   ds 1 ; Vector Table de-bug address holder
001002 0FD002 -> $1002                VECTAB_VARS_END         EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001002 0FD002 -> $FD002               VECTAB_VARS_END_LIN     EQU     @     ; @ Represents the current value of the linear
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005538 7F5538                                                 ORG     VECTAB_CODE_START, VECTAB_CODE_START_LIN
005538 7F5538 -> $7F5538              VECTAB_CODE_START_LIN   EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - Unimpimented ISRs -
                                      ;   Each ISR loads the last byte of the vector address into the variable "VecDebug"
                                      ;   and stops the code there. Use D-Bug12 to read "VecDebug" to determine which is the
                                      ;   offending vector. Then try to figure out why it happended.
                                      ;*****************************************************************************************
005538 7F5538                         SPURIOUS_ISR:
005538 7F5538 18 0B 10 10 01              movb #$10,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00553D 7F553D 20 F9                       bra  SPURIOUS_ISR    ; Keep looping here
00553F 7F553F                         SYS_ISR:
00553F 7F553F 18 0B 12 10 01              movb #$12,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005544 7F5544 20 F9                       bra  SYS_ISR         ; Keep looping here
005546 7F5546                         MPU_ISR:
005546 7F5546 18 0B 14 10 01              movb #$14,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00554B 7F554B 20 F9                       bra  MPU_ISR         ; Keep looping here
00554D 7F554D                         XGSWE_ISR:
00554D 7F554D 18 0B 16 10 01              movb #$16,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005552 7F5552 20 F9                       bra  XGSWE_ISR       ; Keep looping here
005554 7F5554                         RES18_ISR
005554 7F5554 18 0B 18 10 01              movb #$18,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005559 7F5559 20 F9                       bra  RES18_ISR       ; Keep looping here
00555B 7F555B                         RES1A_ISR:
00555B 7F555B 18 0B 1A 10 01              movb #$1A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005560 7F5560 20 F9                       bra  RES1A_ISR       ; Keep looping here
005562 7F5562                         RES1C_ISR:
005562 7F5562 18 0B 1C 10 01              movb #$1C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005567 7F5567 20 F9                       bra  RES1C_ISR       ; Keep looping here
005569 7F5569                         RES1E_ISR:
005569 7F5569 18 0B 1E 10 01              movb #$1E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00556E 7F556E 20 F9                       bra  RES1E_ISR       ; Keep looping here
005570 7F5570                         RES20_ISR:
005570 7F5570 18 0B 20 10 01              movb #$20,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005575 7F5575 20 F9                       bra  RES20_ISR       ; Keep looping here
005577 7F5577                         RES22_ISR:
005577 7F5577 18 0B 22 10 01              movb #$22,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00557C 7F557C 20 F9                       bra  RES22_ISR       ; Keep looping here
00557E 7F557E                         RES24_ISR:
00557E 7F557E 18 0B 24 10 01              movb #$24,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005583 7F5583 20 F9                       bra  RES24_ISR       ; Keep looping here
005585 7F5585                         RES26_ISR:
005585 7F5585 18 0B 26 10 01              movb #$26,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00558A 7F558A 20 F9                       bra  RES26_ISR       ; Keep looping here
00558C 7F558C                         RES28_ISR:
00558C 7F558C 18 0B 28 10 01              movb #$28,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005591 7F5591 20 F9                       bra  RES28_ISR       ; Keep looping here
005593 7F5593                         RES2A_ISR:
005593 7F5593 18 0B 2A 10 01              movb #$2A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005598 7F5598 20 F9                       bra  RES2A_ISR       ; Keep looping here
00559A 7F559A                         RES2C_ISR:
00559A 7F559A 18 0B 2C 10 01              movb #$2C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00559F 7F559F 20 F9                       bra  RES2C_ISR       ; Keep looping here
0055A1 7F55A1                         RES2E_ISR:
0055A1 7F55A1 18 0B 2E 10 01              movb #$2E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055A6 7F55A6 20 F9                       bra  RES2E_ISR       ; Keep looping here
0055A8 7F55A8                         RES30_ISR:
0055A8 7F55A8 18 0B 30 10 01              movb #$30,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055AD 7F55AD 20 F9                       bra  RES30_ISR       ; Keep looping here
0055AF 7F55AF                         RES32_ISR:
0055AF 7F55AF 18 0B 32 10 01              movb #$32,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055B4 7F55B4 20 F9                       bra  RES32_ISR       ; Keep looping here
0055B6 7F55B6                         RES34_ISR:
0055B6 7F55B6 18 0B 34 10 01              movb #$34,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055BB 7F55BB 20 F9                       bra  RES34_ISR       ; Keep looping here
0055BD 7F55BD                         RES36_ISR:
0055BD 7F55BD 18 0B 36 10 01              movb #$36,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055C2 7F55C2 20 F9                       bra  RES36_ISR       ; Keep looping here
0055C4 7F55C4                         RES38_ISR:
0055C4 7F55C4 18 0B 38 10 01              movb #$38,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055C9 7F55C9 20 F9                       bra  RES38_ISR       ; Keep looping here
0055CB 7F55CB                         RES3A_ISR:
0055CB 7F55CB 18 0B 3A 10 01              movb #$3A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055D0 7F55D0 20 F9                       bra  RES3A_ISR       ; Keep looping here
0055D2 7F55D2                         ATD1COMP_ISR:
0055D2 7F55D2 18 0B 3C 10 01              movb #$3C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055D7 7F55D7 20 F9                       bra  ATD1COMP_ISR    ; Keep looping here
0055D9 7F55D9                         ATD0COMP_ISR:
0055D9 7F55D9 18 0B 3E 10 01              movb #$3E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055DE 7F55DE 20 F9                       bra  ATD0COMP_ISR    ; Keep looping here
0055E0 7F55E0                         TIM_PAIE_ISR:
0055E0 7F55E0 18 0B 40 10 01              movb #$40,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055E5 7F55E5 20 F9                       bra  TIM_PAIE_ISR    ; Keep looping here
0055E7 7F55E7                         TIM_PAOV_ISR:
0055E7 7F55E7 18 0B 42 10 01              movb #$42,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055EC 7F55EC 20 F9                       bra  TIM_PAOV_ISR    ; Keep looping here
0055EE 7F55EE                         TIM_TOV_ISR:
0055EE 7F55EE 18 0B 44 10 01              movb #$44,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055F3 7F55F3 20 F9                       bra  TIM_TOV_ISR     ; Keep looping here
                                      ;*TIM_TC7_ISR:
                                      ;*    movb #$46,VecDebug   ; Load "VecDebug" with the last byte of the vector address  ; TIM ch7 ((D7)(87to112)(Inj5)(7&2)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC7_ISR     ; Keep looping here
                                      ;*TIM_TC6_ISR:
                                      ;*    movb #$48,VecDebug   ; Load "VecDebug" with the last byte of the vector address  ; TIM ch6 ((D1)(87to112)(Inj4)(5&8)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC6_ISR     ; Keep looping here
                                      ;*TIM_TC5_ISR:
                                      ;*    movb #$4A,VecDebug   ; Load "VecDebug" with the last byte of the vector address  ; TIM ch5 ((D6)(87to112)(Inj3)(3&6)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC5_ISR     ; Keep looping here
                                      ;*TIM_TC4_ISR:
                                      ;*    movb #$4C,VecDebug   ; Load "VecDebug" with the last byte of the vector address  ; TIM ch4 ((D3)(87to112)(Inj2)(9&4)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC4_ISR     ; Keep looping here
                                      ;*TIM_TC3_ISR:
                                      ;*    movb #$4E,VecDebug   ; Load "VecDebug" with the last byte of the vector address  ; TIM ch3 ((D1)(1to28)(Inj1)(1&10)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC3_ISR     ; Keep looping here
                                      ;*TIM_TC2_ISR:
                                      ;*    movb #$50,VecDebug   ; Load "VecDebug" with the last byte of the vector address  ; TIM ch2 ((D24)(1to28)(Ign5)(3&2)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC2_ISR     ; Keep looping here
                                      ;*TIM_TC1_ISR:
                                      ;*    movb #$52,VecDebug   ; Load "VecDebug" with the last byte of the vector address   ; TIM ch1 ((D5)(1to28)(Ign4)(4&7)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC1_ISR     ; Keep looping here
                                      ;*TIM_TC0_ISR:
                                      ;*    movb #$54,VecDebug   ; Load "VecDebug" with the last byte of the vector address  ; TIM ch0 ((D21)(1to28)(Ign3)(9&8)), ENABLED, CPU level 1
                                      ;*    bra  TIM_TC0_ISR     ; Keep looping here
0055F5 7F55F5                         SCI7_ISR:
0055F5 7F55F5 18 0B 56 10 01              movb #$56,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0055FA 7F55FA 20 F9                       bra  SCI7_ISR        ; Keep looping here
0055FC 7F55FC                         PITCH7_ISR:
0055FC 7F55FC 18 0B 58 10 01              movb #$58,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005601 7F5601 20 F9                       bra  PITCH7_ISR      ; Keep looping here
005603 7F5603                         PITCH6_ISR:
005603 7F5603 18 0B 5A 10 01              movb #$5A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005608 7F5608 20 F9                       bra  PITCH6_ISR      ; Keep looping here
00560A 7F560A                         PITCH5_ISR:
00560A 7F560A 18 0B 5C 10 01              movb #$5C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00560F 7F560F 20 F9                       bra  PITCH5_ISR      ; Keep looping here
005611 7F5611                         PITCH4_ISR:
005611 7F5611 18 0B 5E 10 01              movb #$5E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005616 7F5616 20 F9                       bra  PITCH4_ISR      ; Keep looping here
005618 7F5618                         RES60_ISR:
005618 7F5618 18 0B 60 10 01              movb #$60,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00561D 7F561D 20 F9                       bra  RES60_ISR       ; Keep looping here
00561F 7F561F                         RES62_ISR:
00561F 7F561F 18 0B 62 10 01              movb #$62,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005624 7F5624 20 F9                       bra  RES62_ISR       ; Keep looping here
005626 7F5626                         XGSWT7_ISR:
005626 7F5626 18 0B 64 10 01              movb #$64,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00562B 7F562B 20 F9                       bra  XGSWT7_ISR      ; Keep looping here
00562D 7F562D                         XGSWT6_ISR:
00562D 7F562D 18 0B 66 10 01              movb #$66,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005632 7F5632 20 F9                       bra  XGSWT6_ISR      ; Keep looping here
005634 7F5634                         XGSWT5_ISR:
005634 7F5634 18 0B 68 10 01              movb #$68,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005639 7F5639 20 F9                       bra  XGSWT5_ISR      ; Keep looping here
00563B 7F563B                         XGSWT4_ISR:
00563B 7F563B 18 0B 6A 10 01              movb #$6A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005640 7F5640 20 F9                       bra  XGSWT4_ISR      ; Keep looping here
005642 7F5642                         XGSWT3_ISR:
005642 7F5642 18 0B 6C 10 01              movb #$6C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005647 7F5647 20 F9                       bra  XGSWT3_ISR      ; Keep looping here
005649 7F5649                         XGSWT2_ISR:
005649 7F5649 18 0B 6E 10 01              movb #$6E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00564E 7F564E 20 F9                       bra  XGSWT2_ISR      ; Keep looping here
005650 7F5650                         XGSWT1_ISR:
005650 7F5650 18 0B 70 10 01              movb #$70,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005655 7F5655 20 F9                       bra  XGSWT1_ISR      ; Keep looping here
005657 7F5657                         XGSWT0_ISR:
005657 7F5657 18 0B 72 10 01              movb #$72,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00565C 7F565C 20 F9                       bra  XGSWT0_ISR      ; Keep looping here
00565E 7F565E                         PITCH3_ISR:
00565E 7F565E 18 0B 74 10 01              movb #$74,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005663 7F5663 20 F9                       bra  PITCH3_ISR      ; Keep looping here
005665 7F5665                         PITCH2_ISR:
005665 7F5665 18 0B 76 10 01              movb #$76,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00566A 7F566A 20 F9                       bra  PITCH2_ISR      ; Keep looping here
00566C 7F566C                         PITCH1_ISR:
00566C 7F566C 18 0B 78 10 01              movb #$78,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005671 7F5671 20 F9                       bra  PITCH1_ISR      ; Keep looping here
005673 7F5673                         PITCH0_ISR:
005673 7F5673 18 0B 7A 10 01              movb #$7A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005678 7F5678 20 F9                       bra  PITCH0_ISR      ; Keep looping here
00567A 7F567A                         HT_ISR:
00567A 7F567A 18 0B 7C 10 01              movb #$7C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00567F 7F567F 20 F9                       bra  HT_ISR          ; Keep looping here
005681 7F5681                         API_ISR:
005681 7F5681 18 0B 7E 10 01              movb #$7E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005686 7F5686 20 F9                       bra  API_ISR         ; Keep looping here
005688 7F5688                         LVI_ISR:
005688 7F5688 18 0B 80 10 01              movb #$80,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00568D 7F568D 20 F9                       bra  LVI_ISR         ; Keep looping here
00568F 7F568F                         IIC1_ISR:
00568F 7F568F 18 0B 82 10 01              movb #$82,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005694 7F5694 20 F9                       bra  IIC1_ISR        ; Keep looping here
005696 7F5696                         SCI5_ISR:
005696 7F5696 18 0B 84 10 01              movb #$84,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00569B 7F569B 20 F9                       bra  SCI5_ISR        ; Keep looping here
00569D 7F569D                         SCI4_ISR:
00569D 7F569D 18 0B 86 10 01              movb #$86,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056A2 7F56A2 20 F9                       bra  SCI4_ISR        ; Keep looping here
0056A4 7F56A4                         SCI3_ISR:
0056A4 7F56A4 18 0B 88 10 01              movb #$88,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056A9 7F56A9 20 F9                       bra  SCI3_ISR        ; Keep looping here
0056AB 7F56AB                         SCI2_ISR:
0056AB 7F56AB 18 0B 8A 10 01              movb #$8A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056B0 7F56B0 20 F9                       bra  SCI2_ISR        ; Keep looping here
0056B2 7F56B2                         PWMSDN_ISR:
0056B2 7F56B2 18 0B 8C 10 01              movb #$8C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056B7 7F56B7 20 F9                       bra  PWMSDN_ISR      ; Keep looping here
0056B9 7F56B9                         PORTP_ISR:
0056B9 7F56B9 18 0B 8E 10 01              movb #$8E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056BE 7F56BE 20 F9                       bra  PORTP_ISR       ; Keep looping here
0056C0 7F56C0                         CAN4TX_ISR:
0056C0 7F56C0 18 0B 90 10 01              movb #$90,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056C5 7F56C5 20 F9                       bra  CAN4TX_ISR      ; Keep looping here
0056C7 7F56C7                         CAN4RX_ISR:
0056C7 7F56C7 18 0B 92 10 01              movb #$92,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056CC 7F56CC 20 F9                       bra  CAN4RX_ISR      ; Keep looping here
0056CE 7F56CE                         CAN4ERR_ISR:
0056CE 7F56CE 18 0B 94 10 01              movb #$94,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056D3 7F56D3 20 F9                       bra  CAN4ERR_ISR     ; Keep looping here
0056D5 7F56D5                         CAN4WUP_ISR:
0056D5 7F56D5 18 0B 96 10 01              movb #$96,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056DA 7F56DA 20 F9                       bra  CAN4WUP_ISR     ; Keep looping here
0056DC 7F56DC                         CAN3TX_ISR:
0056DC 7F56DC 18 0B 98 10 01              movb #$98,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056E1 7F56E1 20 F9                       bra  CAN3TX_ISR      ; Keep looping here
0056E3 7F56E3                         CAN3RX_ISR:
0056E3 7F56E3 18 0B 9A 10 01              movb #$9A,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056E8 7F56E8 20 F9                       bra  CAN3RX_ISR      ; Keep looping here
0056EA 7F56EA                         CAN3ERR_ISR:
0056EA 7F56EA 18 0B 9C 10 01              movb #$9C,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056EF 7F56EF 20 F9                       bra  CAN3ERR_ISR     ; Keep looping here
0056F1 7F56F1                         CAN3WUP_ISR:
0056F1 7F56F1 18 0B 9E 10 01              movb #$9E,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056F6 7F56F6 20 F9                       bra  CAN3WUP_ISR     ; Keep looping here
0056F8 7F56F8                         CAN2TX_ISR:
0056F8 7F56F8 18 0B A0 10 01              movb #$A0,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0056FD 7F56FD 20 F9                       bra  CAN2TX_ISR      ; Keep looping here
0056FF 7F56FF                         CAN2RX_ISR:
0056FF 7F56FF 18 0B A2 10 01              movb #$A2,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005704 7F5704 20 F9                       bra  CAN2RX_ISR      ; Keep looping here
005706 7F5706                         CAN2ERR_ISR:
005706 7F5706 18 0B A4 10 01              movb #$A4,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00570B 7F570B 20 F9                       bra  CAN2ERR_ISR     ; Keep looping here
00570D 7F570D                         CAN2WUP_ISR:
00570D 7F570D 18 0B A6 10 01              movb #$A6,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005712 7F5712 20 F9                       bra  CAN2WUP_ISR     ; Keep looping here
005714 7F5714                         CAN1TX_ISR:
005714 7F5714 18 0B A8 10 01              movb #$A8,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005719 7F5719 20 F9                       bra  CAN1TX_ISR      ; Keep looping here
00571B 7F571B                         CAN1RX_ISR:
00571B 7F571B 18 0B AA 10 01              movb #$AA,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005720 7F5720 20 F9                       bra  CAN1RX_ISR      ; Keep looping here
005722 7F5722                         CAN1ERR_ISR:
005722 7F5722 18 0B AC 10 01              movb #$AC,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005727 7F5727 20 F9                       bra  CAN1ERR_ISR     ; Keep looping here
005729 7F5729                         CAN1WUP_ISR:
005729 7F5729 18 0B AE 10 01              movb #$AE,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00572E 7F572E 20 F9                       bra  CAN1WUP_ISR     ; Keep looping here
005730 7F5730                         CAN0TX_ISR:
005730 7F5730 18 0B B0 10 01              movb #$B0,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005735 7F5735 20 F9                       bra  CAN0TX_ISR      ; Keep looping here
005737 7F5737                         CAN0RX_ISR:
005737 7F5737 18 0B B2 10 01              movb #$B2,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00573C 7F573C 20 F9                       bra  CAN0RX_ISR      ; Keep looping here
00573E 7F573E                         CAN0ERR_ISR:
00573E 7F573E 18 0B B4 10 01              movb #$B4,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005743 7F5743 20 F9                       bra  CAN0ERR_ISR     ; Keep looping here
005745 7F5745                         CAN0WUP_ISR:
005745 7F5745 18 0B B6 10 01              movb #$B6,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00574A 7F574A 20 F9                       bra  CAN0WUP_ISR     ; Keep looping here
00574C 7F574C                         FLASH_ISR:
00574C 7F574C 18 0B B8 10 01              movb #$B8,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005751 7F5751 20 F9                       bra  FLASH_ISR       ; Keep looping here
005753 7F5753                         FLASHFLT_ISR:
005753 7F5753 18 0B BA 10 01              movb #$BA,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005758 7F5758 20 F9                       bra  FLASHFLT_ISR    ; Keep looping here
00575A 7F575A                         SPI2_ISR:
00575A 7F575A 18 0B BC 10 01              movb #$BC,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00575F 7F575F 20 F9                       bra  SPI2_ISR        ; Keep looping here
005761 7F5761                         SPI1_ISR:
005761 7F5761 18 0B BE 10 01              movb #$BE,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005766 7F5766 20 F9                       bra  SPI1_ISR        ; Keep looping here
005768 7F5768                         IIC0_ISR:
005768 7F5768 18 0B C0 10 01              movb #$C0,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00576D 7F576D 20 F9                       bra  IIC0_ISR        ; Keep looping here
00576F 7F576F                         SCI6_ISR:
00576F 7F576F 18 0B C2 10 01              movb #$C2,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005774 7F5774 20 F9                       bra  SCI6_ISR        ; Keep looping here
005776 7F5776                         SCM_ISR:
005776 7F5776 18 0B C4 10 01              movb #$C4,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00577B 7F577B 20 F9                       bra  SCM_ISR         ; Keep looping here
00577D 7F577D                         PLLLOCK_ISR:
00577D 7F577D 18 0B C6 10 01              movb #$C6,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005782 7F5782 20 F9                       bra  PLLLOCK_ISR     ; Keep looping here
005784 7F5784                         ECT_PBOV_ISR:
005784 7F5784 18 0B C8 10 01              movb #$C8,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005789 7F5789 20 F9                       bra  ECT_PBOV_ISR    ; Keep looping here
00578B 7F578B                         ECT_MODCNT_ISR:
00578B 7F578B 18 0B CA 10 01              movb #$CA,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005790 7F5790 20 F9                       bra  ECT_MODCNT_ISR  ; Keep looping here
005792 7F5792                         PORTH_ISR:
005792 7F5792 18 0B CC 10 01              movb #$CC,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005797 7F5797 20 F9                       bra  PORTH_ISR       ; Keep looping here
005799 7F5799                         PORTJ_ISR:
005799 7F5799 18 0B CE 10 01              movb #$CE,VecDebug   ; Load "VecDebug" with the last byte of the vector address
00579E 7F579E 20 F9                       bra  PORTJ_ISR       ; Keep looping here
0057A0 7F57A0                         ATD1_ISR:
0057A0 7F57A0 18 0B D0 10 01              movb #$D0,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057A5 7F57A5 20 F9                       bra  ATD1_ISR        ; Keep looping here
0057A7 7F57A7                         ATD0_ISR:
0057A7 7F57A7 18 0B D2 10 01              movb #$D2,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057AC 7F57AC 20 F9                       bra  ATD0_ISR        ; Keep looping here
0057AE 7F57AE                         SCI1_ISR:
0057AE 7F57AE 18 0B D4 10 01              movb #$D4,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057B3 7F57B3 20 F9                       bra  SCI1_ISR        ; Keep looping here
                                      ;*SCI0_ISR:
                                      ;*    movb #$D6,VecDebug   ; Load "VecDebug" with the last byte of the vector address        ; SCI0 ENABLED, CPU, level 1
                                      ;*    bra  SCI1_ISR        ; Keep looping here
0057B5 7F57B5                         SPI0_ISR
0057B5 7F57B5 18 0B D8 10 01              movb #$D8,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057BA 7F57BA 20 F9                       bra  SPI0_ISR        ; Keep looping here
0057BC 7F57BC                         ECT_PAIE_ISR:
0057BC 7F57BC 18 0B DA 10 01              movb #$DA,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057C1 7F57C1 20 F9                       bra  ECT_PAIE_ISR    ; Keep looping here
0057C3 7F57C3                         ECT_PAOV_ISR:
0057C3 7F57C3 18 0B DC 10 01              movb #$DC,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057C8 7F57C8 20 F9                       bra  ECT_PAOV_ISR    ; Keep looping here
0057CA 7F57CA                         ECT_TOV_ISR:
0057CA 7F57CA 18 0B DE 10 01              movb #$DE,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057CF 7F57CF 20 F9                       bra  ECT_TOV_ISR     ; Keep looping here
                                      ;*ECT_TC7_ISR:
                                      ;*    movb #$E0,VecDebug   ; Load "VecDebug" with the last byte of the vector address       ; ECT ch7 (Crank) ENABLED, CPU, level 7 (Highest)
                                      ;*    bra  ECT_TC7_ISR     ; Keep looping here
                                      ;*ECT_TC6_ISR:
                                      ;*    movb #$E2,VecDebug   ; Load "VecDebug" with the last byte of the vector address      ; ECT ch6 (VSS) ENABLED, CPU, level 1
                                      ;*    bra  ECT_TC3_ISR     ; Keep looping here
                                      ;*ECT_TC5_ISR:
                                      ;*    movb #$E4,VecDebug   ; Load "VecDebug" with the last byte of the vector address      ; ECT ch5 (Cam) ENABLED, CpU level 6
                                      ;*    bra  ECT_TC5_ISR     ; Keep looping here
0057D1 7F57D1                         ECT_TC4_ISR:
0057D1 7F57D1 18 0B E6 10 01              movb #$E6,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057D6 7F57D6 20 00                       bra  ECT_TC3_ISR     ; Keep looping here
0057D8 7F57D8                         ECT_TC3_ISR:
0057D8 7F57D8 18 0B E8 10 01              movb #$E8,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057DD 7F57DD 20 F9                       bra  ECT_TC3_ISR     ; Keep looping here
                                      ;*ECT_TC2_ISR:
                                      ;*    movb #$EA,VecDebug   ; Load "VecDebug" with the last byte of the vector address      ; ECT ch2 ((D8)(1to28)(Ign2)(10&5)), ENABLED, CPU level 1
                                      ;*    bra  ECT_TC2_ISR     ; Keep looping here
0057DF 7F57DF                         ECT_TC1_ISR:
0057DF 7F57DF 18 0B EC 10 01              movb #$EC,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057E4 7F57E4 20 F9                       bra  ECT_TC1_ISR     ; Keep looping here
                                      ;*ECT_TC0_ISR:
                                      ;*    movb #$EE,VecDebug   ; Load "VecDebug" with the last byte of the vector address      ; ECT ch0 ((D7)(1to28)(Ign1)(1&6)), ENABLED, CPU level 1
                                      ;*    bra  ECT_TC0_ISR     ; Keep looping here
                                      ;*RTI_ISR
                                      ;*    movb #$F0,VecDebug   ; Load "VecDebug" with the last byte of the vector address        ; RTI ENABLED, CPU, level 1
                                      ;*    bra  RTI_ISR         ; Keep looping here
0057E6 7F57E6                         IRQ_ISR:
0057E6 7F57E6 18 0B F2 10 01              movb #$F2,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057EB 7F57EB 20 F9                       bra  IRQ_ISR         ; Keep looping here
0057ED 7F57ED                         XIRQ_ISR:
0057ED 7F57ED 18 0B F4 10 01              movb #$F4,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057F2 7F57F2 20 F9                       bra  XIRQ_ISR        ; Keep looping here
0057F4 7F57F4                         SWI_ISR:
0057F4 7F57F4 18 0B F6 10 01              movb #$F6,VecDebug   ; Load "VecDebug" with the last byte of the vector address
0057F9 7F57F9 20 F9                       bra  SWI_ISR         ; Keep looping here
0057FB 7F57FB                         TRAP_ISR:
0057FB 7F57FB 18 0B F8 10 01              movb #$F8,VecDebug   ; Load "VecDebug" with the last byte of the vector address
005800 7F5800 20 F9                       bra  TRAP_ISR        ; Keep looping here
                                      ;*****************************************************************************************
                                      ; - Reset entry points -
                                      ;*****************************************************************************************
                                      ; - Power-on, Low voltage and External reset -
005802 7F5802                         RESET_EXT_ENTRY:
005802 7F5802 18 0B 02 10 00              movb  #PoLvExrst,ResetFlgs  ; Load "ResetFlgs" with %00000010 (set bit 1)
005807 7F5807 06 40 00                    job   BPEM488_CODE_START    ; Jump or Branch to BPEM488_CODE_START: (Start of BPEM488.s)
                                      ; - Clock Monitor reset -
00580A 7F580A                         RESET_CM_ENTRY:
00580A 7F580A 18 0B 04 10 00              movb  #Cmrst,ResetFlgs      ; Load "ResetFlgs" with %00000100 (set bit 2)
00580F 7F580F 06 40 00                    job   BPEM488_CODE_START    ; Jump or Branch to BPEM488_CODE_START: (Start of BPEM488.s)
                                      ; - COP and user reset -
005812 7F5812                         RESET_COP_ENTRY:
005812 7F5812 18 0B 08 10 00              movb  #Coprst,ResetFlgs     ; Load "ResetFlgs" with %00001000 (set bit 3)
005817 7F5817 06 40 00                    job   BPEM488_CODE_START    ; Jump or Branch to BPEM488_CODE_START: (Start of BPEM488.s)
00581A 7F581A -> $581A                VECTAB_CODE_END         EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
00581A 7F581A -> $7F581A              VECTAB_CODE_END_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C5B 7F6C5B                                                 ORG     VECTAB_TABS_START, VECTAB_TABS_START_LIN
006C5B 7F6C5B -> $7F6C5B              VECTAB_TABS_START_LIN   EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; - Interrupt service routines -
006C5B 7F6C5B -> $5538                ISR_SPURIOUS    EQU SPURIOUS_ISR                ;vector base + $10
006C5B 7F6C5B -> $553F                ISR_SYS                 EQU SYS_ISR                             ;vector base + $12
006C5B 7F6C5B -> $5546                ISR_MPU                 EQU MPU_ISR                             ;vector base + $14
006C5B 7F6C5B -> $554D                ISR_XGSWE       EQU XGSWE_ISR                   ;vector base + $16
006C5B 7F6C5B -> $5554                ISR_RES18               EQU RES18_ISR                   ;vector base + $18
006C5B 7F6C5B -> $555B                ISR_RES1A               EQU RES1A_ISR                   ;vector base + $1A
006C5B 7F6C5B -> $5562                ISR_RES1C               EQU RES1C_ISR                   ;vector base + $1C
006C5B 7F6C5B -> $5569                ISR_RES1E               EQU RES1E_ISR                   ;vector base + $1E
006C5B 7F6C5B -> $5570                ISR_RES20               EQU RES20_ISR                   ;vector base + $20
006C5B 7F6C5B -> $5577                ISR_RES22               EQU RES22_ISR                   ;vector base + $22
006C5B 7F6C5B -> $557E                ISR_RES24               EQU RES24_ISR                   ;vector base + $24
006C5B 7F6C5B -> $5585                ISR_RES26               EQU RES26_ISR                   ;vector base + $26
006C5B 7F6C5B -> $558C                ISR_RES28               EQU RES28_ISR                   ;vector base + $28
006C5B 7F6C5B -> $5593                ISR_RES2A               EQU RES2A_ISR                   ;vector base + $2A
006C5B 7F6C5B -> $559A                ISR_RES2C               EQU RES2C_ISR                   ;vector base + $2C
006C5B 7F6C5B -> $55A1                ISR_RES2E               EQU RES2E_ISR                   ;vector base + $2E
006C5B 7F6C5B -> $55A8                ISR_RES30               EQU RES30_ISR                   ;vector base + $30
006C5B 7F6C5B -> $55AF                ISR_RES32               EQU RES32_ISR                   ;vector base + $32
006C5B 7F6C5B -> $55B6                ISR_RES34               EQU RES34_ISR                   ;vector base + $34
006C5B 7F6C5B -> $55BD                ISR_RES36               EQU RES36_ISR                   ;vector base + $36
006C5B 7F6C5B -> $55C4                ISR_RES38               EQU RES38_ISR                   ;vector base + $38
006C5B 7F6C5B -> $55CB                ISR_RES3A               EQU RES3A_ISR                   ;vector base + $3A
006C5B 7F6C5B -> $55D2                ISR_ATD1COMP    EQU ATD1COMP_ISR                ;vector base + $3C
006C5B 7F6C5B -> $55D9                ISR_ATD0COMP    EQU ATD0COMP_ISR                ;vector base + $3E
006C5B 7F6C5B -> $55E0                ISR_TIM_PAIE    EQU TIM_PAIE_ISR                ;vector base + $40
006C5B 7F6C5B -> $55E7                ISR_TIM_PAOV    EQU TIM_PAOV_ISR                ;vector base + $42
006C5B 7F6C5B -> $55EE                ISR_TIM_TOV     EQU TIM_TOV_ISR                 ;vector base + $44
006C5B 7F6C5B -> $5C3C                ISR_TIM_TC7     EQU TIM_TC7_ISR                 ;vector base + $46    ; TIM CH 7 ((D7)(87to112)(Inj5)(7&2)) enabled
006C5B 7F6C5B -> $5C2A                ISR_TIM_TC6     EQU TIM_TC6_ISR                 ;vector base + $48    ; TIM Ch 6 ((D1)(87to112)(Inj4)(5&8)) enabled
006C5B 7F6C5B -> $5C18                ISR_TIM_TC5     EQU TIM_TC5_ISR                 ;vector base + $4A    ; TIM Ch 5 ((D6)(87to112)(Inj3)(3&6)) enabled
006C5B 7F6C5B -> $5C06                ISR_TIM_TC4     EQU TIM_TC4_ISR                 ;vector base + $4C    ; TIM Ch 4 ((D3)(87to112)(Inj2)(9&4)) enabled
006C5B 7F6C5B -> $5BD3                ISR_TIM_TC3     EQU TIM_TC3_ISR                 ;vector base + $4E    ; TIM Ch 3 ((D1)(1to28)(Inj1)(1&10)) enabled
006C5B 7F6C5B -> $5BC1                ISR_TIM_TC2     EQU TIM_TC2_ISR                 ;vector base + $50    ; TIM Ch 2 ((D24)(1to28)(Ign5)(3&2)) enabled
006C5B 7F6C5B -> $5BAF                ISR_TIM_TC1     EQU TIM_TC1_ISR                 ;vector base + $52    ; TIM Ch 1 ((D5)(1to28)(Ign4)(4&7)) enabled
006C5B 7F6C5B -> $5B9D                ISR_TIM_TC0     EQU TIM_TC0_ISR                 ;vector base + $54    ; TIM Ch 0 ((D21)(1to28)(Ign3)(9&8))enabled
006C5B 7F6C5B -> $55F5                ISR_SCI7        EQU SCI7_ISR                    ;vector base + $56
006C5B 7F6C5B -> $55FC                ISR_PITCH7      EQU PITCH7_ISR                  ;vector base + $58
006C5B 7F6C5B -> $5603                ISR_PITCH6      EQU PITCH6_ISR                  ;vector base + $5A
006C5B 7F6C5B -> $560A                ISR_PITCH5      EQU PITCH5_ISR                  ;vector base + $5C
006C5B 7F6C5B -> $5611                ISR_PITCH4      EQU PITCH4_ISR                  ;vector base + $5E
006C5B 7F6C5B -> $5618                ISR_RES60               EQU RES60_ISR                   ;vector base + $60
006C5B 7F6C5B -> $561F                ISR_RES62               EQU RES62_ISR                   ;vector base + $62
006C5B 7F6C5B -> $5626                ISR_XGSWT7              EQU XGSWT7_ISR                  ;vector base + $64
006C5B 7F6C5B -> $562D                ISR_XGSWT6              EQU XGSWT6_ISR                  ;vector base + $66
006C5B 7F6C5B -> $5634                ISR_XGSWT5              EQU XGSWT5_ISR                  ;vector base + $68
006C5B 7F6C5B -> $563B                ISR_XGSWT4              EQU XGSWT4_ISR                  ;vector base + $6A
006C5B 7F6C5B -> $5642                ISR_XGSWT3              EQU XGSWT3_ISR                  ;vector base + $6C
006C5B 7F6C5B -> $5649                ISR_XGSWT2              EQU XGSWT2_ISR                  ;vector base + $6E
006C5B 7F6C5B -> $5650                ISR_XGSWT1              EQU XGSWT1_ISR                  ;vector base + $70
006C5B 7F6C5B -> $5657                ISR_XGSWT0              EQU XGSWT0_ISR                  ;vector base + $72     ; XGATE SW Trig 0 (RTI) DISABLED, XGATE, level 1 (used to clear RTI variables)
006C5B 7F6C5B -> $565E                ISR_PITCH3              EQU PITCH3_ISR                  ;vector base + $74
006C5B 7F6C5B -> $5665                ISR_PITCH2              EQU PITCH2_ISR                  ;vector base + $76
006C5B 7F6C5B -> $566C                ISR_PITCH1              EQU PITCH1_ISR                  ;vector base + $78
006C5B 7F6C5B -> $5673                ISR_PITCH0              EQU PITCH0_ISR                  ;vector base + $7A
006C5B 7F6C5B -> $567A                ISR_HT                  EQU HT_ISR                              ;vector base + $7C
006C5B 7F6C5B -> $5681                ISR_API                 EQU API_ISR                             ;vector base + $7E
006C5B 7F6C5B -> $5688                ISR_LVI                 EQU LVI_ISR                             ;vector base + $80
006C5B 7F6C5B -> $568F                ISR_IIC1                EQU IIC1_ISR                    ;vector base + $82
006C5B 7F6C5B -> $5696                ISR_SCI5                EQU SCI5_ISR                    ;vector base + $84
006C5B 7F6C5B -> $569D                ISR_SCI4                EQU SCI4_ISR                    ;vector base + $86
006C5B 7F6C5B -> $56A4                ISR_SCI3                EQU SCI3_ISR                    ;vector base + $88
006C5B 7F6C5B -> $56AB                ISR_SCI2                EQU SCI2_ISR                    ;vector base + $8A
006C5B 7F6C5B -> $56B2                ISR_PWMSDN              EQU PWMSDN_ISR                  ;vector base + $8C
006C5B 7F6C5B -> $56B9                ISR_PORTP               EQU PORTP_ISR                   ;vector base + $8E
006C5B 7F6C5B -> $56C0                ISR_CAN4TX              EQU CAN4TX_ISR                  ;vector base + $90
006C5B 7F6C5B -> $56C7                ISR_CAN4RX              EQU CAN4RX_ISR                  ;vector base + $92
006C5B 7F6C5B -> $56CE                ISR_CAN4ERR             EQU CAN4ERR_ISR                 ;vector base + $94
006C5B 7F6C5B -> $56D5                ISR_CAN4WUP             EQU CAN4WUP_ISR                 ;vector base + $96
006C5B 7F6C5B -> $56DC                ISR_CAN3TX              EQU CAN3TX_ISR                  ;vector base + $98
006C5B 7F6C5B -> $56E3                ISR_CAN3RX              EQU CAN3RX_ISR                  ;vector base + $9A
006C5B 7F6C5B -> $56EA                ISR_CAN3ERR             EQU CAN3ERR_ISR                 ;vector base + $9C
006C5B 7F6C5B -> $56F1                ISR_CAN3WUP             EQU CAN3WUP_ISR                 ;vector base + $9E
006C5B 7F6C5B -> $56F8                ISR_CAN2TX              EQU CAN2TX_ISR                  ;vector base + $A0
006C5B 7F6C5B -> $56FF                ISR_CAN2RX              EQU CAN2RX_ISR                  ;vector base + $A2
006C5B 7F6C5B -> $5706                ISR_CAN2ERR             EQU CAN2ERR_ISR                 ;vector base + $A4
006C5B 7F6C5B -> $570D                ISR_CAN2WUP             EQU CAN2WUP_ISR                 ;vector base + $A6
006C5B 7F6C5B -> $5714                ISR_CAN1TX      EQU CAN1TX_ISR                  ;vector base + $A8
006C5B 7F6C5B -> $571B                ISR_CAN1RX      EQU CAN1RX_ISR                  ;vector base + $AA
006C5B 7F6C5B -> $5722                ISR_CAN1ERR     EQU CAN1ERR_ISR                 ;vector base + $AC
006C5B 7F6C5B -> $5729                ISR_CAN1WUP     EQU CAN1WUP_ISR                 ;vector base + $AE
006C5B 7F6C5B -> $5730                ISR_CAN0TX      EQU CAN0TX_ISR                  ;vector base + $B0
006C5B 7F6C5B -> $5737                ISR_CAN0RX      EQU CAN0RX_ISR                  ;vector base + $B2
006C5B 7F6C5B -> $573E                ISR_CAN0ERR     EQU CAN0ERR_ISR                 ;vector base + $B4
006C5B 7F6C5B -> $5745                ISR_CAN0WUP     EQU CAN0WUP_ISR                 ;vector base + $B6
006C5B 7F6C5B -> $574C                ISR_FLASH       EQU FLASH_ISR                   ;vector base + $B8
006C5B 7F6C5B -> $5753                ISR_FLASHFLT    EQU FLASHFLT_ISR                ;vector base + $BA
006C5B 7F6C5B -> $575A                ISR_SPI2        EQU SPI2_ISR                    ;vector base + $BC
006C5B 7F6C5B -> $5761                ISR_SPI1        EQU SPI1_ISR                    ;vector base + $BE
006C5B 7F6C5B -> $5768                ISR_IIC0        EQU IIC0_ISR                    ;vector base + $C0
006C5B 7F6C5B -> $576F                ISR_SCI6        EQU SCI6_ISR                    ;vector base + $C2
006C5B 7F6C5B -> $5776                ISR_SCM                 EQU SCM_ISR                             ;vector base + $C4
006C5B 7F6C5B -> $577D                ISR_PLLLOCK             EQU PLLLOCK_ISR                 ;vector base + $C6
006C5B 7F6C5B -> $5784                ISR_ECT_PBOV    EQU ECT_PBOV_ISR                ;vector base + $C8
006C5B 7F6C5B -> $578B                ISR_ECT_MODCNT  EQU ECT_MODCNT_ISR              ;vector base + $CA
006C5B 7F6C5B -> $5792                ISR_PORTH               EQU PORTH_ISR                   ;vector base + $CC
006C5B 7F6C5B -> $5799                ISR_PORTJ               EQU PORTJ_ISR                   ;vector base + $CE
006C5B 7F6C5B -> $57A0                ISR_ATD1                EQU ATD1_ISR                    ;vector base + $D0
006C5B 7F6C5B -> $57A7                ISR_ATD0                EQU     ATD0_ISR                ;vector base + $D2
006C5B 7F6C5B -> $57AE                ISR_SCI1                EQU SCI1_ISR                    ;vector base + $D4
006C5B 7F6C5B -> $5878                ISR_SCI0        EQU SCI0_ISR            ;vector base + $D6   ; SCI0 ENABLED, CPU, level 1
006C5B 7F6C5B -> $57B5                ISR_SPI0                EQU SPI0_ISR                    ;vector base + $D8
006C5B 7F6C5B -> $57BC                ISR_ECT_PAIE    EQU ECT_PAIE_ISR                ;vector base + $DA
006C5B 7F6C5B -> $57C3                ISR_ECT_PAOV    EQU ECT_PAOV_ISR                ;vector base + $DC
006C5B 7F6C5B -> $57CA                ISR_ECT_TOV             EQU ECT_TOV_ISR                 ;vector base + $DE
006C5B 7F6C5B -> $5C5F                ISR_ECT_TC7             EQU ECT_TC7_ISR                 ;vector base + $E0   ; ECT Ch 7 (Crank) ENABLED, CPU, level 7 (Highest)
006C5B 7F6C5B -> $5B7C                ISR_ECT_TC6     EQU ECT_TC6_ISR         ;vector base + $E2   ; ECT Ch 6 (VSS) ENABLED, CPU, level 1
006C5B 7F6C5B -> $5C4E                ISR_ECT_TC5             EQU ECT_TC5_ISR                 ;vector base + $E4   ; ECT Ch 5 (Cam) ENABLED, CPU level 6
006C5B 7F6C5B -> $57D1                ISR_ECT_TC4     EQU ECT_TC4_ISR         ;vector base + $E6
006C5B 7F6C5B -> $57D8                ISR_ECT_TC3             EQU ECT_TC3_ISR                 ;vector base + $E8
006C5B 7F6C5B -> $5B6E                ISR_ECT_TC2             EQU ECT_TC2_ISR                 ;vector base + $EA   ; ECT Ch 2 ((D8)(1to28)(Ign2)(10&5)) ENABLED
006C5B 7F6C5B -> $57DF                ISR_ECT_TC1             EQU ECT_TC1_ISR                 ;vector base + $EC
006C5B 7F6C5B -> $5B60                ISR_ECT_TC0             EQU ECT_TC0_ISR                 ;vector base + $EE   ; ECT Ch 0 ((D7)(1to28)(Ign1)(1&6)), ENABLED,
006C5B 7F6C5B -> $581A                ISR_RTI         EQU RTI_ISR             ;vector base + $F0   ; RTI ENABLED, CPU, level 1
006C5B 7F6C5B -> $57E6                ISR_IRQ                 EQU IRQ_ISR                             ;vector base + $F2
006C5B 7F6C5B -> $57ED                ISR_XIRQ                EQU XIRQ_ISR                    ;vector base + $F4
006C5B 7F6C5B -> $57F4                ISR_SWI                 EQU SWI_ISR                             ;vector base + $F6
006C5B 7F6C5B -> $57FB                ISR_TRAP                EQU TRAP_ISR                    ;vector base + $F8
006C5B 7F6C5B -> $6C5B                VECTAB_TABS_END         EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C5B 7F6C5B -> $7F6C5B              VECTAB_TABS_END_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - 9S12XEP100 Reset Vectors. Vector base is set by Interrupt Vector
                                      ;   Base Register (IVBR). Reset sets IVBR to $FF. (Pgs 80..84)
                                      ;*****************************************************************************************
00FF10 7FFF10                                                 ORG     VECTAB_START, VECTAB_START_LIN  ; $FF10,$7FFF10
00FF10 7FFF10 55 38                   VEC_SPURIOUS    DW      ISR_SPURIOUS        ;vector base + $10
00FF12 7FFF12 55 3F                   VEC_SYS         DW      ISR_SYS             ;vector base + $12
00FF14 7FFF14 55 46                   VEC_MPU         DW      ISR_MPU             ;vector base + $14
00FF16 7FFF16 55 4D                   VEC_XGSWE       DW      ISR_XGSWE           ;vector base + $16
00FF18 7FFF18 55 54                   VEC_RES18               DW      ISR_RES18                   ;vector base + $18
00FF1A 7FFF1A 55 5B                   VEC_RES1A               DW      ISR_RES1A                   ;vector base + $1A
00FF1C 7FFF1C 55 62                   VEC_RES1C               DW      ISR_RES1C                   ;vector base + $1C
00FF1E 7FFF1E 55 69                   VEC_RES1E               DW      ISR_RES1E                   ;vector base + $1E
00FF20 7FFF20 55 70                   VEC_RES20               DW      ISR_RES20                   ;vector base + $20
00FF22 7FFF22 55 77                   VEC_RES22               DW      ISR_RES22                   ;vector base + $22
00FF24 7FFF24 55 7E                   VEC_RES24               DW      ISR_RES24                   ;vector base + $24
00FF26 7FFF26 55 85                   VEC_RES26               DW      ISR_RES26                   ;vector base + $26
00FF28 7FFF28 55 8C                   VEC_RES28               DW      ISR_RES28                   ;vector base + $28
00FF2A 7FFF2A 55 93                   VEC_RES2A               DW      ISR_RES2A                   ;vector base + $2A
00FF2C 7FFF2C 55 9A                   VEC_RES2C               DW      ISR_RES2C                   ;vector base + $2C
00FF2E 7FFF2E 55 A1                   VEC_RES2E               DW      ISR_RES2E                   ;vector base + $2E
00FF30 7FFF30 55 A8                   VEC_RES30               DW      ISR_RES30                   ;vector base + $30
00FF32 7FFF32 55 AF                   VEC_RES32               DW      ISR_RES32                   ;vector base + $32
00FF34 7FFF34 55 B6                   VEC_RES34               DW      ISR_RES34                   ;vector base + $34
00FF36 7FFF36 55 BD                   VEC_RES36               DW      ISR_RES36                   ;vector base + $36
00FF38 7FFF38 55 C4                   VEC_RES38               DW      ISR_RES38                   ;vector base + $38
00FF3A 7FFF3A 55 CB                   VEC_RES3A               DW      ISR_RES3A                   ;vector base + $3A
00FF3C 7FFF3C 55 D2                   VEC_ATD1COMP    DW      ISR_ATD1COMP            ;vector base + $3C
00FF3E 7FFF3E 55 D9                   VEC_ATD0COMP    DW      ISR_ATD0COMP            ;vector base + $3E
00FF40 7FFF40 55 E0                   VEC_TIM_PAIE    DW      ISR_TIM_PAIE            ;vector base + $40
00FF42 7FFF42 55 E7                   VEC_TIM_PAOV    DW      ISR_TIM_PAOV            ;vector base + $42
00FF44 7FFF44 55 EE                   VEC_TIM_TOV     DW      ISR_TIM_TOV             ;vector base + $44
00FF46 7FFF46 5C 3C                   VEC_TIM_TC7     DW      ISR_TIM_TC7             ;vector base + $46
00FF48 7FFF48 5C 2A                   VEC_TIM_TC6     DW      ISR_TIM_TC6             ;vector base + $48
00FF4A 7FFF4A 5C 18                   VEC_TIM_TC5     DW      ISR_TIM_TC5             ;vector base + $4A
00FF4C 7FFF4C 5C 06                   VEC_TIM_TC4     DW      ISR_TIM_TC4             ;vector base + $4C
00FF4E 7FFF4E 5B D3                   VEC_TIM_TC3     DW      ISR_TIM_TC3             ;vector base + $4E
00FF50 7FFF50 5B C1                   VEC_TIM_TC2     DW      ISR_TIM_TC2             ;vector base + $50
00FF52 7FFF52 5B AF                   VEC_TIM_TC1     DW      ISR_TIM_TC1             ;vector base + $52
00FF54 7FFF54 5B 9D                   VEC_TIM_TC0     DW      ISR_TIM_TC0             ;vector base + $54
00FF56 7FFF56 55 F5                   VEC_SCI7        DW      ISR_SCI7                ;vector base + $56
00FF58 7FFF58 55 FC                   VEC_PITCH7      DW      ISR_PITCH7              ;vector base + $58
00FF5A 7FFF5A 56 03                   VEC_PITCH6      DW      ISR_PITCH6              ;vector base + $5A
00FF5C 7FFF5C 56 0A                   VEC_PITCH5      DW      ISR_PITCH5              ;vector base + $5C
00FF5E 7FFF5E 56 11                   VEC_PITCH4      DW      ISR_PITCH4              ;vector base + $5E
00FF60 7FFF60 56 18                   VEC_RES60               DW      ISR_RES60                   ;vector base + $60
00FF62 7FFF62 56 1F                   VEC_RES62               DW      ISR_RES62                   ;vector base + $62
00FF64 7FFF64 56 26                   VEC_XGSWT7              DW      ISR_XGSWT7                  ;vector base + $64
00FF66 7FFF66 56 2D                   VEC_XGSWT6              DW      ISR_XGSWT6                  ;vector base + $66
00FF68 7FFF68 56 34                   VEC_XGSWT5              DW      ISR_XGSWT5                  ;vector base + $68
00FF6A 7FFF6A 56 3B                   VEC_XGSWT4              DW      ISR_XGSWT4                  ;vector base + $6A
00FF6C 7FFF6C 56 42                   VEC_XGSWT3              DW      ISR_XGSWT3                  ;vector base + $6C
00FF6E 7FFF6E 56 49                   VEC_XGSWT2              DW      ISR_XGSWT2                  ;vector base + $6E
00FF70 7FFF70 56 50                   VEC_XGSWT1              DW      ISR_XGSWT1                  ;vector base + $70
00FF72 7FFF72 56 57                   VEC_XGSWT0              DW      ISR_XGSWT0                  ;vector base + $72
00FF74 7FFF74 56 5E                   VEC_PITCH3              DW      ISR_PITCH3                  ;vector base + $74
00FF76 7FFF76 56 65                   VEC_PITCH2              DW      ISR_PITCH2                  ;vector base + $76
00FF78 7FFF78 56 6C                   VEC_PITCH1              DW      ISR_PITCH1                  ;vector base + $78
00FF7A 7FFF7A 56 73                   VEC_PITCH0              DW      ISR_PITCH0                  ;vector base + $7A
00FF7C 7FFF7C 56 7A                   VEC_HT                  DW      ISR_HT                      ;vector base + $7C
00FF7E 7FFF7E 56 81                   VEC_API                 DW      ISR_API                     ;vector base + $7E
00FF80 7FFF80 56 88                   VEC_LVI                 DW      ISR_LVI                     ;vector base + $80
00FF82 7FFF82 56 8F                   VEC_IIC1                DW      ISR_IIC1                    ;vector base + $82
00FF84 7FFF84 56 96                   VEC_SCI5                DW      ISR_SCI5                    ;vector base + $84
00FF86 7FFF86 56 9D                   VEC_SCI4                DW      ISR_SCI4                    ;vector base + $86
00FF88 7FFF88 56 A4                   VEC_SCI3                DW      ISR_SCI3                    ;vector base + $88
00FF8A 7FFF8A 56 AB                   VEC_SCI2                DW      ISR_SCI2                    ;vector base + $8A
00FF8C 7FFF8C 56 B2                   VEC_PWMSDN              DW      ISR_PWMSDN                  ;vector base + $8C
00FF8E 7FFF8E 56 B9                   VEC_PORTP               DW      ISR_PORTP                   ;vector base + $8E
00FF90 7FFF90 56 C0                   VEC_CAN4TX              DW      ISR_CAN4TX                  ;vector base + $90
00FF92 7FFF92 56 C7                   VEC_CAN4RX              DW      ISR_CAN4RX                  ;vector base + $92
00FF94 7FFF94 56 CE                   VEC_CAN4ERR             DW      ISR_CAN4ERR                 ;vector base + $94
00FF96 7FFF96 56 D5                   VEC_CAN4WUP             DW      ISR_CAN4WUP                 ;vector base + $96
00FF98 7FFF98 56 DC                   VEC_CAN3TX              DW      ISR_CAN3TX                  ;vector base + $98
00FF9A 7FFF9A 56 E3                   VEC_CAN3RX              DW      ISR_CAN3RX                  ;vector base + $9A
00FF9C 7FFF9C 56 EA                   VEC_CAN3ERR             DW      ISR_CAN3ERR                 ;vector base + $9C
00FF9E 7FFF9E 56 F1                   VEC_CAN3WUP             DW      ISR_CAN3WUP                 ;vector base + $9E
00FFA0 7FFFA0 56 F8                   VEC_CAN2TX              DW      ISR_CAN2TX                  ;vector base + $A0
00FFA2 7FFFA2 56 FF                   VEC_CAN2RX              DW      ISR_CAN2RX                  ;vector base + $A2
00FFA4 7FFFA4 57 06                   VEC_CAN2ERR             DW      ISR_CAN2ERR                 ;vector base + $A4
00FFA6 7FFFA6 57 0D                   VEC_CAN2WUP             DW      ISR_CAN2WUP                 ;vector base + $A6
00FFA8 7FFFA8 57 14                   VEC_CAN1TX      DW      ISR_CAN1TX              ;vector base + $A8
00FFAA 7FFFAA 57 1B                   VEC_CAN1RX      DW      ISR_CAN1RX              ;vector base + $AA
00FFAC 7FFFAC 57 22                   VEC_CAN1ERR     DW      ISR_CAN1ERR             ;vector base + $AC
00FFAE 7FFFAE 57 29                   VEC_CAN1WUP     DW      ISR_CAN1WUP             ;vector base + $AE
00FFB0 7FFFB0 57 30                   VEC_CAN0TX      DW      ISR_CAN0TX              ;vector base + $A0
00FFB2 7FFFB2 57 37                   VEC_CAN0RX      DW      ISR_CAN0RX              ;vector base + $B2
00FFB4 7FFFB4 57 3E                   VEC_CAN0ERR     DW      ISR_CAN0ERR             ;vector base + $B4
00FFB6 7FFFB6 57 45                   VEC_CAN0WUP     DW      ISR_CAN0WUP             ;vector base + $B6
00FFB8 7FFFB8 57 4C                   VEC_FLASH       DW      ISR_FLASH               ;vector base + $B8
00FFBA 7FFFBA 57 53                   VEC_FLASHFLT    DW      ISR_FLASHFLT            ;vector base + $BA
00FFBC 7FFFBC 57 5A                   VEC_SPI2        DW      ISR_SPI2                ;vector base + $BC
00FFBE 7FFFBE 57 61                   VEC_SPI1        DW      ISR_SPI1                ;vector base + $BE
00FFC0 7FFFC0 57 68                   VEC_IIC0        DW      ISR_IIC0                ;vector base + $C0
00FFC2 7FFFC2 57 6F                   VEC_SCI6        DW      ISR_SCI6                ;vector base + $C2
00FFC4 7FFFC4 57 76                   VEC_SCM         DW      ISR_SCM             ;vector base + $C4
00FFC6 7FFFC6 57 7D                   VEC_PLLLOCK     DW      ISR_PLLLOCK             ;vector base + $C6
00FFC8 7FFFC8 57 84                   VEC_ECT_PBOV    DW      ISR_ECT_PBOV            ;vector base + $C8
00FFCA 7FFFCA 57 8B                   VEC_ECT_MODCNT  DW      ISR_ECT_MODCNT          ;vector base + $CA
00FFCC 7FFFCC 57 92                   VEC_PORTH               DW      ISR_PORTH                   ;vector base + $CC
00FFCE 7FFFCE 57 99                   VEC_PORTJ               DW      ISR_PORTJ                   ;vector base + $CE
00FFD0 7FFFD0 57 A0                   VEC_ATD1                DW      ISR_ATD1                    ;vector base + $D0
00FFD2 7FFFD2 57 A7                   VEC_ATD0                DW      ISR_ATD0                    ;vector base + $D2
00FFD4 7FFFD4 57 AE                   VEC_SCI1                DW      ISR_SCI1                    ;vector base + $D4
00FFD6 7FFFD6 58 78                   VEC_SCI0                DW      ISR_SCI0                    ;vector base + $D6
00FFD8 7FFFD8 57 B5                   VEC_SPI0                DW      ISR_SPI0                    ;vector base + $D8
00FFDA 7FFFDA 57 BC                   VEC_ECT_PAIE    DW      ISR_ECT_PAIE            ;vector base + $DA
00FFDC 7FFFDC 57 C3                   VEC_ECT_PAOV    DW      ISR_ECT_PAOV            ;vector base + $DC
00FFDE 7FFFDE 57 CA                   VEC_ECT_TOV             DW      ISR_ECT_TOV                 ;vector base + $DE
00FFE0 7FFFE0 5C 5F                   VEC_ECT_TC7             DW      ISR_ECT_TC7                 ;vector base + $E0
00FFE2 7FFFE2 5B 7C                   VEC_ECT_TC6             DW      ISR_ECT_TC6                 ;vector base + $E2
00FFE4 7FFFE4 5C 4E                   VEC_ECT_TC5             DW      ISR_ECT_TC5                 ;vector base + $E4
00FFE6 7FFFE6 57 D1                   VEC_ECT_TC4             DW      ISR_ECT_TC4                 ;vector base + $E6
00FFE8 7FFFE8 57 D8                   VEC_ECT_TC3             DW      ISR_ECT_TC3                 ;vector base + $E8
00FFEA 7FFFEA 5B 6E                   VEC_ECT_TC2             DW      ISR_ECT_TC2                 ;vector base + $EA
00FFEC 7FFFEC 57 DF                   VEC_ECT_TC1             DW      ISR_ECT_TC1                 ;vector base + $EC
00FFEE 7FFFEE 5B 60                   VEC_ECT_TC0             DW      ISR_ECT_TC0                 ;vector base + $EE
00FFF0 7FFFF0 58 1A                   VEC_RTI                 DW      ISR_RTI                     ;vector base + $F0
00FFF2 7FFFF2 57 E6                   VEC_IRQ                 DW      ISR_IRQ                     ;vector base + $F2
00FFF4 7FFFF4 57 ED                   VEC_XIRQ                DW      ISR_XIRQ                    ;vector base + $F4
00FFF6 7FFFF6 57 F4                   VEC_SWI                 DW      ISR_SWI                     ;vector base + $F6
00FFF8 7FFFF8 57 FB                   VEC_TRAP                DW      ISR_TRAP                    ;vector base + $F8
00FFFA 7FFFFA 58 12                   VEC_RESET_COP   DW      RESET_COP_ENTRY         ;vector base + $FA
00FFFC 7FFFFC 58 0A                   VEC_RESET_CM    DW      RESET_CM_ENTRY          ;vector base + $FC
00FFFE 7FFFFE 58 02                   VEC_RESET_EXT   DW      RESET_EXT_ENTRY         ;vector base + $FE
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (mmap_BPEM488.s)                                                           *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module performs all the necessary steps to initialize the device              *
                                      ;*    after each reset.                                                                  *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map (This module)                           *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
010000 800000 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;  Flash Memory Map:
                                      ;  -----------------
                                      ;                      S12X
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;                +-------------+ $0800
                                      ;                |/////////////|
                                      ;         RAM->+ +-------------+ $1000
                                      ;              | |  Variables  |
                                      ;       Flash->+ +-------------+ $4000
                                      ;              | |/////////////|
                                      ;              | +-------------+ $C000
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+ $FF10
                                      ;              | |   Vectors   |
                                      ;              + +-------------+
                                      ;
                                      ;  RAM Memory Map:
                                      ;  ---------------
                                      ;                      S12X
                                      ;                +-------------+ $0000
                                      ;                |  Registers  |
                                      ;                +-------------+ $0800
                                      ;                |/////////////|
                                      ;         RAM->+ +-------------+ $1000
                                      ;              | |  Variables  |
                                      ;              | +-------------+
                                      ;              | |    Code     |
                                      ;              | +-------------+
                                      ;              | |   Tables    |
                                      ;              | +-------------+
                                      ;              | |/////////////|
                                      ;              | +-------------+ $3F10
                                      ;              | |   Vectors   |
                                      ;              + +-------------+ $4000
                                      ;                |/////////////|
                                      ;                +-------------+
                                      ;
                                      ;*****************************************************************************************
                                      ;* - Security and Protection -                                                           *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Manually add the correct global addresses to the ORG statements and allocate the full
                                      ;   8 byte NVM phrase.
                                      ;   Method A:
                                      ;   ORG $FF08, $7F_FF08
                                      ;   DW  $FFFF   ;$FF08
                                      ;   DW  $FFFF   ;$FF0A
                                      ;   DW  $FFFF   ;$FF0C
                                      ;   DW  $FFFE   ;$FF0F
                                      ;   or Method B below:
                                      ;*****************************************************************************************
00FF08 7FFF08                                 ORG  $FF08, $7F_FF08
00FF08 7FFF08 FF FF FF FF FF FF FF FF     FILL  $FF, 8               ; Allocate the full phrase
00FF0D 7FFF0D                                 ORG   $FF0D, $7F_FF0D  ; EEE Protection Register (unprotect)
00FF0D 7FFF0D FF                          DB    $FF                  ; %11111111 (Unprotected buffer RAM EEE partition areas
                                                                     ; enabled)
00FF0F 7FFF0F                                 ORG   $FF0F, $7F_FF0F  ; Flash Security Register (unsecure)
00FF0F 7FFF0F FE                          DB    $FE                  ; %11111110 (Backdoor Key Disabled, Flash Security
                                                                     ; unsecured)
                                      ;*****************************************************************************************
                                      ;* - Constants - (Memory locations)                                                      *
                                      ;*****************************************************************************************
                                      ; - Register space -
00FF10 7FFF10 -> $0000                MMAP_REG_START      EQU $0000
00FF10 7FFF10 -> $0000                MMAP_REG_START_LIN  EQU $00_0000
00FF10 7FFF10 -> $0800                MMAP_REG_END        EQU $0800
00FF10 7FFF10 -> $0800                MMAP_REG_END_LIN    EQU $0_0800
                                      ; - EEPROM -
00FF10 7FFF10 -> $0800                MMAP_EE_START         EQU $0800
00FF10 7FFF10 -> $13F800              MMAP_EE_START_LIN     EQU $13_F800
00FF10 7FFF10 -> $1000                MMAP_EE_END           EQU $1000
00FF10 7FFF10 -> $140000              MMAP_EE_END_LIN       EQU $14_0000
00FF10 7FFF10 -> $0800                MMAP_EE_WIN_START     EQU MMAP_EE_START    ; $0800
00FF10 7FFF10 -> $0C00                MMAP_EE_WIN_END       EQU $0C00
00FF10 7FFF10 -> $0C00                MMAP_EE_FF_START      EQU MMAP_EE_WIN_END  ; $0C00
00FF10 7FFF10 -> $13FC00              MMAP_EE_FF_START_LIN  EQU $13_FC00
00FF10 7FFF10 -> $1000                MMAP_EE_FF_END        EQU MMAP_EE_END      ; $1000
00FF10 7FFF10 -> $140000              MMAP_EE_FF_END_LIN    EQU MMAP_EE_END_LIN  ; $14_0000
                                      ; - RAM -
00FF10 7FFF10 -> $1000                MMAP_RAM_START           EQU $1000
00FF10 7FFF10 -> $FD000               MMAP_RAM_START_LIN       EQU $0F_D000
00FF10 7FFF10 -> $4000                MMAP_RAM_END             EQU $4000
00FF10 7FFF10 -> $100000              MMAP_RAM_END_LIN         EQU $10_0000
00FF10 7FFF10 -> $1000                MMAP_RAM_WIN_START       EQU MMAP_RAM_START    ; $1000
00FF10 7FFF10 -> $2000                MMAP_RAM_WIN_END         EQU $2000
00FF10 7FFF10 -> $2000                MMAP_RAM_FEFF_START      EQU MMAP_RAM_WIN_END  ; $2000
00FF10 7FFF10 -> $FE000               MMAP_RAM_FEFF_START_LIN  EQU $0F_E000
00FF10 7FFF10 -> $4000                MMAP_RAM_FEFF_END        EQU MMAP_RAM_END      ; $4000
00FF10 7FFF10 -> $100000              MMAP_RAM_FEFF_END_LIN    EQU MMAP_RAM_END_LIN  ; $10_0000
                                      ; - XGATE RAM -
00FF10 7FFF10 -> $8000                MMAP_XGATE_RAM_START_XG        EQU $8000
00FF10 7FFF10 -> $F8000               MMAP_XGATE_RAM_START_LIN       EQU $0F_8000
00FF10 7FFF10 -> $10000               MMAP_XGATE_RAM_END_XG          EQU $01_0000
00FF10 7FFF10 -> $100000              MMAP_XGATE_RAM_END_LIN         EQU $10_0000
                                      ; - Flash -
00FF10 7FFF10 -> $4000                MMAP_FLASH_START          EQU $4000
00FF10 7FFF10 -> $7F4000              MMAP_FLASH_START_LIN      EQU $7F_4000
00FF10 7FFF10 -> $10000               MMAP_FLASH_END            EQU $10000
00FF10 7FFF10 -> $800000              MMAP_FLASH_END_LIN        EQU $80_0000
00FF10 7FFF10 -> $8000                MMAP_FLASH_WIN_START      EQU $8000
00FF10 7FFF10 -> $C000                MMAP_FLASH_WIN_END        EQU $C000
00FF10 7FFF10 -> $4000                MMAP_FLASH_FD_START       EQU $4000
00FF10 7FFF10 -> $7F4000              MMAP_FLASH_FD_START_LIN   EQU $7F_4000
00FF10 7FFF10 -> $8000                MMAP_FLASH_FD_END         EQU $8000
00FF10 7FFF10 -> $7F8000              MMAP_FLASH_FD_END_LIN     EQU $7F_8000
00FF10 7FFF10 -> $8000                MMAP_FLASH_FE_START       EQU $8000
00FF10 7FFF10 -> $7F8000              MMAP_FLASH_FE_START_LIN   EQU $7F_8000
00FF10 7FFF10 -> $C000                MMAP_FLASH_FE_END         EQU $C000
00FF10 7FFF10 -> $7FC000              MMAP_FLASH_FE_END_LIN     EQU $7F_C000
00FF10 7FFF10 -> $C000                MMAP_FLASH_FF_START       EQU $C000
00FF10 7FFF10 -> $7FC000              MMAP_FLASH_FF_START_LIN   EQU $7F_C000
00FF10 7FFF10 -> $10000               MMAP_FLASH_FF_END         EQU MMAP_FLASH_END      ; $10000
00FF10 7FFF10 -> $800000              MMAP_FLASH_FF_END_LIN     EQU MMAP_FLASH_END_LIN  ; $80_0000
                                      ; - XGATE Flash -
00FF10 7FFF10 -> $0800                MMAP_XG_FLASH_START_XG       EQU $0800
00FF10 7FFF10 -> $780800              MMAP_XG_FLASH_START_LIN      EQU $78_0800
00FF10 7FFF10 -> $8000                MMAP_XG_FLASH_END_XG         EQU $8000
00FF10 7FFF10 -> $788000              MMAP_XG_FLASH_END_LIN        EQU $78_8000
                                      ; - XGATE Vector table -
00FF10 7FFF10 -> $787E00              MMAP_XG_VECTAB_START_LIN     EQU MMAP_XG_FLASH_END_LIN-(4*128)  ; 4*128=512=$200 $78_8000-$200=$78_7E00
00FF10 7FFF10 -> $7E00                MMAP_XG_VECTAB_START_XG      EQU MMAP_XG_FLASH_END_XG-(4*128)   ; 4*128=512=$200 $8000-$200=$7E00
00FF10 7FFF10 -> $788000              MMAP_XG_VECTAB_END_LIN       EQU MMAP_XG_FLASH_END_LIN          ; $78_8000
00FF10 7FFF10 -> $8000                MMAP_XG_VECTAB_END_XG        EQU MMAP_XG_FLASH_END_XG           ; $8000
00FF10 7FFF10 -> $7E00                MMAP_XG_XGVBR_VALUE          EQU MMAP_XG_VECTAB_START_XG        ; $7E00
                                      ; - Vector table -
00FF10 7FFF10 -> $FF10                VECTAB_START       EQU $FF10
00FF10 7FFF10 -> $7FFF10              VECTAB_START_LIN   EQU $7F_FF10
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (eeem_BPEM488.s)                                                           *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*   EE Emulation. D-Flash was partitioned using D-Bug 12 command:                       *
                                      ;*   "PARTDF 0 4096" to use all 32k bytes D-Flash and 4k bytes buffer RAM for            *
                                      ;*   EE Emulation. The "PARTDF" command by itself displays the partition configuration   *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 23 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
00FF10 7FFF10 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ; - Oscillator frequency -
00FF10 7FFF10 -> $F42400              CLOCK_OSC_FREQ          EQU     16000000        ; 16 MHz
                                      ; - Prescaler value -
00FF10 7FFF10 -> $000F                EEEM_FDIV_VAL           EQU     (CLOCK_OSC_FREQ/1000000)-1
                                                          ; 16000000/1000000=16-1=15=$0F Ref manual pg 1151
                                      ;*****************************************************************************************
                                      ;* - Constants -                                                                         *
                                      ;*****************************************************************************************
00FF10 7FFF10 -> $FF0800              BUF_RAM_P1_START    EQU  $FF0800   ; Buffer RAM page 1 pointer(actual address 13FC00)
00FF10 7FFF10 -> $FE0800              BUF_RAM_P2_START    EQU  $FE0800   ; Buffer RAM page 2 pointer(actual address 13F800)
00FF10 7FFF10 -> $FD0800              BUF_RAM_P3_START    EQU  $FD0800   ; Buffer RAM page 3 pointer(actual address 13F400)
00FF10 7FFF10 -> $FC0800              BUF_RAM_P4_START    EQU  $FC0800   ; Buffer RAM page 4 pointer(actual address 13F000)
                                      ;*****************************************************************************************
                                      ; - Page 1 VE table, ranges and other configurable constants
                                      ;  (Copied from EE Emulation D-Flash to Buffer RAM on start up,
                                      ;  all pages 1024 bytes)
                                      ;*****************************************************************************************
FF0800 0F4800                                      ORG   BUF_RAM_P1_START ; $FF0800 (Buffer Ram page 1 pointer)
                                                                          ;(actual address 13FC00)
FF0800 0F4800                         veBins_E:          rmb $288 ; 648 bytes for VE Table (% x 10)
FF0A88 0F4A88                         verpmBins_E:       rmb $24  ; 36 bytes for VE Table RPM Bins (RPM)
FF0AAC 0F4AAC                         vemapBins_E:       rmb $24  ; 36 bytes for VE Table MAP Bins (KpA x 10)
FF0AD0 0F4AD0                         barCorVals_E:      rmb $12  ; 18 bytes for barometric correction values (KpA x 10)
FF0AE2 0F4AE2                         barCorDelta_E:     rmb $12  ; 18 bytes for barometric correction  (% x 10)
FF0AF4 0F4AF4                         dwellvolts_E:      rmb $0C  ; 12 bytes for dwell battery correction (volts x 10)
FF0B00 0F4B00                         dwellcorr_E:       rmb $0C  ; 12 bytes for dwell battery correction (% x 10)
FF0B0C 0F4B0C                         tempTable1_E:      rmb $14  ; 20 bytes for table common temperature values (degrees C or F x 10)
FF0B20 0F4B20                         tempTable2_E:      rmb $14  ; 20 bytes for table common temperature values (degrees C or F x 10)
FF0B34 0F4B34                         matCorrTemps2_E:   rmb $12  ; 18 bytes for MAT correction temperature (degrees C or F x 10)
FF0B46 0F4B46                         matCorrDelta2_E:   rmb $12  ; 18 bytes for MAT correction (% x 10)
FF0B58 0F4B58                         primePWTable_E:    rmb $14  ; 20 bytes for priming pulse width (msec x 10)
FF0B6C 0F4B6C                         crankPctTable_E:   rmb $14  ; 20 bytes for cranking pulsewidth adder (% x 10 of reqFuel)
FF0B80 0F4B80                         asePctTable_E:     rmb $14  ; 20 bytes for after start enrichment adder (% x 10)
FF0B94 0F4B94                         aseRevTable_E:     rmb $14  ; 20 bytes for after start enrichment time (engine revolutions)
FF0BA8 0F4BA8                         wueBins_E:         rmb $14  ; 20 bytes for after warm up enrichment adder (% x 10)
FF0BBC 0F4BBC                         TOEbins_E:         rmb $08  ; 8 bytes for TPS acceleration adder (%)
FF0BC4 0F4BC4                         TOErates_E:        rmb $08  ; 8 bytes for TPS acceleration rate (%/Sec x 10)
FF0BCC 0F4BCC                         DdBndBase_E:       rmb $02  ; 2 bytes for injector deadband at 13.2V (mSec * 100)
FF0BCE 0F4BCE                         DdBndCor_E:        rmb $02  ; 2 bytes for injector deadband voltage correction (mSec/V x 100)
FF0BD0 0F4BD0                         tpsThresh_E:       rmb $02  ; 2 bytes for Throttle Opening Enrichment threshold (TpsPctx10/100mS)
FF0BD2 0F4BD2                         TOEtime_E:         rmb $02  ; 2 bytes for Throttle Opening Enrich time in 100mS increments(mSx10)
FF0BD4 0F4BD4                         ColdAdd_E:         rmb $02  ; 2 bytes for Throttle Opening Enrichment cold temperature adder at -40F (%)
FF0BD6 0F4BD6                         ColdMul_E:         rmb $02  ; 2 bytes for Throttle Opening Enrichment multiplyer at -40F (%)
FF0BD8 0F4BD8                         InjDelDegx10_E:    rmb $02  ; 2 bytes for Injection delay from trigger to start of injection (deg x 10)
FF0BDA 0F4BDA                         OFCtps_E:          rmb $02  ; 2 bytes for Overrun Fuel Cut min TpS%x10
FF0BDC 0F4BDC                         OFCrpm_E:          rmb $02  ; 2 bytes for Overrun Fuel Cut min RPM
FF0BDE 0F4BDE                         OFCmap_E:          rmb $02  ; 2 bytes for Overrun Fuel Cut maximum manifold pressure permissive (KPAx10)
FF0BE0 0F4BE0                         OFCdel_E:          rmb $02  ; 2 bytes for Overrun Fuel Cut delay time (Sec x 10)
FF0BE2 0F4BE2                         crankingRPM_E:     rmb $02  ; 2 bytes for crank/run transition (RPM)
FF0BE4 0F4BE4                         floodClear_E:      rmb $02  ; 2 bytes for TPS position for flood clear (% x 10)
FF0BE6 0F4BE6                         Stallcnt_E:        rmb $02  ; 2 bytes for no crank or stall condition counter (1mS increments)
FF0BE8 0F4BE8                         tpsMin_E:          rmb $02  ; 2 bytes for TPS calibration closed throttle ADC
FF0BEA 0F4BEA                         tpsMax_E:          rmb $02  ; 2 bytes for TPS calibration wide open throttle ADC(
FF0BEC 0F4BEC                         reqFuel_E:         rmb $02  ; 2 bytes for Pulse width for 14.7 AFR @ 100% VE (mS x 10)
FF0BEE 0F4BEE                         enginesize_E:      rmb $02  ; 2 bytes for displacement of two engine cylinders (for TS reqFuel calcs only)(cc)
FF0BF0 0F4BF0                         InjPrFlo_E:        rmb $02  ; 2 bytes for Pair of injectors flow rate (L/hr x 100)
FF0BF2 0F4BF2                         staged_pri_size_E: rmb $01  ; 1 byte for flow rate of 1 injector (for TS reqFuel calcs only)(cc)
FF0BF3 0F4BF3                         alternate_E:       rmb $01  ; 1 byte for injector staging bit field (for TS reqFuel calcs only)
FF0BF4 0F4BF4                         nCylinders_E:      rmb $01  ; 1 byte for number of engine cylinders bit field (for TS reqFuel calcs only)
FF0BF5 0F4BF5                         nInjectors_E:      rmb $01  ; 1 byte for number of injectors bit field (for TS reqFuel calcs only)
FF0BF6 0F4BF6                         divider_E:         rmb $01  ; 1 byte for squirts per cycle bit field (for TS reqFuel calcs only)
                                      ;*****************************************************************************************
                                      ; - Page 2 ST table, ranges and other configurable constants
                                      ;  (Copied from EE Emulation D-Flash to Buffer RAM on start up,
                                      ;  all pages 1024 bytes)
                                      ;*****************************************************************************************
FE0800 0F4800                                      ORG   BUF_RAM_P2_START ; $FE0800 (Buffer Ram page 2 pointer)
                                                                          ;(actual address 13F800)
FE0800 0F4800                         stBins_E:     rmb $288 ; 648 bytes for ST Table
FE0A88 0F4A88                         strpmBins_E:  rmb $24  ; 36 bytes for ST Table RPM Bins
FE0AAC 0F4AAC                         stmapBins_E:  rmb $24  ; 36 bytes for ST Table MAP Bins
FE0AD0 0F4AD0                         heton_E:      rmb $02  ; 2 bytes for High engine temperature alarm on set point (degF*10)
FE0AD2 0F4AD2                         hetoff_E:     rmb $02  ; 2 bytes for High engine temperature alarm off set point (degF*10)
FE0AD4 0F4AD4                         hoton_E:      rmb $02  ; 2 bytes for High oil temperature alarm on set point (degF*10)
FE0AD6 0F4AD6                         hotoff_E:     rmb $02  ; 2 bytes for High oil temperature alarm off set point (degF*10)
FE0AD8 0F4AD8                         hfton_E:      rmb $02  ; 2 bytes for High fuel temperature alarm on set point (degF*10)
FE0ADA 0F4ADA                         hftoff_E:     rmb $02  ; 2 bytes for High fuel temperature alarm off set point (degF*10)
FE0ADC 0F4ADC                         hegton_E:     rmb $02  ; 2 bytes for High exhaust gas temperature alarm on set point (degF*10)
FE0ADE 0F4ADE                         hegtoff_E:    rmb $02  ; 2 bytes for High exhaust gas temperature alarm off set point (degF*10)
FE0AE0 0F4AE0                         lopon_E:      rmb $02  ; 2 bytes for Low engine oil pressure alarm on set point (psi*10)
FE0AE2 0F4AE2                         lopoff_E:     rmb $02  ; 2 bytes for Low oil engine pressure alarm off set point (psi*10)
FE0AE4 0F4AE4                         hfpon_E:      rmb $02  ; 2 bytes for High fuel pressure alarm on set point (psi*10)
FE0AE6 0F4AE6                         hfpoff_E:     rmb $02  ; 2 bytes for High fuel pressure alarm off set point (psi*10)
FE0AE8 0F4AE8                         lfpon_E:      rmb $02  ; 2 bytes for Low fuel pressure alarm on set point (psi*10)
FE0AEA 0F4AEA                         lfpoff_E:     rmb $02  ; 2 bytes for Low fuel pressure alarm off set point (psi*10)
FE0AEC 0F4AEC                         Dwell_E:      rmb $02  ; 2 bytes for run mode dwell time (mSec*10)
FE0AEE 0F4AEE                         CrnkDwell_E:  rmb $02  ; 2 bytes for crank mode dwell time (mSec*10)
FE0AF0 0F4AF0                         CrnkAdv_E:    rmb $02  ; 2 bytes for crank mode ignition advance (Deg*10)
                                       ;*****************************************************************************************
                                      ; - Page 3 AFR table, ranges and other configurable constants
                                      ;  (Copied from EE Emulation D-Flash to Buffer RAM on start up,
                                      ;  all pages 1024 bytes)
                                      ;*****************************************************************************************
FD0800 0F4800                                      ORG   BUF_RAM_P3_START ; $FD0800 (Buffer Ram page 3 pointer)
                                                                          ;(actual address 13F400)
FD0800 0F4800                         afrBins_E:    rmb $288 ; 648 bytes for AFR Table (0)
FD0A88 0F4A88                         afrrpmBins_E: rmb $24  ; 36 bytes for AFR Table RPM Bins (648)
FD0AAC 0F4AAC                         afrmapBins_E: rmb $24  ; 36 bytes for AFR Table MAP Bins (684)
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001002 0FD002                                     ORG     EEEM_VARS_START, EEEM_VARS_START_LIN
001002 0FD002 -> $FD002               EEEM_VARS_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; --------------------------- No variables for the module --------------------------------
001002 0FD002 -> $1002                EEEM_VARS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001002 0FD002 -> $FD002               EEEM_VARS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                                               ; of Flash Status Register is set
                                                               ;(Flash command has completed)
                                      ; - Step (5) optional!: Check for errors -
                                      ; - Error conditions: -
                                      ; "Load Data Field" command active (is not going to happen)
                                      ; D-flash not partitioned for EEE operation
                                      ; (could be checked once in your init sequence)
                                      ;    brset      FSTAT, #ACCERR, \1 ; If Flash Access Error flag is set,
                                                                     ; branch to address of error handler
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
00581A 7F581A                                                 ORG     EEEM_CODE_START, EEEM_CODE_START_LIN
00581A 7F581A -> $7F581A              EEEM_CODE_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ---------------------------- No code for this module -----------------------------------
00581A 7F581A -> $581A                EEEM_CODE_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
00581A 7F581A -> $7F581A              EEEM_CODE_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C5B 7F6C5B                                                 ORG     EEEM_TABS_START, EEEM_TABS_START_LIN
006C5B 7F6C5B -> $7F6C5B              EEEM_TABS_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ---------------------------- No tables for this module ---------------------------------
006C5B 7F6C5B -> $6C5B                EEEM_TABS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C5B 7F6C5B -> $7F6C5B              EEEM_TABS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (clock_BPEM488.s                                                           *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module does S12XEP100 PLL,clock related features and RTI initialization       *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features (This module)       *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 25 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C5B 7F6C5B S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001002 0FD002                                     ORG     CLOCK_VARS_START, CLOCK_VARS_START_LIN
001002 0FD002 -> $FD002               CLOCK_VARS_START_LIN    EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ----------------------------- No variables for this module ----------------------------
001002 0FD002 -> $1002                CLOCK_VARS_END          EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001002 0FD002 -> $FD002               CLOCK_VARS_END_LIN      EQU     @     ; @ Represents the current value of the linear
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
00581A 7F581A                                                 ORG     CLOCK_CODE_START, CLOCK_CODE_START_LIN
00581A 7F581A -> $7F581A              CLOCK_CODE_START_LIN    EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No code for this module -------------------------------
00581A 7F581A -> $581A                CLOCK_CODE_END          EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
00581A 7F581A -> $7F581A              CLOCK_CODE_END_LIN      EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C5B 7F6C5B                                                 ORG     CLOCK_TABS_START, CLOCK_TABS_START_LIN
006C5B 7F6C5B -> $7F6C5B              CLOCK_TABS_START_LIN    EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006C5B 7F6C5B -> $6C5B                CLOCK_TABS_END          EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C5B 7F6C5B -> $7F6C5B              CLOCK_TABS_END_LIN      EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (rti_BPEM488.s)                                                            *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM Engine Controller by Robert Hiebert.                         *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teachoing   *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    Real Time Interrupt time rate generator handler                                    *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler (This module)*
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 18 2020                                                                        *
                                      ;*    - BPEM version begins (work in progress)                                           *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C5B 7F6C5B S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001002 0FD002                                                 ORG     RTI_VARS_START, RTI_VARS_START_LIN
001002 0FD002 -> $FD002               RTI_VARS_START_LIN      EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - RS232 Real Time variables ordered list for Tuner Studio  (declared in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;SecH:       ds 1 ; RTI seconds count Hi byte
                                      ;SecL:       ds 1 ; RTI seconds count Lo byte
                                      ;RPM:        ds 2 ; Crankshaft Revolutions Per Minute
                                      ;TpsPctx10:  ds 2 ; Throttle Position Sensor % of travel(%x10)(update every 100mSec)
                                      ;FDsec:      ds 2 ; Fuel delivery pulse width total over 1 second (mS)
                                      ;CASprd512:  ds 2 ; Crankshaft Angle Sensor period (5.12uS time base
                                      ;CASprd256:  ds 2 ; Crankshaft Angle Sensor period (2.56uS time base
                                      ;LoopTime:   ds 2 ; Program main loop time (loops/Sec)
                                      ;engine:     ds 1 ; Engine status bit field
                                      ;engine2:    ds 1  ; Engine2 status bit field
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - "engine" equates
                                      ;*****************************************************************************************
                                      ;OFCdelon     equ  $01 ; %00000001, bit 0, 0 = OFC timer not counting down(Grn),
                                                                              ; 1 = OFC timer counting down(Red)
                                      ;crank        equ  $02 ; %00000010, bit 1, 0 = engine not cranking(Grn),
                                                                              ; 1 = engine cranking(Red)
                                      ;run          equ  $04 ; %00000100, bit 2, 0 = engine not running(Red),
                                                                              ; 1 = engine running(Grn)
                                      ;ASEon        equ  $08 ; %00001000, bit 3, 0 = not in start/warmup(Grn),
                                                                              ; 1 = in start/warmup(Red)
                                      ;WUEon        equ  $10 ; %00010000, bit 4, 0 = not in warmup(Grn),
                                                                              ; 1 = in warmup(Red)
                                      ;TOEon        equ  $20 ; %00100000, bit 5, 0 = not in TOE mode(Grn),
                                                                              ; 1 = TOE mode(Red)
                                      ;OFCon        equ  $40 ; %01000000, bit 6, 0 = not in OFC mode(Grn),
                                                                              ; 1 = in OFC mode(Red)
                                      ;FldClr       equ $80  ; %10000000, bit 7, 0 = not in flood clear mode(Grn),
                                                                              ; 1 = Flood clear mode(Red)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; "engine2" equates
                                      ;*****************************************************************************************
                                      ;base512        equ $01 ; %00000001, bit 0, 0 = 5.12uS time base off(White),
                                                                               ; 1 = 5.12uS time base on(Grn)
                                      ;base256        equ $02 ; %00000010, bit 1, 0 = 2.56uS time base off(White),
                                                                               ; 1 = 2.56uS time base on(Grn)
                                      ;eng2Bit2       equ $04 ; %00000100, bit 2, 0 = , 1 =
                                      ;eng2Bit3       equ $08 ; %00001000, bit 3, 0 = , 1 =
                                      ;eng2Bit4       equ $10 ; %00010000, bit 4, 0 = , 1 =
                                      ;eng2Bit5       equ $20 ; %00100000, bit 5, 0 = , 1 =
                                      ;eng2Bit6       equ $40 ; %01000000, bit 6, 0 = , 1 =
                                      ;eng2Bit7       equ $80 ; %10000000, bit 7, 0 = , 1 =
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Non RS232 Real Time variables (declared in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;LoopCntr:   ds 2 ; Counter for "LoopTime" (incremented every Main Loop pass)
                                      ;*****************************************************************************************
                                      ; - Non RS232 Real Time variables (declared in injcalcs_BPEM488.s)
                                      ;*****************************************************************************************
                                      ;AIOTcnt:       ds 1 ; Counter for AIOT totalizer pulse width
                                      ;OFCdel         ds 1 ; Overrun Fuel Cut delay duration (decremented every 100 mS)
                                      ;TOEtim:        ds 1 ; Throttle Opening Enrichment duration (decremented every 100 mS)
                                      ;TpsPctx10last: ds 2 ; Throttle Position Sensor percent last (%x10)(updated every 100Msec)
                                      ;FDt:           ds 2 ; Fuel Delivery pulse width total(mS) (for FDsec calcs)
                                      ;*****************************************************************************************
                                      ; - Non RS232 Real Time variables (declared in state_BPEM488.s)
                                      ;*****************************************************************************************
                                      ;Stallcnt:     ds 2 ; No crank or stall condition counter
                                      ;State:        ds 1  ; Cam-Crank state machine current state
                                      ;StateStatus:  ds 1  ; State status bit field
                                      ;ICflgs:       ds 1  ; Input Capture flags bit field
                                      ;*****************************************************************************************
                                      ; - "StateStatus" equates
                                      ;*****************************************************************************************
                                      ;Synch            equ    $01  ; %00000001, bit 0,
                                                                   ; 0 = crank position not synchronized(Red),
                                                                                               ; 1 = crank position synchronized(Grn)
                                      ;SynchLost        equ    $02  ; %00000010, bit 1, 0 = synch not lost(Grn),
                                                                   ; 1 = synch lost(Red)
                                      ;StateNew         equ    $04  ; %00000100, bit 2, 0 = no new State value,
                                                                   ; 1 = New State value
                                      ;StateStatus3     equ    $08  ; %00001000, bit 3,
                                      ;StateStatus4     equ    $10  ; %00010000, bit 4
                                      ;StateStatus5     equ    $20  ; %00100000, bit 5
                                      ;StateStatus6     equ    $40  ; %01000000, bit 6
                                      ;StateStatus7     equ    $80  ; %10000000, bit 7
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - "ICflgs" equates
                                      ;*****************************************************************************************
                                      ;RPMcalc:    equ $01   ; %00000001 (Bit 0) (Do RPM calculations flag)
                                      ;KpHcalc:    equ $02   ; %00000010 (Bit 1) (Do VSS calculations flag)
                                      ;Ch7_2nd:    equ $04   ; %00000100 (Bit 2) (Ch7 2nd edge flag)
                                      ;Ch6alt:     equ $08   ; %00001000 (Bit 3) (Ch6 alt flag)
                                      ;Ch7_3d:     equ $10   ; %00010000 (Bit 4) (Ch7 3d edge flag)
                                      ;RevMarker:  equ $20   ; %00100000 (Bit 5) (Crank revolution marker flag)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Real Time Interrupt variables - (declared in this module)
                                      ;*****************************************************************************************
001002 0FD002                         uSx125:     ds 1 ; 125 microsecond counter
001003 0FD003                         mS:         ds 1 ; 1 millisecond counter
001004 0FD004                         mSx250:     ds 1 ; 250 millisecond counter
001005 0FD005                         clock:      ds 1 ; Time rate flag marker bit field
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - "clock" equates
                                      ;*****************************************************************************************
001006 0FD006 -> $0010                ms1000:     equ $10   ; %00010000 (Bit 4) (seconds marker)
001006 0FD006 -> $0008                ms500:      equ $08   ; %00001000 (Bit 3) (500mS marker)
001006 0FD006 -> $0004                ms250:      equ $04   ; %00000100 (Bit 2) (250mS marker)
001006 0FD006 -> $0002                ms100:      equ $02   ; %00000010 (Bit 1) (100mS marker)
001006 0FD006 -> $0001                ms1:        equ $01   ; %00000001 (Bit 0) (1mS marker)
001006 0FD006 -> $1006                RTI_VARS_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001006 0FD006 -> $FD006               RTI_VARS_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
00581A 7F581A                                                 ORG     RTI_CODE_START, RTI_CODE_START_LIN
                                      ;*****************************************************************************************
                                      ; - RTI_ISR Interrupt Service Routine (125 uS clock tick)
                                      ; - Generate time rates:
                                      ;   125 Microseconds
                                      ;   1 Millisecond
                                      ;   100 Milliseconds
                                      ;   250 Millisecnds
                                      ;   500 Milliseconds
                                      ;   Seconds
                                      ;*****************************************************************************************
00581A 7F581A                         RTI_ISR:
                                      ;*****************************************************************************************
                                      ; ------------------------------ 125 Microsecond section ---------------------------------
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Increment 125 microsecond counter and check to see if it's time to do the
                                      ; Millisecond section
                                      ;*****************************************************************************************
00581A 7F581A                         Inc125uS:
00581A 7F581A 72 10 02                    inc  uSx125        ; Increment 125 Microsecond counter
00581D 7F581D B6 10 02                    ldaa uSx125        ; Load accu A with value in 125 uS counter
005820 7F5820 81 08                       cmpa #$08          ; Compare it with decimal 8
005822 7F5822 26 50                       bne  RTI_ISR_DONE  ; If not equal, branch to RTI_ISR_DONE:
                                      ;*****************************************************************************************
                                      ; --------------------------------- Millisecond section ----------------------------------
                                      ;*****************************************************************************************
005824 7F5824                         DomS:
005824 7F5824 1C 10 05 01                 bset clock,ms1     ; Set "ms1" bit of "clock"
                                      ;*****************************************************************************************
                                      ; - Clear the 125 microsecond counter. Increment millisecond counter and check to see
                                      ;   if it's time to do the 100 Millisecond or 250 Millisecond section.
                                      ;*****************************************************************************************
005828 7F5828 79 10 02                    clr  uSx125        ; Clear 125 Microsecond counter
00582B 7F582B 72 10 03                    inc  mS            ; Increment Millisecond counter
00582E 7F582E B6 10 03                    ldaa mS            ; Load accu A with value in mS counter
005831 7F5831 81 64                       cmpa #$64          ; Compare it with decimal 100
005833 7F5833 27 06                       beq  Do100mS       ; IF Z bit of CCR is set, branch to Do100mS: (mS=100)
005835 7F5835 81 FA                       cmpa #$FA          ; Compare it with decimal 250
005837 7F5837 27 08                       beq  Do250mS       ; IF Z bit of CCR is set, branch to Do250mS: (mS=250)
005839 7F5839 26 39                       bne  RTI_ISR_DONE  ; If not equal branch to RTI_ISR_DONE:
                                      ;*****************************************************************************************
                                      ; ------------------------------- 100 Millisecond section --------------------------------
                                      ;*****************************************************************************************
00583B 7F583B                         Do100mS:
00583B 7F583B 1C 10 05 02                bset clock,ms100    ; Set "ms100" bit of "clock" bit field
00583F 7F583F 20 33                      bra  RTI_ISR_DONE   ; Branch to RTI_ISR_DONE:
                                      ;*****************************************************************************************
                                      ; ----------------------------- 250 Millisecond section ----------------------------------
                                      ;*****************************************************************************************
005841 7F5841                         Do250mS:
005841 7F5841 1C 10 05 04                 bset clock,ms250   ; Set "ms250" bit of "clock"
                                      ;*****************************************************************************************
                                      ; - Clear the millisecond counter. Increment 250 Millisecond counter  and check to see
                                      ;   if it's time to do the "500mS" section.
                                      ;*****************************************************************************************
005845 7F5845 79 10 03                    clr  mS            ; Clear Millisecond counter
005848 7F5848 72 10 04                    inc  mSx250        ; Increment 250 Millisecond counter
00584B 7F584B B6 10 04                    ldaa mSx250        ; Load accu A with value in 250 mSec counter
00584E 7F584E 81 02                       cmpa #$02          ; Compare with decimal 2
005850 7F5850 27 06                       beq  Do500mS       ; If the Z bit of CCR is set, branch to Do500mS:
005852 7F5852 81 04                       cmpa #$04          ; Compare with decimal 4
005854 7F5854 27 02                       beq  Do500mS       ; If the Z bit of CCR is set,branch to Do500mS:
005856 7F5856 20 1C                       bra  RTI_ISR_DONE  ; Branch to RTI_ISR_DONE:
                                      ;*****************************************************************************************
                                      ; ----------------------------- 500 Millisecond section ----------------------------------
                                      ;*****************************************************************************************
005858 7F5858                         Do500mS:
005858 7F5858 1C 10 05 08                 bset clock,ms500   ; Set "ms500" bit of "clock"
                                      ;*****************************************************************************************
                                      ; - Check to see if it's time to do the "Seconds" section
                                      ;*****************************************************************************************
00585C 7F585C B6 10 04                    ldaa mSx250        ; Load accu A with value in 250 mSec counter
00585F 7F585F 81 04                       cmpa #$04          ; Compare with decimal 4
005861 7F5861 27 02                       beq  DoSec         ; If the Z bit of CCR is set, branch to DoSec:
005863 7F5863 20 0F                       bra  RTI_ISR_DONE  ; Branch to RTI_ISR_DONE:
                                      ;*****************************************************************************************
                                      ; ---------------------------------- Seconds section -------------------------------------
                                      ;*****************************************************************************************
005865 7F5865                         DoSec:
005865 7F5865 1C 10 05 10                 bset clock,ms1000     ; Set "ms1000" bit of "clock"
                                      ;*****************************************************************************************
                                      ; - Clear the 250 millisecond counter. Increment "secL". Increment "secH" on roll over
                                      ;*****************************************************************************************
005869 7F5869                         IncSec:
                                      ;*****************************************************************************************
                                      ; - Flash LED2 on board 1 to 28 every second just to show that the timer is working
                                      ;*****************************************************************************************
                                      ;    ldaa  PORTB        ; Load ACC A with value in Port B
                                      ;    eora  #$08         ; Exlusive or with $00001000
                                      ;    staa   PORTB       ; Copy to Port B (toggle Bit3, LED20, board 1 to 28)
                                      ;*****************************************************************************************
005869 7F5869 79 10 04                    clr  mSx250        ; Clear 250 mSec counter
00586C 7F586C 72 10 6B                    inc  secL          ; Increment "Seconds" Lo byte
00586F 7F586F 26 03                       bne  RTI_ISR_DONE  ; If the Z bit of CCR is clear, branch to RTI_ISR_DONE:
005871 7F5871 72 10 6A                    inc  secH          ; Increment "Seconds" Hi byte
005874 7F5874                         RTI_ISR_DONE:
005874 7F5874 4C 37 80                    bset CRGFLG,RTIF   ; Set "RTIF" bit of "CRGFLG" to clear flag
005877 7F5877 0B                          rti                ; Return from interrupt
                                      ;*****************************************************************************************
005878 7F5878 -> $5878                RTI_CODE_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
005878 7F5878 -> $7F5878              RTI_CODE_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C5B 7F6C5B                                                 ORG     RTI_TABS_START, RTI_TABS_START_LIN
006C5B 7F6C5B -> $7F6C5B              RTI_TABS_START_LIN      EQU     @ ; @ Represents the current value of the linear
                                                                ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006C5B 7F6C5B -> $6C5B                RTI_TABS_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C5B 7F6C5B -> $7F6C5B              RTI_TABS_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (sci0_BPEM488.s)                                                           *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    Interrupt handler for SCI0, (Communications with Tuner Studio)                     *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications (This module)    *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 25 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C5B 7F6C5B S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001006 0FD006                                     ORG     SCI0_VARS_START, SCI0_VARS_START_LIN
001006 0FD006 -> $FD006               SCI0_VARS_START_LIN     EQU     @ ; @ Represents the current value of the linear
                                                                ; program counter
                                      ;*****************************************************************************************
                                      ; - Serial Communications Interface variables
                                      ;*****************************************************************************************
001006 0FD006                         txgoalMSB:    ds 1 ; SCI number of bytes to send/rcv Hi byte
001007 0FD007                         txgoalLSB:    ds 1 ; SCI number of bytes to send/rcv Lo byte
001008 0FD008                         txcnt:        ds 2 ; SCI count of bytes sent/rcvd
00100A 0FD00A                         rxoffsetMSB:  ds 1 ; SCI offset from start of page Hi byte
00100B 0FD00B                         rxoffsetLSB:  ds 1 ; SCI offset from start of page lo byte
00100C 0FD00C                         rxmode:       ds 1 ; SCI receive mode selector
00100D 0FD00D                         txmode:       ds 1 ; SCI transmit mode selector
00100E 0FD00E                         pageID:       ds 1 ; SCI page identifier
00100F 0FD00F                         txcmnd:       ds 1 ; SCI command character identifier
001010 0FD010                         dataMSB:      ds 1 ; SCI data Most Significant Byte received
001011 0FD011                         dataLSB:      ds 1 ; SCI data Least Significant Byte received
001012 0FD012 -> $1012                SCI0_VARS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001012 0FD012 -> $FD012               SCI0_VARS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                                              ; interrpts disabled. RIE interrupts enabled.IDLE interrupts
                                                              ; disabled. Transmitter disabled, Receiver enabled, Normal
                                                              ; operation, No break characters)
                                                              ; (Transmitter and interrupt get enabled in SCI0_ISR)
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005878 7F5878                                                 ORG     SCI0_CODE_START, SCI0_CODE_START_LIN
005878 7F5878 -> $7F5878              SCI0_CODE_START_LIN     EQU     @ ; @ Represents the current value of the linear
                                                                ; program counter
                                      ;*****************************************************************************************
                                      ; ------------------------------ SCI Communication ---------------------------------------
                                      ;*****************************************************************************************
                                      ;
                                      ; Communication is established when the Tuner Studio sends
                                      ; a command character. The particular character sets the mode:
                                      ;
                                      ; "H" = This is the first command that Tuner Studio sends to request the
                                      ;       format of the data. It must receive the signature
                                      ;       'MShift 5.001' because the TS.ini file used with this code was
                                      ;       built from the base Megashift .ini. (QueryCommand)(1st)
                                      ; "C" = This command requests the constants. (pageReadCommand)(2nd)
                                      ;       It is sent after communication with TS has been established and
                                      ;       loads TS with all the the constant pages in RAM. It is also sent
                                      ;       when editing a particular page.
                                      ; "O" = This command requests the real time variables (ochGetCommand)(3d)
                                      ;       It is sent to update the real time variables at a selectable time rate
                                      ; "W" = This command sends an updated constant value from TS to the controller
                                      ;       (pageValueWrite). It is sent when editing configurable constants
                                      ;       one at a time. If editing only one, it is sent after the change
                                      ;       has been made and entered. If editing more than one it is sent
                                      ;       when the next constant to be changed is selected. The number of
                                      ;       bytes is either 1 for a byte value or 2 for a word value
                                      ; "B" = This command jumps to the flash burner routine (burnCommand)
                                      ;       It is sent either after pressing the "Burn" button or closing TS.
                                      ;
                                      ; NOTE! I am not using the burnCommand because I use EEEmulation to store
                                      ;       the configurable constants in buffer RAM.
                                      ;
                                      ; The commands sent to the GPIO(Megashift)are formatted "command\CAN_ID\table_ID"
                                      ;    %2i is the id/table number - 2 bytes
                                      ;    %2o is the table offset - 2 bytes
                                      ;    %2c is the number of bytes to be read/written
                                      ;    %v is the byte to be written
                                      ;
                                      ; Example: from TS comm log
                                      ; Time: 0:33.314: SENT, 7 bytes
                                      ; x72 x01 x07 x00 x38 x00 x08
                                      ; 'r',  can_id=1, table=7 (outpc), offset 38h (56 decimal), send 8 bytes
                                      ;
                                      ; NOTE! I am not using the CAN_ID
                                      ;
                                      ; The settings in the TS .ini file are:
                                      ;   queryCommand        = "H"
                                      ;   signature           = "MShift 5.001"
                                      ;   endianness          = big
                                      ;   nPages              = 3
                                      ;   pageSize            = 1024,            1024,            1024
                                      ;   pageIdentifier      = "\x01\x01",     "\x01\x02",     "\x01\x03"
                                      ;   burnCommand         = "B%2i",         "B%2i",         "B%2i"
                                      ;   pageReadCommand     = "C%2i%2o%2c",   "C%2i%2o%2c",   "C%2i%2o%2c"
                                      ;   pageValueWrite      = "W%2i%2o%2c%v", "W%2i%2o%2c%v", "W%2i%2o%2c%v"
                                      ;   pageChunkWrite      = "W%2i%2o%2c%v", "W%2i%2o%2c%v", "W%2i%2o%2c%v"
                                      ;   ochGetCommand       = "O"
                                      ;   ochBlockSize        = 58 ; This number will change as code expands
                                      ;   pageActivationDelay =  50 ; Milliseconds delay after burn command.
                                      ;   blockReadTimeout    = 200 ; Milliseconds total timeout for reading page.
                                      ;   writeBlocks         = on
                                      ;   interWriteDelay     = 10
                                      ;
                                      ; There are eight variables used in the communications code, "txgoalMSB", "txgoalLSB"
                                      ; "txcnt", "rxoffsetMSB", "rxoffsetLSB, "rxmode", "txmode", "pageID", "txcmnd", "dataMSB"
                                      ; and "dataLSB".
                                      ;
                                      ; "txgoalMSB" is the number of bytes to be sent Hi byte(8 bit)
                                      ; "txgoalLSB" is the number of bytes to be sent Lo byte(8 bit)
                                      ; "rxoffsetMSB" is the offset from start of page to a particuar value Hi byte(8 bit)
                                      ; "rxoffsetLSB" is the offset from start of page to a particuar value Lo byte(8 bit)
                                      ; "txcnt" is the running count of the number of bytes sent (16 bit)
                                      ; "rxmode" is the current receive mode (8 bit)
                                      ; "txmode" is the current transmit mode (8 bit)
                                      ; "pageID" is the page identifier (8 bit)
                                      ; "txcmnd" is the command character ID (8 bit)
                                      ; "dataMSB" is the Most Significant byte value sent from TS when
                                      ;           sending two bytes(8 bit)
                                      ; "dataLSB" is the Most Significant byte value sent from TS when
                                      ;           sending two bytes or a single byte(8 bit)
                                      ;
                                      ;
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - SCI0 Interrupt Service Routine
                                      ;   The interrupts are common to both receive and transmit. First
                                      ;   check the flags to determine which one initiated the interrupt
                                      ;   and branch accordingly.
                                      ;*****************************************************************************************
005878 7F5878                         SCI0_ISR:
005878 7F5878 4E CC 20 0A                 brset SCI0SR1,RDRF,RcvSCI    ; If Receive Data Register Full flag is set, branch to
                                                                       ; "RcvSCI:" (receive section)
00587C 7F587C 4E CC 80 03                 brset SCI0SR1,TDRE,TxSCI_LB  ; If Transmit Data Register Empty flag is set, branch to
                                                                       ; "TxSCI_trmp:" (transmit section)
005880 7F5880 96 CC                       ldaa  SCI0SR1                ; Read SCI0CR1 to clear flags
005882 7F5882 0B                          rti                          ; Return from interrupt (sanity check)
005883 7F5883                         TxSCI_LB:
005883 7F5883 06 5A E2                    job   TxSCI                  ; Jump or branch to TxSCI: (long branch)
                                      ;*****************************************************************************************
                                      ; - Receive section
                                      ;*****************************************************************************************
005886 7F5886                         RcvSCI:
005886 7F5886 96 CC                       ldaa  SCI0SR1  ; Load accu A with value in SCI0SR1(Read SCI0SR1 to clear "RDRF" flag)
                                      ;*****************************************************************************************
                                      ; - Check the value of "rxmode" to see if we are in the middle of
                                      ;   receiveing a CAN ID, Page ID, offset, byte count or value.
                                      ;          $01 = Receiving CAN ID
                                      ;          $02 = Receiving Page ID
                                      ;          $03 = Receiving offset msb
                                      ;          $04 = Receiving offset lsb
                                      ;          $05 = Receiving data count msb
                                      ;          $06 = Receiving data count lsb
                                      ;          $07 = Receiving data
                                      ;          $08 = Receiving data lsb
                                      ;
                                      ;*****************************************************************************************
005888 7F5888 B6 10 0C                    ldaa    rxmode       ; Load accumulator with value in "rxmode"
00588B 7F588B 81 01                       cmpa    #$01         ; Compare with decimal 1 (receiving CAN ID )
00588D 7F588D 27 1F                       beq     RcvCanID     ; If the Z bit of CCR is set, branch to RcvCanID:
00588F 7F588F 81 02                       cmpa    #$02         ; Compare with decimal 2 (receiving page ID )
005891 7F5891 27 21                       beq     RcvPageID    ; If the Z bit of CCR is set, branch to RcvPageID:
005893 7F5893 81 03                       cmpa    #$03         ; Compare with decimal 3 (receiving offset MSB )
005895 7F5895 27 2F                       beq     RcvOSmsb     ; If the Z bit of CCR is set, branch to RcvOSmsb:
005897 7F5897 81 04                       cmpa    #$04         ; Compare with decimal 4 (receiving offset LSB )
005899 7F5899 27 34                       beq     RcvOSlsb     ; If the Z bit of CCR is set, branch to RcvOSlsb:
00589B 7F589B 81 05                       cmpa    #$05         ; Compare with decimal 5 (receiving byte count MSB )
00589D 7F589D 27 39                       beq     RcvCntmsb    ; If the Z bit of CCR is set, branch to RcvCntmsb:
00589F 7F589F 81 06                       cmpa    #$06         ; Compare with decimal 6 (receiving byte count LSB )
0058A1 7F58A1 27 3E                       beq     RcvCntlsb    ; If the Z bit of CCR is set, branch to RcvCntlsb:
0058A3 7F58A3 81 07                       cmpa    #$07         ; Compare with decimal 7 (receiving data byte )
0058A5 7F58A5 27 4C                       beq     RcvData      ; If the Z bit of CCR is set, branch to RcvData:
0058A7 7F58A7 81 08                       cmpa    #$08         ; Compare with decimal 7 (receiving data byte )
0058A9 7F58A9 27 5E                       beq     RcvDataLSB   ; If the Z bit of CCR is set, branch to RcvDataLSB:
0058AB 7F58AB 06 59 FA                    jmp     CheckTxCmnd  ; jump to CheckTxCmnd: (rxmode must be 0 or invalid)
0058AE 7F58AE                         RcvCanID:                ; "rxmode" = 1
0058AE 7F58AE 96 CF                       ldaa  SCI0DRL        ; Load Accu A with value in "SCI0DRL"
                                                               ; (CAN ID) not used, so just read it and get
                                                               ; ready for next byte
0058B0 7F58B0 72 10 0C                    inc   rxmode         ; Increment "rxmode"(continue to next mode)
0058B3 7F58B3 0B                          rti                  ; Return from interrupt
0058B4 7F58B4                         RcvPageID:               ; "rxmode" = 2
0058B4 7F58B4 96 CF                       ldaa  SCI0DRL        ; Load Accu A with value in "SCI0DRL"
0058B6 7F58B6 7A 10 0E                    staa  pageID         ; Copy to "pageID"
0058B9 7F58B9 B6 10 0F                    ldaa  txcmnd         ; Load Accu A with value in "txcmnd"
0058BC 7F58BC 81 03                       cmpa  #$03           ; Compare with decimal 3 ("B")
0058BE 7F58BE 18 27 01 E1                 beq   ModeB2         ; If the Z bit of CCR is set, branch to ModeB2:
0058C2 7F58C2 72 10 0C                    inc   rxmode         ; Increment "rxmode"(continue to next mode)
0058C5 7F58C5 0B                          rti                  ; Return from interrupt
0058C6 7F58C6                         RcvOSmsb:                ; "rxmode" = 3
0058C6 7F58C6 96 CF                       ldaa  SCI0DRL        ; Load Accu A with value in "SCI0DRL" (Offset MSB)
0058C8 7F58C8 7A 10 0A                    staa  rxoffsetMSB    ; Copy to "rxoffsetMSB"
0058CB 7F58CB 72 10 0C                    inc   rxmode         ; Increment "rxmode"(continue to next mode)
0058CE 7F58CE 0B                          rti                  ; Return from interrupt
0058CF 7F58CF                         RcvOSlsb:                ; "rxmode" = 4
0058CF 7F58CF 96 CF                       ldaa  SCI0DRL        ; Load Accu A with value in "SCI0DRL" (Offset LSB)
0058D1 7F58D1 7A 10 0B                    staa  rxoffsetLSB    ; Copy to "rxoffsetLSB"
0058D4 7F58D4 72 10 0C                    inc   rxmode         ; Increment "rxmode"(continue to next mode)
0058D7 7F58D7 0B                          rti                  ; Return from interrupt
0058D8 7F58D8                         RcvCntmsb:               ; "rxmode" = 5
0058D8 7F58D8 96 CF                       ldaa  SCI0DRL        ; Load Accu A with value in "SCI0DRL" (Byte count MSB)
0058DA 7F58DA 7A 10 06                    staa  txgoalMSB      ; Copy to "txgoalMSB"
0058DD 7F58DD 72 10 0C                    inc   rxmode         ; Increment "rxmode"(continue to next mode)
0058E0 7F58E0 0B                          rti                  ; Return from interrupt
0058E1 7F58E1                         RcvCntlsb:               ; "rxmode" = 6
0058E1 7F58E1 96 CF                       ldaa  SCI0DRL        ; Load Accu A with value in "SCI0DRL" (Byte count LSB)
0058E3 7F58E3 7A 10 07                    staa  txgoalLSB      ; Copy to "txgoalLSB"
0058E6 7F58E6 B6 10 0F                    ldaa  txcmnd         ; Load Accu A with value in "txcmnd"
0058E9 7F58E9 81 01                       cmpa  #$01           ; Compare with decimal 1 ("C")
0058EB 7F58EB 18 27 01 36                 beq   ModeC2         ; If the Z bit of CCR is set, branch to ModeC2:
0058EF 7F58EF 72 10 0C                    inc   rxmode         ; Increment "rxmode"(continue to next mode)
0058F2 7F58F2 0B                          rti                  ; Return from interrupt (ready to receive next byte)
0058F3 7F58F3                         RcvData:                 ; "rxmode" = 7
                                      ;*****************************************************************************************
                                      ; - If we are here we must be in "W" mode and receiving either one or
                                      ;   two bytes, depending on the byte count.
                                      ;*****************************************************************************************
0058F3 7F58F3 FC 10 06                    ldd  txgoalMSB      ; Load double accumulator with value in
                                                              ; "txgoalMSB:txgoalLSB"
0058F6 7F58F6 8C 00 02                    cpd  #$0002         ; Compare with decimal 2
0058F9 7F58F9 27 05                       beq  RcvDataMSB     ; If equal branch to RcvDataMSB:
0058FB 7F58FB 8C 00 01                    cpd  #$0001         ; Compare with decimal 1
0058FE 7F58FE 27 09                       beq  RcvDataLSB     ; If equal branch to RcvDataLSB:
005900 7F5900                         RcvDataMSB:
                                      ;**********************************************************************
                                      ; - De-Bug LED   FUEL PUMP!!!!                                        *
                                      ;     bset  PORTB, PB0   ; Set bit0, Port B (LED9, board 1 to 28)     *
                                      ;**********************************************************************
005900 7F5900 96 CF                       ldaa  SCI0DRL       ; Load Accu A with value in "SCI0DRL"(data byte)
005902 7F5902 7A 10 10                    staa  dataMSB       ; Copy to "dataMSB"
005905 7F5905 72 10 0C                    inc   rxmode        ; Increment "rxmode"(continue to next mode)
005908 7F5908 0B                          rti                 ; Return from subroutine
005909 7F5909                         RcvDataLSB:             ; "rxmode" = 8
                                      ;**********************************************************************
                                      ; - De-Bug LED                                                        *
                                      ;     bset  PORTB, PB1   ; Set Bit1, Port B (LED23, board 1 to 28)    *
                                      ;**********************************************************************
005909 7F5909 D6 CF                       ldab  SCI0DRL       ; Load Accu B with value in "SCI0DRL"(data byte)
00590B 7F590B 7B 10 11                    stab  dataLSB       ; Copy to "dataLSB"
00590E 7F590E B6 10 0E                    ldaa  pageID        ; Load accu A with value in "pageID"
005911 7F5911 81 01                       cmpa  #$01          ; Compare with decimal 1 (send page 1)
005913 7F5913 27 0A                       beq   StorePg1      ; If the Z bit of CCR is set, branch to StorePg1:
005915 7F5915 81 02                       cmpa  #$02          ; Compare with decimal 2 (send page 2)
005917 7F5917 27 4B                       beq   StorePg2      ; If the Z bit of CCR is set, branch to StorePg2:
005919 7F5919 81 03                       cmpa  #$03          ; Compare with decimal 3 (send page 3)
00591B 7F591B 18 27 00 86                 beq   StorePg3      ; If the Z bit of CCR is set, branch to StorePg3:
00591F 7F591F                         StorePg1:
00591F 7F591F MACRO                         EEEM_ENABLE   ; Enable EEPROM Emulation Macro
                                                                          ; with $0F (FCLK=1MHz)                       (EEEM_ENABLE)
                                      ; - Enable EE Emulation -                                                        (EEEM_ENABLE)
                                      ; args:   1: branch address of error handler (optional)                          (EEEM_ENABLE)
                                      ; result: none                                                                   (EEEM_ENABLE)
                                      ; SSTACK: none                                                                   (EEEM_ENABLE)
                                      ;         X, Y, and D are preserved                                              (EEEM_ENABLE)
                                      ; - Step (1): Set FCCOBIX -                                                      (EEEM_ENABLE)
00591F 7F591F 79 01 02                    clr    FCCOBIX    ; Clear Flash CCOB Index Register                          (EEEM_ENABLE)
                                      ; - Step (2): Enter parameters into FCCOB -                                      (EEEM_ENABLE)
005922 7F5922 18 0B 13 01 0A              movb   #$13, FCCOBHI  ; Move %00010011 into Flash Common Command Register    (EEEM_ENABLE)
                                                                ; Hi byte (Flash command enable EEEPROM Emulation)     (EEEM_ENABLE)
                                      ;     movb   #$13, FCCOBLO                                                       (EEEM_ENABLE)
                                      ; - Step (3): Launch command -                                                   (EEEM_ENABLE)
005927 7F5927 18 0B B0 01 06              movb #(CCIF|ACCERR|FPVIOL), FSTAT ; Move $B0 (%10110000) into Flash Status Register (EEEM_ENABLE)
                                                                            ;( Write 1s to Command Complete Interrupt  (EEEM_ENABLE)
                                                                            ; flag, Flash Access Error Flag and Flash  (EEEM_ENABLE)
                                                                            ; Protection Violation Flag to clear flags) (EEEM_ENABLE)
                                      ; - Step (4): Wait until command is executed -                                   (EEEM_ENABLE)
00592C 7F592C 1F 01 06 80 FB              brclr       FSTAT, #CCIF, *  ; Loop until Command Complete Interrupt         (EEEM_ENABLE)
005931 7F5931 FC 10 06                    ldd  txgoalMSB      ; Load double accumulator with value in
                                                              ; "txgoalMSB:txgoalLSB"
005934 7F5934 8C 00 02                    cpd  #$0002         ; Compare with decimal 2
005937 7F5937 27 05                       beq  StorePg1Wd     ; If equal branch to StorePg1Wd:
005939 7F5939 8C 00 01                    cpd  #$0001         ; Compare with decimal 1
00593C 7F593C 27 13                       beq  StorePg1Bt     ; If equal branch to StorePg1Bt:
00593E 7F593E                         StorePg1Wd:
                                      ;**********************************************************************
                                      ; - De-Bug LED                                                        *
                                      ;     bset  PORTB, PB2   ; Set Bit1, Port B (LED4, board 1 to 28)     *
                                      ;**********************************************************************
00593E 7F593E FE 10 0A                    ldx   rxoffsetMSB  ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
005941 7F5941 FC 10 10                    ldd   dataMSB      ; Load double accu D with value in "dataMSB:dataLSB"
005944 7F5944 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
005949 7F5949 6C E2 08 00                 std   veBins_E,x     ; Copy "W" data word to "veBins_E" offset in index register X
00594D 7F594D 18 20 00 93                 bra   StoreDone    ; Branch to StoreDone:
005951 7F5951                         StorePg1Bt:
                                      ;**********************************************************************
                                      ; - De-Bug LED                                                        *
                                      ;     bset  PORTB, PB4   ; Set bit0, Port B (LED10, board 1 to 28)    *
                                      ;**********************************************************************
005951 7F5951 FE 10 0A                    ldx   rxoffsetMSB  ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
005954 7F5954 B6 10 11                    ldaa  dataLSB      ; Load accu A with value in "dataLSB"
005957 7F5957 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
00595C 7F595C 6A E2 08 00                 staa  veBins_E,x     ; Copy "W" data byte to "veBins_E" offset in index register X
005960 7F5960 18 20 00 80                 bra   StoreDone    ; Branch to StoreDone:
005964 7F5964                         StorePg2:
005964 7F5964 MACRO                         EEEM_ENABLE   ; Enable EEPROM Emulation Macro
                                                                          ; with $0F (FCLK=1MHz)                       (EEEM_ENABLE)
                                      ; - Enable EE Emulation -                                                        (EEEM_ENABLE)
                                      ; args:   1: branch address of error handler (optional)                          (EEEM_ENABLE)
                                      ; result: none                                                                   (EEEM_ENABLE)
                                      ; SSTACK: none                                                                   (EEEM_ENABLE)
                                      ;         X, Y, and D are preserved                                              (EEEM_ENABLE)
                                      ; - Step (1): Set FCCOBIX -                                                      (EEEM_ENABLE)
005964 7F5964 79 01 02                    clr    FCCOBIX    ; Clear Flash CCOB Index Register                          (EEEM_ENABLE)
                                      ; - Step (2): Enter parameters into FCCOB -                                      (EEEM_ENABLE)
005967 7F5967 18 0B 13 01 0A              movb   #$13, FCCOBHI  ; Move %00010011 into Flash Common Command Register    (EEEM_ENABLE)
                                                                ; Hi byte (Flash command enable EEEPROM Emulation)     (EEEM_ENABLE)
                                      ;     movb   #$13, FCCOBLO                                                       (EEEM_ENABLE)
                                      ; - Step (3): Launch command -                                                   (EEEM_ENABLE)
00596C 7F596C 18 0B B0 01 06              movb #(CCIF|ACCERR|FPVIOL), FSTAT ; Move $B0 (%10110000) into Flash Status Register (EEEM_ENABLE)
                                                                            ;( Write 1s to Command Complete Interrupt  (EEEM_ENABLE)
                                                                            ; flag, Flash Access Error Flag and Flash  (EEEM_ENABLE)
                                                                            ; Protection Violation Flag to clear flags) (EEEM_ENABLE)
                                      ; - Step (4): Wait until command is executed -                                   (EEEM_ENABLE)
005971 7F5971 1F 01 06 80 FB              brclr       FSTAT, #CCIF, *  ; Loop until Command Complete Interrupt         (EEEM_ENABLE)
005976 7F5976 FC 10 06                    ldd  txgoalMSB     ; Load double accumulator with value in "txgoalMSB:txgoalLSB"
005979 7F5979 8C 00 02                    cpd  #$0002        ; Compare with decimal 2
00597C 7F597C 27 05                       beq  StorePg2Wd    ; If equal branch to StorePg2Wd:
00597E 7F597E 8C 00 01                    cpd  #$0001        ; Compare with decimal 1
005981 7F5981 27 11                       beq  StorePg2Bt    ; If equal branch to StorePg2Bt:
005983 7F5983                         StorePg2Wd:
005983 7F5983 FE 10 0A                    ldx   rxoffsetMSB  ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
005986 7F5986 FC 10 10                    ldd   dataMSB      ; Load double accu D with value in "dataMSB:dataLSB"
005989 7F5989 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE
00598E 7F598E 6C E2 08 00                 std   stBins_E,x     ; Copy "W" data word to "stBins_E" offset in index register X
005992 7F5992 20 50                       bra   StoreDone    ; Branch to StoreDone:
005994 7F5994                         StorePg2Bt:
005994 7F5994 FE 10 0A                    ldx   rxoffsetMSB  ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
005997 7F5997 B6 10 11                    ldaa  dataLSB      ; Load accu A with value in "dataLSB"
00599A 7F599A 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE
00599F 7F599F 6A E2 08 00                 staa  stBins_E,x     ; Copy "W" data byte to "stBins_E" offset in index register X
0059A3 7F59A3 20 3F                       bra   StoreDone    ; Branch to StoreDone:
0059A5 7F59A5                         StorePg3:
0059A5 7F59A5 MACRO                         EEEM_ENABLE   ; Enable EEPROM Emulation Macro
                                                                          ; with $0F (FCLK=1MHz)                       (EEEM_ENABLE)
                                      ; - Enable EE Emulation -                                                        (EEEM_ENABLE)
                                      ; args:   1: branch address of error handler (optional)                          (EEEM_ENABLE)
                                      ; result: none                                                                   (EEEM_ENABLE)
                                      ; SSTACK: none                                                                   (EEEM_ENABLE)
                                      ;         X, Y, and D are preserved                                              (EEEM_ENABLE)
                                      ; - Step (1): Set FCCOBIX -                                                      (EEEM_ENABLE)
0059A5 7F59A5 79 01 02                    clr    FCCOBIX    ; Clear Flash CCOB Index Register                          (EEEM_ENABLE)
                                      ; - Step (2): Enter parameters into FCCOB -                                      (EEEM_ENABLE)
0059A8 7F59A8 18 0B 13 01 0A              movb   #$13, FCCOBHI  ; Move %00010011 into Flash Common Command Register    (EEEM_ENABLE)
                                                                ; Hi byte (Flash command enable EEEPROM Emulation)     (EEEM_ENABLE)
                                      ;     movb   #$13, FCCOBLO                                                       (EEEM_ENABLE)
                                      ; - Step (3): Launch command -                                                   (EEEM_ENABLE)
0059AD 7F59AD 18 0B B0 01 06              movb #(CCIF|ACCERR|FPVIOL), FSTAT ; Move $B0 (%10110000) into Flash Status Register (EEEM_ENABLE)
                                                                            ;( Write 1s to Command Complete Interrupt  (EEEM_ENABLE)
                                                                            ; flag, Flash Access Error Flag and Flash  (EEEM_ENABLE)
                                                                            ; Protection Violation Flag to clear flags) (EEEM_ENABLE)
                                      ; - Step (4): Wait until command is executed -                                   (EEEM_ENABLE)
0059B2 7F59B2 1F 01 06 80 FB              brclr       FSTAT, #CCIF, *  ; Loop until Command Complete Interrupt         (EEEM_ENABLE)
0059B7 7F59B7 FC 10 06                    ldd  txgoalMSB     ; Load double accumulator with value in "txgoalMSB:txgoalLSB"
0059BA 7F59BA 8C 00 02                    cpd  #$0002        ; Compare with decimal 2
0059BD 7F59BD 27 05                       beq  StorePg3Wd    ; If equal branch to StorePg3Wd:
0059BF 7F59BF 8C 00 01                    cpd  #$0001        ; Compare with decimal 1
0059C2 7F59C2 27 11                       beq  StorePg3Bt    ; If equal branch to StorePg3Bt:
0059C4 7F59C4                         StorePg3Wd:
0059C4 7F59C4 FE 10 0A                    ldx   rxoffsetMSB  ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
0059C7 7F59C7 FC 10 10                    ldd   dataMSB      ; Load double accu D with value in "dataMSB:dataLSB"
0059CA 7F59CA 18 0B FD 00 17              movb  #(BUF_RAM_P3_START>>16),EPAGE  ; Move $FD into EPAGE
0059CF 7F59CF 6C E2 08 00                 std   afrBins_E,x    ; Copy "W" data word to "afrBins_E" offset in index register X
0059D3 7F59D3 20 0F                       bra   StoreDone    ; Branch to StoreDone:
0059D5 7F59D5                         StorePg3Bt:
0059D5 7F59D5 FE 10 0A                    ldx   rxoffsetMSB  ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
0059D8 7F59D8 B6 10 11                    ldaa  dataLSB      ; Load accu A with value in "dataLSB"
0059DB 7F59DB 18 0B FD 00 17              movb  #(BUF_RAM_P3_START>>16),EPAGE  ; Move $FD into EPAGE
0059E0 7F59E0 6A E2 08 00                 staa  afrBins_E,x    ; Copy "W" data byte to "afrBins_E" offset in index register X
0059E4 7F59E4                         StoreDone:
0059E4 7F59E4 79 10 0C                    clr   rxmode       ; Clear "rxmode"
0059E7 7F59E7 79 10 0F                    clr   txcmnd       ; Clear "txcmnd"
0059EA 7F59EA 79 10 0E                    clr   pageID       ; Clear "pageID"
0059ED 7F59ED 18 79 10 10                 clrw  dataMSB      ; Clear "dataMSB:dataLSB"
0059F1 7F59F1 18 79 10 0A                 clrw  rxoffsetMSB  ; Clear "rxoffsetMSB:rxoffsetLSB"
0059F5 7F59F5 18 79 10 06                 clrw  txgoalMSB    ; Clear "txgoalMSB:txgoalLSB"
0059F9 7F59F9 0B                          rti                ; Return from interrupt
                                      ;*****************************************************************************************
                                      ; - "txcmnd" is the command character identifier
                                      ;    $01 = "C"
                                      ;    $02 = "W"
                                      ;    $03 = "B"
                                      ;*****************************************************************************************
0059FA 7F59FA                         CheckTxCmnd:
0059FA 7F59FA 96 CF                       ldaa  SCI0DRL    ; Load accu A with value in SCI0DRL(get the command byte)
0059FC 7F59FC 81 48                       cmpa  #$48       ; Compare with ASCII "H"
0059FE 7F59FE 18 27 00 AB                 beq   ModeH      ; If equal branch to "ModeH:"(QueryCommand)
005A02 7F5A02 81 4F                       cmpa  #$4F       ; Compare with ASCII "O"
005A04 7F5A04 18 27 00 BD                 beq   ModeO      ; If equal branch to "ModeO:"(ochGetCommand)
005A08 7F5A08 81 43                       cmpa  #$43       ; Compare with ASCII "C"
005A0A 7F5A0A 27 0E                       beq   ModeC1     ; If equal branch to "ModeC1:"(pageReadCommand)
005A0C 7F5A0C 81 57                       cmpa  #$57       ; Compare it with decimal 87 = ASCII "W"
005A0E 7F5A0E 27 7D                       beq   ModeW1     ; If the Z bit of CCR is set, branch to Mode_W1:
                                                           ;(receive new VE or constant byte value and store in offset location)
                                                           ;(pageValueWrite or pageChunkWrite)
005A10 7F5A10 81 42                       cmpa  #$42       ; Compare it with decimal 66 = ASCII "B"
005A12 7F5A12 18 27 00 82                 beq   ModeB1     ; If the Z bit of CCR is set, branch to ModeB1:(jump to flash burner
                                                           ; routine and burn VE, ST, AFR/constant values in RAM into flash)
005A16 7F5A16 18 20 00 C7                 bra   RcvSCIDone ; Branch to "RcvSCIDone:"
005A1A 7F5A1A                         ModeC1:
                                      ;**********************************************************************
                                      ; - De-Bug LED                                                        *
                                      ;     bset  PORTK, PK1   ; Set Bit1, Port K (LED6, board 1 to 28)     *
                                      ;**********************************************************************
                                      ;*****************************************************************************************
                                      ; - Load "rxmode" and "txcmnd" with appropriate values to get ready
                                      ;   to receive additional command information
                                      ;*****************************************************************************************
005A1A 7F5A1A 18 0B 01 10 0C              movb  #$01,rxmode   ; Load "rxmode" with "Receiving CAN ID mode"
005A1F 7F5A1F 18 0B 01 10 0F              movb  #$01,txcmnd   ; Load "txcmnd" with "Command character "C" ID"
005A24 7F5A24 0B                          rti                 ; Return from interrupt
005A25 7F5A25                         ModeC2:
005A25 7F5A25 79 10 0C                    clr   rxmode        ; Clear "rxmode"
005A28 7F5A28 79 10 0F                    clr   txcmnd        ; Clear "txcmnd"
005A2B 7F5A2B B6 10 0E                    ldaa  pageID        ; Load accu A with value in "pageID"
005A2E 7F5A2E 81 01                       cmpa  #$01          ; Compare with decimal 1 (send page 1)
005A30 7F5A30 27 08                       beq   StartPg1      ; If the Z bit of CCR is set, branch to StartPg1:
005A32 7F5A32 81 02                       cmpa  #$02          ; Compare with decimal 2 (send page 2)
005A34 7F5A34 27 21                       beq   StartPg2      ; If the Z bit of CCR is set, branch to StartPg2:
005A36 7F5A36 81 03                       cmpa  #$03          ; Compare with decimal 3 (send page 3)
005A38 7F5A38 27 38                       beq   StartPg3      ; If the Z bit of CCR is set, branch to StartPg3:
005A3A 7F5A3A                         StartPg1:
005A3A 7F5A3A 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
005A3F 7F5A3F FE 10 0A                    ldx   rxoffsetMSB   ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
                                                              ;(Page 1 offset)
005A42 7F5A42 A6 E2 08 00                 ldaa  veBins_E,X      ; Load Accu "A" with value in "veBins, offset in "rxoffsetMSB:rxoffsetLSB"
                                      ;*    ldaa  veBins        ; Load accu A with first value at "veBins_E"
005A46 7F5A46 5A CF                       staa  SCI0DRL       ; Copy to SCI0DRL (first byte to send)
005A48 7F5A48 18 03 00 00 10 08           movw  #$0000,txcnt  ; Clear "txcnt"
005A4E 7F5A4E 18 0B 03 10 0D              movb  #$03,txmode   ; Load "txmode" with decimal 3
005A53 7F5A53 18 20 00 84                 bra   DoTx          ; Branch to "DoTx:" (start transmission)
005A57 7F5A57                         StartPg2:
005A57 7F5A57 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE
005A5C 7F5A5C FE 10 0A                    ldx   rxoffsetMSB   ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
                                                              ;(Page 2 offset)
005A5F 7F5A5F A6 E2 08 00                 ldaa  stBins_E,X      ; Load Accu "A" with value in "stBins_E, offset in "rxoffsetMSB:rxoffsetLSB"
                                      ;*    ldaa  stBins        ; Load accu A with first value at "stBins"
005A63 7F5A63 5A CF                       staa  SCI0DRL       ; Copy to SCI0DRL (first byte to send)
005A65 7F5A65 18 03 00 00 10 08           movw  #$0000,txcnt  ; Clear "txcnt"
005A6B 7F5A6B 18 0B 04 10 0D              movb  #$04,txmode   ; Load "txmode" with decimal 4
005A70 7F5A70 20 69                       bra   DoTx          ; Branch to "DoTx:" (start transmission)
005A72 7F5A72                         StartPg3:
005A72 7F5A72 18 0B FD 00 17              movb  #(BUF_RAM_P3_START>>16),EPAGE  ; Move $FD into EPAGE
005A77 7F5A77 FE 10 0A                    ldx   rxoffsetMSB   ; Load index register X with value in "rxoffsetMSB:rxoffsetLSB"
                                                              ;(Page 3 offset)
005A7A 7F5A7A A6 E2 08 00                 ldaa  afrBins_E,X     ; Load Accu "A" with value in "afrBins_E, offset in "rxoffsetMSB:rxoffsetLSB"
                                      ;*    ldaa  afrBins       ; Load accu A with first value at "afrBins"
005A7E 7F5A7E 5A CF                       staa  SCI0DRL       ; Copy to SCI0DRL (first byte to send)
005A80 7F5A80 18 03 00 00 10 08           movw  #$0000,txcnt  ; Clear "txcnt"
005A86 7F5A86 18 0B 05 10 0D              movb  #$05,txmode   ; Load "txmode" with decimal 5
005A8B 7F5A8B 20 4E                       bra   DoTx          ; Branch to "DoTx:" (start transmission)
005A8D 7F5A8D                         ModeW1:
                                      ;**********************************************************************
                                      ; - De-Bug LED                                                        *
                                      ;     bset  PORTK, PK5   ; Set Bit5, Port K (LED3, board 1 to 28)     *
                                      ;**********************************************************************
                                      ;*****************************************************************************************
                                      ; - Load "rxmode" and "txcmnd" with appropriate values to get ready
                                      ;   to receive additional command information
                                      ;*****************************************************************************************
005A8D 7F5A8D 18 0B 01 10 0C              movb  #$01,rxmode   ; Load "rxmode" with "Receiving CAN ID mode"
005A92 7F5A92 18 0B 02 10 0F              movb  #$02,txcmnd   ; Load "txcmnd" with "Command character "W" ID"
005A97 7F5A97 0B                          rti                 ; Return from interrupt
005A98 7F5A98                         ModeB1:
                                      ;**********************************************************************
                                      ; - De-Bug LED                                                        *
                                      ;     bset PORTK, PK4    ; Set bit4 Port K (LED19, board 1 to 28)     *
                                      ;**********************************************************************
                                      ;*****************************************************************************************
                                      ; - Load "rxmode" and "txcmnd" with appropriate values to get ready
                                      ;   to receive additional command information
                                      ;*****************************************************************************************
005A98 7F5A98 18 0B 01 10 0C              movb  #$01,rxmode   ; Load "rxmode" with "Receiving CAN ID mode"
005A9D 7F5A9D 18 0B 03 10 0F              movb  #$03,txcmnd   ; Load "txcmnd" with "Command character "B" ID"
005AA2 7F5AA2 0B                          rti                 ; Return from interrupt
005AA3 7F5AA3                         ModeB2
005AA3 7F5AA3 79 10 0E                    clr   pageID        ; Clear "pageID"
005AA6 7F5AA6 79 10 0C                    clr   rxmode        ; Clear "rxmode"
005AA9 7F5AA9 79 10 0F                    clr   txcmnd        ; Clear "txcmnd"
                                      ; No code for this yet
005AAC 7F5AAC 0B                          rti                 ; Return from interrupt
005AAD 7F5AAD                         ModeH:
                                      ;**********************************************************************
                                      ; - De-Bug LED
                                      ;**********************************************************************
                                      ;      bset  PORTK, PK3   ; Set Bit3 (LED2, board 1 to 28)            *
                                      ;**********************************************************************
005AAD 7F5AAD B6 6C 5B                    ldaa  Signature        ; Load accu A with value at "Signature"
005AB0 7F5AB0 5A CF                       staa  SCI0DRL          ; Copy to SCI0DRL (first byte to send)
005AB2 7F5AB2 18 03 00 00 10 08           movw  #$0000,txcnt     ; Clear "txcnt"
005AB8 7F5AB8 18 03 00 0C 10 06           movw  #$000C,txgoalMSB ; Load "txgoalMSB:txgoaLSB" with decimal 12(number of bytes to send)
005ABE 7F5ABE 18 0B 01 10 0D              movb  #$01,txmode      ; Load "txmode" with decimal 1
005AC3 7F5AC3 20 16                       bra   DoTx             ; Branch to "DoTx:" (start transmission)
005AC5 7F5AC5                         ModeO:
                                      ;**********************************************************************
                                      ; - De-Bug LED
                                      ;**********************************************************************
                                      ; - De-Bug LED
                                      ;     ldaa  PORTK        ; Load ACC A with value in Port K            *
                                      ;     eora  #$01         ; Exclusive or with $00000001                *
                                      ;     staa   PORTK       ; Copy to Port K (toggle Bit0)               *
                                      ;                        ; LED22, board 1 to 28)                      *
                                      ;**********************************************************************
                                      ;**********************************************************************
                                      ; - De-Bug LED
                                      ;     ldaa  PORTK        ; Load ACC A with value in Port K            *
                                      ;     eora  #$80         ; Exclusive or with $10000000                *
                                      ;     staa   PORTK       ; Copy to Port K (toggle Bit7)               *
                                                              ; LED2, board 87 to 112)                      *
                                      ;**********************************************************************
005AC5 7F5AC5 B6 10 6A                    ldaa  secH             ; Load accu A with value at "secH"
005AC8 7F5AC8 5A CF                       staa  SCI0DRL          ; Copy to SCI0DRL (first byte to send)
005ACA 7F5ACA 18 03 00 00 10 08           movw  #$0000,txcnt     ; Clear "txcnt"
005AD0 7F5AD0 18 03 00 93 10 06           movw  #$0093,txgoalMSB ; Load "txgoalMSB:txgoalLSB" with decimal 147(number of bytes to send) REAL TIME VARIABLES HERE!!!!!!!!
005AD6 7F5AD6 18 0B 02 10 0D              movb  #$02,txmode      ; Load "txmode" with decimal 2
005ADB 7F5ADB                         DoTx:
005ADB 7F5ADB 4C CB 80                    bset  SCI0CR2,TXIE  ; Set Transmitter Interrupt Enable bit,
005ADE 7F5ADE 4C CB 08                    bset  SCI0CR2,TE    ; Set Transmitter Enable bit
005AE1 7F5AE1                         RcvSCIDone:
005AE1 7F5AE1 0B                          rti                 ; Return from interrupt
                                      ;*****************************************************************************************
                                      ; - Transmit section
                                      ;*****************************************************************************************
005AE2 7F5AE2                         TxSCI:
005AE2 7F5AE2 96 CC                       ldaa  SCI0SR1  ; Load accu A with value in SCI0SR1(Read SCI0SR1 to clear "TDRE" flag)
005AE4 7F5AE4 FE 10 08                    ldx   txcnt    ; Load Index Register X with value in "txcnt"
005AE7 7F5AE7 08                          inx            ; Increment Index Register X
005AE8 7F5AE8 7E 10 08                    stx   txcnt    ; Copy new value to "txcnt"
005AEB 7F5AEB B6 10 0D                    ldaa  txmode   ; Load accu A with value in "txmode"
005AEE 7F5AEE 27 57                       beq   TxDone   ; If "txmode" = 0 branch to "TxDone:" (sanity check)
                                      ;*****************************************************************************************
                                      ; - Check the value of "txmode" to see if we are in the middle of
                                      ;   sending value bytes.
                                      ;          $01 = Sending Signature bytes
                                      ;          $02 = Sending real time variables
                                      ;          $03 = Sending constants page 1
                                      ;          $04 = Sending constants page 2
                                      ;          $05 = Sending constants page 3
                                      ;
                                      ;*****************************************************************************************
005AF0 7F5AF0 81 01                       cmpa  #$01         ; Compare with $01
005AF2 7F5AF2 27 12                       beq   SendSig      ; If equal branch to "SendSig:"
005AF4 7F5AF4 81 02                       cmpa  #$02         ; Compare with $02
005AF6 7F5AF6 27 14                       beq   SendVars     ; If equal branch to "SendVars:"
005AF8 7F5AF8 81 03                       cmpa  #$03         ; Compare with $03
005AFA 7F5AFA 27 16                       beq   SendPg1      ; If equal branch to "SendPg1:"
005AFC 7F5AFC 81 04                       cmpa  #$04         ; Compare with $04
005AFE 7F5AFE 27 21                       beq   SendPg2      ; If equal branch to "SendPg2:"
005B00 7F5B00 81 05                       cmpa  #$05         ; Compare with $05
005B02 7F5B02 27 2C                       beq   SendPg3      ; If equal branch to "SendPg3"
005B04 7F5B04 20 41                       bra   TxDone       ; Branch to "TxDone:" (sanity check)
005B06 7F5B06                         SendSig:               ; "txmode" = 1
005B06 7F5B06 A6 E2 6C 5B                 ldaa  Signature,X  ; Load accu A with value at "Signature:", offset in "X" register
005B0A 7F5B0A 20 31                       bra   ContTx       ; Branch to "ContTx:"(continue TX process)
005B0C 7F5B0C                         SendVars:              ; "txmode" = 2
005B0C 7F5B0C A6 E2 10 6A                 ldaa  secH,X       ; Load accu A with value at "secH:" offset in "X" register.
005B10 7F5B10 20 2B                       bra   ContTx       ; Branch to "ContTX:" (continue TX process)
005B12 7F5B12                         SendPg1:               ; "txmode" = 3
005B12 7F5B12 18 0B FF 00 17              movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
                                      ;*    ldaa  veBins,X     ; Load accu A with value at "veBins:", offset in "X" register
005B17 7F5B17 CC 08 00                    ldd   #veBins_E      ; Load double accumulator D with address of "veBins_E"
005B1A 7F5B1A F3 10 0A                    addd  rxoffsetMSB  ; (A:B)+(M:M+1)->A:B Add the address of "veBins_E" with the offset
                                                             ; value to get the effective address of the byte to be sent
005B1D 7F5B1D A6 E6                       ldaa  D,X          ; Load Accu A with value in the effective address
005B1F 7F5B1F 20 1C                       bra   ContTx       ; Branch to "ContTx:" (continue TX process)
005B21 7F5B21                         SendPg2:               ; "txmode" = 4
005B21 7F5B21 18 0B FE 00 17              movb  #(BUF_RAM_P2_START>>16),EPAGE  ; Move $FE into EPAGE
                                      ;*    ldaa  stBins,X     ; Load accu A with value at "stBins:", offset in "X" register
005B26 7F5B26 CC 08 00                    ldd   #stBins_E      ; Load double accumulator D with address of "stBins_E"
005B29 7F5B29 F3 10 0A                    addd  rxoffsetMSB  ; (A:B)+(M:M+1)->A:B Add the address of "stBins_E" with the offset
                                                             ; value to get the effective address of the byte to be sent
005B2C 7F5B2C A6 E6                       ldaa  D,X          ; Load Accu A with value in the effective address
005B2E 7F5B2E 20 0D                       bra   ContTx       ; Branch to "ContTx:" (continue TX process)
005B30 7F5B30                         SendPg3:               ; "txmode" = 5
005B30 7F5B30 18 0B FD 00 17              movb  #(BUF_RAM_P3_START>>16),EPAGE  ; Move $FD into EPAGE
                                      ;*    ldaa  afrBins,X    ; Load accu A with value at "afrBins:", offset in "X" register
005B35 7F5B35 CC 08 00                    ldd   #afrBins_E      ; Load double accumulator D with address of "afrBins_E"
005B38 7F5B38 F3 10 0A                    addd  rxoffsetMSB  ; (A:B)+(M:M+1)->A:B Add the address of "afrBins_E" with the offset
                                                             ; value to get the effective address of the byte to be sent
005B3B 7F5B3B A6 E6                       ldaa  D,X          ; Load Accu A with value in the effective address
005B3D 7F5B3D                         ContTx:
005B3D 7F5B3D 5A CF                       staa  SCI0DRL      ; Copy value in accu A into SCI0DRL (next byte to send)
005B3F 7F5B3F FD 10 08                    ldy   txcnt        ; Load Index Register Y with value in "txcnt"
005B42 7F5B42 BD 10 06                    cpy   txgoalMSB    ; Compare value to "txgoalMSB:txgoalLSB"
005B45 7F5B45 26 18                       bne   ByteDone     ; If the Z bit of CCR is not set, branch to "ByteDone:"
                                                             ;(not finished yet)
005B47 7F5B47                         TxDone:
005B47 7F5B47 18 03 00 00 10 08           movw  #$0000,txcnt     ; Clear "txcnt"
005B4D 7F5B4D 18 03 00 00 10 06           movw  #$0000,txgoalMSB ; Clear "txgoalMSB:txgoalLSB"
005B53 7F5B53 79 10 0D                    clr   txmode           ; Clear "txmode"
005B56 7F5B56 79 10 0E                    clr   pageID           ; Clear "pageID"
005B59 7F5B59 4D CB 80                    bclr  SCI0CR2,TXIE     ; Clear Transmitter Interrupt Enable bit
                                                                 ;(disable TDRE interrupt)
005B5C 7F5B5C 4D CB 08                    bclr  SCI0CR2,TE       ; Clear Transmitter Enable bit (disable transmitter)
005B5F 7F5B5F                         ByteDone:
005B5F 7F5B5F 0B                          rti                    ; Return from interrupt
                                      ;*****************************************************************************************
005B60 7F5B60 -> $5B60                SCI0_CODE_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
005B60 7F5B60 -> $7F5B60              SCI0_CODE_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C5B 7F6C5B                                                 ORG     SCI0_TABS_START, SCI0_TABS_START_LIN
006C5B 7F6C5B -> $7F6C5B              SCI0_TABS_START_LIN     EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
006C5B 7F6C5B                         Signature:
006C5B 7F6C5B 4D 53 68 69 66 74 20 35     fcc 'MShift 5.001' ; ASCII string (Tuner Studio MUST have this)
              2E 30 30 31             
006C67 7F6C67 -> $6C67                SCI0_TABS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C67 7F6C67 -> $7F6C67              SCI0_TABS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (adc0_BPEM488EM488.s)                                                      *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    ADC0 interrupt handler                                                             *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)(This module)                        *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 17 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C67 7F6C67 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001012 0FD012                                     ORG     ADC0_VARS_START, ADC0_VARS_START_LIN
001012 0FD012 -> $FD012               ADC0_VARS_START_LIN     EQU   @ ; @ Represents the current value of the linear
                                                                  ; program counter
                                      ;*****************************************************************************************
                                      ; - RS232 Real Time Variables - (declared in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;cltAdc:       ds 2 ; RV15 10 bit ADC AN00 Engine Coolant Temperature ADC(offset=2)
                                      ;Cltx10:       ds 2 ; Engine Coolant Temperature (Degrees F x 10)(offset=4)
                                      ;matAdc:       ds 2 ; RV14 10 bit ADC AN01 Manifold Air Temperature ADC(offset=6)
                                      ;Matx10:       ds 2 ; Manifold Air Temperature (Degrees F x 10)(offset=8)
                                      ;eftAdc:       ds 2 ; RV13 10 bit ADC AN02 Engine Fuel Temperature ADC(offset=10)
                                      ;Eftx10:       ds 2 ; Engine Fuel Temperature (Degrees F x 10)(offset=12)
                                      ;eotAdc:       ds 2 ; RV12 10 bit ADC AN03 Engine Oil Temperature ADC(offset=14)
                                      ;Eotx10:       ds 2 ; Engine Oil Temperature (Degrees F x 10)(offset=16)
                                      ;RV11Adc:      ds 2 ; RV11 10 bit ADC AN04(19)(offset=18)
                                      ;mapAdc:       ds 2 ; RV10 10 bit ADC AN05 Manifold Absolute Pressure ADC(offset=20)
                                      ;Mapx10:       ds 2 ; Manifold Absolute Pressure (KPAx10)(offset=22)
                                      ;baroAdc:      ds 2 ; RV9 10 bit ADC AN06 Barometric Pressure ADC(offset=24)
                                      ;Barox10:      ds 2 ; Barometric Pressure (KPAx10)(offset=26)
                                      ;batAdc:       ds 2 ; Battery Voltage 10 bit ADC AN07(offset=28)
                                      ;BatVx10:      ds 2 ; Battery Voltage (Volts x 10)(offset=30)
                                      ;ftrmAdc:      ds 2 ; RV8 10 bit ADC AN08 Fuel Trim ADC(offset=32)
                                      ;Ftrmx10:      ds 2 ; Fuel Trim (% x 10)(+-20%)(offset=34)
                                      ;itrmAdc:      ds 2 ; RV7 10 bit ADC AN09 Ignition Trim ADC(offset=36)
                                      ;Itrmx10:      ds 2 ; Ignition Trim (degrees x 10)+-20 degrees) (offset=38)
                                      ;egtAdc:       ds 2 ; RV6 10 bit ADC AN10 Exhaust Gas Temperature ADC(offset=40)
                                      ;Egt:          ds 2 ; Exhaust Gas Temperature (degrees F)(offset=42)
                                      ;eopAdc:       ds 2 ; RV5 10 bit ADC AN11 Engine Oil Pressure ADC(offset=44)
                                      ;Eopx10:       ds 2 ; Engine Oil Pressure (PSI x 10)(offset=46)
                                      ;efpAdc:       ds 2 ; RV4 10 bit ADC AN12 Engine Fuel Pressure ADC(offset=48)
                                      ;Efpx10:       ds 2 ; Engine Fuel Pressure (PSI x 10)(offset=50)
                                      ;tpsADC:       ds 2 ; RV3 10 bit ADC AN13 Throttle Position Sensor ADC (exact for TS)(offset=52)
                                      ;TpsPctx10:    ds 2 ; Throttle Position Sensor % of travel(%x10)(update every 100mSec)(offset=54)
                                      ;iacAdc:       ds 2 ; RV2 10 bit ADC AN14 Idle Air Control ADC(offset=56)
                                      ;egoAdc:       ds 2 ; RV1 10 bit ADC AN15 Exhaust Gas Oxygen ADC(offset=58)
                                      ;afr1x10:      ds 2 ; Air Fuel Ratio for gasoline (AFRx10)(exact for TS)(60)
                                      ;PortAbits:    ds 1  ; Port A status bit field(offset=128)
                                      ;alarmbits:    ds 1  ; Alarm status bit field(offset=137)
                                      ;engine2:      ds 1  ; Engine2 status bit field(offset=136)
                                      ;*****************************************************************************************
                                      ; "engine2" equates
                                      ;*****************************************************************************************
                                      ;base512        equ $01 ; %00000001, bit 0, 0 = 5.12uS time base off(White),
                                                                               ; 1 = 5.12uS time base on(Grn)
                                      ;base256        equ $02 ; %00000010, bit 1, 0 = 2.56uS time base off(White),
                                                                               ; 1 = 2.56uS time base on(Grn)
                                      ;AudAlrm        equ $04 ; %00000100, bit 2, 0 = Audible Alarm on(Grn),
                                                                               ; 1 = Audible Alarm off(Red)
                                      ;eng2Bit3       equ $08 ; %00001000, bit 3, 0 = , 1 =
                                      ;eng2Bit4       equ $10 ; %00010000, bit 4, 0 = , 1 =
                                      ;eng2Bit5       equ $20 ; %00100000, bit 5, 0 = , 1 =
                                      ;eng2Bit6       equ $40 ; %01000000, bit 6, 0 = , 1 =
                                      ;eng2Bit7       equ $80 ; %10000000, bit 7, 0 = , 1 =
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; "alarmbits" equates
                                      ;*****************************************************************************************
                                      ;LOP        equ $01 ; %00000001, bit 0, 0 = No low oil pressure(Grn),
                                                                            ;1 = Low oil pressure(Red)
                                      ;HOT        equ $02 ; %00000010, bit 1, 0 = No high oil temperature(Grn),
                                                                            ;1 = High oil temperature(Red)
                                      ;HET        equ $04 ; %00000100, bit 2, 0 = No high coolant temperature(Grn),
                                                                            ;1 = High coolant temperature(Red)
                                      ;HEGT       equ $08 ; %00001000, bit 3, 0 = No high exhaust temperature(Grn),
                                                                            ;1 = High exhaust temperatrue(Red)
                                      ;HFT        equ $10 ; %00010000, bit 4, 0 = No high fuel temperature(Grn),
                                                                            ;1 = High fuel temperature(Red)
                                      ;LFP        equ $20 ; %00100000, bit 5, 0 = No Low fuel pressure(Grn),
                                                                            ;1 = Low fuel pressure(Red)
                                      ;HFP        equ $40 ; %01000000, bit 6, 0 = No high fuel pressure(Grn),
                                                                            ;1 = High fuel pressure(Red)
                                      ;Bit7       equ $80 ; %10000000, bit 7, 0 = , 1 =
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; PortAbits: Port A status bit field (PORTA)
                                      ;*****************************************************************************************
                                      ;SW7on57to82  equ  $01 ;(PA0)%00000001, bit 0
                                      ;SW3on57to82  equ  $02 ;(PA1)%00000010, bit 1
                                      ;SW6on57to82  equ  $04 ;(PA2)%00000100, bit 2
                                      ;Ftrimen      equ  $08 ;(PA3)%00001000, bit 3, SW2on57to82, 0 = Fuel trim disabled(Grn),
                                                                                                ;1 = Fuel trim enabled(Red)
                                      ;Itrimen      equ  $10 ;(PA4)%00010000, bit 4, SW5on57to82, 0 = Ign trim disabled(Grn),
                                                                                                ;1 = Ign trim enabled(Red)
                                      ;SW1on57to82  equ  $20 ;(PA5)%00100000, bit 5
                                      ;RunLoad      equ  $40 ;(PA6)%01000000, bit 6, SW2 on CPU, 0 = EEM load enabled(Red),
                                                                                               ;1 = EEMload not enabled(Grn)
                                      ;SW4on57to82  equ  $80 ;(PA7)%10000000, bit 7
                                      ;*****************************************************************************************
                                      ;Port B
                                      ;EngAlarm   equ $20 ;(PB5)%00100000, bit 5, D1on29to56, 0 = Alarm Relay off,
                                                                                            ; 1 = Alarm Relay on
                                      ;Port E
                                      ;AudAlrmSil equ $08 ;(PE3)%00001000, bit 3, SW5on29to56, 0 = No Audible Alarm Silence
                                                                                             ; 1 = Audible Alarm Silence
                                      ;*****************************************************************************************
001012 0FD012 -> $1012                ADC0_VARS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001012 0FD012 -> $FD012               ADC0_VARS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005B60 7F5B60                                                 ORG     ADC0_CODE_START, ADC0_CODE_START_LIN
005B60 7F5B60 -> $7F5B60              ADC0_CODE_START_LIN        EQU  @   ; @ Represents the current value of the linear
                                                                      ; program counter
                                      ;----------------------------- No code for this module ----------------------------------
005B60 7F5B60 -> $5B60                ADC0_CODE_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
005B60 7F5B60 -> $7F5B60              ADC0_CODE_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C67 7F6C67                                                 ORG     ADC0_TABS_START, ADC0_TABS_START_LIN
006C67 7F6C67 -> $7F6C67              ADC0_TABS_START_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006C67 7F6C67 -> $6C67                ADC0_TABS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C67 7F6C67 -> $7F6C67              ADC0_TABS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (gpio_BPEM488.s                                                            *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module Initializes all ports                                                  *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports (This module)                       *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 17 2020                                                                      *
                                      ;*    - BEPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C67 7F6C67 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001012 0FD012                                     ORG     GPIO_VARS_START, GPIO_VARS_START_LIN
001012 0FD012 -> $FD012               GPIO_VARS_START_LIN     EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ----------------------------- No variables for this module ----------------------------
001012 0FD012 -> $1012                GPIO_VARS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001012 0FD012 -> $FD012               GPIO_VARS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                      ;    ldaa   PORTB    ; Load Accu A with value in Port B (LED9 board 1 to 28)
                                      ;    anda   #$03     ; Bitwise "AND" Accu A with %00000011 (clear bits 0 and 1)
                                      ;    staa   PORTB    ; Copy to Port B  (clear bits 0 and 1)
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005B60 7F5B60                                                 ORG     GPIO_CODE_START, GPIO_CODE_START_LIN
005B60 7F5B60 -> $7F5B60              GPIO_CODE_START_LIN     EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No code for this module -------------------------------
005B60 7F5B60 -> $5B60                GPIO_CODE_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
005B60 7F5B60 -> $7F5B60              GPIO_CODE_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C67 7F6C67                                                 ORG     GPIO_TABS_START, GPIO_TABS_START_LIN
006C67 7F6C67 -> $7F6C67              GPIO_TABS_START_LIN     EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006C67 7F6C67 -> $6C67                GPIO_TABS_END           EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C67 7F6C67 -> $7F6C67              GPIO_TABS_END_LIN       EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (ect_BPEM488.s)                                                            *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    Enhanced Capture Timer on Port T interrupt handler.                                *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 17 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C67 7F6C67 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001012 0FD012                                                 ORG     ECT_VARS_START, ECT_VARS_START_LIN
001012 0FD012 -> $FD012               ECT_VARS_START_LIN      EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - RS232 variables - (declared in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;CASprd512:    ds 2 ; Crankshaft Angle Sensor period (5.12uS time base
                                      ;CASprd256:    ds 2 ; Crankshaft Angle Sensor period (2.56uS time base
                                      ;VSSprd:       ds 2 ; Vehicle Speed Sensor period
                                      ;RPM:          ds 2 ; Crankshaft Revolutions Per Minute
                                      ;KPH:          ds 2 ; Vehicle speed (KpH x 10)
                                      ;engine:       ds 1 ; Engine status bit field
                                      ;*****************************************************************************************
                                      ; - "engine" Engine status bit field
                                      ;*****************************************************************************************
                                      ;OFCdelon     equ  $01 ; %00000001, bit 0, 0 = OFC timer not counting down(Grn),
                                                                              ; 1 = OFC timer counting down(Red)
                                      ;crank        equ  $02 ; %00000010, bit 1, 0 = engine not cranking(Grn),
                                                                              ; 1 = engine cranking(Red)
                                      ;run          equ  $04 ; %00000100, bit 2, 0 = engine not running(Red),
                                                                              ; 1 = engine running(Grn)
                                      ;ASEon        equ  $08 ; %00001000, bit 3, 0 = not in start/warmup(Grn),
                                                                              ; 1 = in start/warmup(Red)
                                      ;WUEon        equ  $10 ; %00010000, bit 4, 0 = not in warmup(Grn),
                                                                              ; 1 = in warmup(Red)
                                      ;TOEon        equ  $20 ; %00100000, bit 5, 0 = not in TOE mode(Grn),
                                                                              ; 1 = TOE mode(Red)
                                      ;OFCon        equ  $40 ; %01000000, bit 6, 0 = not in OFC mode(Grn),
                                                                              ; 1 = in OFC mode(Red)
                                      ;FldClr       equ $80  ; %10000000, bit 7, 0 = not in flood clear mode(Grn),
                                                                              ; 1 = Flood clear mode(Red)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Non RS32 variables - (declared in state_BPEM488.s)
                                      ;*****************************************************************************************
                                      ;RevCntr:     ds 1  ; Counter for "Revmarker" flag
                                      ;ICflgs:      ds 1  ; Input Capture flags bit field
                                      ;*****************************************************************************************
                                      ; - "ICflgs" equates
                                      ;*****************************************************************************************
                                      ;RPMcalc:    equ $01   ; %00000001 (Bit 0) (Do RPM calculations flag)
                                      ;KpHcalc:    equ $02   ; %00000010 (Bit 1) (Do VSS calculations flag)
                                      ;Ch7_2nd:    equ $04   ; %00000100 (Bit 2) (Ch7 2nd edge flag)
                                      ;Ch6alt:     equ $08   ; %00001000 (Bit 3) (Ch6 alt flag)
                                      ;Ch7_3d:     equ $10   ; %00010000 (Bit 4) (Ch7 3d edge flag)
                                      ;RevMarker:  equ $20   ; %00100000 (Bit 5) (Crank revolution marker flag)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Non RS32 variables - (declared in igncalcs_BPEM488.s)
                                      ;*****************************************************************************************
                                      ;IgnOCadd1:      ds 2 ; First ignition output compare adder (5.12uS or 2.56uS res)
                                      ;IgnOCadd2:      ds 2 ; Second ignition output compare adder(5.12uS or 2.56uS res)
                                      ;*****************************************************************************************
                                      ; - Non RS32 variables - (declared in This module)
                                      ;*****************************************************************************************
001012 0FD012                         VSS1st:      ds 2  ; VSS input capture rising edge 1st time stamp (5.12uS or 2.56uS res)
                                      ;*****************************************************************************************
001014 0FD014 -> $1014                ECT_VARS_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001014 0FD014 -> $FD014               ECT_VARS_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                                              ; (Will trigger an interrupt after the delay time)(LED off)
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005B60 7F5B60                                                 ORG     ECT_CODE_START, ECT_CODE_START_LIN
005B60 7F5B60                         ECT_TC0_ISR:
                                      ;*****************************************************************************************
                                      ; - ECT ch0 Interrupt Service Routine (for (D7)(1to28)(Ign1)(1&6) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005B60 7F5B60 4C 49 02                    bset ECT_TCTL2,Bit1    ; Clear Ch0 output line to zero on compare
005B63 7F5B63 4D 49 01                    bclr ECT_TCTL2,Bit0    ; Clear Ch0 output line to zero on compare
005B66 7F5B66 DC 44                       ldd  ECT_TCNTH         ; Contents of Timer Count Register-> Accu D
005B68 7F5B68 F3 10 43                    addd IgnOCadd2         ; Add "IgnOCadd2" (dwell time)
005B6B 7F5B6B 5C 50                       std  ECT_TC0H          ; Copy result to Timer IC/OC register 0 (Start OC operation)
                                                                 ; (coil on for dwell time)(LED on)
005B6D 7F5B6D 0B                          rti                    ; Return from Interrupt
                                      ;*****************************************************************************************
                                      ; - NOTE! ECT_TC1_ISR is not enabled
                                      ;*****************************************************************************************
005B6E 7F5B6E                         ECT_TC2_ISR:
                                      ;*****************************************************************************************
                                      ; - ECT ch2 Interrupt Service Routine (for (D8)(1to28)(Ign2)(10&5) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005B6E 7F5B6E 4C 49 20                    bset ECT_TCTL2,Bit5    ; Clear Ch2 output line to zero on compare
005B71 7F5B71 4D 49 10                    bclr ECT_TCTL2,Bit4    ; Clear Ch2 output line to zero on compare
005B74 7F5B74 DC 44                       ldd  ECT_TCNTH         ; Contents of Timer Count Register-> Accu D
005B76 7F5B76 F3 10 43                    addd IgnOCadd2         ; Add "IgnOCadd2" (dwell time))
005B79 7F5B79 5C 54                       std  ECT_TC2H          ; Copy result to Timer IC/OC register 2(Start OC operation)
                                                                 ; (coil on for dwell time)(LED on)
005B7B 7F5B7B 0B                          rti                    ; Return from Interrupt
                                      ;*****************************************************************************************
                                      ; - NOTE! ECT_TC3_ISR is not enabled
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - NOTE! ECT_TC4_ISR is not enabled
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - NOTE! ECT_TC5_ISR (camshaft position sensor) is handled in state_BEEM488.s module)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - ECT ch6 Interrupt Service Routine (for VSS calculations)
                                      ;*****************************************************************************************
005B7C 7F5B7C                         ECT_TC6_ISR:
                                      ;*****************************************************************************************
                                      ; - Get two consecutive rising edge signals for vehicle speed and
                                      ;   calculate the period. KPH calculations are done in the main loop
                                      ;*****************************************************************************************
005B7C 7F5B7C 1E 10 24 08 0B              brset ICflgs,Ch6alt,VSS2 ; If "Ch6alt" bit of "ICflgs" is set, branch to "VSS2:"
005B81 7F5B81 DC 5C                       ldd  ECT_TC6H            ; Load accu D with value in "ECT_TC6H"
005B83 7F5B83 7C 10 12                    std  VSS1st              ; Copy to "VSS1st"
005B86 7F5B86 1C 10 24 08                 bset ICflgs,Ch6alt       ; Set "Ch6alt" bit of "ICflgs"
005B8A 7F5B8A 20 10                       bra  ECT6_ISR_Done       ; Branch to "ECT6_ISR_Done:"
005B8C 7F5B8C                         VSS2:
005B8C 7F5B8C DC 5C                       ldd  ECT_TC6H       ; Load accu D with value in "ECT_TC6H"
005B8E 7F5B8E B3 10 12                    subd VSS1st         ; Subtract (A:B)-(M:M+1)=>A:B "VSS1st" from value in "ECT_TC6H"
005B91 7F5B91 7C 10 AC                    std  VSSprd         ; Copy result to "VSSprd"
005B94 7F5B94 1D 10 24 08                 bclr ICflgs,Ch6alt  ; Clear "Ch6alt" bit of "ICflgs"
005B98 7F5B98 1C 10 24 02                 bset ICflgs,KPHcalc ; Set "KPHcalc" bit of "ICflgs"
005B9C 7F5B9C                         ECT6_ISR_Done:
005B9C 7F5B9C 0B                          rti                ; Return from Interrupt
                                      ;*****************************************************************************************
                                      ; - NOTE! ECT_TC7_ISR (crankshaft position sensor) is handled in state_BEEM488.s module)
                                      ;*****************************************************************************************
005B9D 7F5B9D -> $5B9D                ECT_CODE_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
005B9D 7F5B9D -> $7F5B9D              ECT_CODE_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                                                    ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C67 7F6C67                                                 ORG     ECT_TABS_START, ECT_TABS_START_LIN
006C67 7F6C67 -> $7F6C67              ECT_TABS_START_LIN      EQU     @ ; @ Represents the current value of the linear
                                                                ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006C67 7F6C67 -> $6C67                ECT_TABS_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C67 7F6C67 -> $7F6C67              ECT_TABS_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (tim_BPEM488.s                                                             *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BEEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    Timer module for Ignition and injector control on Port P                           *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 17 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C67 7F6C67 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001014 0FD014                                     ORG     TIM_VARS_START, TIM_VARS_START_LIN
001014 0FD014 -> $FD014               TIM_VARS_START_LIN      EQU     @ ; @ Represents the current value of the linear
                                                                ; program counter
                                      ;*****************************************************************************************
                                      ; - RS232 variables - (declared in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;FD:           ds 2 ; Fuel Delivery pulse width (mS)
                                      ;*****************************************************************************************
                                      ; - Non RS232 variables - (declared in injcalcs_BPEM488.s)
                                      ;*****************************************************************************************
                                      ;InjOCadd1      ds 2 ; First injector output compare adder (5.12uS res or 2.56uS res)
                                      ;InjOCadd2      ds 2 ; Second injector output compare adder (5.12uS res or 2.56uS res)
                                      ;FDt:           ds 2 ; Fuel Delivery pulse width total(mS) (for FDsec calcs)
                                      ;FDcnt:         ds 2 ; Fuel delivery pulse width total(ms)(for totalizer pulse on rollover)
                                      ;AIOTcnt:       ds 1 ; Counter for AIOT totalizer pulse width
                                      ;*****************************************************************************************
                                      ; - Non RS232 variables - (declared in igncalcs_BPEM488.s)
                                      ;*****************************************************************************************
                                      ;IgnOCadd1:      ds 2 ; First ignition output compare adder (5.12uS or 2.56uS res)
                                      ;IgnOCadd2:      ds 2 ; Second ignition output compare adder(5.12uS or 2.56uS res)
001014 0FD014 -> $1014                TIM_VARS_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001014 0FD014 -> $FD014               TIM_VARS_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                                              ; (Will trigger an interrupt after the delay time)(LED off)
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005B9D 7F5B9D                                                 ORG     TIM_CODE_START, TIM_CODE_START_LIN
005B9D 7F5B9D -> $7F5B9D              TIM_CODE_START_LIN      EQU     @ ; @ Represents the current value of the linear
                                                                ; program counter
                                      ;*****************************************************************************************
                                      ; - In the INIT_TIM macro, Port T PT0, PT2 and all Port P pins are set as outputs with
                                      ;   initial setting low. To control both the ignition and injector drivers two interrupts
                                      ;   are required for each ignition or injection event. At the appropriate crank angle and
                                      ;   cam phase an interrupt is triggered. In this ISR routine the channel output compare
                                      ;   register is loaded with the delay value from trigger time to the time desired to
                                      ;   energise the coil or injector and the channel interrupt is enabled. When the output
                                      ;   compare matches, the pin is commanded high and the timer channel interrupt is triggered.
                                      ;   The output compare register is then loaded with the value to keep the coil or injector
                                      ;   energised, and the channel interrupt is disabled. When the output compare matches, the
                                      ;   pin is commanded low to fire the coil or de-energise the injector.
                                      ;*****************************************************************************************
005B9D 7F5B9D                         TIM_TC0_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch1 Interrupt Service Routine (for (D21)(1to28)(Ign3)(9&8) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005B9D 7F5B9D 1C 03 D9 02                 bset TIM_TCTL2,Bit1    ; Clear Ch0 output line to zero on compare
005BA1 7F5BA1 1D 03 D9 01                 bclr TIM_TCTL2,Bit0    ; Clear Ch0 output line to zero on compare
005BA5 7F5BA5 FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005BA8 7F5BA8 F3 10 43                    addd IgnOCadd2         ; Add "IgnOCadd2" (dwell time)
005BAB 7F5BAB 7C 03 E0                    std  TIM_TC0H          ; Copy result to Timer IC/OC register 1 (Start OC operation)
                                                                 ; (coil on for dwell time)(LED on)
005BAE 7F5BAE 0B                          rti                    ; Return from Interrupt
005BAF 7F5BAF                         TIM_TC1_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch1 Interrupt Service Routine (for (D5)(1to28)(Ign4)(4&7) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005BAF 7F5BAF 1C 03 D9 08                 bset TIM_TCTL2,Bit3    ; Clear Ch1 output line to zero on compare
005BB3 7F5BB3 1D 03 D9 04                 bclr TIM_TCTL2,Bit2    ; Clear Ch1 output line to zero on compare
005BB7 7F5BB7 FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005BBA 7F5BBA F3 10 43                    addd IgnOCadd2         ; Add "IgnOCadd2" (dwell time))
005BBD 7F5BBD 7C 03 E2                    std  TIM_TC1H          ; Copy result to Timer IC/OC register 1 (Start OC operation)
                                                                 ; (coil on for dwell time)(LED on)
005BC0 7F5BC0 0B                          rti                    ; Return from Interrupt
005BC1 7F5BC1                         TIM_TC2_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch2 Interrupt Service Routine (for (D24)(1to28)(Ign5)(3&2) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005BC1 7F5BC1 1C 03 D9 20                 bset TIM_TCTL2,Bit5    ; Clear Ch2 output line to zero on compare
005BC5 7F5BC5 1D 03 D9 10                 bclr TIM_TCTL2,Bit4    ; Clear Ch2 output line to zero on compare
005BC9 7F5BC9 FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005BCC 7F5BCC F3 10 43                    addd IgnOCadd2         ; Add "IgnOCadd2" (dwell time)
005BCF 7F5BCF 7C 03 E4                    std  TIM_TC2H          ; Copy result to Timer IC/OC register 2 (Start OC operation)
                                                                 ; (coil on for dwell time)(LED on)
005BD2 7F5BD2 0B                          rti                    ; Return from Interrupt
005BD3 7F5BD3                         TIM_TC3_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch3 Interrupt Service Routine (for (D1)(1to28)(Inj1)(1&10) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005BD3 7F5BD3 1C 03 D9 80                 bset TIM_TCTL2,Bit7    ; Clear Ch3 output line to zero on compare
005BD7 7F5BD7 1D 03 D9 40                 bclr TIM_TCTL2,Bit6    ; Clear Ch3 output line to zero on compare
005BDB 7F5BDB FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005BDE 7F5BDE F3 10 63                    addd InjOCadd2         ; Add "InjOCadd2" (injector pulse width)
005BE1 7F5BE1 7C 03 E6                    std  TIM_TC3H          ; Copy result to Timer IC/OC register 3 (Start OC operation)
                                                                 ; (Should result in LED on for ~3 to ~25 mS)
                                      ;***********************************************************************************************
                                      ; - Update Fuel Delivery Pulse Width Total so the results can be used by Tuner Studio and
                                      ;   Shadow Dash to calculate current fuel burn.
                                      ;***********************************************************************************************
005BE4 7F5BE4 FC 10 D8                    ldd  FD     ; "FD"->Accu D (fuel delivery pulsewidth)(mS)
005BE7 7F5BE7 F3 10 65                        addd FDt    ; (A:B)+(M:M+1)->A:B (fuel delivery pulsewidth + fuel delivery pulsewidth total)
005BEA 7F5BEA 7C 10 65                        std  FDt    ; Copy result to "FDt" (mS)
                                      ;***********************************************************************************************
                                      ; - Update the Fuel Delivery counter so that on roll over (65535mS)a pulsed signal can be sent to the
                                      ;   to the totalizer(open collector output)
                                      ;***********************************************************************************************
005BED 7F5BED FC 10 D8                    ldd  FD             ; "FD"->Accu D (fuel delivery pulsewidth)(mS)
005BF0 7F5BF0 F3 10 67                        addd FDcnt          ; (A:B)+(M:M+1)->A:B (fuel delivery pulsewidth + fuel delivery counter)
005BF3 7F5BF3 25 05                       bcs  Totalizer1     ; If the cary bit of CCR is set, branch to Totalizer1: ("FDcnt"
                                                                  ;  rollover, pulse the totalizer)
005BF5 7F5BF5 7C 10 67                        std  FDcnt          ; Copy the result to "FDcnt" (update "FDcnt")
005BF8 7F5BF8 20 0B                       bra  TotalizerDone1 ; Branch to TotalizerDone1:
005BFA 7F5BFA                         Totalizer1:
005BFA 7F5BFA 7C 10 67                        std  FDcnt          ; Copy the result to "FDcnt" (update "FDcnt")
005BFD 7F5BFD 4C 01 40                    bset PORTB,AIOT     ; Set "AIOT" pin on Port B (PB6)(start totalizer pulse)
005C00 7F5C00 86 03                           ldaa #$03           ; Decimal 3->Accu A (3 mS)
005C02 7F5C02 7A 10 69                    staa AIOTcnt        ; Copy to "AIOTcnt" ( counter for totalizer pulse width,
                                                                  ; decremented every mS)
005C05 7F5C05                         TotalizerDone1:
005C05 7F5C05 0B                          rti                 ; Return from Interrupt
005C06 7F5C06                         TIM_TC4_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch4 Interrupt Service Routine (for(D3)(87to112)(Inj2)(9&4) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005C06 7F5C06 1C 03 D8 02                 bset TIM_TCTL1,Bit1    ; Clear Ch4 output line to zero on compare
005C0A 7F5C0A 1D 03 D8 01                 bclr TIM_TCTL1,Bit0    ; Clear Ch4 output line to zero on compare
005C0E 7F5C0E FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005C11 7F5C11 F3 10 63                    addd InjOCadd2         ; Add "InjOCadd2" (injector pulse width)
005C14 7F5C14 7C 03 E8                    std  TIM_TC4H          ; Copy result to Timer IC/OC register 4(Start OC operation)
                                                                 ; (Should result in LED on for ~3 to ~25 mS)
005C17 7F5C17 0B                          rti                    ; Return from Interrupt
005C18 7F5C18                         TIM_TC5_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch5 Interrupt Service Routine (for(D6)(87to112)(Inj3)(3&6) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005C18 7F5C18 1C 03 D8 08                 bset TIM_TCTL1,Bit3    ; Clear Ch5 output line to zero on compare
005C1C 7F5C1C 1D 03 D8 04                 bclr TIM_TCTL1,Bit2    ; Clear Ch5 output line to zero on compare
005C20 7F5C20 FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005C23 7F5C23 F3 10 63                    addd InjOCadd2         ; Add "InjOCadd2" (injector pulse width)
005C26 7F5C26 7C 03 EA                    std  TIM_TC5H          ; Copy result to Timer IC/OC register 5(Start OC operation)
                                                                 ; (Should result in LED on for ~3 to ~25 mS)
005C29 7F5C29 0B                          rti                    ; Return from Interrupt
005C2A 7F5C2A                         TIM_TC6_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch6 Interrupt Service Routine (for(D1)(87to112)(Inj4)(5&8) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005C2A 7F5C2A 1C 03 D8 20                 bset TIM_TCTL1,Bit5    ; Clear Ch6 output line to zero on compare
005C2E 7F5C2E 1D 03 D8 10                 bclr TIM_TCTL1,Bit4    ; Clear Ch6 output line to zero on compare
005C32 7F5C32 FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005C35 7F5C35 F3 10 63                    addd InjOCadd2         ; Add "InjOCadd2" (injector pulse width)
005C38 7F5C38 7C 03 EC                    std  TIM_TC6H          ; Copy result to Timer IC/OC register 6(Start OC operation)
                                                                 ; (Should result in LED on for ~3 to ~25 mS)
005C3B 7F5C3B 0B                          rti                    ; Return from Interrupt
005C3C 7F5C3C                         TIM_TC7_ISR:
                                      ;*****************************************************************************************
                                      ; - TIM ch7 Interrupt Service Routine (for(D7)(87to112)(Inj5)(7&2) control)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set the output compare value for desired on time and disable the interrupt
                                      ;*****************************************************************************************
005C3C 7F5C3C 1C 03 D8 80                 bset TIM_TCTL1,Bit7    ; Clear Ch7 output line to zero on compare
005C40 7F5C40 1D 03 D8 40                 bclr TIM_TCTL1,Bit6    ; Clear Ch7 output line to zero on compare
005C44 7F5C44 FC 03 D4                    ldd  TIM_TCNTH         ; Contents of Timer Count Register-> Accu D
005C47 7F5C47 F3 10 63                    addd InjOCadd2         ; Add "InjOCadd2" (injector pulse width)
005C4A 7F5C4A 7C 03 EE                    std  TIM_TC7H          ; Copy result to Timer IC/OC register(Start OC operation)
                                                                 ; (Should result in LED on for ~3 to ~25 mS)
005C4D 7F5C4D 0B                          rti                    ; Return from Interrupt
005C4E 7F5C4E -> $5C4E                TIM_CODE_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
005C4E 7F5C4E -> $7F5C4E              TIM_CODE_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C67 7F6C67                                                 ORG     TIM_TABS_START, TIM_TABS_START_LIN
006C67 7F6C67 -> $7F6C67              TIM_TABS_START_LIN      EQU     @ ; @ Represents the current value of the linear
                                                                ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006C67 7F6C67 -> $6C67                TIM_TABS_END            EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006C67 7F6C67 -> $7F6C67              TIM_TABS_END_LIN        EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (state_BPEM488.s)                                                          *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module contains code for the state machine to determine crankshaft position   *
                                      ;*    and camshaft phase                                                                 *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 13 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006C67 7F6C67 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001014 0FD014                                    ORG     STATE_VARS_START, STATE_VARS_START_LIN
001014 0FD014 -> $FD014               STATE_VARS_START_LIN    EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - RS232 variables - (declared in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;CASprd512:   ds 2  ; Period between CAS2nd and CAS3d (5.12uS res)
                                      ;CASprd256:   ds 2  ; Period between CAS2nd and CAS3d (2.56uS res)
                                      ;engine:      ds 1  ; Engine status bit field
                                      ;engine2:      ds 1  ; Engine2 status bit field
                                      ;*****************************************************************************************
                                      ; - "engine" Engine status bit field
                                      ;*****************************************************************************************
                                      ;OFCdelon     equ  $01 ; %00000001, bit 0, 0 = OFC timer not counting down(Grn),
                                                                              ; 1 = OFC timer counting down(Red)
                                      ;crank        equ  $02 ; %00000010, bit 1, 0 = engine not cranking(Grn),
                                                                              ; 1 = engine cranking(Red)
                                      ;run          equ  $04 ; %00000100, bit 2, 0 = engine not running(Red),
                                                                              ; 1 = engine running(Grn)
                                      ;ASEon        equ  $08 ; %00001000, bit 3, 0 = not in start/warmup(Grn),
                                                                              ; 1 = in start/warmup(Red)
                                      ;WUEon        equ  $10 ; %00010000, bit 4, 0 = not in warmup(Grn),
                                                                              ; 1 = in warmup(Red)
                                      ;TOEon        equ  $20 ; %00100000, bit 5, 0 = not in TOE mode(Grn),
                                                                              ; 1 = TOE mode(Red)
                                      ;OFCon        equ  $40 ; %01000000, bit 6, 0 = not in OFC mode(Grn),
                                                                              ; 1 = in OFC mode(Red)
                                      ;FldClr       equ $80  ; %10000000, bit 7, 0 = not in flood clear mode(Grn),
                                                                              ; 1 = Flood clear mode(Red)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; "engine2" equates
                                      ;*****************************************************************************************
                                      ;base512        equ $01 ; %00000001, bit 0, 0 = 5.12uS time base off(White),
                                                                               ; 1 = 5.12uS time base on(Grn)
                                      ;base256        equ $02 ; %00000010, bit 1, 0 = 2.56uS time base off(White),
                                                                               ; 1 = 2.56uS time base on(Grn)
                                      ;eng2Bit2       equ $04 ; %00000100, bit 2, 0 = , 1 =
                                      ;eng2Bit3       equ $08 ; %00001000, bit 3, 0 = , 1 =
                                      ;eng2Bit4       equ $10 ; %00010000, bit 4, 0 = , 1 =
                                      ;eng2Bit5       equ $20 ; %00100000, bit 5, 0 = , 1 =
                                      ;eng2Bit6       equ $40 ; %01000000, bit 6, 0 = , 1 =
                                      ;eng2Bit7       equ $80 ; %10000000, bit 7, 0 = , 1 =
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - RS232 variables - (declared in injcalcs_BPEM488.s)
                                      ;*****************************************************************************************
                                      ;ASErev:        ds 2 ; Afterstart Enrichment Taper (revolutions)
                                      ;ASEcnt:        ds 2 ; Counter value for ASE taper
                                      ;StateStatus:   ds 1 ; State status bit field
                                      ;*****************************************************************************************
                                      ; - "StateStatus" equates
                                      ;*****************************************************************************************
                                      ;Synch            equ    $01  ; %00000001, bit 0,
                                                                   ; 0 = crank position not synchronized(Red),
                                                                                               ; 1 = crank position synchronized(Grn)
                                      ;SynchLost        equ    $02  ; %00000010, bit 1, 0 = synch not lost(Grn),
                                                                   ; 1 = synch lost(Red)
                                      ;StateNew         equ    $04  ; %00000100, bit 2, 0 = no new State value,
                                                                   ; 1 = New State value
                                      ;StateStatus3     equ    $08  ; %00001000, bit 3,
                                      ;StateStatus4     equ    $10  ; %00010000, bit 4
                                      ;StateStatus5     equ    $20  ; %00100000, bit 5
                                      ;StateStatus6     equ    $40  ; %01000000, bit 6
                                      ;StateStatus7     equ    $80  ; %10000000, bit 7
                                      ;*****************************************************************************************
                                      ; - State machine variables - (declared in this module)
                                      ;*****************************************************************************************
001014 0FD014                         State:        ds 1  ; Cam-Crank state machine current state
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Input capture variables - (declared in this module)
                                      ;*****************************************************************************************
001015 0FD015                         CAS1sttk:    ds 2  ; CAS input capture rising edge 1st time stamp ((5.12uS or 2.56uS res)
001017 0FD017                         CAS2ndtk:    ds 2  ; CAS input capture rising edge 2nd time stamp (5.12uS or 2.56uS res)
001019 0FD019                         CASprd1tk:   ds 2  ; Period between CAS1st and CAS2nd (5.12uS or 2.56uS res)
00101B 0FD01B                         CASprd2tk:   ds 2  ; Period between CAS2nd and CAS3d ((5.12uS or 2.56uS res)
00101D 0FD01D                         Degx10tk512: ds 2  ; Time to rotate crankshaft 1 degree in 5.12uS resolution x 10
00101F 0FD01F                         Degx10tk256: ds 2  ; Time to rotate crankshaft 1 degree in 2.56uS resolution x 10
001021 0FD021                         RevCntr:     ds 1  ; Counter for "Revmarker" flag
001022 0FD022                         Stallcnt:    ds 2  ; No crank or stall condition counter (1mS increments)
001024 0FD024                         ICflgs:      ds 1  ; Input Capture flags bit field
                                      ;*****************************************************************************************
                                      ; - "ICflgs" equates
                                      ;*****************************************************************************************
001025 0FD025 -> $0001                RPMcalc:    equ $01   ; %00000001 (Bit 0) (Do RPM calculations flag)
001025 0FD025 -> $0002                KpHcalc:    equ $02   ; %00000010 (Bit 1) (Do VSS calculations flag)
001025 0FD025 -> $0004                Ch7_2nd:    equ $04   ; %00000100 (Bit 2) (Ch7 2nd edge flag)
001025 0FD025 -> $0008                Ch6alt:     equ $08   ; %00001000 (Bit 3) (Ch6 alt flag)
001025 0FD025 -> $0010                Ch7_3d:     equ $10   ; %00010000 (Bit 4) (Ch7 3d edge flag)
001025 0FD025 -> $0020                RevMarker:  equ $20   ; %00100000 (Bit 5) (Crank revolution marker flag)
                                      ;*****************************************************************************************
001025 0FD025 -> $1025                STATE_VARS_END          EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001025 0FD025 -> $FD025               STATE_VARS_END_LIN      EQU     @     ; @ Represents the current value of the linear
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005C4E 7F5C4E                                                 ORG     STATE_CODE_START, STATE_CODE_START_LIN
005C4E 7F5C4E -> $7F5C4E              STATE_CODE_START_LIN    EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - The camshaft position sensor and the crankshaft position sensor are both hall
                                      ;   effect gear tooth sensors. They read notched wheels on their repsective shafts.
                                      ;   When the sensor senses a notch its output pin goes to ground. The BPEM simulator
                                      ;   input from the sensor is the LED circuit of an opto isolator. When the LED in the
                                      ;   opto is powered it biases the output transistor on so the timer channel pin sees a
                                      ;   rising edge, which triggers an interrupt event. The state machine uses these events
                                      ;   to de-code the signals to determine crankshaft position and camshaft phase. Any
                                      ;   event that does not fall into the mechanical order of events triggers an error.
                                      ;   An error will disable ignition and fuel injection until a positive lock on crankshaft
                                      ;   position and camshaft phase is re-established.
                                      ;*****************************************************************************************
005C4E 7F5C4E                         ECT_TC5_ISR:
                                      ;*****************************************************************************************
                                      ; - ECT_TC5_ISR Interrupt Service Routine (Camshaft sensor notch)
                                      ;   Event = 0
                                      ;*****************************************************************************************
005C4E 7F5C4E DE 5A                       ldx    ECT_TC5H         ; Read ECT_TC5H to clear the flag
005C50 7F5C50 CE 6C 67                    ldx    #StateLookup     ; Load index register X with the address of "TableLookup"
005C53 7F5C53 F6 10 14                    ldab   State            ; Load Accu B with the contents of "State"
005C56 7F5C56 58                          aslb                    ; Shift Accu B 1 place to the left
005C57 7F5C57 CA 00                       orab   #$00             ; Bit wise inclusive OR Accu B with 0
005C59 7F5C59 A6 E5                       ldaa   B,X              ; Load Accu A with the contents of "TableLookup", offset in
                                                                  ; Accu B (9 bit constant offset indexed addressing)
005C5B 7F5C5B 7A 10 14                    staa   State            ; Copy to "State"
005C5E 7F5C5E 0B                          rti                     ; Return from interrupt
005C5F 7F5C5F                         ECT_TC7_ISR:
                                      ;*****************************************************************************************
                                      ; - ECT_TC7_ISR Interrupt Service Routine (Crankshaft sensor notch)
                                      ;   Event = 1
                                      ;*****************************************************************************************
005C5F 7F5C5F DE 5E                       ldx    ECT_TC7H              ; Read ECT_TC7H to clear the flag
005C61 7F5C61 CE 6C 67                    ldx    #StateLookup     ; Load index register X with the address of "TableLookup"
005C64 7F5C64 F6 10 14                    ldab   State            ; Load Accu B with the contents of "State"
005C67 7F5C67 58                          aslb                    ; Shift Accu B 1 place to the left
005C68 7F5C68 CA 01                       orab   #$01             ; Bit wise inclusive OR Accu B with 1
005C6A 7F5C6A A6 E5                       ldaa   B,X              ; Load Accu A with the contents of "TableLookup", offset in
                                                                  ; Accu B (9 bit constant offset indexed addressing)
005C6C 7F5C6C 7A 10 14                    staa   State            ; Copy to "State"
005C6F 7F5C6F 81 46                       cmpa    #$46            ; Compare with decimal 70 (Error)
005C71 7F5C71 27 06                       beq     State_Error     ; If "State" = $46, branch to State_Error:
005C73 7F5C73 81 67                       cmpa    #$67            ; Compare with decimal 103
005C75 7F5C75 2F 21                       ble     NoLock          ; If "State" =< $67, branch to NoLock:
005C77 7F5C77 2E 11                       bgt     SynchLock       ; If "State" is > $67, branch to Synchlock:
005C79 7F5C79                         State_Error:
                                      ;*****************************************************************************************
                                      ; - If we get here we have experienced an unexpected cam or crank input and have lost lock.
                                      ;   No more spark or injection events until lock has been re-established.
                                      ;*****************************************************************************************
005C79 7F5C79 79 10 14                    clr   State                     ; Clear "State"
005C7C 7F5C7C 1C 10 F5 02                 bset  StateStatus,SynchLost     ; Set "SynchLost" bit of "StateStatus" variable (bit1)
005C80 7F5C80 1D 10 F5 01                 bclr  StateStatus,Synch         ; Clear "Synch " bit of "StateStatus" variable (bit0)
005C84 7F5C84 1D 10 F5 04                 bclr  StateStatus,StateNew      ; Clear "StateNew " bit of "StateStatus" variable (bit2)
005C88 7F5C88 20 1A                       bra   STATE_STATUS_done         ; Branch to STATE_STATUS_done:
005C8A 7F5C8A                         SynchLock:
                                      ;*****************************************************************************************
                                      ; - If we get here we have either just reached one of the four possible lock points, or
                                      ;    we are already in the synch loop.
                                      ;*****************************************************************************************
005C8A 7F5C8A 1C 10 F5 01                 bset  StateStatus,Synch        ; Set "Synch " bit of "StateStatus" variable (bit0)
005C8E 7F5C8E 1C 10 F5 04                 bset  StateStatus,StateNew     ; Set "StateNew" bit of "StateStatus" variable (bit2)
005C92 7F5C92 1D 10 F5 02                 bclr  StateStatus,SynchLost    ; Clear "SynchLost" bit of "StateStatus" variable (bit1)
005C96 7F5C96 20 0C                       bra   STATE_STATUS_done        ; Branch to STATE_STATUS_done:
005C98 7F5C98                         NoLock:
                                      ;*****************************************************************************************
                                      ; - If we get here we have the state machine is still looking for a synch lock.
                                      ;*****************************************************************************************
005C98 7F5C98 1D 10 F5 01                 bclr  StateStatus,Synch        ; Clear "Synch" bit of "StateStatus" variable (bit0)
005C9C 7F5C9C 1D 10 F5 02                 bclr  StateStatus,SynchLost    ; Clear "SynchLost" bit of "StateStatus" variable (bit1)
005CA0 7F5CA0 1D 10 F5 04                 bclr  StateStatus,StateNew     ; Clear "StateNew" bit of "StateStatus" variable (bit 2)
005CA4 7F5CA4                         STATE_STATUS_done:
                                      ;*****************************************************************************************
                                      ; - Get three consecutive rising edge signals for engine RPM and
                                      ;   calculate the period. This period is for one fifth of a revolution (72 degrees).
                                      ;   RPM, Ignition and  Fuel calculations are done in the main loop.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Reload stall counter with compare value. Stall check is done in the main loop every
                                      ;   mSec. "Stallcnt" is decremented every mSec and reloaded at every crank signal.
                                      ;*****************************************************************************************
005CA4 7F5CA4 18 0B FF 00 17                  movb  #(BUF_RAM_P1_START>>16),EPAGE  ; Move $FF into EPAGE
005CA9 7F5CA9 CD 08 00                    ldy   #veBins_E       ; Load index register Y with address of first configurable
                                                              ; constant on buffer RAM page 1 (vebins)
005CAC 7F5CAC EC EA 03 E6                 ldd   $03E6,Y       ; Load Accu A with value in buffer RAM page 1 offset 998
                                                              ; "Stallcnt" (stall counter)(offset = 998)
005CB0 7F5CB0 7C 10 22                    std  Stallcnt       ; Copy to "Stallcnt" (no crank or stall condition counter)
                                                              ; (1mS increments)
005CB3 7F5CB3 1E 10 24 04 12              brset ICflgs,Ch7_2nd,CAS_2nd ; If "Ch7_2nd" bit of "ICflgs" is set, branch to "CAS_2nd:"
005CB8 7F5CB8 1E 10 24 10 24              brset ICflgs,Ch7_3d,CAS_3d   ; If "Ch7_3d" bit of "ICflgs" is set, branch to "CAS_3d:"
005CBD 7F5CBD DC 5E                       ldd   ECT_TC7H               ; Load accu D with value in "ECT_TC7H"
005CBF 7F5CBF 7C 10 15                    std   CAS1sttk               ; Copy to "CAS1sttk"
005CC2 7F5CC2 1C 10 24 04                 bset  ICflgs,Ch7_2nd         ; Set "Ch7_2nd" bit of "ICflgs"
005CC6 7F5CC6 18 20 00 B0                 bra   CASDone                ; Branch to CASDone:
005CCA 7F5CCA                         CAS_2nd:
005CCA 7F5CCA DC 5E                       ldd   ECT_TC7H        ; Load accu D with value in "ECT_TC7H"
005CCC 7F5CCC 7C 10 17                    std   CAS2ndtk        ; Copy to "CAS2ndtk"
005CCF 7F5CCF B3 10 15                    subd  CAS1sttk        ; Subtract (A:B)-(M:M+1)=>A:B "CAS1sttk" from value in "ECT_TC7H"
005CD2 7F5CD2 7C 10 19                    std   CASprd1tk       ; Copy result to "CASprd1tk"
005CD5 7F5CD5 1D 10 24 04                 bclr  ICflgs,Ch7_2nd  ; Clear "Ch7_2nd" bit of "ICflgs"
005CD9 7F5CD9 1C 10 24 10                 bset  ICflgs,Ch7_3d   ; Set "Ch7_3d" bit of "ICflgs"
005CDD 7F5CDD 18 20 00 99                 bra   CASDone         ; Branch to CASDone:
005CE1 7F5CE1                         CAS_3d:
005CE1 7F5CE1 DC 5E                       ldd   ECT_TC7H        ; Load accu D with value in "ECT_TC7H"
005CE3 7F5CE3 B3 10 17                    subd  CAS2ndtk        ; Subtract (A:B)-(M:M+1)=>A:B "CAS2ndtk" from value in "ECT_TC7H"
005CE6 7F5CE6 7C 10 1B                    std   CASprd2tk       ; Copy result to "CASprd2tk"
005CE9 7F5CE9 F3 10 19                    addd  CASprd1tk       ; (A:B)+(M:M+1)_->A:B "CASprd2tk" + "CASprd1tk" = "CASprdtk"
005CEC 7F5CEC 1D 10 24 10                 bclr  ICflgs,Ch7_3d   ; Clear "Ch7_3d" bit of "ICflgs"
                                      ;*****************************************************************************************
                                      ; - All calculations that use the Crank Angle Sensor period need to know what the
                                      ;   resolution is. The timers are initalized with a 5.12uS resoluion but switched to
                                      ;   2.56uS resolution when the engine tranistions from crank mode to run mode.
                                      ;*****************************************************************************************
005CF0 7F5CF0 1E 10 F1 04 17              brset engine,run,CAS256 ; If "run" bit of "engine" bit field is set branch to
                                                                    ; CAS256:
005CF5 7F5CF5 7C 10 A8                    std   CASprd512       ; Copy result to "CASprd512" (CAS period in 5.12uS resolution)
                                      ;******************************************************************************************
                                      ; - Convert Crank Angle Sensor period (5.12uS res)to degrees x 10 of rotation (for 1 tenth
                                      ;   of a degree resolution calculations).("Degx10tk512")
                                      ;******************************************************************************************
005CF8 7F5CF8 CE 00 48                    ldx   #$0048         ; Decimal 72 -> X
005CFB 7F5CFB 18 10                       idiv                 ; (D)/(X)->(X)rem(D) (CASprd512/72)
005CFD 7F5CFD B7 54                       tfr   X,D            ; Copy result in "X" to "D"
005CFF 7F5CFF CD 00 0A                        ldy   #$000A         ; Decimal 10 -> Accu Y
005D02 7F5D02 13                              emul                 ; (D)*(Y)->Y:D result * 10 = "Degx10tk512"
005D03 7F5D03 7C 10 1D                        std   Degx10tk512    ; Copy result to "Degx10tk512"
005D06 7F5D06 18 79 10 1F                     clrw  Degx10tk256    ; Clear "Degx10tk256"
005D0A 7F5D0A 20 15                           bra   CASprdDone     ; Branch to CASprdDone:
005D0C 7F5D0C                         CAS256:
005D0C 7F5D0C 7C 10 AA                    std   CASprd256      ; Copy result to "CASprd256" (CAS period in 2.56uS resolution)
                                      ;******************************************************************************************
                                      ; - Convert Crank Angle Sensor period (2.56uS res)to degrees x 10 of rotation (for 1 tenth
                                      ;   of a degree resolution calculations).("Degx10tk256")
                                      ;******************************************************************************************
005D0F 7F5D0F CE 00 48                    ldx   #$0048         ; Decimal 72 -> X
005D12 7F5D12 18 10                       idiv                 ; (D)/(X)->(X)rem(D) (CASprd256/72)
005D14 7F5D14 B7 54                       tfr   X,D            ; Copy result in "X" to "D"
005D16 7F5D16 CD 00 0A                        ldy   #$000A         ; Decimal 10 -> Accu Y
005D19 7F5D19 13                              emul                 ; (D)*(Y)->Y:D result * 10 = "Degx10tk256"
005D1A 7F5D1A 7C 10 1F                        std   Degx10tk256    ; Copy result to "Degx10tk256"
005D1D 7F5D1D 18 79 10 1D                 clrw  Degx10tk512    ; Clear "Degx10tk512"
005D21 7F5D21                         CASprdDone:
                                      ;*****************************************************************************************
                                      ; - Determine if the engine is cranking or running. The timer is initialized with a
                                      ;   5.12uS time base and the engine status bit field "engine" is cleared on power up.
                                      ;   "Spantk" will roll over at ~85 RPM with a 5.12uS base and at ~169 RPM with a
                                      ;   2.56uS base. The time base is switched from 5.12uS to 2.56uS at ~300 RPM which should
                                      ;   be at a speed when the engine is running. Engine speed can drop to as low as ~169 RPM
                                      ;   before ignition calculations cannot be done. It is not likely that the engine will
                                      ;   continue to run at this speed and will stall. Stall detection is done in the main
                                      ;   loop if the period between crank sensor signals is greater than ~2 seconds.
                                      ;*****************************************************************************************
005D21 7F5D21 1E 10 F1 04 50              brset  engine,run,CASprdOK ; If "run" bit of "engine" bit field is set branch to
                                                                    ; CASDone:
005D26 7F5D26 FC 10 A8                    ldd   CASprd512       ; "CASprd512"-> Accu D (CAS period in 5.12uS resolution)
005D29 7F5D29 8C 1E 84                        cpd   #$1E84          ; Compare with decimal 7812 ("CASprdtk" for 300 RPM @5.12uS
                                                                    ; time base)
005D2C 7F5D2C 22 28                           bhi   StillCranking   ; Period is greater than that for 300 RPM so engine is still
                                                                    ; cranking. Branch to StillCranking:
005D2E 7F5D2E 20 00                       bra   SwitchToRun     ; Branch to SwitchToRun:
005D30 7F5D30                         SwitchToRun:
005D30 7F5D30 18 0B 7F 00 6E              movb #$7F,ECT_PTPSR   ; Load ECT_PTPSR with %01111111
                                                                ; (prescale 128, 2.56us resolution,
                                                                ; max period 167.7696ms)
005D35 7F5D35 18 0B 7F 03 FE              movb #$7F,TIM_PTPSR   ; (TIM_PTPSR equ $03FE) Load TIM_PTPSR with %01111111
                                                                ; (prescale 128, 2.56us resolution,
                                                                ; max period 167.7696ms)
005D3A 7F5D3A 1C 10 F1 04                 bset  engine,run      ; Set "run" bit of "engine" variable
005D3E 7F5D3E 1D 10 F1 02                 bclr  engine,crank    ; Clear "crank" bit of "engine" variable
005D42 7F5D42 1D 10 F2 01                 bclr engine2,base512  ; Clear the "base512" bit of "engine" bit field
005D46 7F5D46 1C 10 F2 02                 bset engine2,base256  ; Set the "base256" bit of "engine" bit field
005D4A 7F5D4A 18 79 10 A8                 clrw  CASprd512       ; Clear "CASprd512"
005D4E 7F5D4E MACRO                           FUEL_PUMP_AND_ASD_ON  ; Energise fuel pump and ASD Relay (macro in gpio_BEEM.s)
                                                            ; with %00010000 (PS4 pull down,                           (FUEL_PUMP_AND_ASD_ON)
                                                            ; PS7,6,5,3,2,1,0 pull up)                                 (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ; - Initialize Port T. Enhanced Capture Channels IOC7-IOC0. pg 527               (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT0(P9) - IOC0 OC0 LED red  (D7)(1to28)(Ign1)(1&6)   (output, low)                * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT1(P10) - IOC1 IC1 (CASc)(Tooth decoder)(input,  pull-down) VR sensor P9         * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT2(P11) - IOC2 OC2 LED red  (D8)(1to28)(Ign2)(10&5)  (output, low)               * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT3(P12) - IOC3 IC3 (VSSb)(Vehicle Speed)(input,  pull-down) VR sensor P10        * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT4(P15) - IOC4 IC4 (CASa)(RPM)          (input,  pull-down) Volt to Freq U1      * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT5(P16) - IOC5 IC5 (CASd)(Tooth decoder)(input,  pull-down) gear tooth K2 Cam    * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT6(P17) - IOC6 IC6 (VSSa)(Vehicle Speed)(input,  pull-down) Volt to Freq U2      * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT7(P18) - IoC7 IC7 (CASb)(Tooth decoder)(input,  pull-down) gear tooth K3 Crank  * (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ;* - NOTE! Port T is initialized in ect_BEEM.s                                   (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ; - Energise the Fuel pump relay and the Emergency Shutdown relay on Port B Bit0 and Bit1 (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
005D4E 7F5D4E 4C 01 01                    bset  PORTB,FuelPump  ; Set "FuelPump" pin on Port B(LED9 board 1 to 28)     (FUEL_PUMP_AND_ASD_ON)
005D51 7F5D51 4C 01 02                        bset  PORTB,ASDRelay  ; Set "ASDRelay" pin on Port B(LED23 board 1 to 28) (FUEL_PUMP_AND_ASD_ON)
005D54 7F5D54 20 20                           bra   CASprdOK        ; Branch to CASprdOK:
005D56 7F5D56                         StillCranking:
005D56 7F5D56 18 0B FF 00 6E              movb #$FF,ECT_PTPSR   ; Load ECT_PTPSR with %11111111
                                                                ; (prescale 256, 5.12us resolution,
                                                                ; max period 335.5ms)
005D5B 7F5D5B 18 0B FF 03 FE              movb #$FF,TIM_PTPSR   ; Load TIM_PTPSR with %11111111
                                                                ; (prescale 256, 5.12us resolution,
                                                                ; max period 335.5ms)
005D60 7F5D60 1D 10 F1 04                 bclr engine,run       ; Clear "run" bit of "engine" variable
005D64 7F5D64 1C 10 F1 02                 bset engine,crank     ; Set "crank" bit of "engine" variable
005D68 7F5D68 1C 10 F2 01                 bset engine2,base512  ; Set the "base512" bit of "engine" bit field
005D6C 7F5D6C 1D 10 F2 02                 bclr engine2,base256  ; Clear the "base256" bit of "engine" bit field
005D70 7F5D70 MACRO                           FUEL_PUMP_AND_ASD_ON  ; Energise fuel pump and ASD Relay (macro in gpio_BEEM.s)
                                                            ; with %00010000 (PS4 pull down,                           (FUEL_PUMP_AND_ASD_ON)
                                                            ; PS7,6,5,3,2,1,0 pull up)                                 (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ; - Initialize Port T. Enhanced Capture Channels IOC7-IOC0. pg 527               (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT0(P9) - IOC0 OC0 LED red  (D7)(1to28)(Ign1)(1&6)   (output, low)                * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT1(P10) - IOC1 IC1 (CASc)(Tooth decoder)(input,  pull-down) VR sensor P9         * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT2(P11) - IOC2 OC2 LED red  (D8)(1to28)(Ign2)(10&5)  (output, low)               * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT3(P12) - IOC3 IC3 (VSSb)(Vehicle Speed)(input,  pull-down) VR sensor P10        * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT4(P15) - IOC4 IC4 (CASa)(RPM)          (input,  pull-down) Volt to Freq U1      * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT5(P16) - IOC5 IC5 (CASd)(Tooth decoder)(input,  pull-down) gear tooth K2 Cam    * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT6(P17) - IOC6 IC6 (VSSa)(Vehicle Speed)(input,  pull-down) Volt to Freq U2      * (FUEL_PUMP_AND_ASD_ON)
                                      ;*     PT7(P18) - IoC7 IC7 (CASb)(Tooth decoder)(input,  pull-down) gear tooth K3 Crank  * (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ;* - NOTE! Port T is initialized in ect_BEEM.s                                   (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
                                      ; - Energise the Fuel pump relay and the Emergency Shutdown relay on Port B Bit0 and Bit1 (FUEL_PUMP_AND_ASD_ON)
                                      ;***************************************************************************************** (FUEL_PUMP_AND_ASD_ON)
005D70 7F5D70 4C 01 01                    bset  PORTB,FuelPump  ; Set "FuelPump" pin on Port B(LED9 board 1 to 28)     (FUEL_PUMP_AND_ASD_ON)
005D73 7F5D73 4C 01 02                        bset  PORTB,ASDRelay  ; Set "ASDRelay" pin on Port B(LED23 board 1 to 28) (FUEL_PUMP_AND_ASD_ON)
005D76 7F5D76                         CASprdOK:
005D76 7F5D76 1C 10 24 01                 bset  ICflgs,RPMcalc  ; Set "RPMcalc" bit of "ICflgs"
005D7A 7F5D7A                         CASDone:
                                      ;******************************************************************************************
                                      ; - Rev counter -
                                      ;   Used to decrement "ASErev" every revolution  (count down counter for ASE taper)
                                      ;******************************************************************************************
005D7A 7F5D7A                         DoRevCntr:
005D7A 7F5D7A B6 10 21                    ldaa  RevCntr        ; Load Accu A with value in "RevCntr"
005D7D 7F5D7D 81 09                       cmpa  #$09           ; Compare with decimal 9
005D7F 7F5D7F 27 24                       beq   CAS1           ; If equal branch to CAS1: (First CAS signal)
005D81 7F5D81 81 08                       cmpa  #$08           ; Compare with decimal 8
005D83 7F5D83 27 28                       beq   CAS2           ; If equal branch to CAS2: (Second CAS signal)
005D85 7F5D85 81 07                       cmpa  #$07           ; Compare with decimal 7
005D87 7F5D87 27 29                       beq   CAS3           ; If equal branch to CAS3: (Third CAS signal)
005D89 7F5D89 81 06                       cmpa  #$06           ; Compare with decimal 6
005D8B 7F5D8B 27 2A                       beq   CAS4           ; If equal branch to CAS4: (Forth CAS signal)
005D8D 7F5D8D 81 05                       cmpa  #$05           ; Compare with decimal 5
005D8F 7F5D8F 27 2B                       beq   CAS5           ; If equal branch to CAS5: (Fifth CAS signal)
005D91 7F5D91 81 04                       cmpa  #$04           ; Compare with decimal 4
005D93 7F5D93 27 2C                       beq   CAS6           ; If equal branch to CAS6: (Sixth CAS signal)
005D95 7F5D95 81 03                       cmpa  #$03           ; Compare with decimal 3
005D97 7F5D97 27 2D                       beq   CAS7           ; If equal branch to CAS7: (Seventh CAS signal)
005D99 7F5D99 81 02                       cmpa  #$02           ; Compare with decimal 2
005D9B 7F5D9B 27 2E                       beq   CAS8           ; If equal branch to CAS8: (Eighth CAS signal)
005D9D 7F5D9D 81 01                       cmpa  #$01           ; Compare with decimal 1
005D9F 7F5D9F 27 2F                       beq   CAS9           ; If equal branch to CAS9: (Nineth CAS signal)
005DA1 7F5DA1 81 00                       cmpa  #$00           ; Compare with zero
005DA3 7F5DA3 27 30                       beq   CAS10          ; If equal branch to CAS10: (Tenth CAS signal)
005DA5 7F5DA5                         CAS1:
005DA5 7F5DA5 73 10 57                    dec   ASErev           ; Decrement "ASErev"(countdown value for ASE taper)
005DA8 7F5DA8 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now eight)
005DAB 7F5DAB 20 31                       bra   RevCntrDone      ; Branch to RevCntrDone:
005DAD 7F5DAD                         CAS2:
005DAD 7F5DAD 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now seven)
005DB0 7F5DB0 20 2C                       bra   RevCntrDone      ; Branch to RevCntrDone:
005DB2 7F5DB2                         CAS3:
005DB2 7F5DB2 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now six)
005DB5 7F5DB5 20 27                       bra   RevCntrDone      ; Branch to RevCntrDone:
005DB7 7F5DB7                         CAS4:
005DB7 7F5DB7 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now five)
005DBA 7F5DBA 20 22                       bra   RevCntrDone      ; Branch to RevCntrDone:
005DBC 7F5DBC                         CAS5:
005DBC 7F5DBC 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now four)
005DBF 7F5DBF 20 1D                       bra   RevCntrDone      ; Branch to RevCntrDone:
005DC1 7F5DC1                         CAS6:
005DC1 7F5DC1 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now three)
005DC4 7F5DC4 20 18                       bra   RevCntrDone      ; Branch to RevCntrDone:
005DC6 7F5DC6                         CAS7:
005DC6 7F5DC6 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now two)
005DC9 7F5DC9 20 13                       bra   RevCntrDone      ; Branch to RevCntrDone:
005DCB 7F5DCB                         CAS8:
005DCB 7F5DCB 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now one)
005DCE 7F5DCE 20 0E                       bra   RevCntrDone      ; Branch to RevCntrDone:
005DD0 7F5DD0                         CAS9:
005DD0 7F5DD0 73 10 21                    dec   RevCntr          ; Decrement "RevCntr"(now zero)
005DD3 7F5DD3 20 09                       bra   RevCntrDone      ; Branch to RevCntrDone:
005DD5 7F5DD5                         CAS10:
005DD5 7F5DD5 1C 10 24 20                 bset  ICflgs,RevMarker ; Set "RevMarker" flag of "ICflags" bit field
005DD9 7F5DD9 18 0B 09 10 21              movb  #$09,RevCntr     ; Load "RevCntr" with decimal 9(We have 10 CAS signals so the
                                                                 ; crank has turned 1 revolution, reset the counter to nine)
005DDE 7F5DDE                         RevCntrDone:
                                      ;*****************************************************************************************
                                      ; - "State" event handlers
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; CT3/T1 – Synchronization point, no event.
                                      ; CT3/T2 – Start timer for ignition #1, waste #6
                                      ; CT3/T3 - Start timer for ignition #10, waste #5
                                      ; CT3/T4 – Start injection pulse for #3 & #6
                                      ; CT4/T5 - Synchronization point, no event.
                                      ; CT4/T6 - Start timer for ignition #9, waste #8
                                      ; CT4/T7 - Start timer for ignition #4, waste #7
                                      ; CT4/T8 - Start injection pulse for #5 & #8
                                      ; CT4/T9 – No event.
                                      ; CT4/T10 - Start timer for ignition #3, waste #2
                                      ; CT4/T1 – Synchronization point, start timer for ignition #6, waste #1
                                      ; CT4/T2 - Start injection pulse for #7 & #2
                                      ; CT4/T3 - No event.
                                      ; CT4/T4 - Start timer for ignition #5, waste #10
                                      ; CT1/T5 - Synchronization point, start timer for ignition #8, waste #9
                                      ; CT1/T6 - Start injection pulse for #1 & #10
                                      ; CT1/T7 - No event.
                                      ; CT1/T8 - Start timer for ignition #7, waste #4
                                      ; CT1/T9 - Start timer for ignition #2, waste #3
                                      ; CT1/T10 - Start injection pulse for #9 & #4
                                      ; Repeat
                                      ; Ignition timers start 150 degrees BTDC on compression. Injectors start pulse width
                                      ; when the intake valve just begins to open on odd cylinders, and 54 degrees before the
                                      ; intake valve starts to open on even cylinders.
                                      ;*****************************************************************************************
005DDE 7F5DDE B6 10 14                    ldaa    State           ; Load accu A with value in "State"
005DE1 7F5DE1 81 7D                       cmpa    #$7D            ; Compare with decimal 125 (CT3/T1)
005DE3 7F5DE3 27 6E                       beq     Notch_CT3_T1    ; If the Z bit of CCR is set, branch to Notch_CT3_T1:
005DE5 7F5DE5 81 6F                       cmpa    #$6F            ; Compare with decimal 111 (CT3/T2)
005DE7 7F5DE7 27 6D                       beq     Notch_CT3_T2    ; If the Z bit of CCR is set, branch to Notch_CT3_T2:
005DE9 7F5DE9 81 70                       cmpa    #$70            ; Compare with decimal 112 (CT3/T3)
005DEB 7F5DEB 27 79                       beq     Notch_CT3_T3    ; If the Z bit of CCR is set, branch to Notch_CT3_T3:
005DED 7F5DED 81 71                       cmpa    #$71            ; Compare with decimal 113 (CT3/T4)
005DEF 7F5DEF 18 27 00 83                 beq     Notch_CT3_T4    ; If the Z bit of CCR is set, branch to Notch_CT3_T4:
005DF3 7F5DF3 81 7F                       cmpa    #$7F            ; Compare with decimal 127 (CT4/T5)
005DF5 7F5DF5 18 27 00 91                 beq     Notch_CT4_T5    ; If the Z bit of CCR is set, branch to Notch_CT4_T5:
005DF9 7F5DF9 81 7B                       cmpa    #$7B            ; Compare with decimal 123 (CT4/T6)
005DFB 7F5DFB 18 27 00 8E                 beq     Notch_CT4_T6    ; If the Z bit of CCR is set, branch to Notch_CT4/T6:
005DFF 7F5DFF 81 7A                       cmpa    #$7A            ; Compare with decimal 122 (CT4/T7)
005E01 7F5E01 18 27 00 9C                 beq     Notch_CT4_T7    ; If the Z bit of CCR is set, branch to Notch_CT4_T7:
005E05 7F5E05 81 79                       cmpa    #$79            ; Compare with decimal 121 (CT4/T8)
005E07 7F5E07 18 27 00 AA                 beq     Notch_CT4_T8    ; If the Z bit of CCR is set, branch to Notch_CT4_T8:
005E0B 7F5E0B 81 78                       cmpa    #$78            ; Compare with decimal 120 (CT4/T9)
005E0D 7F5E0D 18 27 00 B8                 beq     Notch_CT4_T9    ; If the Z bit of CCR is set, branch to Notch_CT4_T9:
005E11 7F5E11 81 77                       cmpa    #$77            ; Compare with decimal 119 (CT4/T10)
005E13 7F5E13 18 27 00 B5                 beq     Notch_CT4_T10   ; If the Z bit of CCR is set, branch to Notch_CT4_T10:
005E17 7F5E17 81 7E                       cmpa    #$7E            ; Compare with decimal 126 (CT4/T1)
005E19 7F5E19 18 27 00 C3                 beq     Notch_CT4_T1    ; If the Z bit of CCR is set, branch to Notch_CT4_T1:
005E1D 7F5E1D 81 76                       cmpa    #$76            ; Compare with decimal 118 (CT4/T2)
005E1F 7F5E1F 18 27 00 CD                 beq     Notch_CT4_T2    ; If the Z bit of CCR is set, branch to Notch_CT4_T2:
005E23 7F5E23 81 75                       cmpa    #$75            ; Compare with decimal 117 (CT4/T3)
005E25 7F5E25 18 27 00 DB                 beq     Notch_CT4_T3    ; If the Z bit of CCR is set, branch to Notch_CT4_T3:
005E29 7F5E29 81 74                       cmpa    #$74            ; Compare with decimal 116 (CT4/T4)
005E2B 7F5E2B 18 27 00 D8                 beq     Notch_CT4_T4    ; If the Z bit of CCR is set, branch to Notch_CT4_T4:
005E2F 7F5E2F 81 7C                       cmpa    #$7C            ; Compare with decimal 124 (CT1/T5)
005E31 7F5E31 18 27 00 E2                 beq     Notch_CT1_T5    ; If the Z bit of CCR is set, branch to Notch_CT1_T5:
005E35 7F5E35 81 68                       cmpa    #$68            ; Compare with decimal 104 (CT1/T6)
005E37 7F5E37 18 27 00 F0                 beq     Notch_CT1_T6    ; If the Z bit of CCR is set, branch to Notch_CT1_T6:
005E3B 7F5E3B 81 69                       cmpa    #$69            ; Compare with decimal 105 (CT1/T7)
005E3D 7F5E3D 18 27 00 FE                 beq     Notch_CT1_T7    ; If the Z bit of CCR is set, branch to Notch_CT1_T7:
005E41 7F5E41 81 6A                       cmpa    #$6A            ; Compare with decimal 106 (CT1/T8)
005E43 7F5E43 18 27 00 FB                 beq     Notch_CT1_T8    ; If the Z bit of CCR is set, branch to Notch_CT1_T8:
005E47 7F5E47 81 6B                       cmpa    #$6B            ; Compare with decimal 107 (CT1/T9)
005E49 7F5E49 18 27 01 09                 beq     Notch_CT1_T9    ; If the Z bit of CCR is set, branch to Notch_CT1_T9:
005E4D 7F5E4D 81 6C                       cmpa    #$6C            ; Compare with decimal 108 (CT1/T10)
005E4F 7F5E4F 18 27 01 17                 beq     Notch_CT1_T10   ; If the Z bit of CCR is set, branch to Notch_CT1_T10:
005E53 7F5E53                         Notch_CT3_T1:
                                      ;*****************************************************************************************
                                      ; - This is one of 4 Synchronization points but no event happens
                                      ;*****************************************************************************************
005E53 7F5E53 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E56 7F5E56                         Notch_CT3_T2:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #1 cylinder. Start the hardware timer to delay the
                                      ;   coil dwell for spark #1, waste #6 if we are in run mode.
                                      ;*****************************************************************************************
005E56 7F5E56 MACRO                       FIRE_IGN1                 ; macro in Tim_BPEM488.s
                                      ;***************************************************************************************** (FIRE_IGN1)
                                      ; - PT0(P9) - IOC0 OC0 LED red  (D7)(1to28)(Ign1)(1&6) Control                   (FIRE_IGN1)
                                      ;***************************************************************************************** (FIRE_IGN1)
                                      ;***************************************************************************************** (FIRE_IGN1)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN1)
                                      ;***************************************************************************************** (FIRE_IGN1)
005E56 7F5E56 4C 49 02                    bset ECT_TCTL2,Bit1 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN1)
005E59 7F5E59 4C 49 01                    bset ECT_TCTL2,Bit0 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN1)
005E5C 7F5E5C DC 44                       ldd  ECT_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN1)
005E5E 7F5E5E F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN1)
005E61 7F5E61 5C 50                       std  ECT_TC0H       ; Copy result to Timer IC/OC register 0 (Start OC operation) (FIRE_IGN1)
005E63 7F5E63 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E66 7F5E66                         Notch_CT3_T3:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #10 cylinder. Start the hardware timer to delay the coil
                                      ;   coil dwell for spark #10, waste #5 if we are in run mode.
                                      ;*****************************************************************************************
005E66 7F5E66 MACRO                       FIRE_IGN2                 ; macro in Tim_BEEM488.s
                                                              ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
                                      ; - PT2(P11) - IOC2 OC2 LED red  (D8)(1to28)(Ign2)(10&5) Control                 (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
005E66 7F5E66 4C 49 20                    bset ECT_TCTL2,Bit5 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN2)
005E69 7F5E69 4C 49 10                    bset ECT_TCTL2,Bit4 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN2)
005E6C 7F5E6C DC 44                       ldd  ECT_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN2)
005E6E 7F5E6E F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN2)
005E71 7F5E71 5C 54                       std  ECT_TC2H       ; Copy result to Timer IC/OC register 2 (Start OC operation) (FIRE_IGN2)
005E73 7F5E73 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E76 7F5E76                         Notch_CT3_T4:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 6 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #3 cylinder and 60 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #6 cylinder. #3 intake valve is just sstarting to open
                                      ;   and #6 intake valve is 54 degrees before it will start to open. Start the pulse
                                      ;   width for injectors 3&6.
                                      ;*****************************************************************************************
005E76 7F5E76 MACRO                       FIRE_INJ3                 ; Macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
                                      ; - PP5(P111) - TIM1 OC5 (D6)(87to112)(Inj3)(3&6) Control                        (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ3)
                                      ;***************************************************************************************** (FIRE_INJ3)
005E76 7F5E76 1C 03 D8 04                 bset TIM_TCTL1,Bit2 ; Set Ch5 output line to 1 on compare                    (FIRE_INJ3)
005E7A 7F5E7A 1C 03 D8 08                 bset TIM_TCTL1,Bit3 ; Set Ch5 output line to 1 on compare                    (FIRE_INJ3)
005E7E 7F5E7E FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ3)
005E81 7F5E81 F3 10 61                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ3)
005E84 7F5E84 7C 03 EA                    std  TIM_TC5H       ; Copy result to Timer IC/OC register 5 (Start OC operation) (FIRE_INJ3)
005E87 7F5E87 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E8A 7F5E8A                         Notch_CT4_T5:
                                      ;*****************************************************************************************
                                      ; - This is one of 4 Synchronization points but no event happens
                                      ;*****************************************************************************************
005E8A 7F5E8A 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005E8D 7F5E8D                         Notch_CT4_T6:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #9 cylinder. Start the hardware timer to delay the
                                      ;   coil dwell for spark #9, waste #8 if we are in run mode.
                                      ;*****************************************************************************************
005E8D 7F5E8D MACRO                       FIRE_IGN3                 ; macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
                                      ; - PP0(P4) - TIM1 OC0 (D21)(1to28)(Ign3)(9&8) Control                           (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
005E8D 7F5E8D 1C 03 D9 02                 bset TIM_TCTL2,Bit1 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN3)
005E91 7F5E91 1C 03 D9 01                 bset TIM_TCTL2,Bit0 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN3)
005E95 7F5E95 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN3)
005E98 7F5E98 F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN3)
005E9B 7F5E9B 7C 03 E0                    std  TIM_TC0H       ; Copy result to Timer IC/OC register 0 (Start OC operation) (FIRE_IGN3)
005E9E 7F5E9E 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005EA1 7F5EA1                         Notch_CT4_T7:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #4 cylinder. Start the hardware timer to delay the coil
                                      ;   coil dwell for spark #4, waste #7 if we are in run mode.
                                      ;*****************************************************************************************
005EA1 7F5EA1 MACRO                       FIRE_IGN4                 ; macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
                                      ; - PP1(P3) - TIM1 OC1 (D5)(1to28)(Ign4)(4&7) Control                            (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
005EA1 7F5EA1 1C 03 D9 08                 bset TIM_TCTL2,Bit3 ; Set Ch1 output line to 1 on compare                    (FIRE_IGN4)
005EA5 7F5EA5 1C 03 D9 04                 bset TIM_TCTL2,Bit2 ; Set Ch1 output line to 1 on compare                    (FIRE_IGN4)
005EA9 7F5EA9 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN4)
005EAC 7F5EAC F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN4)
005EAF 7F5EAF 7C 03 E2                    std  TIM_TC1H       ; Copy result to Timer IC/OC register 1 (Start OC operation) (FIRE_IGN4)
005EB2 7F5EB2 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005EB5 7F5EB5                         Notch_CT4_T8:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 6 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #5 cylinder and 60 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #8 cylinder. #5 intake valve is just sstarting to open
                                      ;   and #8 intake valve is 54 degrees before it will start to open. Start the pulse
                                      ;   width for injectors 5&8.
                                      ;*****************************************************************************************
005EB5 7F5EB5 MACRO                       FIRE_INJ4                 ; Macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
                                      ; - PP6(P110) - TIM1 OC6 (D1)(87to112)(Inj4)(5&8) Control                        (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ4)
                                      ;***************************************************************************************** (FIRE_INJ4)
005EB5 7F5EB5 1C 03 D8 10                 bset TIM_TCTL1,Bit4 ; Set Ch6 output line to 1 on compare                    (FIRE_INJ4)
005EB9 7F5EB9 1C 03 D8 20                 bset TIM_TCTL1,Bit5 ; Set Ch6 output line to 1 on compare                    (FIRE_INJ4)
005EBD 7F5EBD FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ4)
005EC0 7F5EC0 F3 10 61                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ4)
005EC3 7F5EC3 7C 03 EC                    std  TIM_TC6H       ; Copy result to Timer IC/OC register 6 (Start OC operation) (FIRE_INJ4)
005EC6 7F5EC6 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005EC9 7F5EC9                         Notch_CT4_T9:
                                      ;*****************************************************************************************
                                      ; - No event
                                      ;*****************************************************************************************
005EC9 7F5EC9 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005ECC 7F5ECC                         Notch_CT4_T10:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #3 cylinder. Start the hardware timer to delay the .
                                      ;   coil dwell for spark #3, waste #2 if we are in run mode.
                                      ;*****************************************************************************************
005ECC 7F5ECC MACRO                       FIRE_IGN5                 ; macro in Tim_BPEM488.s
                                                              ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
                                      ; - PP2(P2) - TIM1 OC2 (D24)(1to28)(Ign5)(3&2) Control                           (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
005ECC 7F5ECC 1C 03 D9 20                 bset TIM_TCTL2,Bit5 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN5)
005ED0 7F5ED0 1C 03 D9 10                 bset TIM_TCTL2,Bit4 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN5)
005ED4 7F5ED4 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN5)
005ED7 7F5ED7 F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN5)
005EDA 7F5EDA 7C 03 E4                    std  TIM_TC2H       ; Copy result to Timer IC/OC register 2 (Start OC operation) (FIRE_IGN5)
005EDD 7F5EDD 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005EE0 7F5EE0                         Notch_CT4_T1:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #6 cylinder. Start the hardware timer to delay the
                                      ;   coil dwell for spark #6, waste #1 if we are in run mode.
                                      ;*****************************************************************************************
005EE0 7F5EE0 MACRO                       FIRE_IGN1                 ; macro in Tim_BPEM488.s
                                      ;***************************************************************************************** (FIRE_IGN1)
                                      ; - PT0(P9) - IOC0 OC0 LED red  (D7)(1to28)(Ign1)(1&6) Control                   (FIRE_IGN1)
                                      ;***************************************************************************************** (FIRE_IGN1)
                                      ;***************************************************************************************** (FIRE_IGN1)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN1)
                                      ;***************************************************************************************** (FIRE_IGN1)
005EE0 7F5EE0 4C 49 02                    bset ECT_TCTL2,Bit1 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN1)
005EE3 7F5EE3 4C 49 01                    bset ECT_TCTL2,Bit0 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN1)
005EE6 7F5EE6 DC 44                       ldd  ECT_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN1)
005EE8 7F5EE8 F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN1)
005EEB 7F5EEB 5C 50                       std  ECT_TC0H       ; Copy result to Timer IC/OC register 0 (Start OC operation) (FIRE_IGN1)
005EED 7F5EED 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005EF0 7F5EF0                         Notch_CT4_T2:
                                      ;*****************************************************************************************
                                      ; - If we are here it is 1 of 4 synchronization points and the crankshaft is at 6 degrees
                                      ;   before top dead centre on the exhaust/intake strokes for #7 cylinder and 60 degrees
                                      ;   before top dead centre on the exhaust/intake strokes for #2 cylinder. #5 intake valve
                                      ;   is just starting to open and #8 intake valve is 54 degrees before it will start to
                                      ;   open. Start the pulse width for injectors 7&2.
                                      ;*****************************************************************************************
005EF0 7F5EF0 MACRO                       FIRE_INJ5                 ; Macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
                                      ; - PP7(P109) - TIM1 OC7 (D7)(87to112)(Inj5)(7&2) Control                        (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ5)
                                      ;***************************************************************************************** (FIRE_INJ5)
005EF0 7F5EF0 1C 03 D8 80                 bset TIM_TCTL1,Bit7 ; Set Ch7 output line to 1 on compare                    (FIRE_INJ5)
005EF4 7F5EF4 1C 03 D8 40                 bset TIM_TCTL1,Bit6 ; Set Ch7 output line to 1 on compare                    (FIRE_INJ5)
005EF8 7F5EF8 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ5)
005EFB 7F5EFB F3 10 61                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ5)
005EFE 7F5EFE 7C 03 EE                    std  TIM_TC7H       ; Copy result to Timer IC/OC register 7(Start OC operation) (FIRE_INJ5)
005F01 7F5F01 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005F04 7F5F04                         Notch_CT4_T3:
                                      ;*****************************************************************************************
                                      ; - No event
                                      ;*****************************************************************************************
005F04 7F5F04 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005F07 7F5F07                         Notch_CT4_T4:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #5 cylinder. Start the hardware timer to delay the
                                      ;   coil dwell for spark #5, waste #10 if we are in run mode.
                                      ;*****************************************************************************************
005F07 7F5F07 MACRO                       FIRE_IGN2                 ; macro in Tim_BPEM488.s
                                                              ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
                                      ; - PT2(P11) - IOC2 OC2 LED red  (D8)(1to28)(Ign2)(10&5) Control                 (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN2)
                                      ;***************************************************************************************** (FIRE_IGN2)
005F07 7F5F07 4C 49 20                    bset ECT_TCTL2,Bit5 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN2)
005F0A 7F5F0A 4C 49 10                    bset ECT_TCTL2,Bit4 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN2)
005F0D 7F5F0D DC 44                       ldd  ECT_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN2)
005F0F 7F5F0F F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN2)
005F12 7F5F12 5C 54                       std  ECT_TC2H       ; Copy result to Timer IC/OC register 2 (Start OC operation) (FIRE_IGN2)
005F14 7F5F14 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005F17 7F5F17                         Notch_CT1_T5:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #8 cylinder. Start the hardware timer to delay the
                                      ;   coil dwell for spark #8, waste #9 if we are in run mode.
                                      ;*****************************************************************************************
005F17 7F5F17 MACRO                       FIRE_IGN3                 ; macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
                                      ; - PP0(P4) - TIM1 OC0 (D21)(1to28)(Ign3)(9&8) Control                           (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN3)
                                      ;***************************************************************************************** (FIRE_IGN3)
005F17 7F5F17 1C 03 D9 02                 bset TIM_TCTL2,Bit1 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN3)
005F1B 7F5F1B 1C 03 D9 01                 bset TIM_TCTL2,Bit0 ; Set Ch0 output line to 1 on compare                    (FIRE_IGN3)
005F1F 7F5F1F FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN3)
005F22 7F5F22 F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN3)
005F25 7F5F25 7C 03 E0                    std  TIM_TC0H       ; Copy result to Timer IC/OC register 0 (Start OC operation) (FIRE_IGN3)
005F28 7F5F28 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005F2B 7F5F2B                         Notch_CT1_T6:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 6 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #1 cylinder and 60 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #1 cylinder. #10 intake valve is just starting to open
                                      ;   and #8 intake valve is 54 degrees before it will start to open. Start the pulse
                                      ;   width for injectors 1&10.
                                      ;*****************************************************************************************
005F2B 7F5F2B MACRO                       FIRE_INJ1                 ; Macro in Tim_BPEM488.s
                                      ;***************************************************************************************** (FIRE_INJ1)
                                      ; - PP3(P1) - TIM1 OC3 (D1)(1to28)(Inj1)(1&10) Control                           (FIRE_INJ1)
                                      ;***************************************************************************************** (FIRE_INJ1)
                                      ;***************************************************************************************** (FIRE_INJ1)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ1)
                                      ;***************************************************************************************** (FIRE_INJ1)
005F2B 7F5F2B 1C 03 D9 80                 bset TIM_TCTL2,Bit7 ; Set Ch3 output line to 1 on compare                    (FIRE_INJ1)
005F2F 7F5F2F 1C 03 D9 40                 bset TIM_TCTL2,Bit6 ; Set Ch3 output line to 1 on compare                    (FIRE_INJ1)
005F33 7F5F33 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ1)
005F36 7F5F36 F3 10 61                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ1)
005F39 7F5F39 7C 03 E6                    std  TIM_TC3H       ; Copy result to Timer IC/OC register 3 (Start OC operation) (FIRE_INJ1)
005F3C 7F5F3C 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005F3F 7F5F3F                         Notch_CT1_T7:
                                      ;*****************************************************************************************
                                      ; - No event
                                      ;*****************************************************************************************
005F3F 7F5F3F 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005F42 7F5F42                         Notch_CT1_T8:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #7 cylinder. Start the hardware timer to delay the
                                      ;   coil dwell for spark #7, waste #4 if we are in run mode.
                                      ;*****************************************************************************************
005F42 7F5F42 MACRO                       FIRE_IGN4                 ; macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
                                      ; - PP1(P3) - TIM1 OC1 (D5)(1to28)(Ign4)(4&7) Control                            (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN4)
                                      ;***************************************************************************************** (FIRE_IGN4)
005F42 7F5F42 1C 03 D9 08                 bset TIM_TCTL2,Bit3 ; Set Ch1 output line to 1 on compare                    (FIRE_IGN4)
005F46 7F5F46 1C 03 D9 04                 bset TIM_TCTL2,Bit2 ; Set Ch1 output line to 1 on compare                    (FIRE_IGN4)
005F4A 7F5F4A FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN4)
005F4D 7F5F4D F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN4)
005F50 7F5F50 7C 03 E2                    std  TIM_TC1H       ; Copy result to Timer IC/OC register 1 (Start OC operation) (FIRE_IGN4)
005F53 7F5F53 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005F56 7F5F56                         Notch_CT1_T9:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 150 degrees before top dead centre on the
                                      ;   compression/power strokes for #2 cylinder. Start the hardware timer to delay the
                                      ;   coil dwell for spark #2, waste #3 if we are in run mode.
                                      ;*****************************************************************************************
005F56 7F5F56 MACRO                       FIRE_IGN5                 ; macro in Tim_BPEM488.s
                                                              ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
                                      ; - PP2(P2) - TIM1 OC2 (D24)(1to28)(Ign5)(3&2) Control                           (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_IGN5)
                                      ;***************************************************************************************** (FIRE_IGN5)
005F56 7F5F56 1C 03 D9 20                 bset TIM_TCTL2,Bit5 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN5)
005F5A 7F5F5A 1C 03 D9 10                 bset TIM_TCTL2,Bit4 ; Set Ch2 output line to 1 on compare                    (FIRE_IGN5)
005F5E 7F5F5E FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_IGN5)
005F61 7F5F61 F3 10 41                    addd IgnOCadd1      ; Add "IgnOCadd1" (Delay time from crank signal to energise coil) (FIRE_IGN5)
005F64 7F5F64 7C 03 E4                    std  TIM_TC2H       ; Copy result to Timer IC/OC register 2 (Start OC operation) (FIRE_IGN5)
005F67 7F5F67 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005F6A 7F5F6A                         Notch_CT1_T10:
                                      ;*****************************************************************************************
                                      ; - If we are here the crankshaft is at 6 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #9 cylinder and 60 degrees before top dead centre on the
                                      ;   exhaust/intake strokes for #4 cylinder. #9 intake valve is just starting to open
                                      ;   and #4 intake valve is 54 degrees before it will start to open. Start the pulse
                                      ;   width for injectors 9&4.
                                      ;*****************************************************************************************
005F6A 7F5F6A MACRO                       FIRE_INJ2                 ; Macro in Tim_BPEM488.s
                                                                  ; (Will trigger an interrupt after the delay time)(LED off) (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
                                      ; - PP4(P112) - TIM1 OC4 (D3)(87to112)(Inj2)(9&4) Control                        (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
                                      ; - Set the output compare value for desired delay from trigger time to energising time. (FIRE_INJ2)
                                      ;***************************************************************************************** (FIRE_INJ2)
005F6A 7F5F6A 1C 03 D8 01                 bset TIM_TCTL1,Bit0 ; Set Ch4 output line to 1 on compare                    (FIRE_INJ2)
005F6E 7F5F6E 1C 03 D8 02                 bset TIM_TCTL1,Bit1 ; Set Ch4 output line to 1 on compare                    (FIRE_INJ2)
005F72 7F5F72 FC 03 D4                    ldd  TIM_TCNTH      ; Contents of Timer Count Register-> Accu D              (FIRE_INJ2)
005F75 7F5F75 F3 10 61                    addd InjOCadd1      ; Add "InjOCadd1" (Delay from trigger to start of injection) (FIRE_INJ2)
005F78 7F5F78 7C 03 E8                    std  TIM_TC4H       ; Copy result to Timer IC/OC register 4 (Start OC operation) (FIRE_INJ2)
005F7B 7F5F7B 06 5F 7E                    jmp   StateHandlersDone   ; Jump to StateHandlersDone:
005F7E 7F5F7E                         StateHandlersDone:
005F7E 7F5F7E 0B                          rti                  ; Return from interrupt
                                      ;**********************************************************************
005F7F 7F5F7F -> $5F7F                STATE_CODE_END          EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
005F7F 7F5F7F -> $7F5F7F              STATE_CODE_END_LIN      EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006C67 7F6C67                                                 ORG     STATE_TABS_START, STATE_TABS_START_LIN
006C67 7F6C67 -> $7F6C67              STATE_TABS_START_LIN    EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; Lookup table for Dodge V10 Cam/Crank decoding
006C67 7F6C67                         StateLookup:
006C67 7F6C67 0B 0A 0C 46 0D 01 0E 02      db     $0B,$0A,$0C,$46,$0D,$01,$0E,$02,$0F,$03,$10,$04,$11,$05,$12,$06,
              0F 03 10 04 11 05 12 06 
006C77 7F6C77 13 07 14 08 15 09 16 17      db     $13,$07,$14,$08,$15,$09,$16,$17,$46,$7C,$46,$7C,$46,$7C,$46,$7C,
              46 7C 46 7C 46 7C 46 7C 
006C87 7F6C87 18 7C 19 7C 1B 1A 1C 1D      db     $18,$7C,$19,$7C,$1B,$1A,$1C,$1D,$1F,$1E,$21,$20,$46,$7D,$46,$22,
              1F 1E 21 20 46 7D 46 22 
006C97 7F6C97 46 7D 46 7D 46 23 46 7D      db     $46,$7D,$46,$7D,$46,$23,$46,$7D,$46,$7D,$46,$24,$46,$25,$46,$7D,
              46 7D 46 24 46 25 46 7D 
006CA7 7F6CA7 46 26 46 7D 46 27 46 28      db     $46,$26,$46,$7D,$46,$27,$46,$28,$46,$29,$46,$2A,$46,$2B,$46,$2C,
              46 29 46 2A 46 2B 46 2C 
006CB7 7F6CB7 46 2D 46 2E 46 2F 46 30      db     $46,$2D,$46,$2E,$46,$2F,$46,$30,$32,$31,$46,$33,$46,$34,$46,$35,
              32 31 46 33 46 34 46 35 
006CC7 7F6CC7 46 36 46 37 46 7F 46 38      db     $46,$36,$46,$37,$46,$7F,$46,$38,$46,$39,$46,$3A,$46,$3B,$3C,$7E,
              46 39 46 3A 46 3B 3C 7E 
006CD7 7F6CD7 3D 7E 3E 7E 3F 7E 40 7E      db     $3D,$7E,$3E,$7E,$3F,$7E,$40,$7E,$41,$46,$42,$46,$43,$46,$44,$46,
              41 46 42 46 43 46 44 46 
006CE7 7F6CE7 45 46 46 7D 46 7D 46 7D      db     $45,$46,$46,$7D,$46,$7D,$46,$7D,$46,$7D,$46,$7D,$46,$46,$46,$46,
              46 7D 46 7D 46 46 46 46 
006CF7 7F6CF7 46 46 46 46 46 46 46 46      db     $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,
              46 46 46 46 46 46 46 46 
006D07 7F6D07 46 46 46 46 46 46 46 46      db     $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,
              46 46 46 46 46 46 46 46 
006D17 7F6D17 46 46 46 46 46 46 46 46      db     $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,
              46 46 46 46 46 46 46 46 
006D27 7F6D27 46 46 46 46 46 46 46 46      db     $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,
              46 46 46 46 46 46 46 46 
006D37 7F6D37 46 69 46 6A 46 6B 46 6C      db     $46,$69,$46,$6A,$46,$6B,$46,$6C,$6D,$46,$6E,$46,$46,$7D,$46,$70,
              6D 46 6E 46 46 7D 46 70 
006D47 7F6D47 46 71 72 46 46 7F 46 7C      db     $46,$71,$72,$46,$46,$7F,$46,$7C,$73,$46,$46,$74,$46,$75,$46,$7E,
              73 46 46 74 46 75 46 7E 
006D57 7F6D57 46 77 46 78 46 79 46 7A      db     $46,$77,$46,$78,$46,$79,$46,$7A,$46,$68,$46,$6F,$46,$76,$46,$7B,
              46 68 46 6F 46 76 46 7B 
006D67 7F6D67 -> $6D67                STATE_TABS_END          EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006D67 7F6D67 -> $7F6D67              STATE_TABS_END_LIN      EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (interp_BPEM488.s)                                                          *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    2D table interpolation Macro and 3D table interpolation subroutine                 *
                                      ;*    Author Dirk Heisswolf                                                              *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros (This module)           *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    Ma5 25 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006D67 7F6D67 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Constants -                                                                         *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - 3DLUT table parameters for VE, ST and AFR 3D tables. Page is set in main loop when
                                      ;   calling a specific table
                                      ;*****************************************************************************************
006D67 7F6D67 -> $0012                3DLUT_ROW_COUNT             EQU $12   ; Number of rows in table ($12=18)
006D67 7F6D67 -> $0012                3DLUT_COL_COUNT             EQU $12   ; Number of columns in table ($12=18)
006D67 7F6D67 -> $0288                3DLUT_ROW_BIN_OFFSET    EQU     2*(3DLUT_ROW_COUNT*3DLUT_COL_COUNT)
                                                                        ; Row bin offset from start of table ($288=648)
006D67 7F6D67 -> $02AC                3DLUT_COL_BIN_OFFSET    EQU     3DLUT_ROW_BIN_OFFSET+(2*3DLUT_ROW_COUNT)
                                                                        ; Column bin offset from start of table ($2AC=684)
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001025 0FD025                                     ORG     INTERP_VARS_START, INTERP_VARS_START_LIN
001025 0FD025 -> $FD025               INTERP_VARS_START_LIN   EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - 2D Lookup variables - (declared in this module)
                                      ;*****************************************************************************************
001025 0FD025                         CrvPgPtr:   ds 2 ; Pointer to the page where the desired curve resides
001027 0FD027                         CrvRowOfst: ds 2 ; Offset from the curve page to the curve row
001029 0FD029                         CrvColOfst: ds 2 ; Offset from the curve page to the curve column
00102B 0FD02B                         CrvCmpVal:  ds 2 ; Curve comparison value for interpolation
00102D 0FD02D                         CrvBinCnt:  ds 1 ; Number of bins in the curve row or column minus 1
00102E 0FD02E                         IndexNum:   ds 1 ; Position in the row or column of the curve comparison value
00102F 0FD02F                         CrvRowHi:   ds 2 ; Curve row high boundry value for interpolation
001031 0FD031                         CrvRowLo:   ds 2 ; Curve row low boundry value for interpolation
001033 0FD033                         CrvColHi:   ds 2 ; Curve column high boundry value for interpolation
001035 0FD035                         CrvColLo:   ds 2 ; Curve column low boundry value for interpolation
                                      ;*****************************************************************************************
001037 0FD037 -> $1037                INTERP_VARS_END         EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
001037 0FD037 -> $FD037               INTERP_VARS_END_LIN     EQU     @     ; @ Represents the current value of the linear
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
005F7F 7F5F7F                                                 ORG     INTERP_CODE_START, INTERP_CODE_START_LIN
005F7F 7F5F7F -> $7F5F7F              INTERP_CODE_START_LIN   EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - Suboutines -
                                      ;*****************************************************************************************
                                      ; -Look-up value in 3D Table -
                                      ; =========================
                                      ; args:   D: row value
                                      ;         X: column value
                                      ;         Y: table pointer
                                      ; result: D: look-up value
                                      ; SSTACK:  bytes
                                      ;         X and Y are preserved
                                      ;*****************************************************************************************
005F7F 7F5F7F -> $5F7F                3D_LOOKUP:   EQU        *
                                      ;*****************************************************************************************
                                      ; - Save registers (row value in D, column value in X, table pointer
                                      ;   in Y)
                                      ;*****************************************************************************************
005F7F 7F5F7F 35                                      PSHY                                    ;save table pointer
005F80 7F5F80 34                                      PSHX                                    ;save column value
005F81 7F5F81 3B                                      PSHD                                    ;save row value
                                      ;*****************************************************************************************
                                                      ;    +--------+--------+
                                                      ;    |    row value    |  SP+ 0 ($3FF8)
                                                      ;    +--------+--------+
                                                      ;    |  column value   |  SP+ 2 ($3FFA)
                                                      ;    +--------+--------+
                                                      ;    |  table pointer  |  SP+ 4 ($3FFC)
                                                      ;    +--------+--------+
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Determine upper and lower column bin entry (column value in X,
                                      ;   table pointer in Y)
                                      ;*****************************************************************************************
005F82 7F5F82 19 EA 02 AC                             LEAY 3DLUT_COL_BIN_OFFSET,Y   ; Column bin pointer -> Y
                                                                            ;($2AC=684)
005F86 7F5F86 C6 22                           LDAB #(2*(3DLUT_ROW_COUNT-1)) ; Lower column bin offset -> B
                                                                            ;($22=34)
005F88 7F5F88 18 0F                           TBA                                     ; Lower  offset -> A (start at $22=34)
005F8A 7F5F8A AE EC                           CPX      A,Y            ; Compare column value against current bin
                                                                  ; value
005F8C 7F5F8C 2C 10                           BGE  3D_LOOKUP_2A   ; First iteration, if equal to or greater
                                                                  ; than current bin value, rail high, upper
                                                                  ; and lower bin offsets the same
005F8E 7F5F8E                         3D_LOOKUP_1:
005F8E 7F5F8E 18 0F                           TBA                                     ; Lower  offset -> A
005F90 7F5F90 AE EC                           CPX      A,Y            ; Compare column value against current bin
                                                                  ; value
005F92 7F5F92 2C 08                                   BGE      3D_LOOKUP_2    ; Branch if column value is greater than
                                                                  ; or equal to current bin value
                                                                  ;(match found)
005F94 7F5F94 53                                      DECB                ; Decrement bin offset low byte
005F95 7F5F95 04 31 F6                                DBNE B,3D_LOOKUP_1  ; Decrement bin offset Hi byte and loop
                                                                  ; back if not zero
005F98 7F5F98 18 0F                                   TBA                                     ; Column value too low, no match found,
                                                                  ; rail low, make lower and upper bin
                                                                  ; offsets the same)
005F9A 7F5F9A 20 02                           BRA   3D_LOOKUP_2A
                                      ;*****************************************************************************************
                                      ; - Increment lower offset to make upper offset
                                      ;*****************************************************************************************
005F9C 7F5F9C                         3D_LOOKUP_2:
005F9C 7F5F9C 42                              INCA                ; Increment lower offset Lo byte
005F9D 7F5F9D 42                              INCA                ; Increment lower offset Hi byte to make
                                                                  ; upper offset in "A"
                                      ;*****************************************************************************************
                                      ; - Push upper and lower column value (upper column bin offset in A,
                                      ;   lower column bin offset in B, column bin pointer in Y)
                                      ;*****************************************************************************************
005F9E 7F5F9E                         3D_LOOKUP_2A:
005F9E 7F5F9E 18 02 ED AE                     MOVW B,Y, 2,-SP     ; Push lower column value onto stack
005FA2 7F5FA2 18 02 EC AE                             MOVW A,Y, 2,-SP     ; Push upper column value onto stack
                                      ;*****************************************************************************************
                                                      ;    +--------+--------+
                                                      ;    | upper col value |  SP+ 0 ($3FF4)
                                                      ;    +--------+--------+
                                                      ;    | lower col value |  SP+ 2 ($3FF6)
                                                      ;    +--------+--------+
                                                      ;    |    row value    |  SP+ 4 ($3FF8)
                                                      ;    +--------+--------+
                                                      ;    |  column value   |  SP+ 6 ($3FFA)
                                                      ;    +--------+--------+
                                                      ;    |  table pointer  |  SP+ 8 ($3FFC)
                                                      ;    +--------+--------+
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Push upper and lower row pointer (upper colum bin offset in A,
                                      ;   lower column bin offset in B)
                                      ;*****************************************************************************************
005FA6 7F5FA6 B7 05                                   TFR  A, X             ; Save upper colum bin offset in XL
005FA8 7F5FA8 86 12                                   LDAA #3DLUT_COL_COUNT ; Multiply lower column bin offset
                                                                    ; column count ($12=18)
005FAA 7F5FAA 12                                      MUL                   ; (A)x(B)->A:B
005FAB 7F5FAB E3 88                                   ADDD 8,SP             ; Add table pointer
005FAD 7F5FAD 3B                                      PSHD                  ; Push lower row pointer onto the stack
005FAE 7F5FAE B7 51                                   TFR      X,B              ; Restore upper colum bin offset
005FB0 7F5FB0 86 12                                   LDAA #3DLUT_COL_COUNT ; Multiply lower column bin offset
                                                                    ; Column count ($12=18)
005FB2 7F5FB2 12                                      MUL                   ; (A)x(B)->A:B (test 18*6=108)
005FB3 7F5FB3 E3 8A                                   ADDD (8+2),SP         ; Add table pointer
005FB5 7F5FB5 3B                                      PSHD                  ; Push upper row pointer onto the stack
                                      ;*****************************************************************************************
                                                      ;    +--------+--------+
                                                      ;    |  upper row ptr  |  SP+ 0 ($3FF0)
                                                      ;    +--------+--------+
                                                      ;    |  lower row ptr  |  SP+ 2 ($3FF2)
                                                      ;    +--------+--------+
                                                      ;    | upper col value |  SP+ 4 ($3FF4)
                                                      ;    +--------+--------+
                                                      ;    | lower col value |  SP+ 6 ($3FF6)
                                                      ;    +--------+--------+
                                                      ;    |    row value    |  SP+ 8 ($3FF8)
                                                      ;    +--------+--------+
                                                      ;    |  column value   |  SP+10 ($3FFA)
                                                      ;    +--------+--------+
                                                      ;    |  table pointer  |  SP+12 ($3FFC)
                                                      ;    +--------+--------+
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Determine upper and lower row bin entry (column value in X,
                                      ;   table pointer in Y)
                                      ;*****************************************************************************************
005FB6 7F5FB6 ED 8C                                   LDY      12,SP                    ; Table pointer -> Y
005FB8 7F5FB8 19 EA 02 88                             LEAY 3DLUT_ROW_BIN_OFFSET,Y   ; Row bin pointer -> Y($288=648)
005FBC 7F5FBC C6 22                           LDAB #(2*(3DLUT_ROW_COUNT-1)) ; Lower row bin offset -> B
                                                                            ;($22=34)
005FBE 7F5FBE EE 88                           LDX  8,SP                     ; Row value -> X
005FC0 7F5FC0 18 0F                           TBA                ; Lower offset -> A (start at $22=34)
005FC2 7F5FC2 AE EC                           CPX     A,Y                ; Compare row value against current bin value
005FC4 7F5FC4 2C 10                           BGE 3D_LOOKUP_4A   ; First iteration, if equal to or greater
                                                                 ; than current bin value, rail high, upper
                                                                 ; and lower bin offsets the same
005FC6 7F5FC6                         3D_LOOKUP_3:
005FC6 7F5FC6 18 0F                           TBA                    ; Lower  offset -> A
005FC8 7F5FC8 AE EC                           CPX      A,Y           ; Compare column value against current bin
                                                                 ; value
005FCA 7F5FCA 2C 08                                   BGE     3D_LOOKUP_4    ; Branch if column value is greater than
                                                                 ; or equal to current bin value
                                                                 ;(match found)
005FCC 7F5FCC 53                                      DECB               ; Decrement bin offset low byte
005FCD 7F5FCD 04 31 F6                                DBNE B,3D_LOOKUP_3 ; Decrement bin offset Hi byte and loop
                                                                 ; back if not zero
005FD0 7F5FD0 18 0F                                   TBA                    ; Column value too low, no match found,
                                                                 ; rail low, make lower and upper bin
                                                                 ; offsets the same)
005FD2 7F5FD2 20 02                           bra   3D_LOOKUP_4A
                                      ;*****************************************************************************************
                                      ; - Increment lower offset to make upper offset
                                      ;*****************************************************************************************
005FD4 7F5FD4                         3D_LOOKUP_4:
005FD4 7F5FD4 42                              INCA                ; Increment lower offset Lo byte
005FD5 7F5FD5 42                              INCA                ; Increment lower offset Hi byte to make
                                                                  ; upper offset in "A"
                                      ;*****************************************************************************************
                                      ; - Push upper and lower row value (upper row bin offset in A,
                                      ;   lower row bin offset in B, row bin pointer in Y)
                                      ;*****************************************************************************************
005FD6 7F5FD6                         3D_LOOKUP_4A:
005FD6 7F5FD6 18 02 ED AE                     MOVW    B,Y, 2,-SP  ; Push lower row value onto stack
005FDA 7F5FDA 18 02 EC AE                             MOVW    A,Y, 2,-SP  ; Push upper row value onto stack
                                      ;*****************************************************************************************
                                                      ;    +--------+--------+
                                                      ;    | upper row value |  SP+ 0 ($3FFC)
                                                      ;    +--------+--------+
                                                      ;    | lower row value |  SP+ 2 ($3FEE)
                                                      ;    +--------+--------+
                                                      ;    |  upper row ptr  |  SP+ 4 ($3FF0)
                                                      ;    +--------+--------+
                                                      ;    |  lower row ptr  |  SP+ 6 ($3FF2)
                                                      ;    +--------+--------+
                                                      ;    | upper col value |  SP+ 8 ($3FF4)
                                                      ;    +--------+--------+
                                                      ;    | lower col value |  SP+10 ($3FF6)
                                                      ;    +--------+--------+
                                                      ;    |    row value    |  SP+12 ($3FF8)
                                                      ;    +--------+--------+
                                                      ;    |  column value   |  SP+14 ($3FFA)
                                                      ;    +--------+--------+
                                                      ;    |  table pointer  |  SP+16 ($3FFC)
                                                      ;    +--------+--------+
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Read Zhh, Zhl, Zlh, and Zll from look-up table
                                      ;  (upper row bin offset in A, lower row bin offset in B)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                                      ;
                                                      ;   lower                  upper
                                                      ;    row         row        row
                                                      ;   value       value      value
                                                      ;     .           .          .         lower
                                                      ;   ..0......................o.........column
                                                      ;     .Zll        .Zl        .Zlh      value
                                                      ;     .           .          .
                                                      ;     .           .          .
                                                      ;   ...................................column
                                                      ;     .           .Z         .         value
                                                      ;     .           .          .
                                                      ;     .           .          .         upper
                                                      ;   ..o......................o.........column
                                                      ;     .Zhl        .Zh        .Zhh      value
                                                      ;
                                      ;*****************************************************************************************
005FDE 7F5FDE ED 84                                   LDY      4,SP       ; Upper row pointer -> Y
005FE0 7F5FE0 EE 86                                   LDX  6,SP       ; Lower row pointer -> X
005FE2 7F5FE2 18 02 E5 AE                             MOVW B,X, 2,-SP ; Push Zll
005FE6 7F5FE6 18 02 E4 AE                             MOVW A,X, 2,-SP ; Push Zlh
005FEA 7F5FEA 18 02 ED AE                             MOVW B,Y, 2,-SP ; Push Zhl
005FEE 7F5FEE 18 02 EC AE                             MOVW A,Y, 2,-SP ; Push Zhh
                                      ;*****************************************************************************************
                                                      ;    +--------+--------+
                                                      ;    |       Zhh       |  SP+ 0 ($3FE4)
                                                      ;    +--------+--------+
                                                      ;    |       Zhl       |  SP+ 2 ($3FE6)
                                                      ;    +--------+--------+
                                                      ;    |       Zlh       |  SP+ 4 ($3FE8)
                                                      ;    +--------+--------+
                                                      ;    |       Zll       |  SP+ 6 ($3FEA)
                                                      ;    +--------+--------+
                                                      ;    | upper row value |  SP+ 8 ($3FEC)
                                                      ;    +--------+--------+
                                                      ;    | lower row value |  SP+10 ($3FEE)
                                                      ;    +--------+--------+
                                                      ;    |  upper row ptr  |  SP+12 ($3FF0)
                                                      ;    +--------+--------+
                                                      ;    |  lower row ptr  |  SP+14 ($3FF2)
                                                      ;    +--------+--------+
                                                      ;    | upper col value |  SP+16 ($3FF4)
                                                      ;    +--------+--------+
                                                      ;    | lower col value |  SP+18 ($3FF6)
                                                      ;    +--------+--------+
                                                      ;    |    row value    |  SP+20 ($3FF8)
                                                      ;    +--------+--------+
                                                      ;    |  column value   |  SP+22 ($3FFA)
                                                      ;    +--------+--------+
                                                      ;    |  table pointer  |  SP+24 ($3FFC)
                                                      ;    +--------+--------+
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Determine Zl
                                      ;*****************************************************************************************
                                      ;                         V       V1      V2      Z1     Z2
005FF2 7F5FF2 MACRO                                   2D_IPOL (20,SP), (10,SP), (8,SP), (6,SP), (4,SP)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (2D_IPOL)
                                      ; ==========================                                                     (2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (2D_IPOL)
                                      ; result: D: interpolated result                                                 (2D_IPOL)
                                      ; SSTACK: none                                                                   (2D_IPOL)
                                      ;         no registers are preserved                                             (2D_IPOL)
                                      ;                                                                                (2D_IPOL)
                                      ;    ^ V                                                                         (2D_IPOL)
                                      ;    |                                                                           (2D_IPOL)
                                      ;  Z2+....................*                                                      (2D_IPOL)
                                      ;    |                    :                                                      (2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (2D_IPOL)
                                      ;    |   :       :        :                                                      (2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (2D_IPOL)
                                      ;    |   V1      V        V2                                                     (2D_IPOL)
                                      ;                                                                                (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FF2 7F5FF2 EC F0 14                                LDD       \1    ; load V                                         (2D_IPOL)
005FF5 7F5FF5 A3 8A                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (2D_IPOL)
005FF7 7F5FF7 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FF9 7F5FF9 EC 84                                   LDD       \5    ; load Z2                                        (2D_IPOL)
005FFB 7F5FFB A3 86                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
005FFD 7F5FFD 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (2D_IPOL)
005FFF 7F5FFF B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
006001 7F6001 EC 88                                   LDD       \3    ; load V2                                        (2D_IPOL)
006003 7F6003 A3 8A                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (2D_IPOL)
006005 7F6005 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (2D_IPOL)
                                      ;*********************************************************************           (2D_IPOL)
006007 7F6007 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (2D_IPOL)
006009 7F6009 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
00600B 7F600B E3 86                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (2D_IPOL)
00600D 7F600D 3B                                      PSHD     ; Push Zl onto stack
                                      ;*****************************************************************************************
                                                      ;    +--------+--------+
                                                      ;    |       Zl        |  SP+ 0 ($3FE2)
                                                      ;    +--------+--------+
                                                      ;    |       Zhh       |  SP+ 2 ($3FE4)
                                                      ;    +--------+--------+
                                                      ;    |       Zhl       |  SP+ 4 ($3FE6)
                                                      ;    +--------+--------+
                                                      ;    |       Zlh       |  SP+ 6 ($3FE8)
                                                      ;    +--------+--------+
                                                      ;    |       Zll       |  SP+ 8 ($3FEA)
                                                      ;    +--------+--------+
                                                      ;    | upper row value |  SP+10 ($3FEC)
                                                      ;    +--------+--------+
                                                      ;    | lower row value |  SP+12 ($3FEE)
                                                      ;    +--------+--------+
                                                      ;    |  upper row ptr  |  SP+14 ($3FF0)
                                                      ;    +--------+--------+
                                                      ;    |  lower row ptr  |  SP+16 ($3FF2)
                                                      ;    +--------+--------+
                                                      ;    | upper col value |  SP+18 ($3FF4)
                                                      ;    +--------+--------+
                                                      ;    | lower col value |  SP+20 ($3FF6)
                                                      ;    +--------+--------+
                                                      ;    |    row value    |  SP+22 ($3FF8)
                                                      ;    +--------+--------+
                                                      ;    |  column value   |  SP+24 ($3FFA)
                                                      ;    +--------+--------+
                                                      ;    |  table pointer  |  SP+26 ($3FFC)
                                                      ;    +--------+--------+
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Determine Zh
                                      ;*****************************************************************************************
                                      ;                         V       V1       V2      Z1     Z2
00600E 7F600E MACRO                                   2D_IPOL (22,SP), (12,SP), (10,SP), (4,SP), (2,SP)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (2D_IPOL)
                                      ; ==========================                                                     (2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (2D_IPOL)
                                      ; result: D: interpolated result                                                 (2D_IPOL)
                                      ; SSTACK: none                                                                   (2D_IPOL)
                                      ;         no registers are preserved                                             (2D_IPOL)
                                      ;                                                                                (2D_IPOL)
                                      ;    ^ V                                                                         (2D_IPOL)
                                      ;    |                                                                           (2D_IPOL)
                                      ;  Z2+....................*                                                      (2D_IPOL)
                                      ;    |                    :                                                      (2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (2D_IPOL)
                                      ;    |   :       :        :                                                      (2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (2D_IPOL)
                                      ;    |   V1      V        V2                                                     (2D_IPOL)
                                      ;                                                                                (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
00600E 7F600E EC F0 16                                LDD       \1    ; load V                                         (2D_IPOL)
006011 7F6011 A3 8C                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (2D_IPOL)
006013 7F6013 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
006015 7F6015 EC 82                                   LDD       \5    ; load Z2                                        (2D_IPOL)
006017 7F6017 A3 84                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
006019 7F6019 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (2D_IPOL)
00601B 7F601B B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
00601D 7F601D EC 8A                                   LDD       \3    ; load V2                                        (2D_IPOL)
00601F 7F601F A3 8C                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (2D_IPOL)
006021 7F6021 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (2D_IPOL)
                                      ;*********************************************************************           (2D_IPOL)
006023 7F6023 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (2D_IPOL)
006025 7F6025 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
006027 7F6027 E3 84                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (2D_IPOL)
006029 7F6029 3B                                      PSHD     ; Push Zh onto stack
                                      ;*****************************************************************************************
                                                      ;    +--------+--------+
                                                      ;    |       Zh        |  SP+ 0 ($3FE0)
                                                      ;    +--------+--------+
                                                      ;    |       Zl        |  SP+ 2 ($3FE2)
                                                      ;    +--------+--------+
                                                      ;    |       Zhh       |  SP+ 4 ($3FE4)
                                                      ;    +--------+--------+
                                                      ;    |       Zhl       |  SP+ 6 ($3FE6)
                                                      ;    +--------+--------+
                                                      ;    |       Zlh       |  SP+ 8 ($3FE8)
                                                      ;    +--------+--------+
                                                      ;    |       Zll       |  SP+10 ($3FEA)
                                                      ;    +--------+--------+
                                                      ;    | upper row value |  SP+12 ($3FEC)
                                                      ;    +--------+--------+
                                                      ;    | lower row value |  SP+14 ($3FEE)
                                                      ;    +--------+--------+
                                                      ;    |  upper row ptr  |  SP+16 ($3FF0)
                                                      ;    +--------+--------+
                                                      ;    |  lower row ptr  |  SP+18 ($3FF2)
                                                      ;    +--------+--------+
                                                      ;    | upper col value |  SP+20 ($3FF4)
                                                      ;    +--------+--------+
                                                      ;    | lower col value |  SP+22 ($3FF6)
                                                      ;    +--------+--------+
                                                      ;    |    row value    |  SP+24 ($3FF8)
                                                      ;    +--------+--------+
                                                      ;    |  column value   |  SP+26 ($3FFA)
                                                      ;    +--------+--------+
                                                      ;    |  table pointer  |  SP+28 ($3FFC)
                                                      ;    +--------+--------+
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Determine Z
                                      ;*****************************************************************************************
                                      ;                         V       V1        V2      Z1     Z2
00602A 7F602A MACRO                                   2D_IPOL (26,SP), (22,SP), (20,SP), (2,SP), (0,SP)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (2D_IPOL)
                                      ; ==========================                                                     (2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (2D_IPOL)
                                      ; result: D: interpolated result                                                 (2D_IPOL)
                                      ; SSTACK: none                                                                   (2D_IPOL)
                                      ;         no registers are preserved                                             (2D_IPOL)
                                      ;                                                                                (2D_IPOL)
                                      ;    ^ V                                                                         (2D_IPOL)
                                      ;    |                                                                           (2D_IPOL)
                                      ;  Z2+....................*                                                      (2D_IPOL)
                                      ;    |                    :                                                      (2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (2D_IPOL)
                                      ;    |   :       :        :                                                      (2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (2D_IPOL)
                                      ;    |   V1      V        V2                                                     (2D_IPOL)
                                      ;                                                                                (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
00602A 7F602A EC F0 1A                                LDD       \1    ; load V                                         (2D_IPOL)
00602D 7F602D A3 F0 16                                SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (2D_IPOL)
006030 7F6030 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
006032 7F6032 EC 80                                   LDD       \5    ; load Z2                                        (2D_IPOL)
006034 7F6034 A3 82                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
006036 7F6036 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (2D_IPOL)
006038 7F6038 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
00603A 7F603A EC F0 14                                LDD       \3    ; load V2                                        (2D_IPOL)
00603D 7F603D A3 F0 16                                SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (2D_IPOL)
006040 7F6040 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (2D_IPOL)
                                      ;*********************************************************************           (2D_IPOL)
006042 7F6042 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (2D_IPOL)
006044 7F6044 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (2D_IPOL)
                                      ;***************************************************************************************** (2D_IPOL)
006046 7F6046 E3 82                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (2D_IPOL)
                                      ;*****************************************************************************************
                                      ; - Free stack space (result in D)
                                      ;*****************************************************************************************
006048 7F6048 1B F0 1A                                LEAS 26,SP   ; Stack pointer -> bottom of stack
                                      ;*****************************************************************************************
                                      ; - Restore registers (result in D)
                                      ;*****************************************************************************************
00604B 7F604B 30                                      PULX   ; Pull index register X from stack
00604C 7F604C 31                                      PULY   ; Pull index register Y from stack
                                      ;*****************************************************************************************
                                      ; - Done (result in D)
                                      ;*****************************************************************************************
00604D 7F604D 3D                                      RTS   ; Return from subroutine
                                      ;*****************************************************************************************
                                      ; ------------------------------ Linear Interpolation - 2D -------------------------------
                                      ; Graph Plot
                                      ;    |
                                      ;  Z2+....................*
                                      ;    |                    :
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)
                                      ;    |           :        :        Z = Z1 + --------------
                                      ;  Z1+...*       :        :                    (V2-V1)
                                      ;    |   :       :        :
                                      ;   -+---+-------+--------+---
                                      ;    |   V1      V        V2
00604E 7F604E -> $604E                CRV_LU_P:   EQU *
                                      ;*****************************************************************************************
                                      ; - This subroutine calculates the interpolated value of a 2D curve with an X axis that
                                      ;   starts with positive values and ends with positive values.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - First, determine the position in the row of the comparison value for
                                      ;   interpolation (IndexNum). Position in the column will be the same as the position
                                      ;   in the row. Determine the row high and low boundary values.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set up the process to find the interpolated curve value by determining the values
                                      ;   of the first bins in the row and column. Clear the index number variable.
                                      ;*****************************************************************************************
00604E 7F604E MACRO                       CRV_SETUP       ; Macro this module
                                      ;***************************************************************************************** (CRV_SETUP)
                                      ; - Set up the process to find the interpolated curve value by determining the values (CRV_SETUP)
                                      ;   of the first bins in the row and column. Clear the index number variable.    (CRV_SETUP)
                                      ;***************************************************************************************** (CRV_SETUP)
00604E 7F604E FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (CRV_SETUP)
006051 7F6051 FC 10 27                    ldd  CrvRowOfst   ; Offset from the curve page to the curve row -> D         (CRV_SETUP)
006054 7F6054 19 EE                       leay D,Y          ; Curve row pointer -> Y                                   (CRV_SETUP)
006056 7F6056 18 05 EE 10 31              movw D,Y,CrvRowLo ; Copy to curve row low boundry value for interpolation    (CRV_SETUP)
00605B 7F605B 18 05 EE 10 2F              movw D,Y,CrvRowHi ; Copy to curve row high boundry value for interpolation   (CRV_SETUP)
                                                            ; (start with low and high row bin values equal            (CRV_SETUP)
006060 7F6060 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (CRV_SETUP)
006063 7F6063 FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (CRV_SETUP)
006066 7F6066 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (CRV_SETUP)
006068 7F6068 18 05 EE 10 35              movw D,Y,CrvColLo ; Copy to curve row column boundry value for interpolation (CRV_SETUP)
00606D 7F606D 18 05 EE 10 33              movw D,Y,CrvColHi ; Copy to curve column high boundry value for interpolation (CRV_SETUP)
                                                            ; (start with low and high column bin values equal         (CRV_SETUP)
006072 7F6072 79 10 2E                    clr   IndexNum    ; Position in the row or column of the curve comparison value (CRV_SETUP)
                                      ;*****************************************************************************************
                                      ; - Check to see if CrvCmpVal is =< CrvRowLo. if it is rail low with CrvColLo in Accu D
                                      ;*****************************************************************************************
006075 7F6075 FE 10 2B                    ldx  CrvCmpVal    ; Curve compare value -> X
006078 7F6078 BE 10 31                    cpx  CrvRowLo     ; Compare curve compare value with curve low boundary
00607B 7F607B 23 02                       bls  RailLowPos   ; If CrvCmpVal is the same or less than CrvRowLo branch to RailLowPos:
00607D 7F607D 20 04                       bra  ReEntCrvPos  ; Branch to ReEntCrvPos:
00607F 7F607F                         RailLowPos:
00607F 7F607F FC 10 35                    ldd  CrvColLo    ; Curve column low boundary value -> D
006082 7F6082 3D                          rts              ; Return from subroutine (Rail low, no interpolation required)
                                      ;*****************************************************************************************
                                      ; - Both CrvRowLo and CrvCmpVal are positive. CrvCmpVal is the greater than CrvRowLo.
                                      ;   Determine the value of CrvRowHi
                                      ;*****************************************************************************************
006083 7F6083                         ReEntCrvPos:
006083 7F6083 72 10 2E                    inc  IndexNum     ; Increment position in the row or column of the curve comparison
                                                            ; value
006086 7F6086 18 04 10 2F 10 31           movw CrvRowHi,CrvRowLo ; Curve row high boundry value -> curve row low boundry value
00608C 7F608C 18 72 10 27                 incw CrvRowOfst   ; Increment Offset from the curve page to the curve row
006090 7F6090 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y
006093 7F6093 FC 10 27                    ldd  CrvRowOfst   ; Incremented offset from the curve page to the curve row -> D
006096 7F6096 19 EE                       leay D,Y          ; Curve row pointer -> Y
006098 7F6098 18 05 EE 10 2F              movw D,Y,CrvRowHi ; Copy to curve row high boundry value for interpolation
                                                            ; (holds the contents of the incremented row bin)
                                      ;*****************************************************************************************
                                      ; - CrvRowLo, CrvCmpVal and CrvRowHi are all positive. CrvCmpVal is the greater than CrvRowLo.
                                      ;   Now see if CrvRowHi is greater than CrvCmpVal. If it is, we have the index number,
                                      ;   if it is not, loop back to increment to the next bin and check again.
                                      ;*****************************************************************************************
00609D 7F609D FE 10 2F                    ldx  CrvRowHi     ; Curve row high boundary -> X
0060A0 7F60A0 BE 10 2B                    cpx  CrvCmpVal    ; Compare curve curve row high boundary with curve compare value
0060A3 7F60A3 24 08                       bhs  GotNumPos    ; If contents of incremented row bin is greater than or equal to
                                                            ; curve compareson value then branch to GotNumPos:
0060A5 7F60A5 B6 10 2E                    ldaa IndexNum     ; Incremented position in the row or column of the curve comparison
                                                            ; value for interpolation -> A
0060A8 7F60A8 B1 10 2D                    cmpa CrvBinCnt    ; Compare Incremented position in the row or column of the curve
                                                            ; comparison value for interpolation with number of bins in the curve
                                                            ; row or column minus 1
0060AB 7F60AB 26 D6                       bne  ReEntCrvPos  ; If (A)-(M) if IndexNum does not = CrvBinCnt then branch to
                                                            ; ReEntCrvPos:
0060AD 7F60AD                         GotNumPos:
                                      ;*****************************************************************************************
                                      ; - CrvRowLo, CrvCmpVal and CrvRowHi are all positive. CrvCmpVal is the greater than
                                      ;   CrvRowLo. CrvRowHi is greater than or equal to CrvCmpVal so we must have our index
                                      ;   number.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Using the index number determine the column high and low boundary values
                                      ;*****************************************************************************************
0060AD 7F60AD MACRO                      COL_BOUNDARYS     ; Macro this module
                                                            ; for interpolation (start with zero)                      (COL_BOUNDARYS)
                                      ;***************************************************************************************** (COL_BOUNDARYS)
                                      ; - Using the index number determine the column high and low boundary values     (COL_BOUNDARYS)
                                      ;***************************************************************************************** (COL_BOUNDARYS)
0060AD 7F60AD FE 10 29                    ldx  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
0060B0 7F60B0 F6 10 2E                    ldab IndexNum     ; IndexNum -> B                                            (COL_BOUNDARYS)
0060B3 7F60B3 1A E5                       abx               ;(B)+(X)->X Pointer to indexed column bin                  (COL_BOUNDARYS)
0060B5 7F60B5 7E 10 29                    stx  CrvColOfst   ; Result to CrvColOfst (now points to indexed column bin)  (COL_BOUNDARYS)
0060B8 7F60B8 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (COL_BOUNDARYS)
0060BB 7F60BB FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
0060BE 7F60BE 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (COL_BOUNDARYS)
0060C0 7F60C0 18 05 EE 10 33              movw D,Y,CrvColHi ; Copy to curve column high boundry value for interpolation (COL_BOUNDARYS)
0060C5 7F60C5 18 73 10 29                 decw CrvColOfst   ; Decrement offset from the curve page to the curve column (COL_BOUNDARYS)
0060C9 7F60C9 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (COL_BOUNDARYS)
0060CC 7F60CC FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
0060CF 7F60CF 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (COL_BOUNDARYS)
0060D1 7F60D1 18 05 EE 10 35              movw D,Y,CrvColLo ; Copy to curve column low boundry value for interpolation (COL_BOUNDARYS)
0060D6 7F60D6 FC 10 35                    ldd  CrvColLo     ; CrvColLo -> D                                            (COL_BOUNDARYS)
                                      ;*****************************************************************************************
                                      ; - Do the interpolation or rail high and exit subroutine
                                      ;*****************************************************************************************
0060D9 7F60D9 MACRO                      CRV_INTERP       ; Macro this module
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Do the interpolation or rail high and exit subroutine                        (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
0060D9 7F60D9 FE 10 2B                    ldx  CrvCmpVal    ; Curve row comparison value -> X                          (CRV_INTERP)
0060DC 7F60DC BE 10 2F                    cpx  CrvRowHi     ; Compare row comparison value with curve row high boundry value (CRV_INTERP)
0060DF 7F60DF 25 04                       blo  DoInterp     ; If Curve row comparison value is < curve row high boundry value (CRV_INTERP)
                                                            ; branch to DoInterp:                                      (CRV_INTERP)
0060E1 7F60E1 FC 10 33                    ldd  CrvColHi     ; Curve column high boundry value -> D (result railed high) (CRV_INTERP)
0060E4 7F60E4 3D                          rts               ; Return from subroutine (CrvCmpVal is equal to or higher than (CRV_INTERP)
                                                            ; CrvRowHi so no need to interpolate. Rail high with CrvColHi in D (CRV_INTERP)
0060E5 7F60E5                         DoInterp:                                                                        (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Save interpolation values to stack                                           (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
0060E5 7F60E5 FE 10 2B                    ldx  CrvCmpVal    ; Curve row comparison value -> X                          (CRV_INTERP)
0060E8 7F60E8 34                          pshx              ; Save to stack                                            (CRV_INTERP)
0060E9 7F60E9 FE 10 2F                    ldx  CrvRowHi     ; Curve row high boundry value -> X                        (CRV_INTERP)
0060EC 7F60EC 34                          pshx              ; Save to stack                                            (CRV_INTERP)
0060ED 7F60ED FE 10 31                    ldx  CrvRowLo     ; Curve row low boundry value -> X                         (CRV_INTERP)
0060F0 7F60F0 34                          pshx              ; Save to stack                                            (CRV_INTERP)
0060F1 7F60F1 FE 10 33                    ldx  CrvColHi     ; Curve column high boundry value -> X                     (CRV_INTERP)
0060F4 7F60F4 34                          pshx              ; Save to stack                                            (CRV_INTERP)
0060F5 7F60F5 FE 10 35                    ldx  CrvColLo     ; Curve column low boundry value -> X                      (CRV_INTERP)
0060F8 7F60F8 34                          pshx              ; Save to stack                                            (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | col lo boundary |  SP+ 0 ($3FF4)(Z1)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | col hi boundary |  SP+ 2 ($3FF6)(Z2)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | row lo boundary |  SP+ 4 ($3FF8)(V1)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | row hi boundary |  SP+ 6 ($3FFA)(V2)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    |    CrvCmpVal    |  SP+ 8 ($3FFC)(V)                                   (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Determine Z                                                                  (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ;                     V       V1      V2      Z1     Z2                          (CRV_INTERP)
0060F9 7F60F9 MACRO                                   2D_IPOL (8,SP), (4,SP), (6,SP), (0,SP), (2,SP)                   (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CRV_INTERP/2D_IPOL)
                                      ; ==========================                                                     (CRV_INTERP/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CRV_INTERP/2D_IPOL)
                                      ; SSTACK: none                                                                   (CRV_INTERP/2D_IPOL)
                                      ;         no registers are preserved                                             (CRV_INTERP/2D_IPOL)
                                      ;                                                                                (CRV_INTERP/2D_IPOL)
                                      ;    ^ V                                                                         (CRV_INTERP/2D_IPOL)
                                      ;    |                                                                           (CRV_INTERP/2D_IPOL)
                                      ;  Z2+....................*                                                      (CRV_INTERP/2D_IPOL)
                                      ;    |                    :                                                      (CRV_INTERP/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CRV_INTERP/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CRV_INTERP/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CRV_INTERP/2D_IPOL)
                                      ;    |   :       :        :                                                      (CRV_INTERP/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CRV_INTERP/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CRV_INTERP/2D_IPOL)
                                      ;                                                                                (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
0060F9 7F60F9 EC 88                                   LDD       \1    ; load V                                         (CRV_INTERP/2D_IPOL)
0060FB 7F60FB A3 84                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CRV_INTERP/2D_IPOL)
0060FD 7F60FD B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
0060FF 7F60FF EC 82                                   LDD       \5    ; load Z2                                        (CRV_INTERP/2D_IPOL)
006101 7F6101 A3 80                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
006103 7F6103 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CRV_INTERP/2D_IPOL)
006105 7F6105 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
006107 7F6107 EC 86                                   LDD       \3    ; load V2                                        (CRV_INTERP/2D_IPOL)
006109 7F6109 A3 84                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CRV_INTERP/2D_IPOL)
00610B 7F610B B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CRV_INTERP/2D_IPOL)
                                      ;*********************************************************************           (CRV_INTERP/2D_IPOL)
00610D 7F610D 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CRV_INTERP/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CRV_INTERP/2D_IPOL)
00610F 7F610F B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
006111 7F6111 E3 80                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Free stack space (result in D)                                               (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
006113 7F6113 1B 88                       leas 8,SP   ; Stack pointer -> bottom of stack                               (CRV_INTERP)
006115 7F6115 30                          pulx        ; Pull index register X from stack                               (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Done (result in D)                                                           (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
006116 7F6116 3D                         rts   ; Return from subroutine                                                (CRV_INTERP)
                                      ;*****************************************************************************************
006117 7F6117 -> $6117                CRV_LU_NP:   EQU        *
                                      ;*****************************************************************************************
                                      ; - This subroutine calculates the interpolated value of a 2D curve with an X axis that
                                      ;   starts with negative values and ends with positive values. The X axis MUST have
                                      ;   -0.2 (65534) and +0.2 (2) together some place in the row for the code to work.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - First, determine the position in the row of the comparison value for
                                      ;   interpolation (IndexNum). Position in the column will be the same as the position
                                      ;   in the row. Determine the row high and low boundary values.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Set up the process to find the interpolated curve value by determining the values
                                      ;   of the first bins in the row and column. Clear the index number variable.
                                      ;*****************************************************************************************
006117 7F6117 MACRO                       CRV_SETUP       ; Macro this module
                                      ;***************************************************************************************** (CRV_SETUP)
                                      ; - Set up the process to find the interpolated curve value by determining the values (CRV_SETUP)
                                      ;   of the first bins in the row and column. Clear the index number variable.    (CRV_SETUP)
                                      ;***************************************************************************************** (CRV_SETUP)
006117 7F6117 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (CRV_SETUP)
00611A 7F611A FC 10 27                    ldd  CrvRowOfst   ; Offset from the curve page to the curve row -> D         (CRV_SETUP)
00611D 7F611D 19 EE                       leay D,Y          ; Curve row pointer -> Y                                   (CRV_SETUP)
00611F 7F611F 18 05 EE 10 31              movw D,Y,CrvRowLo ; Copy to curve row low boundry value for interpolation    (CRV_SETUP)
006124 7F6124 18 05 EE 10 2F              movw D,Y,CrvRowHi ; Copy to curve row high boundry value for interpolation   (CRV_SETUP)
                                                            ; (start with low and high row bin values equal            (CRV_SETUP)
006129 7F6129 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (CRV_SETUP)
00612C 7F612C FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (CRV_SETUP)
00612F 7F612F 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (CRV_SETUP)
006131 7F6131 18 05 EE 10 35              movw D,Y,CrvColLo ; Copy to curve row column boundry value for interpolation (CRV_SETUP)
006136 7F6136 18 05 EE 10 33              movw D,Y,CrvColHi ; Copy to curve column high boundry value for interpolation (CRV_SETUP)
                                                            ; (start with low and high column bin values equal         (CRV_SETUP)
00613B 7F613B 79 10 2E                    clr   IndexNum    ; Position in the row or column of the curve comparison value (CRV_SETUP)
                                      ;*****************************************************************************************
                                      ; - CrvRowLo is negative. Now check CrvCmpVal for negative number.
                                      ;*****************************************************************************************
00613E 7F613E FE 10 2B                    ldx  CrvCmpVal    ; Curve comparison value -> X
006141 7F6141 18 84 80 00                 andx #$8000       ; Logical AND X with %1000 0000 0000 0000 (CCR N bit set of MSB of
                                                            ; result is set)
006145 7F6145 2B 03                       bmi  CmpValNeg    ; If N bit of CCR is set, branch to CmpValNeg:
                                                            ;(CrvCmpVal is negative)
006147 7F6147 06 61 EB                    job  CmpValPos    ; Jump or branch to CmpValPos: (CrvCmpVal is positive)
00614A 7F614A                         CmpValNeg:
                                      ;*****************************************************************************************
                                      ; - Both CrvRowLo and CrvCmpVal are negative. Now see if CrvCmpVal is the same or less than
                                      ;   than CrvRowLo. If it is, rail low at the value of the first column bin. If it is not,
                                      ;   it must be greater than CrvRowLo, so loop back to do the next iteration.
                                      ;*****************************************************************************************
00614A 7F614A FE 10 2B                    ldx  CrvCmpVal    ; Curve compare value -> X
00614D 7F614D BE 10 31                    cpx  CrvRowLo     ; Compare curve compare value with curve low boundary
006150 7F6150 23 02                       bls  RailLowNeg   ; If CrvCmpVal is the same or less than CrvRowLo branch to RailLowNeg:
006152 7F6152 20 04                       bra  ReEntCrvNeg1 ; Branch to ReEntCrvNeg1:
006154 7F6154                         RailLowNeg:
006154 7F6154 FC 10 35                    ldd  CrvColLo    ; Curve column low boundary value -> D
006157 7F6157 3D                          rts              ; Return from subroutine(Rail low with CrvColLo in Accur D,
                                                           ; no interpolation required)
                                      ;*****************************************************************************************
                                      ; - Both CrvRowLo and CrvCmpVal are negative. CrvCmpVal is the greater than CrvRowLo.
                                      ;   Determine the value of CrvRowHi
                                      ;*****************************************************************************************
006158 7F6158                         ReEntCrvNeg1:
006158 7F6158 72 10 2E                    inc  IndexNum     ; Increment position in the row or column of the curve comparison
                                                            ; value
00615B 7F615B 18 04 10 2F 10 31           movw CrvRowHi,CrvRowLo ; Curve row high boundry value -> curve row low boundry value
006161 7F6161 18 72 10 27                 incw CrvRowOfst   ; Increment Offset from the curve page to the curve row
006165 7F6165 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y
006168 7F6168 FC 10 27                    ldd  CrvRowOfst   ; Incremented offset from the curve page to the curve row -> D
00616B 7F616B 19 EE                       leay D,Y          ; Curve row pointer -> Y
00616D 7F616D 18 05 EE 10 2F              movw D,Y,CrvRowHi ; Copy to curve row high boundry value for interpolation
                                                            ; (holds the contents of the incremented row bin)
006172 7F6172                         RowHiNeg1:
                                      ;*****************************************************************************************
                                      ; - CrvRowLo, CrvRowHi and CrvCmpVal are all negative. CrvCmpVal is the greater than
                                      ;   CrvRowLo. Now see if CrvRowHi is greater than CrvCmpVal. If it is, we have the index
                                      ;   number, if it is not, loop back to increment to the next bin and check again.
                                      ;*****************************************************************************************
006172 7F6172 EE EE                       ldx  D,Y          ; Contents of incremented row bin -> X
006174 7F6174 BE 10 2B                    cpx  CrvCmpVal    ; Compare Contents of incremented row bin with curve comparison value
006177 7F6177 24 08                       bhs  RowHiNeg2    ; If contents of incremented row bin is greater than or equal to
                                                            ; curve compareson value then branch to RowHiNeg2:
006179 7F6179 B6 10 2E                    ldaa IndexNum     ; Incremented position in the row or column of the curve comparison
                                                            ; value for interpolation -> A
00617C 7F617C B1 10 2D                    cmpa CrvBinCnt    ; Compare Incremented position in the row or column of the curve
                                                            ; comparison value for interpolation with number of bins in the curve
                                                            ; row or column minus 1
00617F 7F617F 26 D7                       bne  ReEntCrvNeg1 ; If (A)-(M) if IndexNum does not = CrvBinCnt then branch to
                                                            ; ReEntCrvNeg1:
006181 7F6181                         RowHiNeg2:
                                      ;*****************************************************************************************
                                      ; - Using the index number determine the column high and low boundary values
                                      ;*****************************************************************************************
006181 7F6181 MACRO                      COL_BOUNDARYS     ; Macro this module
                                                            ; for interpolation (start with zero)                      (COL_BOUNDARYS)
                                      ;***************************************************************************************** (COL_BOUNDARYS)
                                      ; - Using the index number determine the column high and low boundary values     (COL_BOUNDARYS)
                                      ;***************************************************************************************** (COL_BOUNDARYS)
006181 7F6181 FE 10 29                    ldx  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
006184 7F6184 F6 10 2E                    ldab IndexNum     ; IndexNum -> B                                            (COL_BOUNDARYS)
006187 7F6187 1A E5                       abx               ;(B)+(X)->X Pointer to indexed column bin                  (COL_BOUNDARYS)
006189 7F6189 7E 10 29                    stx  CrvColOfst   ; Result to CrvColOfst (now points to indexed column bin)  (COL_BOUNDARYS)
00618C 7F618C FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (COL_BOUNDARYS)
00618F 7F618F FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
006192 7F6192 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (COL_BOUNDARYS)
006194 7F6194 18 05 EE 10 33              movw D,Y,CrvColHi ; Copy to curve column high boundry value for interpolation (COL_BOUNDARYS)
006199 7F6199 18 73 10 29                 decw CrvColOfst   ; Decrement offset from the curve page to the curve column (COL_BOUNDARYS)
00619D 7F619D FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (COL_BOUNDARYS)
0061A0 7F61A0 FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
0061A3 7F61A3 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (COL_BOUNDARYS)
0061A5 7F61A5 18 05 EE 10 35              movw D,Y,CrvColLo ; Copy to curve column low boundry value for interpolation (COL_BOUNDARYS)
0061AA 7F61AA FC 10 35                    ldd  CrvColLo     ; CrvColLo -> D                                            (COL_BOUNDARYS)
                                      ;*****************************************************************************************
                                      ; - Do the interpolation or rail high and exit subroutine
                                      ;*****************************************************************************************
0061AD 7F61AD MACRO                      CRV_INTERP       ; Macro this module
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Do the interpolation or rail high and exit subroutine                        (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
0061AD 7F61AD FE 10 2B                    ldx  CrvCmpVal    ; Curve row comparison value -> X                          (CRV_INTERP)
0061B0 7F61B0 BE 10 2F                    cpx  CrvRowHi     ; Compare row comparison value with curve row high boundry value (CRV_INTERP)
0061B3 7F61B3 25 04                       blo  DoInterp     ; If Curve row comparison value is < curve row high boundry value (CRV_INTERP)
                                                            ; branch to DoInterp:                                      (CRV_INTERP)
0061B5 7F61B5 FC 10 33                    ldd  CrvColHi     ; Curve column high boundry value -> D (result railed high) (CRV_INTERP)
0061B8 7F61B8 3D                          rts               ; Return from subroutine (CrvCmpVal is equal to or higher than (CRV_INTERP)
                                                            ; CrvRowHi so no need to interpolate. Rail high with CrvColHi in D (CRV_INTERP)
0061B9 7F61B9                         DoInterp:                                                                        (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Save interpolation values to stack                                           (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
0061B9 7F61B9 FE 10 2B                    ldx  CrvCmpVal    ; Curve row comparison value -> X                          (CRV_INTERP)
0061BC 7F61BC 34                          pshx              ; Save to stack                                            (CRV_INTERP)
0061BD 7F61BD FE 10 2F                    ldx  CrvRowHi     ; Curve row high boundry value -> X                        (CRV_INTERP)
0061C0 7F61C0 34                          pshx              ; Save to stack                                            (CRV_INTERP)
0061C1 7F61C1 FE 10 31                    ldx  CrvRowLo     ; Curve row low boundry value -> X                         (CRV_INTERP)
0061C4 7F61C4 34                          pshx              ; Save to stack                                            (CRV_INTERP)
0061C5 7F61C5 FE 10 33                    ldx  CrvColHi     ; Curve column high boundry value -> X                     (CRV_INTERP)
0061C8 7F61C8 34                          pshx              ; Save to stack                                            (CRV_INTERP)
0061C9 7F61C9 FE 10 35                    ldx  CrvColLo     ; Curve column low boundry value -> X                      (CRV_INTERP)
0061CC 7F61CC 34                          pshx              ; Save to stack                                            (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | col lo boundary |  SP+ 0 ($3FF4)(Z1)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | col hi boundary |  SP+ 2 ($3FF6)(Z2)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | row lo boundary |  SP+ 4 ($3FF8)(V1)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | row hi boundary |  SP+ 6 ($3FFA)(V2)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    |    CrvCmpVal    |  SP+ 8 ($3FFC)(V)                                   (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Determine Z                                                                  (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ;                     V       V1      V2      Z1     Z2                          (CRV_INTERP)
0061CD 7F61CD MACRO                                   2D_IPOL (8,SP), (4,SP), (6,SP), (0,SP), (2,SP)                   (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CRV_INTERP/2D_IPOL)
                                      ; ==========================                                                     (CRV_INTERP/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CRV_INTERP/2D_IPOL)
                                      ; SSTACK: none                                                                   (CRV_INTERP/2D_IPOL)
                                      ;         no registers are preserved                                             (CRV_INTERP/2D_IPOL)
                                      ;                                                                                (CRV_INTERP/2D_IPOL)
                                      ;    ^ V                                                                         (CRV_INTERP/2D_IPOL)
                                      ;    |                                                                           (CRV_INTERP/2D_IPOL)
                                      ;  Z2+....................*                                                      (CRV_INTERP/2D_IPOL)
                                      ;    |                    :                                                      (CRV_INTERP/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CRV_INTERP/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CRV_INTERP/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CRV_INTERP/2D_IPOL)
                                      ;    |   :       :        :                                                      (CRV_INTERP/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CRV_INTERP/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CRV_INTERP/2D_IPOL)
                                      ;                                                                                (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
0061CD 7F61CD EC 88                                   LDD       \1    ; load V                                         (CRV_INTERP/2D_IPOL)
0061CF 7F61CF A3 84                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CRV_INTERP/2D_IPOL)
0061D1 7F61D1 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
0061D3 7F61D3 EC 82                                   LDD       \5    ; load Z2                                        (CRV_INTERP/2D_IPOL)
0061D5 7F61D5 A3 80                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
0061D7 7F61D7 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CRV_INTERP/2D_IPOL)
0061D9 7F61D9 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
0061DB 7F61DB EC 86                                   LDD       \3    ; load V2                                        (CRV_INTERP/2D_IPOL)
0061DD 7F61DD A3 84                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CRV_INTERP/2D_IPOL)
0061DF 7F61DF B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CRV_INTERP/2D_IPOL)
                                      ;*********************************************************************           (CRV_INTERP/2D_IPOL)
0061E1 7F61E1 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CRV_INTERP/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CRV_INTERP/2D_IPOL)
0061E3 7F61E3 B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
0061E5 7F61E5 E3 80                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Free stack space (result in D)                                               (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
0061E7 7F61E7 1B 88                       leas 8,SP   ; Stack pointer -> bottom of stack                               (CRV_INTERP)
0061E9 7F61E9 30                          pulx        ; Pull index register X from stack                               (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Done (result in D)                                                           (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
0061EA 7F61EA 3D                         rts   ; Return from subroutine                                                (CRV_INTERP)
                                      ;**************************************************************************************
0061EB 7F61EB                         CmpValPos:
                                      ;*****************************************************************************************
                                      ; - CrvCmpVal is positive. Starting at the beginning of the row, loop through until the
                                      ;   first positive value is found.
                                      ;*****************************************************************************************
0061EB 7F61EB                         PosFind:
0061EB 7F61EB 72 10 2E                    inc  IndexNum     ; Increment position in the row or column of the curve comparison
                                                            ; value
0061EE 7F61EE 18 04 10 2F 10 31           movw CrvRowHi,CrvRowLo ; Curve row high boundry value -> curve row low boundry value
0061F4 7F61F4 18 72 10 27                 incw CrvRowOfst   ; Increment Offset from the curve page to the curve row
0061F8 7F61F8 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y
0061FB 7F61FB FC 10 27                    ldd  CrvRowOfst   ; Incremented offset from the curve page to the curve row -> D
0061FE 7F61FE 19 EE                       leay D,Y          ; Curve row pointer -> Y
006200 7F6200 18 05 EE 10 2F              movw D,Y,CrvRowHi ; Copy to curve row high boundry value for interpolation
                                                            ; (holds the contents of the incremented row bin)
006205 7F6205 FE 10 2F                    ldx  CrvRowHi     ; Curve row high boundry value -> X
006208 7F6208 18 84 80 00                 andx #$8000       ; Logical AND X with %1000 0000 0000 0000 (CCR N bit set of MSB of
                                                            ; result is set)
00620C 7F620C 2B DD                       bmi  PosFind      ; If N bit of CCR is set, branch to PosFind: (CrvRowHi is negative
                                                            ; so loop back until the first positive value is found)
                                      ;*****************************************************************************************
                                      ; - CrvCmpVal is positive. We have found the first positive row value so all other row
                                      ;   values will be positive.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Both CrvRowLo and CrvCmpVal are positive. CrvCmpVal is the greater than CrvRowLo.
                                      ;   Determine the value of CrvRowHi
                                      ;*****************************************************************************************
00620E 7F620E                         ReEntCrvPos1:
00620E 7F620E 72 10 2E                    inc  IndexNum     ; Increment position in the row or column of the curve comparison
                                                            ; value
006211 7F6211 18 04 10 2F 10 31           movw CrvRowHi,CrvRowLo ; Curve row high boundry value -> curve row low boundry value
006217 7F6217 18 72 10 27                 incw CrvRowOfst   ; Increment Offset from the curve page to the curve row
00621B 7F621B FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y
00621E 7F621E FC 10 27                    ldd  CrvRowOfst   ; Incremented offset from the curve page to the curve row -> D
006221 7F6221 19 EE                       leay D,Y          ; Curve row pointer -> Y
006223 7F6223 18 05 EE 10 2F              movw D,Y,CrvRowHi ; Copy to curve row high boundry value for interpolation
                                                            ; (holds the contents of the incremented row bin)
                                      ;*****************************************************************************************
                                      ; - CrvRowLo, CrvCmpVal and CrvRowHi are all positive. CrvCmpVal is the greater than CrvRowLo.
                                      ;   Now see if CrvRowHi is greater than CrvCmpVal. If it is, we have the index number,
                                      ;   if it is not, loop back to increment to the next bin and check again.
                                      ;*****************************************************************************************
006228 7F6228 FE 10 2F                    ldx  CrvRowHi     ; Curve row high boundary -> X
00622B 7F622B BE 10 2B                    cpx  CrvCmpVal    ; Compare curve curve row high boundary with curve compare value
00622E 7F622E 24 08                       bhs  GotNumPos1    ; If contents of incremented row bin is greater than or equal to
                                                            ; curve compareson value then branch to GotNumPos:
006230 7F6230 B6 10 2E                    ldaa IndexNum     ; Incremented position in the row or column of the curve comparison
                                                            ; value for interpolation -> A
006233 7F6233 B1 10 2D                    cmpa CrvBinCnt    ; Compare Incremented position in the row or column of the curve
                                                            ; comparison value for interpolation with number of bins in the curve
                                                            ; row or column minus 1
006236 7F6236 26 D6                       bne  ReEntCrvPos1  ; If (A)-(M) if IndexNum does not = CrvBinCnt then branch to
                                                            ; ReEntCrvPos1:
006238 7F6238                         GotNumPos1:
                                      ;*****************************************************************************************
                                      ; - CrvRowLo, CrvCmpVal and CrvRowHi are all positive. CrvCmpVal is the greater than
                                      ;   CrvRowLo. CrvRowHi is greater than or equal to CrvCmpVal so we must have our index
                                      ;   number.
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Using the index number determine the column high and low boundary values
                                      ;*****************************************************************************************
006238 7F6238 MACRO                      COL_BOUNDARYS     ; Macro this module
                                                            ; for interpolation (start with zero)                      (COL_BOUNDARYS)
                                      ;***************************************************************************************** (COL_BOUNDARYS)
                                      ; - Using the index number determine the column high and low boundary values     (COL_BOUNDARYS)
                                      ;***************************************************************************************** (COL_BOUNDARYS)
006238 7F6238 FE 10 29                    ldx  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
00623B 7F623B F6 10 2E                    ldab IndexNum     ; IndexNum -> B                                            (COL_BOUNDARYS)
00623E 7F623E 1A E5                       abx               ;(B)+(X)->X Pointer to indexed column bin                  (COL_BOUNDARYS)
006240 7F6240 7E 10 29                    stx  CrvColOfst   ; Result to CrvColOfst (now points to indexed column bin)  (COL_BOUNDARYS)
006243 7F6243 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (COL_BOUNDARYS)
006246 7F6246 FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
006249 7F6249 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (COL_BOUNDARYS)
00624B 7F624B 18 05 EE 10 33              movw D,Y,CrvColHi ; Copy to curve column high boundry value for interpolation (COL_BOUNDARYS)
006250 7F6250 18 73 10 29                 decw CrvColOfst   ; Decrement offset from the curve page to the curve column (COL_BOUNDARYS)
006254 7F6254 FD 10 25                    ldy  CrvPgPtr     ; Pointer to the page where the desired curve resides -> Y (COL_BOUNDARYS)
006257 7F6257 FC 10 29                    ldd  CrvColOfst   ; Offset from the curve page to the curve column -> D      (COL_BOUNDARYS)
00625A 7F625A 19 EE                       leay D,Y          ; Curve column pointer -> Y                                (COL_BOUNDARYS)
00625C 7F625C 18 05 EE 10 35              movw D,Y,CrvColLo ; Copy to curve column low boundry value for interpolation (COL_BOUNDARYS)
006261 7F6261 FC 10 35                    ldd  CrvColLo     ; CrvColLo -> D                                            (COL_BOUNDARYS)
                                      ;*****************************************************************************************
                                      ; - Do the interpolation or rail high and exit subroutine
                                      ;*****************************************************************************************
006264 7F6264 MACRO                      CRV_INTERP       ; Macro this module
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Do the interpolation or rail high and exit subroutine                        (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
006264 7F6264 FE 10 2B                    ldx  CrvCmpVal    ; Curve row comparison value -> X                          (CRV_INTERP)
006267 7F6267 BE 10 2F                    cpx  CrvRowHi     ; Compare row comparison value with curve row high boundry value (CRV_INTERP)
00626A 7F626A 25 04                       blo  DoInterp     ; If Curve row comparison value is < curve row high boundry value (CRV_INTERP)
                                                            ; branch to DoInterp:                                      (CRV_INTERP)
00626C 7F626C FC 10 33                    ldd  CrvColHi     ; Curve column high boundry value -> D (result railed high) (CRV_INTERP)
00626F 7F626F 3D                          rts               ; Return from subroutine (CrvCmpVal is equal to or higher than (CRV_INTERP)
                                                            ; CrvRowHi so no need to interpolate. Rail high with CrvColHi in D (CRV_INTERP)
006270 7F6270                         DoInterp:                                                                        (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Save interpolation values to stack                                           (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
006270 7F6270 FE 10 2B                    ldx  CrvCmpVal    ; Curve row comparison value -> X                          (CRV_INTERP)
006273 7F6273 34                          pshx              ; Save to stack                                            (CRV_INTERP)
006274 7F6274 FE 10 2F                    ldx  CrvRowHi     ; Curve row high boundry value -> X                        (CRV_INTERP)
006277 7F6277 34                          pshx              ; Save to stack                                            (CRV_INTERP)
006278 7F6278 FE 10 31                    ldx  CrvRowLo     ; Curve row low boundry value -> X                         (CRV_INTERP)
00627B 7F627B 34                          pshx              ; Save to stack                                            (CRV_INTERP)
00627C 7F627C FE 10 33                    ldx  CrvColHi     ; Curve column high boundry value -> X                     (CRV_INTERP)
00627F 7F627F 34                          pshx              ; Save to stack                                            (CRV_INTERP)
006280 7F6280 FE 10 35                    ldx  CrvColLo     ; Curve column low boundry value -> X                      (CRV_INTERP)
006283 7F6283 34                          pshx              ; Save to stack                                            (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | col lo boundary |  SP+ 0 ($3FF4)(Z1)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | col hi boundary |  SP+ 2 ($3FF6)(Z2)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | row lo boundary |  SP+ 4 ($3FF8)(V1)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    | row hi boundary |  SP+ 6 ($3FFA)(V2)                                  (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                          ;    |    CrvCmpVal    |  SP+ 8 ($3FFC)(V)                                   (CRV_INTERP)
                                          ;    +--------+--------+                                                     (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Determine Z                                                                  (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ;                     V       V1      V2      Z1     Z2                          (CRV_INTERP)
006284 7F6284 MACRO                                   2D_IPOL (8,SP), (4,SP), (6,SP), (0,SP), (2,SP)                   (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;#Perform a 2D interpolation                                                     (CRV_INTERP/2D_IPOL)
                                      ; ==========================                                                     (CRV_INTERP/2D_IPOL)
                                      ; args:   1: V  pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         2: V1 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         3: V2 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         4: Z1 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ;         5: Z2 pointer (effective address)                                      (CRV_INTERP/2D_IPOL)
                                      ; result: D: interpolated result                                                 (CRV_INTERP/2D_IPOL)
                                      ; SSTACK: none                                                                   (CRV_INTERP/2D_IPOL)
                                      ;         no registers are preserved                                             (CRV_INTERP/2D_IPOL)
                                      ;                                                                                (CRV_INTERP/2D_IPOL)
                                      ;    ^ V                                                                         (CRV_INTERP/2D_IPOL)
                                      ;    |                                                                           (CRV_INTERP/2D_IPOL)
                                      ;  Z2+....................*                                                      (CRV_INTERP/2D_IPOL)
                                      ;    |                    :                                                      (CRV_INTERP/2D_IPOL)
                                      ;   Z+...........*        :                 (V-V1)*(Z2-Z1)                       (CRV_INTERP/2D_IPOL)
                                      ;    |           :        :        Z = Z1 + --------------                       (CRV_INTERP/2D_IPOL)
                                      ;  Z1+...*       :        :                    (V2-V1)                           (CRV_INTERP/2D_IPOL)
                                      ;    |   :       :        :                                                      (CRV_INTERP/2D_IPOL)
                                      ;   -+---+-------+--------+---> K                                                (CRV_INTERP/2D_IPOL)
                                      ;    |   V1      V        V2                                                     (CRV_INTERP/2D_IPOL)
                                      ;                                                                                (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V-V1)                                                             (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
006284 7F6284 EC 88                                   LDD       \1    ; load V                                         (CRV_INTERP/2D_IPOL)
006286 7F6286 A3 84                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CRV_INTERP/2D_IPOL)
006288 7F6288 B7 46                                   TFR       D,Y   ; (V-V1) -> index Y                              (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (Z2-Z1)                                                            (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
00628A 7F628A EC 82                                   LDD       \5    ; load Z2                                        (CRV_INTERP/2D_IPOL)
00628C 7F628C A3 80                                   SUBD  \4    ; (A:B)-(M:M+1)->A:B Subtract Z1                     (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V-V1)*(Z2-Z1)                                                     (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
00628E 7F628E 18 13                                   EMULS      ; (D)x(Y)->Y:D Multiply intermediate results -> Y:D   (CRV_INTERP/2D_IPOL)
006290 7F6290 B7 45                                   TFR       D,X  ; (V-V1)*(Z2-Z1) -> Y:X                           (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate (V2-V1)                                                            (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
006292 7F6292 EC 86                                   LDD       \3    ; load V2                                        (CRV_INTERP/2D_IPOL)
006294 7F6294 A3 84                                   SUBD  \2    ; (A:B)-(M:M+1)->A:B Subtract V1                     (CRV_INTERP/2D_IPOL)
006296 7F6296 B7 C5                                   EXG       D,X   ; (V2-V1) -> index X, (V-V1)*(Z2-Z1) -> Y:D      (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ;* - Calculate ((V-V1)*(Z2-Z1))/(V2-V1)                                          (CRV_INTERP/2D_IPOL)
                                      ;*********************************************************************           (CRV_INTERP/2D_IPOL)
006298 7F6298 18 14                                   EDIVS       ; (Y:D)/(X)->Y;Remainder->D                          (CRV_INTERP/2D_IPOL)
                                                          ; divide intermediate results -> index Y                     (CRV_INTERP/2D_IPOL)
00629A 7F629A B7 64                                   TFR       Y,D   ; (V-V1)*(Z2-Z1)/(V2-V1) -> D                    (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
                                      ; - Calculate Z1+(((Z1 +((V-V1))*(Z2-Z1))/(V2-V1))                               (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP/2D_IPOL)
00629C 7F629C E3 80                                   ADDD  \4        ; (A:B)+(M:M+1)->A:B Add Z1                      (CRV_INTERP/2D_IPOL)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Free stack space (result in D)                                               (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
00629E 7F629E 1B 88                       leas 8,SP   ; Stack pointer -> bottom of stack                               (CRV_INTERP)
0062A0 7F62A0 30                          pulx        ; Pull index register X from stack                               (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
                                      ; - Done (result in D)                                                           (CRV_INTERP)
                                      ;***************************************************************************************** (CRV_INTERP)
0062A1 7F62A1 3D                         rts   ; Return from subroutine                                                (CRV_INTERP)
                                      ;*****************************************************************************************
0062A2 7F62A2 -> $62A2                INTERP_CODE_END         EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
0062A2 7F62A2 -> $7F62A2              INTERP_CODE_END_LIN     EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006D67 7F6D67                                                 ORG     INTERP_TABS_START, INTERP_TABS_START_LIN
006D67 7F6D67 -> $7F6D67              INTERP_TABS_START_LIN   EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006D67 7F6D67 -> $6D67                INTERP_TABS_END         EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006D67 7F6D67 -> $7F6D67              INTERP_TABS_END_LIN     EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (igncalcs_BPEM488.s)                                                       *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module contains code for for the ignition timing calculations                 *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing (This module)                *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 13, 2020                                                                       *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006D67 7F6D67 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001037 0FD037                                     ORG     IGNCALCS_VARS_START, IGNCALCS_VARS_START_LIN
001037 0FD037 -> $FD037               IGNCALCS_VARS_START_LIN EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - RS232 variables variables used in this module (declared  in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;Mapx10:         ds 2 ; Manifold Absolute Pressure (KPAx10)
                                      ;Itrmx10:        ds 2 ; Ignition Trim (degrees x 10)+-20 degrees)
                                      ;RPM:            ds 2 ; Crankshaft Revolutions Per Minute
                                      ;STcurr:         ds 2 ; Current value in ST table (Degrees x 10)
                                      ;DwellCor:       ds 2 ; Coil dwell voltage correction (%*10)
                                      ;DwellFin:       ds 2 ; ("Dwell" * "DwellCor") (mS*10)
                                      ;STandItrmx10:   ds 2 ; STcurr and Itmx10 (degrees*10)
                                      ;*****************************************************************************************
                                      ; - Non RS232 variables used in this module (declared in state_BPEM488.s
                                      ;*****************************************************************************************
                                      ;Degx10tk512:    ds 2 ;(Time for 1 degree of rotation in 5.12uS resolution x 10)
                                      ;Degx10tk256:    ds 2 ; (Time for 1 degree of rotation in 2.56uS resolution x 10)
                                      ;*****************************************************************************************
                                      ; - Non RS232 variables used in this module declared in this module
                                      ;*****************************************************************************************
001037 0FD037                         Spantk:         ds 2 ; Ignition Span time (5.12uS or 2.56uS res)
001039 0FD039                         DwellFintk:     ds 2 ; Time required for dwell after correction (5.12uS or 2.56uS res)
00103B 0FD03B                         STandItrmtk:    ds 2 ; STcurr and Itmx10 (5.12uS or 2.56uS res)
00103D 0FD03D                         Advancetk:      ds 2 ; Delay time for desired spark advance + dwell(5.12uS or 2.56uS res)
00103F 0FD03F                         Delaytk:        ds 2 ; Delay time from crank signal to energise coil(5.12uS or 2.56uS res)
001041 0FD041                         IgnOCadd1:      ds 2 ; First ignition output compare adder (5.12uS or 2.56uS res)
001043 0FD043                         IgnOCadd2:      ds 2 ; Second ignition output compare adder(5.12uS or 2.56uS res)
                                      ;******************************************************************************************
                                      ;*****************************************************************************************
                                      ; - These configurable constants are located in BPEM488.s in page 2 starting with the
                                      ;   ST table
                                      ;*****************************************************************************************
                                      ;Dwell_F       ; 1 byte for run mode dwell time (mSec*10)(offset = 748)($02EC)
                                      ;   db $28     ; 40 = 4.0mSec
                                      ;CrnkDwell_F   ; 1 byte for crank mode dwell time (mSec*10)(offset = 749)($02ED)
                                      ;   db $3C     ; 60 = 6.0 mSec
                                      ;CrnkAdv_F     ; 1 byte for crank mode ignition advance (Deg*10)(offset = 750)($02EE)
                                      ;   db $64     ; 100 = 10.0 degrees
                                      ;*****************************************************************************************
001045 0FD045 -> $1045                IGNCALCS_VARS_END               EQU     * ; * Represents the current value of the paged
                                                                    ; program counter
001045 0FD045 -> $FD045               IGNCALCS_VARS_END_LIN   EQU     @ ; @ Represents the current value of the linear
                                                           ; This is the first OC value loaded into the timer
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
0062A2 7F62A2                                                 ORG     IGNCALCS_CODE_START, IGNCALCS_CODE_START_LIN
0062A2 7F62A2 -> $7F62A2              IGNCALCS_CODE_START_LIN EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ----------------------------- No code for this module ----------------------------------
0062A2 7F62A2 -> $62A2                IGNCALCS_CODE_END               EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
0062A2 7F62A2 -> $7F62A2              IGNCALCS_CODE_END_LIN   EQU     @     ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006D67 7F6D67                                                 ORG     IGNCALCS_TABS_START, IGNCALCS_TABS_START_LIN
006D67 7F6D67 -> $7F6D67              IGNCALCS_TABS_START_LIN EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006D67 7F6D67 -> $6D67                IGNCALCS_TABS_END               EQU     *     ; * Represents the current value of the paged
                                                                    ; program counter
006D67 7F6D67 -> $7F6D67              IGNCALCS_TABS_END_LIN   EQU     @     ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (injcalcs_BPEM488.s)                                                       *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    This module contains code for the fuel injection pulse width calculations          *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths (This module)         *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors                   *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 13, 2020                                                                       *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006D67 7F6D67 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
001045 0FD045                                     ORG     INJCALCS_VARS_START, INJCALCS_VARS_START_LIN
001045 0FD045 -> $FD045               INJCALCS_VARS_START_LIN EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ; - RS232 variables (declared in BPEM488.s)
                                      ;*****************************************************************************************
                                      ;cltAdc:       ds 2 ; RV15 10 bit ADC AN00 Engine Coolant Temperature ADC
                                      ;Mapx10:       ds 2 ; Manifold Absolute Pressure (KPAx10)
                                      ;TpsPctx10:    ds 2 ; Throttle Position Sensor % of travel(%x10)(update every 100mSec)
                                      ;RPM:          ds 2 ; Crankshaft Revolutions Per Minute
                                      ;reqFuel:      ds 2 ; Pulse width for 14.7 AFR @ 100% VE (mS x 10)
                                      ;AFRcurr:      ds 2 ; Current value in AFR table (AFR x 100)
                                      ;VEcurr:       ds 2 ; Current value in VE table (% x 10)
                                      ;barocor:      ds 2 ; Barometric Pressure Correction (% x 10)
                                      ;matcor:       ds 2 ; Manifold Air Temperature Correction (% x 10)
                                      ;WUEcor:       ds 2 ; Warmup Enrichment Correction (% x 10)(
                                      ;ASEcor:       ds 2 ; Afterstart Enrichmnet Correction (% x 10)
                                      ;WUEandASEcor  ds 2 ; the sum of WUEcor and ASEcor (% x 10)
                                      ;Crankcor:     ds 2 ; Cranking pulsewidth temperature correction (% x 10)
                                      ;TpsPctDOT:    ds 2 ; TPS difference over time (%/Sec)(update every 100mSec)
                                      ;TpsDOTcor:    ds 1 ; Throttle Opening Enrichment table value(%)
                                      ;ColdAddpct:   ds 1 ; Throttle Opening Enrichment cold adder (%)
                                      ;ColdMulpct:   ds 1 ; Throttle Opening Enrichment cold multiplier (%)
                                      ;TOEpct:       ds 1 ; Throttle Opening Enrichment (%)
                                      ;TOEpw:        ds 2 ; Throttle Opening Enrichment adder (mS x 100)
                                      ;PWlessTOE:    ds 2 ; Injector pulse width before "TOEpw" and "Deadband" (mS x 10)
                                      ;Deadband:     ds 2 ; injector deadband at current battery voltage mS*100
                                      ;PrimePW:      ds 2 ; Primer injector pulswidth (mS x 10)
                                      ;CrankPW:      ds 2 ; Cranking injector pulswidth (mS x 10)
                                      ;FDpw:         ds 2 ; Fuel Delivery pulse width (PW - Deadband) (mS x 10)
                                      ;PW:           ds 2 ; Running engine injector pulsewidth (mS x 10)
                                      ;FD:           ds 2 ; Fuel Delivery pulse width (mS)
                                      ;FDsec:        ds 2 ; Fuel delivery pulse width total over 1 second (mS)
                                      ;InjDelDegx10: ds 2 ; Injection delay from trigger to start of injection (deg x 10)
                                      ;InjPrFlo:     ds 2 ; Pair of injectors flow rate (L/hr x 100)
                                      ;CASprd256:    ds 2 ; Crankshaft Angle Sensor period (2.56uS time base
                                      ;DutyCyclex10: ds 1 ; Injector duty cycle in run mode (% x 10)
                                      ;*****************************************************************************************
                                      ; - "engine" equates
                                      ;*****************************************************************************************
                                      ;OFCdelon     equ  $01 ; %00000001, bit 0, 0 = OFC timer not counting down(Grn),
                                                                              ; 1 = OFC timer counting down(Red)
                                      ;crank        equ  $02 ; %00000010, bit 1, 0 = engine not cranking(Grn),
                                                                              ; 1 = engine cranking(Red)
                                      ;run          equ  $04 ; %00000100, bit 2, 0 = engine not running(Red),
                                                                              ; 1 = engine running(Grn)
                                      ;ASEon        equ  $08 ; %00001000, bit 3, 0 = not in start/warmup(Grn),
                                                                              ; 1 = in start/warmup(Red)
                                      ;WUEon        equ  $10 ; %00010000, bit 4, 0 = not in warmup(Grn),
                                                                              ; 1 = in warmup(Red)
                                      ;TOEon        equ  $20 ; %00100000, bit 5, 0 = not in TOE mode(Grn),
                                                                              ; 1 = TOE mode(Red)
                                      ;OFCon        equ  $40 ; %01000000, bit 6, 0 = not in OFC mode(Grn),
                                                                              ; 1 = in OFC mode(Red)
                                      ;FldClr       equ $80  ; %10000000, bit 7, 0 = not in flood clear mode(Grn),
                                                                              ; 1 = Flood clear mode(Red)
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - These configurable constants are located in BPEM488.s in page 1 starting with the
                                      ;   VE table
                                      ;*****************************************************************************************
                                      ;tpsThresh_F:       ; 2 bytes for Throttle Opening Enrichment threshold (TpsPctx10/100mS)(offset = 976)($03D0)
                                      ;    dw $01C2       ; 450 = 45% per Sec
                                      ;TOEtime_F:         ; 2 bytes for Throttle Opening Enrich time in 100mS increments(mSx10)(offset = 978)($03D2)
                                      ;    dw $0014       ; 20 = 2mS
                                      ;OFCtps_F:          ; 2 bytes for Overrun Fuel Cut min TpS%x10(offset = 986)($03DA)
                                      ;    dw $0014       ; 20 = 2%
                                      ;OFCrpm_F:          ; 2 bytes for Overrun Fuel Cut min RPM(offset = 988)($03DC)
                                      ;    dw $0384       ; 900
                                      ;OFCmap_F:          ; 2 bytes for Overrun Fuel Cut maximum manifold pressure permissive (KPAx10)(offset = 990)($03DE)
                                      ;    dw $00FA       ; 250 = 25.0KPA
                                      ;OFCdel_F:          ; 2 bytes for Overrun Fuel Cut delay time (Sec x 10)(offset = 992)($03E0)
                                      ;    dw $0032         ; 50 = 5.0Sec
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ; - Non RS232 variables (declared in this module)
                                      ;*****************************************************************************************
001045 0FD045                         TpsPctx10last: ds 2 ; Throttle Position Sensor percent last (%x10)(updated every 100Msec)
001047 0FD047                         OFCdel:        ds 1 ; Overrun Fuel Cut delay duration (decremented every 100 mS)
001048 0FD048                         TOEtim:        ds 1 ; Throttle Opening Enrichment duration (decremented every 100 mS)
001049 0FD049                         DdBndZ1:       ds 2 ; Deadband interpolation Z1 value
00104B 0FD04B                         DdBndZ2:       ds 2 ; Deadband interpolation Z2 value
00104D 0FD04D                         PWcalc1:       ds 2 ; PW calculations result 1
00104F 0FD04F                         PWcalc2:       ds 2 ; PW calculations result 2
001051 0FD051                         PWcalc3:       ds 2 ; PW calculations result 3
001053 0FD053                         PWcalc4:       ds 2 ; PW calculations result 4
001055 0FD055                         PWcalc5:       ds 2 ; PW calculations result 5
001057 0FD057                         ASErev:        ds 2 ; Afterstart Enrichment Taper (revolutions)
001059 0FD059                         ASEcnt:        ds 2 ; Counter value for ASE taper
00105B 0FD05B                         PrimePWtk:     ds 2 ; Primer injector pulswidth timer ticks(uS x 5.12)
00105D 0FD05D                         CrankPWtk:     ds 2 ; Cranking injector pulswidth timer ticks(uS x 5.12)
00105F 0FD05F                         PWtk:          ds 2 ; Running injector pulsewidth timer ticks(uS x 2.56)
001061 0FD061                         InjOCadd1:     ds 2 ; First injector output compare adder (5.12uS res or 2.56uS res)
001063 0FD063                         InjOCadd2:     ds 2 ; Second injector output compare adder (5.12uS res or 2.56uS res)
001065 0FD065                         FDt:           ds 2 ; Fuel Delivery pulse width total(mS) (for FDsec calcs)
001067 0FD067                         FDcnt:         ds 2 ; Fuel delivery pulse width total(ms)(for totalizer pulse on rollover)
001069 0FD069                         AIOTcnt:       ds 1 ; Counter for AIOT totalizer pulse width
00106A 0FD06A -> $106A                INJCALCS_VARS_END               EQU     * ; * Represents the current value of the paged
                                                                    ; program counter
00106A 0FD06A -> $FD06A               INJCALCS_VARS_END_LIN   EQU     @ ; @ Represents the current value of the linear
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
0062A2 7F62A2                                                 ORG     INJCALCS_CODE_START, INJCALCS_CODE_START_LIN
0062A2 7F62A2 -> $7F62A2              INJCALCS_CODE_START_LIN EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No code for this module ------------------------------
0062A2 7F62A2 -> $62A2                INJCALCS_CODE_END               EQU     * ; * Represents the current value of the paged
                                                                    ; program counter
0062A2 7F62A2 -> $7F62A2              INJCALCS_CODE_END_LIN   EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006D67 7F6D67                                                 ORG     INJCALCS_TABS_START, INJCALCS_TABS_START_LIN
006D67 7F6D67 -> $7F6D67              INJCALCS_TABS_START_LIN EQU     @ ; @ Represents the current value of the linear
                                                                    ; program counter
                                      ; ------------------------------- No tables for this module ------------------------------
006D67 7F6D67 -> $6D67                INJCALCS_TABS_END               EQU     * ; * Represents the current value of the paged
                                                                    ; program counter
006D67 7F6D67 -> $7F6D67              INJCALCS_TABS_END_LIN   EQU     @ ; @ Represents the current value of the linear
                                      ;        1         2         3         4         5         6         7         8         9
                                      ;23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
                                      ;*****************************************************************************************
                                      ;* S12CBase - (DodgeTherm_BPEM488.s)                                                      *
                                      ;*****************************************************************************************
                                      ;*    Copyright 2010-2012 Dirk Heisswolf                                                 *
                                      ;*    This file is part of the S12CBase framework for Freescale's S12(X) MCU             *
                                      ;*    families.                                                                          *
                                      ;*                                                                                       *
                                      ;*    S12CBase is free software: you can redistribute it and/or modify                   *
                                      ;*    it under the terms of the GNU General Public License as published by               *
                                      ;*    the Free Software Foundation, either version 3 of the License, or                  *
                                      ;*    (at your option) any later version.                                                *
                                      ;*                                                                                       *
                                      ;*    S12CBase is distributed in the hope that it will be useful,                        *
                                      ;*    but WITHOUT ANY WARRANTY; without even the implied warranty of                     *
                                      ;*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      *
                                      ;*    GNU General Public License for more details.                                       *
                                      ;*                                                                                       *
                                      ;*    You should have received a copy of the GNU General Public License                  *
                                      ;*    along with S12CBase. If not,see <http://www.gnu.org/licenses/>.                    *
                                      ;*****************************************************************************************
                                      ;*    Modified for the BPEM488 Engine Controller for the Dodge 488CID (8.0L) V10 engine  *
                                      ;*    by Robert Hiebert.                                                                 *
                                      ;*    Text Editor: Notepad++                                                             *
                                      ;*    Assembler: HSW12ASM by Dirk Heisswolf                                              *
                                      ;*    Processor: MC9S12XEP100 112 LQFP                                                   *
                                      ;*    Reference Manual: MC9S12XEP100RMV1 Rev. 1.25 02/2013                               *
                                      ;*    De-bugging and lin.s28 records loaded using Mini-BDM-Pod by Dirk Heisswolf         *
                                      ;*    running D-Bug12XZ 6.0.0b6                                                          *
                                      ;*    The code is heavily commented not only to help others, but mainly as a teaching    *
                                      ;*    aid for myself as an amatuer programmer with no formal training                    *
                                      ;*****************************************************************************************
                                      ;* Description:                                                                          *
                                      ;*    Lookup table for Dodge thermistors                                                 *
                                      ;*****************************************************************************************
                                      ;* Required Modules:                                                                     *
                                      ;*   BPEM488.s            - Application code for the BPEM488 project                     *
                                      ;*   base_BPEM488.s       - Base bundle for the BPEM488 project                          *
                                      ;*   regdefs_BPEM488.s    - S12XEP100 register map                                       *
                                      ;*   vectabs_BPEM488.s    - S12XEP100 vector table for the BEPM488 project               *
                                      ;*   mmap_BPEM488.s       - S12XEP100 memory map                                         *
                                      ;*   eeem_BPEM488.s       - EEPROM Emulation initialize, enable, disable Macros          *
                                      ;*   clock_BPEM488.s      - S12XEP100 PLL and clock related features                     *
                                      ;*   rti_BPEM488.s        - Real Time Interrupt time rate generator handler              *
                                      ;*   sci0_BPEM488.s       - SCI0 driver for Tuner Studio communications                  *
                                      ;*   adc0_BPEM488.s       - ADC0 driver (ADC inputs)                                     *
                                      ;*   gpio_BPEM488.s       - Initialization all ports                                     *
                                      ;*   ect_BPEM488.s        - Enhanced Capture Timer driver (triggers, ignition control)   *
                                      ;*   tim_BPEM488.s        - Timer module for Ignition and Injector control on Port P     *
                                      ;*   state_BPEM488.s      - State machine to determine crank position and cam phase      *
                                      ;*   interp_BPEM488.s     - Interpolation subroutines and macros                         *
                                      ;*   igncalcs_BPEM488.s   - Calculations for igntion timing                              *
                                      ;*   injcalcs_BPEM488.s   - Calculations for injector pulse widths                       *
                                      ;*   DodgeTherm_BPEM488.s - Lookup table for Dodge temperature sensors (This module)     *
                                      ;*****************************************************************************************
                                      ;* Version History:                                                                      *
                                      ;*    May 25 2020                                                                        *
                                      ;*    - BPEM488 version begins (work in progress)                                        *
                                      ;*                                                                                       *
                                      ;*****************************************************************************************
                                      ;*****************************************************************************************
                                      ;* - Configuration -                                                                     *
                                      ;*****************************************************************************************
006D67 7F6D67 S12X CODE:                  CPU S12X   ; Switch to S12x opcode table
                                      ;*****************************************************************************************
                                      ;* - Variables -                                                                         *
                                      ;*****************************************************************************************
00106A 0FD06A                                    ORG     DODGETHERM_VARS_START, DODGETHERM_VARS_START_LIN
00106A 0FD06A -> $FD06A               DODGETHERM_VARS_START_LIN       EQU     @ ; @ Represents the current value of the linear
                                                                        ; program counter
                                      ; ----------------------------- No variables for this module ----------------------------
00106A 0FD06A -> $106A                DODGETHERM_VARS_END             EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
00106A 0FD06A -> $FD06A               DODGETHERM_VARS_END_LIN EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
                                      ;*****************************************************************************************
                                      ;* - Macros -                                                                            *
                                      ;*****************************************************************************************
                                      ; ------------------------------ No macros for this module -------------------------------
                                      ;*****************************************************************************************
                                      ;* - Code -                                                                              *
                                      ;*****************************************************************************************
0062A2 7F62A2                                                 ORG     DODGETHERM_CODE_START, DODGETHERM_CODE_START_LIN
0062A2 7F62A2 -> $7F62A2              DODGETHERM_CODE_START_LIN       EQU     @ ; @ Represents the current value of the linear
                                                                       ; program counter
                                      ; ------------------------------- No code for this module -------------------------------
0062A2 7F62A2 -> $62A2                DODGETHERM_CODE_END             EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
0062A2 7F62A2 -> $7F62A2              DODGETHERM_CODE_END_LIN EQU     @     ; @ Represents the current value of the linear
                                                                        ; program counter
                                      ;*****************************************************************************************
                                      ;* - Tables -                                                                            *
                                      ;*****************************************************************************************
006D67 7F6D67                                                 ORG     DODGETHERM_TABS_START, DODGETHERM_TABS_START_LIN
006D67 7F6D67 -> $7F6D67              DODGETHERM_TABS_START_LIN       EQU     @ ; @ Represents the current value of the linear
                                                                        ; program counter
                                      ; Dodge thermistor
                                      ; 5 volt, 10 bit ADC, Bias resistor = 6980R
                                      ; 0C, 32F    = 32660R
                                      ; 30C, 86F   = 8060R
                                      ; 90C, 194F  = 915R
006D67 7F6D67                         DodgeThermistor:
                                      ;        Hex        DgFx10  Deg F   Deg C  ADC          Vout    Ohms
006D67 7F6D67 06 40                           DW      $0640   ;       1600    160.00  71.11   0               0.000   Default to 160F (sensor failure)
006D69 7F6D69 1A 56                           DW      $1A56   ;       6742    674.22  356.79  1               0.005   6.987
006D6B 7F6D6B 16 36                           DW      $1636   ;       5686    568.58  298.10  2               0.010   13.998
006D6D 7F6D6D 14 1F                           DW      $141F   ;       5151    515.07  268.37  3               0.015   21.03
006D6F 7F6D6F 12 C5                           DW      $12C5   ;       4805    480.50  249.17  4               0.020   28.032
006D71 7F6D71 11 F5                           DW      $11F5   ;       4597    459.68  237.60  5               0.024   33.666
006D73 7F6D73 11 26                           DW      $1126   ;       4390    438.99  266.10  6               0.029   40.72
006D75 7F6D75 10 7F                           DW      $107F   ;       4223    422.26  216.81  7               0.034   47.789
006D77 7F6D77 0F F3                           DW      $0FF3   ;       4083    408.29  209.05  8               0.039   54.872
006D79 7F6D79 0F 7B                           DW      $0F7B   ;       3963    396.34  202.41  9               0.044   61.969
006D7B 7F6D7B 0F 13                           DW      $0F13   ;       3859    385.93  196.63  10              0.049   69.081
006D7D 7F6D7D 0E B7                           DW      $0EB7   ;       3767    376.73  191.52  11              0.054   76.207
006D7F 7F6D7F 0E 6A                           DW      $0E6A   ;       3690    368.50  186.95  12              0.059   83.348
006D81 7F6D81 0E 29                           DW      $0E29   ;       3625    362.50  183.61  13              0.063   89.07
006D83 7F6D83 0D E4                           DW      $0DE4   ;       3556    355.61  179.70  14              0.068   96.237
006D85 7F6D85 0D A5                           DW      $0DA5   ;       3493    349.31  176.78  15              0.073   103.418
006D87 7F6D87 0D 6B                           DW      $0D6B   ;       3435    343.49  173.05  16              0.078   110.614
006D89 7F6D89 0D 35                           DW      $0D35   ;       3381    338.11  170.06  17              0.083   117.824
006D8B 7F6D8B 0D 03                           DW      $0D03   ;       3331    333.09  167.27  18              0.088   125.049
006D8D 7F6D8D 0D 9C                           DW      $0D9C   ;       3484    348.41  164.67  19              0.093   132.289
006D8F 7F6D8F 0C A8                           DW      $0CA8   ;       3240    324.01  162.23  20              0.098   139.543
006D91 7F6D91 0C 7F                           DW      $0C7F   ;       3199    319.87  159.93  21              0.103   146.812
006D93 7F6D93 0C 5F                           DW      $0C5F   ;       3167    316.73  158.18  22              0.107   152.638
006D95 7F6D95 0C 3A                           DW      $0C3A   ;       3130    312.99  156.10  23              0.112   159.935
006D97 7F6D97 0C 16                           DW      $0C16   ;       3094    309.44  154.13  24              0.117   167.246
006D99 7F6D99 0B F5                           DW      $0BF5   ;       3061    306.06  152.26  25              0.122   174.572
006D9B 7F6D9B 0B D4                           DW      $0BD4   ;       3028    302.84  150.47  26              0.127   181.913
006D9D 7F6D9D 0B B6                           DW      $0BB6   ;       2998    299.77  148.76  27              0.132   189.269
006D9F 7F6D9F 0B 98                           DW      $0B98   ;       2968    296.83  147.13  28              0.137   196.640
006DA1 7F6DA1 0B 7C                           DW      $0B7C   ;       2940    294.02  145.57  29              0.142   204.026
006DA3 7F6DA3 0B 64                           DW      $0B64   ;       2916    291.85  144.36  30              0.146   209.946
006DA5 7F6DA5 0B 4C                           DW      $0B4C   ;       2892    289.23  142.90  31              0.151   217.360
006DA7 7F6DA7 0B 34                           DW      $0B34   ;       2868    286.76  141.54  32              0.156   224.789
006DA9 7F6DA9 0B 1B                           DW      $0B1B   ;       2843    284.28  140.17  33              0.161   232.234
006DAB 7F6DAB 0B 03                           DW      $0B03   ;       2819    281.94  138.86  34              0.166   239.694
006DAD 7F6DAD 0A ED                           DW      $0AED   ;       2797    279.68  137.6   35              0.171   247.169
006DAF 7F6DAF 0A D7                           DW      $0AD7   ;       2775    277.49  136.39  36              0.176   254.660
006DB1 7F6DB1 0A C2                           DW      $0AC2   ;       2754    275.38  135.21  37              0.181   262.166
006DB3 7F6DB3 0A AD                           DW      $0AAD   ;       2733    273.33  134.07  38              0.186   269.688
006DB5 7F6DB5 0A 9D                           DW      $0A9D   ;       2717    271.74  133.19  39              0.190   275.717
006DB7 7F6DB7 0A 8A                           DW      $0A8A   ;       2698    269.80  132.11  40              0.195   283.267
006DB9 7F6DB9 0A 77                           DW      $0A77   ;       2679    267.92  131.07  41              0.200   290.833
006DBB 7F6DBB 0A 65                           DW      $0A65   ;       2661    266.09  130.05  42              0.205   298.415
006DBD 7F6DBD 0A 53                           DW      $0A53   ;       2643    264.31  129.06  43              0.210   306.013
006DBF 7F6DBF 0A 42                           DW      $0A42   ;       2626    262.58  128.10  44              0.215   313.626
006DC1 7F6DC1 0A 31                           DW      $0A31   ;       2609    260.89  127.16  45              0.220   321.255
006DC3 7F6DC3 0A 21                           DW      $0A21   ;       2593    259.25  126.25  46              0.225   328.901
006DC5 7F6DC5 0A 14                           DW      $0A14   ;       2580    257.97  2125.54 47              0.229   335.028
006DC7 7F6DC7 0A 04                           DW      $0A04   ;       2564    256.40  124.67  48              0.234   342.702
006DC9 7F6DC9 09 F5                           DW      $09F5   ;       2549    254.87  123.82  49              0.239   350.393
006DCB 7F6DCB 09 E6                           DW      $09E6   ;       2534    253.37  122.99  50              0.244   358.099
006DCD 7F6DCD 09 D7                           DW      $09D7   ;       2519    251.91  122.17  51              0.249   365.822
006DCF 7F6DCF 09 C9                           DW      $09C9   ;       2505    250.48  121.38  52              0.254   373.561
006DD1 7F6DD1 09 BB                           DW      $09BB   ;       2491    249.09  120.60  53              0.259   381.316
006DD3 7F6DD3 09 AD                           DW      $09AD   ;       2477    247.72  119.85  54              0.264   289.088
006DD5 7F6DD5 09 A0                           DW      $09A0   ;       2464    246.39  119.10  55              0.269   396.876
006DD7 7F6DD7 09 95                           DW      $0995   ;       2453    245.34  118.52  56              0.273   403.118
006DD9 7F6DD9 09 89                           DW      $0989   ;       2441    244.05  117.80  57              0.278   410.936
006DDB 7F6DDB 09 7C                           DW      $097C   ;       2428    242.79  117.10  58              0.283   418.770
006DDD 7F6DDD 09 70                           DW      $0970   ;       2416    241.55  116.42  59              0.288   426.621
006DDF 7F6DDF 09 63                           DW      $0963   ;       2403    240.34  115.74  60              0.293   434.489
006DE1 7F6DE1 09 58                           DW      $0958   ;       2392    239.15  115.08  61              0.298   442.373
006DE3 7F6DE3 09 4C                           DW      $094C   ;       2380    237.98  114.43  62              0.303   450.278
006DE5 7F6DE5 09 40                           DW      $0940   ;       2368    236.83  113.80  63              0.308   458.193
006DE7 7F6DE7 09 35                           DW      $0935   ;       2357    235.71  113.17  64              0.313   466.128
006DE9 7F6DE9 09 2C                           DW      $092C   ;       2348    234.82  112.68  65              0.317   472.488
006DEB 7F6DEB 09 21                           DW      $0921   ;       2337    233.73  112.07  66              0.322   480.453
006DED 7F6DED 09 17                           DW      $0917   ;       2327    232.66  111.48  67              0.327   488.436
006DEF 7F6DEF 09 0C                           DW      $090C   ;       2316    231.60  110.89  68              0.332   496.435
006DF1 7F6DF1 09 02                           DW      $0902   ;       2306    230.57  110.36  69              0.337   504.452
006DF3 7F6DF3 08 F8                           DW      $08F8   ;       2296    229.55  109.75  70              0.342   512.486
006DF5 7F6DF5 08 EE                           DW      $08EE   ;       2286    228.55  109.19  71              0.347   520.537
006DF7 7F6DF7 08 E4                           DW      $08E4   ;       2276    227.56  108.64  72              0.352   528.606
006DF9 7F6DF9 08 DB                           DW      $08DB   ;       2267    226.78  108.21  73              0.356   535.073
006DFB 7F6DFB 08 D2                           DW      $08D2   ;       2258    225.82  107.68  74              0.361   543.173
006DFD 7F6DFD 08 C9                           DW      $08C9   ;       2249    224.88  107.15  75              0.366   551.290
006DFF 7F6DFF 08 C0                           DW      $08C0   ;       2240    223.95  106.64  76              0.371   559.425
006E01 7F6E01 08 B6                           DW      $08B6   ;       2230    223.03  106.13  77              0.376   567.578
006E03 7F6E03 08 AD                           DW      $08AD   ;       2221    222.13  105.63  78              0.381   575.748
006E05 7F6E05 08 A4                           DW      $08A4   ;       2212    221.24  105.13  79              0.386   583.936
006E07 7F6E07 08 9C                           DW      $089C   ;       2204    220.36  104.64  80              0.391   592.141
006E09 7F6E09 08 93                           DW      $0893   ;       2195    219.49  104.16  81              0.396   600.365
006E0B 7F6E0B 08 8C                           DW      $088C   ;       2188    218.81  103.78  82              0.400   606.957
006E0D 7F6E0D 08 84                           DW      $0884   ;       2180    217.97  103.31  83              0.405   615.212
006E0F 7F6E0F 08 7B                           DW      $087B   ;       2171    217.13  102.85  84              0.410   623.486
006E11 7F6E11 08 73                           DW      $0873   ;       2163    216.31  102.40  85              0.415   631.778
006E13 7F6E13 08 6B                           DW      $086B   ;       2155    215.50  101.95  86              0.420   640.087
006E15 7F6E15 08 63                           DW      $0863   ;       2147    214.70  101.50  87              0.425   648.415
006E17 7F6E17 08 5B                           DW      $085B   ;       2139    213.91  101.06  88              0.430   656.761
006E19 7F6E19 08 53                           DW      $0853   ;       2131    213.13  100.63  89              0.435   665.126
006E1B 7F6E1B 08 4D                           DW      $084D   ;       2125    212.51  100.29  90              0.439   671.831
006E1D 7F6E1D 08 46                           DW      $0846   ;       2118    211.75  99.86   91              0.444   680.228
006E1F 7F6E1F 08 3E                           DW      $083E   ;       2110    211.00  99.44   92              0.449   688.644
006E21 7F6E21 08 37                           DW      $0837   ;       2103    210.25  99.03   93              0.454   697.079
006E23 7F6E23 08 2F                           DW      $082F   ;       2095    209.52  98.62   94              0.459   705.532
006E25 7F6E25 08 28                           DW      $0828   ;       2088    208.79  98.22   95              0.464   714.004
006E27 7F6E27 08 20                           DW      $0820   ;       2080    208.07  97.82   96              0.469   722.494
006E29 7F6E29 08 1A                           DW      $081A   ;       2074    207.36  97.42   97              0.474   731.003
006E2B 7F6E2B 08 13                           DW      $0813   ;       2067    206.66  97.03   98              0.479   739.531
006E2D 7F6E2D 08 0D                           DW      $080D   ;       2061    206.10  96.72   99              0.483   746.367
006E2F 7F6E2F 08 06                           DW      $0806   ;       2054    205.41  96.34   100             0.488   754.929
006E31 7F6E31 07 FF                           DW      $07FF   ;       2047    204.73  95.96   101             0.493   763.510
006E33 7F6E33 07 F9                           DW      $07F9   ;       2041    204.06  95.59   102             0.498   772.110
006E35 7F6E35 07 F2                           DW      $07F2   ;       2034    203.39  95.22   103             0.503   780.729
006E37 7F6E37 07 EB                           DW      $07EB   ;       2027    202.73  94.85   104             0.508   789.386
006E39 7F6E39 07 E5                           DW      $07E5   ;       2021    202.08  94.49   105             0.513   798.025
006E3B 7F6E3B 07 DE                           DW      $07DE   ;       2014    201.43  94.13   106             0.518   806.702
006E3D 7F6E3D 07 D9                           DW      $07D9   ;       2009    200.92  93.85   107             0.522   813.658
006E3F 7F6E3F 07 D3                           DW      $07D3   ;       2003    200.29  93.49   108             0.527   822.370
006E41 7F6E41 07 CD                           DW      $07CD   ;       1997    199.66  93.15   109             0.532   831.101
006E43 7F6E43 07 C6                           DW      $07C6   ;       1990    199.04  92.80   110             0.537   839.852
006E45 7F6E45 07 C0                           DW      $07C0   ;       1984    198.43  92.46   111             0.542   848.623
006E47 7F6E47 07 BA                           DW      $07BA   ;       1978    197.82  92.12   112             0.547   857.413
006E49 7F6E49 07 B4                           DW      $07B4   ;       1972    197.21  91.79   113             0.552   866.223
006E4B 7F6E4B 07 AE                           DW      $07AE   ;       1966    196.62  91.45   114             0.557   875.053
006E4D 7F6E4D 07 A8                           DW      $07A8   ;       1960    196.03  91.13   115             0.562   883.903
006E4F 7F6E4F 07 A4                           DW      $07A4   ;       1956    195.56  90.86   116             0.566   890.997
006E51 7F6E51 07 9E                           DW      $079E   ;       1950    194.97  90.54   117             0.571   899.883
006E53 7F6E53 07 98                           DW      $0798   ;       1944    194.40  90.22   118             0.576   908.788
006E55 7F6E55 07 92                           DW      $0792   ;       1938    193.83  89.90   119             0.581   917.714
006E57 7F6E57 07 8D                           DW      $078D   ;       1933    193.26  89.59   120             0.586   926.661
006E59 7F6E59 07 87                           DW      $0787   ;       1927    192.70  89.28   121             0.591   935.627
006E5B 7F6E5B 07 81                           DW      $0781   ;       1921    192.14  88.97   122             0.596   944.614
006E5D 7F6E5D 07 7C                           DW      $077C   ;       1916    191.59  88.66   123             0.601   953.621
006E5F 7F6E5F 07 77                           DW      $0777   ;       1911    191.05  88.36   124             0.605   962.649
006E61 7F6E61 07 72                           DW      $0772   ;       1906    190.61  88.12   125             0.610   969.886
006E63 7F6E63 07 6D                           DW      $076D   ;       1901    190.08  87.82   126             0.615   978.951
006E65 7F6E65 07 67                           DW      $0767   ;       1895    189.54  87.52   127             0.620   988.037
006E67 7F6E67 07 62                           DW      $0762   ;       1890    189.01  87.23   128             0.625   997.143
006E69 7F6E69 07 5D                           DW      $075D   ;       1885    188.49  86.94   129             0.630   1006.27
006E6B 7F6E6B 07 58                           DW      $0758   ;       1880    187.97  86.65   130             0.635   1015.418
006E6D 7F6E6D 07 53                           DW      $0753   ;       1875    187.45  86.36   131             0.640   1024.587
006E6F 7F6E6F 07 4D                           DW      $074D   ;       1869    186.94  86.08   132             0.645   1033.777
006E71 7F6E71 07 49                           DW      $0749   ;       1865    186.53  85.85   133             0.649   1041.145
006E73 7F6E73 07 44                           DW      $0744   ;       1860    186.03  85.57   134             0.654   1050.373
006E75 7F6E75 07 3F                           DW      $073F   ;       1855    185.53  85.29   135             0.659   1059.622
006E77 7F6E77 07 3A                           DW      $073A   ;       1850    185.03  85.02   136             0.664   1068.893
006E79 7F6E79 07 35                           DW      $0735   ;       1845    184.54  84.75   137             0.669   1078.185
006E7B 7F6E7B 07 31                           DW      $0731   ;       1841    184.05  84.47   138             0.674   1087.499
006E7D 7F6E7D 07 2C                           DW      $072C   ;       1836    183.57  84.20   139             0.679   1096.834
006E7F 7F6E7F 07 27                           DW      $0727   ;       1831    183.09  83.94   140             0.684   1106.191
006E81 7F6E81 07 23                           DW      $0723   ;       1827    182.70  83.72   141             0.688   1113.692
006E83 7F6E83 07 1E                           DW      $071E   ;       1822    182.23  83.46   142             0.693   1123.088
006E85 7F6E85 07 1A                           DW      $071A   ;       1818    181.76  83.20   143             0.698   1132.506
006E87 7F6E87 07 15                           DW      $0715   ;       1813    181.29  82.94   144             0.703   1141.946
006E89 7F6E89 07 10                           DW      $0710   ;       1808    180.82  82.68   145             0.708   1151.407
006E8B 7F6E8B 07 0C                           DW      $070C   ;       1804    180.36  82.42   146             0.713   1160.891
006E8D 7F6E8D 07 07                           DW      $0707   ;       1799    179.90  82.17   147             0.718   1170.397
006E8F 7F6E8F 07 03                           DW      $0703   ;       1795    179.45  81.92   148             0.723   1179.925
006E91 7F6E91 06 FE                           DW      $06FE   ;       1790    179.00  81.67   149             0.728   1189.476
006E93 7F6E93 06 FA                           DW      $06FA   ;       1786    178.64  81.47   150             0.732   1197.132
006E95 7F6E95 06 F6                           DW      $06F6   ;       1782    178.19  81.22   151             0.737   1206.723
006E97 7F6E97 06 F2                           DW      $06F2   ;       1778    177.75  80.97   152             0.742   1216.336
006E99 7F6E99 06 ED                           DW      $06ED   ;       1773    177.31  80.73   153             0.747   1225.972
006E9B 7F6E9B 06 E9                           DW      $06E9   ;       1769    176.87  80.49   154             0.752   1235.631
006E9D 7F6E9D 06 E4                           DW      $06E4   ;       1764    176.44  80.24   155             0.757   1245.312
006E9F 7F6E9F 06 E0                           DW      $06E0   ;       1760    176.01  80.00   156             0.762   1255.017
006EA1 7F6EA1 06 DC                           DW      $06DC   ;       1756    175.58  79.77   157             0.767   1264.744
006EA3 7F6EA3 06 D8                           DW      $06D8   ;       1752    175.24  79.58   158             0.771   1272.542
006EA5 7F6EA5 06 D4                           DW      $06D4   ;       1748    174.82  79.34   159             0.776   1282.311
006EA7 7F6EA7 06 D0                           DW      $06D0   ;       1744    174.40  79.11   160             0.781   1292.102
006EA9 7F6EA9 06 CC                           DW      $06CC   ;       1740    173.98  78.88   161             0.786   1301.917
006EAB 7F6EAB 06 C8                           DW      $06C8   ;       1736    173.56  78.65   162             0.791   1311.756
006EAD 7F6EAD 06 C4                           DW      $06C4   ;       1732    173.15  78.42   163             0.796   1321.618
006EAF 7F6EAF 06 BF                           DW      $06BF   ;       1727    172.74  78.19   164             0.801   1331.503
006EB1 7F6EB1 06 BB                           DW      $06BB   ;       1723    172.33  77.96   165             0.806   1341.412
006EB3 7F6EB3 06 B7                           DW      $06B7   ;       1719    171.93  77.73   166             0.811   1351.344
006EB5 7F6EB5 06 B4                           DW      $06B4   ;       1716    171.61  77.56   167             0.815   1359.307
006EB7 7F6EB7 06 B0                           DW      $06B0   ;       1712    171.20  77.34   168             0.820   1369.282
006EB9 7F6EB9 06 AC                           DW      $06AC   ;       1708    170.81  77.11   169             0.825   1379.281
006EBB 7F6EBB 06 A8                           DW      $06A8   ;       1704    170.41  76.89   170             0.830   1389.305
006EBD 7F6EBD 06 A4                           DW      $06A4   ;       1700    170.02  76.68   171             0.835   1399.352
006EBF 7F6EBF 06 A0                           DW      $06A0   ;       1696    169.63  76.46   172             0.840   1409.423
006EC1 7F6EC1 06 9C                           DW      $069C   ;       1692    169.24  76.24   173             0.845   1419.519
006EC3 7F6EC3 06 99                           DW      $0699   ;       1689    168.85  76.03   174             0.850   1429.639
006EC5 7F6EC5 06 95                           DW      $0695   ;       1685    168.54  75.86   175             0.854   1437.752
006EC7 7F6EC7 06 92                           DW      $0692   ;       1682    168.16  75.65   176             0.859   1447.916
006EC9 7F6EC9 06 8E                           DW      $068E   ;       1678    167.78  75.43   177             0.864   1458.104
006ECB 7F6ECB 06 8A                           DW      $068A   ;       1674    167.40  75.22   178             0.869   1468.318
006ECD 7F6ECD 06 86                           DW      $0686   ;       1670    167.03  75.05   179             0.874   1478.556
006ECF 7F6ECF 06 83                           DW      $0683   ;       1667    166.65  74.81   180             0.879   1488.818
006ED1 7F6ED1 06 7F                           DW      $067F   ;       1663    166.28  74.60   181             0.884   1499.106
006ED3 7F6ED3 06 7D                           DW      $067D   ;       1661    166.09  74.49   182             0.889   1504.419
006ED5 7F6ED5 06 77                           DW      $0677   ;       1655    165.54  74.19   183             0.894   1519.756
006ED7 7F6ED7 06 75                           DW      $0675   ;       1653    165.25  74.03   184             0.898   1528.045
006ED9 7F6ED9 06 71                           DW      $0671   ;       1649    164.89  73.83   185             0.903   1538.428
006EDB 7F6EDB 06 6D                           DW      $066D   ;       1645    164.52  73.63   186             0.908   1548.837
006EDD 7F6EDD 06 6A                           DW      $066A   ;       1642    164.16  73.42   187             0.913   1559.271
006EDF 7F6EDF 06 66                           DW      $0666   ;       1638    163.81  73.23   188             0.918   1569.731
006EE1 7F6EE1 06 63                           DW      $0663   ;       1635    163.45  73.03   189             0.923   1580.216
006EE3 7F6EE3 06 5F                           DW      $065F   ;       1631    163.09  72.98   190             0.928   1590.727
006EE5 7F6EE5 06 5B                           DW      $065B   ;       1627    162.74  72.63   191             0.933   1601.264
006EE7 7F6EE7 06 58                           DW      $0658   ;       1624    162.39  72.44   192             0.938   1611.827
006EE9 7F6EE9 06 55                           DW      $0655   ;       1621    162.11  72.28   193             0.942   1620.296
006EEB 7F6EEB 06 52                           DW      $0652   ;       1618    161.76  72.09   194             0.947   1630.906
006EED 7F6EED 06 4E                           DW      $064E   ;       1614    161.42  71.90   195             0.952   1641.542
006EEF 7F6EEF 06 4B                           DW      $064B   ;       1611    161.07  71.71   196             0.957   1652.204
006EF1 7F6EF1 06 47                           DW      $0647   ;       1607    160.73  71.52   197             0.962   1662.893
006EF3 7F6EF3 06 44                           DW      $0644   ;       1604    160.39  71.33   198             0.967   1673.608
006EF5 7F6EF5 06 41                           DW      $0641   ;       1601    160.16  71.14   199             0.972   1684.350
006EF7 7F6EF7 06 3D                           DW      $063D   ;       1597    159.71  70.95   200             0.977   1695.118
006EF9 7F6EF9 06 3A                           DW      $063A   ;       1594    159.44  70.80   201             0.981   1703.752
006EFB 7F6EFB 06 37                           DW      $0637   ;       1591    159.11  70.62   202             0.986   1714.569
006EFD 7F6EFD 06 34                           DW      $0634   ;       1588    158.78  70.43   203             0.991   1725.413
006EFF 7F6EFF 06 30                           DW      $0630   ;       1584    158.44  70.25   204             0.996   1736.284
006F01 7F6F01 06 2D                           DW      $062D   ;       1581    158.11  70.06   205             1.001   1747.182
006F03 7F6F03 06 2A                           DW      $062A   ;       1578    157.79  69.88   206             1.006   1758.107
006F05 7F6F05 06 27                           DW      $0627   ;       1575    157.46  69.70   207             1.011   1769.06
006F07 7F6F07 06 23                           DW      $0623   ;       1571    157.13  69.52   208             1.016   1780.04
006F09 7F6F09 06 20                           DW      $0620   ;       1568    156.81  69.34   209             1.021   1791.048
006F0B 7F6F0B 06 1E                           DW      $061E   ;       1566    156.55  69.20   210             1.025   1799.874
006F0D 7F6F0D 06 1A                           DW      $061A   ;       1562    156.23  69.02   211             1.030   1810.932
006F0F 7F6F0F 06 17                           DW      $0617   ;       1559    155.91  68.84   212             1.035   1822.018
006F11 7F6F11 06 14                           DW      $0614   ;       1556    155.59  68.66   213             1.040   1833.131
006F13 7F6F13 06 11                           DW      $0611   ;       1553    155.28  68.49   214             1.045   1844.273
006F15 7F6F15 06 0E                           DW      $060E   ;       1550    154.96  68.31   215             1.050   1855.443
006F17 7F6F17 06 0B                           DW      $060B   ;       1547    154.65  68.14   216             1.055   1866.641
006F19 7F6F19 06 07                           DW      $0607   ;       1543    154.33  67.96   217             1.060   1877.868
006F1B 7F6F1B 06 05                           DW      $0605   ;       1541    154.08  67.82   218             1.064   1886.870
006F1D 7F6F1D 06 02                           DW      $0602   ;       1538    153.77  67.65   219             1.069   1898.148
006F1F 7F6F1F 05 FF                           DW      $05FF   ;       1535    153.46  67.48   220             1.074   1909.455
006F21 7F6F21 05 FC                           DW      $05FC   ;       1532    153.16  67.31   221             1.079   1920.791
006F23 7F6F23 05 F9                           DW      $05F9   ;       1529    152.85  67.14   222             1.084   1932.155
006F25 7F6F25 05 F6                           DW      $05F6   ;       1526    152.55  66.97   223             1.089   1943.549
006F27 7F6F27 05 F2                           DW      $05F2   ;       1522    152.24  66.80   224             1.094   1954.972
006F29 7F6F29 05 EF                           DW      $05EF   ;       1519    151.94  66.63   225             1.099   1966.424
006F2B 7F6F2B 05 EC                           DW      $05EC   ;       1516    151.64  66.47   226             1.104   1977.906
006F2D 7F6F2D 05 EA                           DW      $05EA   ;       1514    151.40  66.33   227             1.108   1987.112
006F2F 7F6F2F 05 E7                           DW      $05E7   ;       1511    151.10  66.17   228             1.113   1998.647
006F31 7F6F31 05 E4                           DW      $05E4   ;       1508    150.80  66.00   229             1.118   2010.211
006F33 7F6F33 05 E1                           DW      $05E1   ;       1505    150.51  65.84   230             1.123   2021.806
006F35 7F6F35 05 DE                           DW      $05DE   ;       1502    150.21  65.67   231             1.128   2033.430
006F37 7F6F37 05 DB                           DW      $05DB   ;       1499    149.92  65.51   232             1.133   2045.084
006F39 7F6F39 05 D8                           DW      $05D8   ;       1496    149.62  65.35   233             1.138   2056.769
006F3B 7F6F3B 05 D5                           DW      $05D5   ;       1493    149.33  65.18   234             1.143   2068.483
006F3D 7F6F3D 05 D3                           DW      $05D3   ;       1491    149.10  65.05   235             1.147   2077.877
006F3F 7F6F3F 05 D0                           DW      $05D0   ;       1488    148.81  64.89   236             1.152   2089.647
006F41 7F6F41 05 CD                           DW      $05CD   ;       1485    148.52  64.73   237             1.157   2101.447
006F43 7F6F43 05 CA                           DW      $05CA   ;       1482    148.23  64.57   238             1.162   2113.278
006F45 7F6F45 05 C8                           DW      $05C8   ;       1480    147.95  64.41   239             1.167   2125.140
006F47 7F6F47 05 C5                           DW      $05C5   ;       1477    147.66  64.26   240             1.172   2137.032
006F49 7F6F49 05 C2                           DW      $05C2   ;       1474    147.38  64.10   241             1.177   2148.956
006F4B 7F6F4B 05 BF                           DW      $05BF   ;       1471    147.09  63.94   242             1.182   2160.911
006F4D 7F6F4D 05 BC                           DW      $05BC   ;       1468    146.81  63.78   243             1.187   2172.898
006F4F 7F6F4F 05 BA                           DW      $05BA   ;       1466    146.59  63.66   244             1.191   2182.510
006F51 7F6F51 05 B7                           DW      $05B7   ;       1463    146.31  63.50   245             1.196   2194.553
006F53 7F6F53 05 B4                           DW      $05B4   ;       1460    146.03  63.35   246             1.201   2206.628
006F55 7F6F55 05 B2                           DW      $05B2   ;       1458    145.75  63.19   247             1.206   2218.735
006F57 7F6F57 05 AF                           DW      $05AF   ;       1455    145.47  63.04   248             1.211   2230.874
006F59 7F6F59 05 AC                           DW      $05AC   ;       1452    145.20  62.89   249             1.216   2243.044
006F5B 7F6F5B 05 A9                           DW      $05A9   ;       1449    144.92  62.73   250             1.221   2255.247
006F5D 7F6F5D 05 A7                           DW      $05A7   ;       1447    144.65  62.58   251             1.226   2267.483
006F5F 7F6F5F 05 A2                           DW      $05A2   ;       1442    144.23  62.46   252             1.230   2277.294
006F61 7F6F61 05 A2                           DW      $05A2   ;       1442    144.16  62.31   253             1.235   2289.588
006F63 7F6F63 05 9F                           DW      $059F   ;       1439    143.88  62.16   254             1.240   2301.915
006F65 7F6F65 05 9C                           DW      $059C   ;       1436    143.61  62.00   255             1.245   2314.274
006F67 7F6F67 05 99                           DW      $0599   ;       1433    143.34  61.86   256             1.250   2326.667
006F69 7F6F69 05 97                           DW      $0597   ;       1431    143.08  61.71   257             1.255   2339.092
006F6B 7F6F6B 05 94                           DW      $0594   ;       1428    142.81  61.56   258             1.260   2351.551
006F6D 7F6F6D 05 91                           DW      $0591   ;       1425    142.54  61.41   259             1.265   2364.043
006F6F 7F6F6F 05 8F                           DW      $058F   ;       1423    142.28  61.26   260             1.270   2376.568
006F71 7F6F71 05 8D                           DW      $058D   ;       1421    142.06  61.15   261             1.274   2386.613
006F73 7F6F73 05 8A                           DW      $058A   ;       1418    141.80  61.00   262             1.279   2399.199
006F75 7F6F75 05 87                           DW      $0587   ;       1415    141.54  60.85   263             1.284   2411.819
006F77 7F6F77 05 85                           DW      $0585   ;       1413    141.27  60.71   264             1.289   2424.473
006F79 7F6F79 05 82                           DW      $0582   ;       1410    141.01  60.56   265             1.294   2437.161
006F7B 7F6F7B 05 80                           DW      $0580   ;       1408    140.75  60.42   266             1.299   2449.884
006F7D 7F6F7D 05 7D                           DW      $057D   ;       1405    140.49  60.27   267             1.304   2462.641
006F7F 7F6F7F 05 7A                           DW      $057A   ;       1402    140.23  60.13   268             1.309   2475.432
006F81 7F6F81 05 78                           DW      $0578   ;       1400    140.03  60.01   269             1.313   2485.690
006F83 7F6F83 05 76                           DW      $0576   ;       1398    139.77  59.87   270             1.318   2498.544
006F85 7F6F85 05 73                           DW      $0573   ;       1395    139.51  59.73   271             1.323   2511.433
006F87 7F6F87 05 71                           DW      $0571   ;       1393    139.26  59.59   272             1.328   2524.357
006F89 7F6F89 05 6E                           DW      $056E   ;       1390    139.00  59.44   273             1.333   2537.317
006F8B 7F6F8B 05 6C                           DW      $056C   ;       1388    138.75  59.30   274             1.338   2550.311
006F8D 7F6F8D 05 69                           DW      $0569   ;       1385    138.49  59.16   275             1.343   2563.342
006F8F 7F6F8F 05 66                           DW      $0566   ;       1382    138.24  59.02   276             1.348   2576.407
006F91 7F6F91 05 64                           DW      $0564   ;       1380    137.99  58.88   277             1.353   2589.509
006F93 7F6F93 05 62                           DW      $0562   ;       1378    137.79  58.77   278             1.357   2600.016
006F95 7F6F95 05 5F                           DW      $055F   ;       1375    137.54  58.63   279             1.362   2613.183
006F97 7F6F97 05 5D                           DW      $055D   ;       1373    137.29  58.49   280             1.367   2626.386
006F99 7F6F99 05 5A                           DW      $055A   ;       1370    137.04  58.35   281             1.372   2639.625
006F9B 7F6F9B 05 58                           DW      $0558   ;       1368    136.79  58.22   282             1.377   2652.901
006F9D 7F6F9D 05 55                           DW      $0555   ;       1365    136.54  58.08   283             1.382   2666.213
006F9F 7F6F9F 05 53                           DW      $0553   ;       1363    136.29  57.94   284             1.387   2679.563
006FA1 7F6FA1 05 51                           DW      $0551   ;       1361    136.05  57.80   285             1.392   2692.949
006FA3 7F6FA3 05 4F                           DW      $054F   ;       1359    135.85  57.70   286             1.396   2703.685
006FA5 7F6FA5 05 4C                           DW      $054C   ;       1356    135.61  57.56   287             1.401   2717.138
006FA7 7F6FA7 05 4A                           DW      $054A   ;       1354    135.38  57.42   288             1.406   2730.629
006FA9 7F6FA9 05 47                           DW      $0547   ;       1351    135.12  57.29   289             1.411   2744.157
006FAB 7F6FAB 05 45                           DW      $0545   ;       1349    134.88  57.15   290             1.416   2757.723
006FAD 7F6FAD 05 42                           DW      $0542   ;       1346    134.64  57.02   291             1.421   2771.327
006FAF 7F6FAF 05 40                           DW      $0540   ;       1344    134.39  56.89   292             1.426   2784.969
006FB1 7F6FB1 05 3E                           DW      $053E   ;       1342    134.15  56.75   293             1.431   2798.649
006FB3 7F6FB3 05 3B                           DW      $053B   ;       1339    133.91  56.62   294             1.436   2812.368
006FB5 7F6FB5 05 39                           DW      $0539   ;       1337    133.72  56.51   295             1.440   2823.371
006FB7 7F6FB7 05 37                           DW      $0537   ;       1335    133.48  56.38   296             1.445   2837.159
006FB9 7F6FB9 05 35                           DW      $0535   ;       1333    133.25  56.25   297             1.450   2850.986
006FBB 7F6FBB 05 32                           DW      $0532   ;       1330    133.01  56.12   298             1.455   2864.852
006FBD 7F6FBD 05 30                           DW      $0530   ;       1328    132.77  55.98   299             1.460   2878.757
006FBF 7F6FBF 05 2D                           DW      $052D   ;       1325    132.54  55.85   300             1.465   2892.702
006FC1 7F6FC1 05 2B                           DW      $052B   ;       1323    132.30  55.72   301             1.470   2906.686
006FC3 7F6FC3 05 29                           DW      $0529   ;       1321    132.07  55.59   302             1.475   2920.709
006FC5 7F6FC5 05 27                           DW      $0527   ;       1319    131.88  55.49   303             1.479   2931.957
006FC7 7F6FC7 05 24                           DW      $0524   ;       1316    131.64  55.36   304             1.484   2946.052
006FC9 7F6FC9 05 22                           DW      $0522   ;       1314    131.41  55.23   305             1.489   2960.188
006FCB 7F6FCB 05 20                           DW      $0520   ;       1312    131.88  55.10   306             1.494   2974.364
006FCD 7F6FCD 05 1E                           DW      $051E   ;       1310    130.95  54.97   307             1.499   2988.580
006FCF 7F6FCF 05 1B                           DW      $051B   ;       1307    130.72  54.84   308             1.504   3002.838
006FD1 7F6FD1 05 19                           DW      $0519   ;       1305    130.49  54.71   309             1.509   3017.135
006FD3 7F6FD3 05 17                           DW      $0517   ;       1303    130.25  54.59   310             1.514   3031.474
006FD5 7F6FD5 05 14                           DW      $0514   ;       1300    130.03  54.46   311             1.519   3045.855
006FD7 7F6FD7 05 12                           DW      $0512   ;       1298    129.84  54.36   312             1.523   3057.389
006FD9 7F6FD9 05 10                           DW      $0510   ;       1296    129.61  54.23   313             1.528   3071.843
006FDB 7F6FDB 05 0E                           DW      $050E   ;       1294    129.39  54.10   314             1.533   3086.340
006FDD 7F6FDD 05 0C                           DW      $050C   ;       1292    129.16  53.98   315             1.538   3100.878
006FDF 7F6FDF 05 09                           DW      $0509   ;       1289    128.93  53.85   316             1.543   3115.458
006FE1 7F6FE1 05 07                           DW      $0507   ;       1287    128.71  53.73   317             1.548   3130.081
006FE3 7F6FE3 05 05                           DW      $0505   ;       1285    128.48  53.60   318             1.553   3144.746
006FE5 7F6FE5 05 03                           DW      $0503   ;       1283    128.26  53.48   319             1.558   3159.454
006FE7 7F6FE7 05 00                           DW      $0500   ;       1280    128.03  53.35   320             1.563   3174.204
006FE9 7F6FE9 04 FF                           DW      $04FF   ;       1279    127.85  53.25   321             1.567   3186.036
006FEB 7F6FEB 04 FC                           DW      $04FC   ;       1276    127.63  53.13   322             1.572   3200.863
006FED 7F6FED 04 FA                           DW      $04FA   ;       1274    127.41  53.00   323             1.577   3215.735
006FEF 7F6FEF 04 F8                           DW      $04F8   ;       1272    127.18  52.88   324             1.582   3230.650
006FF1 7F6FF1 04 F6                           DW      $04F6   ;       1270    126.96  52.76   325             1.587   3245.608
006FF3 7F6FF3 04 F3                           DW      $04F3   ;       1267    126.74  52.63   326             1.592   3260.610
006FF5 7F6FF5 04 F1                           DW      $04F1   ;       1265    126.52  52.51   327             1.597   3275.657
006FF7 7F6FF7 04 EF                           DW      $04EF   ;       1263    126.30  52.39   328             1.602   3290.747
006FF9 7F6FF9 04 ED                           DW      $04ED   ;       1261    126.12  52.29   329             1.606   3302.852
006FFB 7F6FFB 04 EB                           DW      $04EB   ;       1259    125.90  52.17   330             1.611   3318.023
006FFD 7F6FFD 04 E9                           DW      $04E9   ;       1257    125.68  52.05   331             1.616   3333.239
006FFF 7F6FFF 04 E7                           DW      $04E7   ;       1255    125.47  51.93   332             1.621   3348.500
007001 7F7001 04 E5                           DW      $04E5   ;       1253    125.25  51.80   333             1.626   3363.806
007003 7F7003 04 E2                           DW      $04E2   ;       1250    125.03  51.68   334             1.631   3379.157
007005 7F7005 04 E0                           DW      $04E0   ;       1248    124.81  51.56   335             1.636   3394.554
007007 7F7007 04 DE                           DW      $04DE   ;       1246    124.60  51.44   336             1.641   3409.997
007009 7F7009 04 DC                           DW      $04DC   ;       1244    124.38  51.32   337             1.646   3425.486
00700B 7F700B 04 DA                           DW      $04DA   ;       1242    124.21  51.23   338             1.650   3437.910
00700D 7F700D 04 D8                           DW      $04D8   ;       1240    123.99  51.11   339             1.655   3453.483
00700F 7F700F 04 D6                           DW      $04D6   ;       1238    123.78  50.99   340             1.660   3469.102
007011 7F7011 04 D4                           DW      $04D4   ;       1236    123.56  50.87   341             1.665   3484.768
007013 7F7013 04 D2                           DW      $04D2   ;       1234    123.35  50.75   342             1.670   3500.480
007015 7F7015 04 CF                           DW      $04CF   ;       1231    123.14  50.63   343             1.675   3516.241
007017 7F7017 04 CD                           DW      $04CD   ;       1229    122.92  50.51   344             1.680   3532.048
007019 7F7019 04 CB                           DW      $04CB   ;       1227    122.71  50.40   345             1.685   3547.903
00701B 7F701B 04 C9                           DW      $04C9   ;       1225    122.54  50.30   346             1.689   3560.622
00701D 7F701D 04 C7                           DW      $04C7   ;       1223    122.33  50.18   347             1.694   3576.564
00701F 7F701F 04 C5                           DW      $04C5   ;       1221    122.12  50.07   348             1.699   3592.554
007021 7F7021 04 C3                           DW      $04C3   ;       1219    121.91  49.95   349             1.704   3608.592
007023 7F7023 04 C1                           DW      $04C1   ;       1217    121.70  49.83   350             1.709   3624.679
007025 7F7025 04 BF                           DW      $04BF   ;       1215    121.49  49.72   351             1.714   3640.816
007027 7F7027 04 BD                           DW      $04BD   ;       1213    121.28  4960    352             1.719   3657.001
007029 7F7029 04 BB                           DW      $04BB   ;       1211    121.07  49.48   353             1.724   3673.236
00702B 7F702B 04 B9                           DW      $04B9   ;       1209    120.86  49.37   354             1.729   3689.520
00702D 7F702D 04 B7                           DW      $04B7   ;       1207    120.70  49.28   355             1.733   3702.583
00702F 7F702F 04 B5                           DW      $04B5   ;       1205    120.49  49.16   356             1.738   3718.958
007031 7F7031 04 B3                           DW      $04B3   ;       1203    120.28  49.04   357             1.743   3735.382
007033 7F7033 04 B1                           DW      $04B1   ;       1201    120.07  48.93   358             1.748   3751.857
007035 7F7035 04 AF                           DW      $04AF   ;       1199    119.87  48.82   359             1.753   3768.383
007037 7F7037 04 AD                           DW      $04AD   ;       1197    119.66  48.70   360             1.758   3784.960
007039 7F7039 04 AB                           DW      $04AB   ;       1195    119.46  48.59   361             1.763   3801.588
00703B 7F703B 04 A9                           DW      $04A9   ;       1193    119.25  48.47   362             1.768   3818.267
00703D 7F703D 04 A7                           DW      $04A7   ;       1191    119.09  48.38   363             1.772   3831.648
00703F 7F703F 04 A5                           DW      $04A5   ;       1189    118.88  48.27   364             1.777   3848.421
007041 7F7041 04 A3                           DW      $04A3   ;       1187    118.68  48.15   365             1.782   3865.245
007043 7F7043 04 A1                           DW      $04A1   ;       1185    118.47  48.04   366             1.787   3882.123
007045 7F7045 04 9F                           DW      $049F   ;       1183    118.27  47.93   367             1.792   3899.052
007047 7F7047 04 9D                           DW      $049D   ;       1181    118.07  47.81   368             1.797   3916.035
007049 7F7049 04 9B                           DW      $049B   ;       1179    117.86  47.70   369             1.802   3933.071
00704B 7F704B 04 99                           DW      $0499   ;       1177    117.66  47.59   370             1.807   3950.160
00704D 7F704D 04 97                           DW      $0497   ;       1175    117.46  47.48   371             1.812   3967.302
00704F 7F704F 04 95                           DW      $0495   ;       1173    117.30  47.39   372             1.816   3981.055
007051 7F7051 04 93                           DW      $0493   ;       1171    117.10  47.28   373             1.821   3998.295
007053 7F7053 04 91                           DW      $0491   ;       1169    116.90  47.16   374             1.826   4015.589
007055 7F7055 04 8F                           DW      $048F   ;       1167    116.69  47.05   375             1.831   4032.938
007057 7F7057 04 8D                           DW      $048D   ;       1165    116.49  46.94   376             1.836   4050.341
007059 7F7059 04 8B                           DW      $048B   ;       1163    116.29  46.83   377             1.841   4067.800
00705B 7F705B 04 89                           DW      $0489   ;       1161    116.10  46.72   378             1.846   4085.314
00705D 7F705D 04 87                           DW      $0487   ;       1159    115.90  46.61   379             1.851   4102.883
00705F 7F705F 04 85                           DW      $0485   ;       1157    115.74  46.52   380             1.855   4116.979
007061 7F7061 04 83                           DW      $0483   ;       1155    115.54  46.41   381             1.860   4134.65
007063 7F7063 04 81                           DW      $0481   ;       1153    115.34  46.30   382             1.865   4152.376
007065 7F7065 04 7F                           DW      $047F   ;       1151    115.14  46.19   383             1.870   4170.160
007067 7F7067 04 7D                           DW      $047D   ;       1149    114.94  46.08   384             1.875   4188.000
007069 7F7069 04 7C                           DW      $047C   ;       1148    114.75  45.97   385             1.880   4205.897
00706B 7F706B 04 7A                           DW      $047A   ;       1146    114.55  45.86   386             1.885   4223.852
00706D 7F706D 04 78                           DW      $0478   ;       1144    114.35  45.75   387             1.890   4241.865
00706F 7F706F 04 76                           DW      $0476   ;       1142    114.16  45.64   388             1.895   4259.936
007071 7F7071 04 74                           DW      $0474   ;       1140    114.00  45.56   389             1.899   4274.434
007073 7F7073 04 72                           DW      $0472   ;       1138    113.80  45.45   390             1.904   4292.610
007075 7F7075 04 70                           DW      $0470   ;       1136    113.61  45.34   391             1.909   4310.844
007077 7F7077 04 6E                           DW      $046E   ;       1134    113.41  45.23   392             1.914   4329.138
007079 7F7079 04 6C                           DW      $046C   ;       1132    113.22  45.12   393             1.919   4347.491
00707B 7F707B 04 6A                           DW      $046A   ;       1130    113.02  45.01   394             1.924   4365.904
00707D 7F707D 04 68                           DW      $0468   ;       1128    112.83  44.91   395             1.929   4384.376
00707F 7F707F 04 66                           DW      $0466   ;       1126    112.64  44.80   396             1.934   4402.909
007081 7F7081 04 65                           DW      $0465   ;       1125    112.48  44.71   397             1.938   4417.779
007083 7F7083 04 63                           DW      $0463   ;       1123    112.29  44.60   398             1.943   4436.421
007085 7F7085 04 61                           DW      $0461   ;       1121    112.10  44.50   399             1.948   4455.125
007087 7F7087 04 5F                           DW      $045F   ;       1119    111.90  44.39   400             1.953   4473.889
007089 7F7089 04 5D                           DW      $045D   ;       1117    111.71  44.28   401             1.958   4492.715
00708B 7F708B 04 5B                           DW      $045B   ;       1115    111.52  44.18   402             1.963   4511.604
00708D 7F708D 04 59                           DW      $0459   ;       1113    111.33  44.07   403             1.968   4530.554
00708F 7F708F 04 57                           DW      $0457   ;       1111    111.13  43.96   404             1.973   4549.567
007091 7F7091 04 55                           DW      $0455   ;       1109    110.94  43.86   405             1.978   4568.643
007093 7F7093 04 54                           DW      $0454   ;       1108    110.79  43.77   406             1.982   4583.950
007095 7F7095 04 52                           DW      $0452   ;       1106    110.60  43.67   407             1.987   4603.140
007097 7F7097 04 50                           DW      $0450   ;       1104    110.41  43.56   408             1.992   4622.394
007099 7F7099 04 4E                           DW      $044E   ;       1102    110.22  43.45   409             1.997   4641.712
00709B 7F709B 04 4C                           DW      $044C   ;       1100    110.03  43.35   410             2.002   4661.094
00709D 7F709D 04 4A                           DW      $044A   ;       1098    109.84  43.24   411             2.007   4680.541
00709F 7F709F 04 49                           DW      $0449   ;       1097    109.65  43.14   412             2.012   4700.054
0070A1 7F70A1 04 47                           DW      $0447   ;       1095    109.46  43.03   413             2.017   4719.631
0070A3 7F70A3 04 45                           DW      $0445   ;       1093    109.31  42.95   414             2.021   4735.341
0070A5 7F70A5 04 43                           DW      $0443   ;       1091    109.12  42.84   415             2.026   4755.037
0070A7 7F70A7 04 41                           DW      $0441   ;       1089    108.93  42.74   416             2.031   4774.800
0070A9 7F70A9 04 3F                           DW      $043F   ;       1087    108.74  42.64   417             2.036   4794.629
0070AB 7F70AB 04 3E                           DW      $043E   ;       1086    108.56  42.53   418             2.041   4814.525
0070AD 7F70AD 04 3C                           DW      $043C   ;       1084    108.37  42.43   419             2.046   4834.489
0070AF 7F70AF 04 3A                           DW      $043A   ;       1082    108.18  42.32   420             2.051   4854.520
0070B1 7F70B1 04 38                           DW      $0438   ;       1080    107.99  42.22   421             2.056   4874.620
0070B3 7F70B3 04 36                           DW      $0436   ;       1078    107.81  42.11   422             2.061   4894.787
0070B5 7F70B5 04 17                           DW      $0417   ;       1077    107.66  42.03   423             2.065   4910.971
0070B7 7F70B7 04 33                           DW      $0433   ;       1075    107.47  41.93   424             2.070   4931.263
0070B9 7F70B9 04 31                           DW      $0431   ;       1073    107.28  41.82   425             2.075   4951.624
0070BB 7F70BB 04 2F                           DW      $042F   ;       1071    107.10  41.72   426             2.080   4972.055
0070BD 7F70BD 04 2D                           DW      $042D   ;       1069    106.91  41.62   427             2.085   4992.556
0070BF 7F70BF 04 2B                           DW      $042B   ;       1067    106.73  41.51   428             2.090   5013.127
0070C1 7F70C1 04 29                           DW      $0429   ;       1065    106.54  41.41   429             2.095   5033.769
0070C3 7F70C3 04 28                           DW      $0428   ;       1064    106.36  41.31   430             2.100   5054.483
0070C5 7F70C5 04 26                           DW      $0426   ;       1062    106.21  41.23   431             2.104   5071.105
0070C7 7F70C7 04 24                           DW      $0424   ;       1060    106.02  41.12   432             2.109   5091.947
0070C9 7F70C9 04 22                           DW      $0422   ;       1058    105.84  41.02   433             2.114   5112.862
0070CB 7F70CB 04 21                           DW      $0421   ;       1057    105.66  40.92   434             2.119   5133.849
0070CD 7F70CD 04 1F                           DW      $041F   ;       1055    105.47  40.82   435             2.124   5154.910
0070CF 7F70CF 04 1D                           DW      $041D   ;       1053    105.29  40.72   436             2.129   5176.043
0070D1 7F70D1 04 1B                           DW      $041B   ;       1051    105.10  40.61   437             2.134   5197.251
0070D3 7F70D3 04 19                           DW      $0419   ;       1049    104.92  40.51   438             2.139   5218.532
0070D5 7F70D5 04 17                           DW      $0417   ;       1047    104.74  40.41   439             2.144   5239.888
0070D7 7F70D7 04 16                           DW      $0416   ;       1046    104.59  40.33   440             2.148   5257.027
0070D9 7F70D9 04 14                           DW      $0414   ;       1044    104.41  40.23   441             2.153   5278.518
0070DB 7F70DB 04 12                           DW      $0412   ;       1042    104.23  40.13   442             2.158   5300.084
0070DD 7F70DD 04 10                           DW      $0410   ;       1040    104.04  40.02   443             2.163   5321.727
0070DF 7F70DF 04 0F                           DW      $040F   ;       1039    103.86  39.92   444             2.168   5343.446
0070E1 7F70E1 04 0D                           DW      $040D   ;       1037    103.68  39.82   445             2.173   5365.242
0070E3 7F70E3 04 0B                           DW      $040B   ;       1035    103.50  39.72   446             2.178   5387.116
0070E5 7F70E5 04 09                           DW      $0409   ;       1033    103.32  39.62   447             2.183   5409.066
0070E7 7F70E7 04 07                           DW      $0407   ;       1031    103.14  39.52   448             2.188   5431.095
0070E9 7F70E9 04 06                           DW      $0406   ;       1030    102.99  39.44   449             2.192   5448.775
0070EB 7F70EB 04 04                           DW      $0404   ;       1028    102.81  39.34   450             2.197   5470.945
0070ED 7F70ED 04 02                           DW      $0402   ;       1026    102.63  39.24   451             2.202   5493.195
0070EF 7F70EF 04 01                           DW      $0401   ;       1025    102.45  39.14   452             2.207   5515.525
0070F1 7F70F1 03 FF                           DW      $03FF   ;       1023    102.27  39.04   453             2.212   5537.934
0070F3 7F70F3 03 FD                           DW      $03FD   ;       1021    102.09  38.94   454             2.217   5560.424
0070F5 7F70F5 03 FB                           DW      $03FB   ;       1019    101.91  38.84   455             2.222   5582.995
0070F7 7F70F7 03 F9                           DW      $03F9   ;       1017    101.73  38.74   456             2.227   5605.647
0070F9 7F70F9 03 F8                           DW      $03F8   ;       1016    101.58  38.66   457             2.231   5623.828
0070FB 7F70FB 03 F6                           DW      $03F6   ;       1014    101.40  38.56   458             2.236   5646.628
0070FD 7F70FD 03 F4                           DW      $03F4   ;       1012    101.22  38.46   459             2.241   5669.511
0070FF 7F70FF 03 F3                           DW      $03F3   ;       1011    101.05  38.36   460             2.246   5692.476
007101 7F7101 03 F1                           DW      $03F1   ;       1009    100.87  38.26   461             2.251   5715.526
007103 7F7103 03 EF                           DW      $03EF   ;       1007    100.69  38.16   462             2.256   5738.659
007105 7F7105 03 ED                           DW      $03ED   ;       1005    100.51  38.06   463             2.261   5761.887
007107 7F7107 03 EB                           DW      $03EB   ;       1003    100.33  37.96   464             2.266   5785.179
007109 7F7109 03 EA                           DW      $03EA   ;       1002    100.15  37.86   465             2.271   5808.567
00710B 7F710B 03 E8                           DW      $03E8   ;       1000    100.01  37.78   466             2.275   5827.339
00710D 7F710D 03 E6                           DW      $03E6   ;       998         99.83       37.68   467             2.280   5850.882
00710F 7F710F 03 E5                           DW      $03E5   ;       997     99.65   37.59   468             2.285   5874.512
007111 7F7111 03 E3                           DW      $03E3   ;       995     99.48   37.49   469             2.290   5898.229
007113 7F7113 03 E1                           DW      $03E1   ;       993     99.30   37.39   470             2.295   5922.033
007115 7F7115 03 DF                           DW      $03DF   ;       991     99.12   37.29   471             2.300   5945.926
007117 7F7117 03 DD                           DW      $03DD   ;       989     98.94   37.19   472             2.305   5969.907
007119 7F7119 03 DC                           DW      $03DC   ;       988     98.77   37.09   473             2.310   5993.978
00711B 7F711B 03 DA                           DW      $03DA   ;       986     98.63   37.01   474             2.314   6013.299
00711D 7F711D 03 D9                           DW      $03D9   ;       985     98.45   36.92   475             2.319   6037.531
00711F 7F711F 03 D7                           DW      $03D7   ;       983     98.27   36.82   476             2.324   6061.854
007121 7F7121 03 D5                           DW      $03D5   ;       981     98.10   36.72   477             2.329   6086.267
007123 7F7123 03 D3                           DW      $03D3   ;       979     97.92   36.62   478             2.334   6110.773
007125 7F7125 03 D1                           DW      $03D1   ;       977     97.74   36.52   479             2.339   6135.370
007127 7F7127 03 D0                           DW      $03D0   ;       976     97.57   36.43   480             2.344   6160.060
007129 7F7129 03 CE                           DW      $03CE   ;       974     97.39   36.33   481             2.349   6184.843
00712B 7F712B 03 CC                           DW      $03CC   ;       972     97.21   36.23   482             2.354   6209.720
00712D 7F712D 03 CA                           DW      $03CA   ;       970     97.07   36.15   483             2.358   6229.690
00712F 7F712F 03 C9                           DW      $03C9   ;       969     96.90   36.05   484             2.363   6254.736
007131 7F7131 03 C7                           DW      $03C7   ;       967     96.72   35.96   485             2.368   6279.878
007133 7F7133 03 C6                           DW      $03C6   ;       966     95.86   35.86   486             2.373   6305.116
007135 7F7135 03 C4                           DW      $03C4   ;       964     96.37   35.76   487             2.378   6330.450
007137 7F7137 03 C2                           DW      $03C2   ;       962     96.20   35.67   488             2.383   6355.881
007139 7F7139 03 C0                           DW      $03C0   ;       960     96.02   35.57   489             2.388   6381.409
00713B 7F713B 03 BF                           DW      $03BF   ;       959     95.85   35.47   490             2.393   6407.035
00713D 7F713D 03 BD                           DW      $03BD   ;       957     95.39   35.39   491             2.397   6427.607
00713F 7F713F 03 BB                           DW      $03BB   ;       955     95.53   35.30   492             2.402   6453.410
007141 7F7141 03 BA                           DW      $03BA   ;       954     95.36   35.20   493             2.407   6479.314
007143 7F7143 03 B8                           DW      $03B8   ;       952     95.19   35.10   494             2.412   6505.317
007145 7F7145 03 B6                           DW      $03B6   ;       950     95.01   35.00   495             2.417   6531.421
007147 7F7147 03 B4                           DW      $03B4   ;       948     94.84   34.91   496             2.422   6557.626
007149 7F7149 03 B3                           DW      $03B3   ;       947     94.66   34.81   497             2.427   6583.933
00714B 7F714B 03 B1                           DW      $03B1   ;       945     94.49   34.72   498             2.432   6610.343
00714D 7F714D 03 AF                           DW      $03AF   ;       943     94.32   34.62   499             2.437   6636.855
00714F 7F714F 03 AE                           DW      $03AE   ;       942     94.18   34.54   500             2.441   6658.140
007151 7F7151 03 AC                           DW      $03AC   ;       940     94.00   34.45   501             2.446   6684.839
007153 7F7153 03 AA                           DW      $03AA   ;       938     93.83   34.35   502             2.451   6711.644
007155 7F7155 03 A9                           DW      $03A9   ;       937     93.66   34.25   503             2.456   6738.553
007157 7F7157 03 A7                           DW      $03A7   ;       935     93.48   34.16   504             2.461   6765.569
007159 7F7159 03 A5                           DW      $03A5   ;       933     93.31   34.06   505             2.466   6792.691
00715B 7F715B 03 A3                           DW      $03A3   ;       931     93.14   33.97   506             2.471   6819.921
00715D 7F715D 03 A2                           DW      $03A2   ;       930     92.97   33.87   507             2.476   6847.258
00715F 7F715F 03 A0                           DW      $03A0   ;       928     92.83   33.79   508             2.480   6869.206
007161 7F7161 03 9F                           DW      $039F   ;       927     92.65   33.70   509             2.485   6896.740
007163 7F7163 03 9D                           DW      $039D   ;       925     92.48   33.60   510             2.490   6924.382
007165 7F7165 03 9B                           DW      $039B   ;       923     92.31   33.51   511             2.495   6952.136
007167 7F7167 03 99                           DW      $0399   ;       921     92.14   33.41   512             2.500   6980.000
007169 7F7169 03 98                           DW      $0398   ;       920     91.96   33.31   513             2.505   7007.976
00716B 7F716B 03 96                           DW      $0396   ;       918     91.79   33.22   514             2.510   7036.064
00716D 7F716D 03 94                           DW      $0394   ;       916     91.62   33.12   515             2.515   7064.266
00716F 7F716F 03 93                           DW      $0393   ;       915     91.45   33.03   516             2.520   7092.581
007171 7F7171 03 91                           DW      $0391   ;       913     91.31   32.95   517             2.524   7115.315
007173 7F7173 03 8F                           DW      $038F   ;       911     91.14   32.85   518             2.529   7143.837
007175 7F7175 03 8E                           DW      $038E   ;       910     90.97   32.76   519             2.534   7172.474
007177 7F7177 03 8C                           DW      $038C   ;       908     90.80   32.66   520             2.539   7201.227
007179 7F7179 03 8A                           DW      $038A   ;       906     90.62   32.57   521             2.544   7230.098
00717B 7F717B 03 89                           DW      $0389   ;       905     90.45   32.47   522             2.549   7259.086
00717D 7F717D 03 87                           DW      $0387   ;       903     90.28   32.38   523             2.554   7288.193
00717F 7F717F 03 85                           DW      $0385   ;       901     90.11   32.28   524             2.559   7317.419
007181 7F7181 03 84                           DW      $0384   ;       900     89.97   32.21   525             2.563   7340.886
007183 7F7183 03 82                           DW      $0382   ;       898     89.80   32.11   526             2.568   7370.329
007185 7F7185 03 80                           DW      $0380   ;       896     89.63   32.02   527             2.573   7399.893
007187 7F7187 03 7F                           DW      $037F   ;       895     89.46   31.92   528             2.578   7429.579
007189 7F7189 03 7D                           DW      $037D   ;       893     89.29   31.83   529             2.583   7459.388
00718B 7F718B 03 7B                           DW      $037B   ;       891     89.12   31.73   530             2.588   7489.320
00718D 7F718D 03 7A                           DW      $037A   ;       890     88.95   31.64   531             2.593   7519.377
00718F 7F718F 03 78                           DW      $0378   ;       888     88.78   31.54   532             2.598   7549.559
007191 7F7191 03 76                           DW      $0376   ;       886     88.61   31.45   533             2.603   7579.866
007193 7F7193 03 75                           DW      $0375   ;       885     88.47   31.37   534             2.607   7604.204
007195 7F7195 03 73                           DW      $0373   ;       883     88.30   31.28   535             2.612   7634.740
007197 7F7197 03 71                           DW      $0371   ;       881     88.13   31.18   536             2.617   7665.405
007199 7F7199 03 70                           DW      $0370   ;       880     87.96   31.09   537             2.622   7696.198
00719B 7F719B 03 6E                           DW      $036E   ;       878     87.79   30.99   538             2.627   7727.122
00719D 7F719D 03 6C                           DW      $036C   ;       876     87.62   30.90   539             2.632   7758.176
00719F 7F719F 03 6B                           DW      $036B   ;       875     87.45   30.80   540             2.637   7789.361
0071A1 7F71A1 03 69                           DW      $0369   ;       873     87.28   30.71   541             2.642   7820.679
0071A3 7F71A3 03 67                           DW      $0367   ;       871     87.14   30.63   542             2.646   7845.828
0071A5 7F71A5 03 66                           DW      $0366   ;       870     86.97   30.54   543             2.651   7877.386
0071A7 7F71A7 03 64                           DW      $0364   ;       868     86.80   30.44   544             2.656   7909.078
0071A9 7F71A9 03 62                           DW      $0362   ;       866     86.63   30.35   545             2.661   7940.906
0071AB 7F71AB 03 61                           DW      $0361   ;       865     86.46   30.26   546             2.666   7972.871
0071AD 7F71AD 03 5F                           DW      $035F   ;       863     86.29   30.16   547             2.671   8004.972
0071AF 7F71AF 03 5D                           DW      $035D   ;       861     86.12   30.07   548             2.676   8037.212
0071B1 7F71B1 03 5C                           DW      $035C   ;       860     85.95   29.97   549             2.681   8069.590
0071B3 7F71B3 03 5A                           DW      $035A   ;       858     85.78   29.88   550             2.686   8102.109
0071B5 7F71B5 03 58                           DW      $0358   ;       856     85.64   29.80   551             2.690   8128.225
0071B7 7F71B7 03 57                           DW      $0357   ;       855     85.47   29.71   552             2.695   8160.998
0071B9 7F71B9 03 55                           DW      $0355   ;       853     85.30   29.61   553             2.700   8193.913
0071BB 7F71BB 03 53                           DW      $0353   ;       851     85.14   29.52   554             2.705   8226.972
0071BD 7F71BD 03 52                           DW      $0352   ;       850     84.97   29.43   555             2.710   8260.175
0071BF 7F71BF 03 50                           DW      $0350   ;       848     84.80   29.33   556             2.715   8293.523
0071C1 7F71C1 03 4E                           DW      $034E   ;       846     84.63   29.24   557             2.720   8327.018
0071C3 7F71C3 03 4D                           DW      $034D   ;       845     84.46   29.14   558             2.725   8360.659
0071C5 7F71C5 03 4B                           DW      $034B   ;       843     84.32   29.07   559             2.729   8387.679
0071C7 7F71C7 03 4A                           DW      $034A   ;       842     84.15   28.97   560             2.734   8421.589
0071C9 7F71C9 03 48                           DW      $0348   ;       840     83.98   28.88   561             2.739   8455.648
0071CB 7F71CB 03 46                           DW      $0346   ;       838     83.81   28.78   562             2.744   8489.858
0071CD 7F71CD 03 44                           DW      $0344   ;       836     83.64   28.69   563             2.749   8524.220
0071CF 7F71CF 03 43                           DW      $0343   ;       835     83.47   28.60   564             2.754   8558.736
0071D1 7F71D1 03 41                           DW      $0341   ;       833     83.30   28.50   565             2.759   8593.405
0071D3 7F71D3 03 3F                           DW      $033F   ;       831     83.14   28.41   566             2.764   8628.229
0071D5 7F71D5 03 3E                           DW      $033E   ;       830     82.97   28.31   567             2.769   8663.209
0071D7 7F71D7 03 3C                           DW      $033C   ;       828     82.83   28.24   568             2.773   8691.307
0071D9 7F71D9 03 3B                           DW      $033B   ;       827     82.66   28.15   569             2.778   8726.571
0071DB 7F71DB 03 39                           DW      $0339   ;       825     82.49   28.05   570             2.783   8761.994
0071DD 7F71DD 03 37                           DW      $0337   ;       823     82.32   27.96   571             2.788   8797.577
0071DF 7F71DF 03 36                           DW      $0336   ;       822     82.15   27.86   572             2.793   8833.321
0071E1 7F71E1 03 34                           DW      $0334   ;       820     81.98   27.77   573             2.798   8869.228
0071E3 7F71E3 03 32                           DW      $0332   ;       818     81.82   27.68   574             2.803   8905.298
0071E5 7F71E5 03 31                           DW      $0331   ;       817     81.65   27.58   575             2.808   8941.533
0071E7 7F71E7 03 2F                           DW      $032F   ;       815     81.48   27.49   576             2.813   8977.933
0071E9 7F71E9 03 2D                           DW      $032D   ;       813     81.34   27.41   577             2.817   9007.174
0071EB 7F71EB 03 2C                           DW      $032C   ;       812     81.17   27.32   578             2.822   9043.875
0071ED 7F71ED 03 2A                           DW      $032A   ;       810     81.00   27.22   579             2.827   9080.746
0071EF 7F71EF 03 28                           DW      $0328   ;       808     80.83   27.13   580             2.832   9117.786
0071F1 7F71F1 03 27                           DW      $0327   ;       807     80.67   27.04   581             2.837   9154.998
0071F3 7F71F3 03 25                           DW      $0325   ;       805     80.50   26.94   582             2.842   9192.382
0071F5 7F71F5 03 23                           DW      $0323   ;       803     80.30   26.85   583             2.847   9229.940
0071F7 7F71F7 03 22                           DW      $0322   ;       802     80.16   26.75   584             2.852   9267.672
0071F9 7F71F9 03 20                           DW      $0320   ;       800     80.02   26.68   585             2.856   9297.985
0071FB 7F71FB 03 1F                           DW      $031F   ;       799     79.85   26.59   586             2.861   9336.036
0071FD 7F71FD 03 1D                           DW      $031D   ;       797     79.68   26.49   587             2.866   9374.264
0071FF 7F71FF 03 1B                           DW      $031B   ;       795     79.52   26.40   588             2.871   9412.673
007201 7F7201 03 19                           DW      $0319   ;       793     79.35   26.30   589             2.876   9451.262
007203 7F7203 03 18                           DW      $0318   ;       792     79.18   26.21   590             2.881   9490.033
007205 7F7205 03 16                           DW      $0316   ;       790     79.00   26.12   591             2.886   9528.988
007207 7F7207 03 14                           DW      $0314   ;       788     78.84   26.02   592             2.891   9568.127
007209 7F7209 03 13                           DW      $0313   ;       787     78.67   25.93   593             2.896   9607.452
00720B 7F720B 03 11                           DW      $0311   ;       785     78.53   25.85   594             2.900   9639.048
00720D 7F720D 03 10                           DW      $0310   ;       784     78.36   25.76   595             2.905   9678.711
00720F 7F720F 03 0E                           DW      $030E   ;       782     78.19   25.66   596             2.910   9718.565
007211 7F7211 03 0C                           DW      $030C   ;       780     78.03   25.57   597             2.915   9758.609
007213 7F7213 03 0B                           DW      $030B   ;       779     77.86   25.48   598             2.920   9798.846
007215 7F7215 03 09                           DW      $0309   ;       777     77.69   25.38   599             2.925   9839.277
007217 7F7217 03 07                           DW      $0307   ;       775     77.52   25.29   600             2.930   9879.903
007219 7F7219 03 06                           DW      $0306   ;       774     77.35   25.19   601             2.935   9920.726
00721B 7F721B 03 04                           DW      $0304   ;       772     77.21   25.12   602             2.939   9953.527
00721D 7F721D 03 02                           DW      $0302   ;       770     77.04   25.02   603             2.944   9994.708
00721F 7F721F 03 01                           DW      $0301   ;       769     76.87   24.93   604             2.949   10036.090
007221 7F7221 02 FF                           DW      $02FF   ;       767     76.70   24.84   605             2.954   10077.674
007223 7F7223 02 FD                           DW      $02FD   ;       765     76.53   24.74   606             2.959   10119.461
007225 7F7225 02 FC                           DW      $02FC   ;       764     76.36   24.65   607             2.964   10161.454
007227 7F7227 02 FA                           DW      $02FA   ;       762     76.20   24.55   608             2.969   10203.635
007229 7F7229 02 F8                           DW      $02F8   ;       760     76.03   24.46   609             2.974   10246.061
00722B 7F722B 02 F7                           DW      $02F7   ;       759     75.86   24.36   610             2.979   10288.679
00722D 7F722D 02 F5                           DW      $02F5   ;       757     75.72   24.29   611             2.983   10322.925
00722F 7F722F 02 F4                           DW      $02F4   ;       756     75.55   24.19   612             2.988   10365.924
007231 7F7231 02 F2                           DW      $02F2   ;       754     75.38   24.10   613             2.993   10409.138
007233 7F7233 02 F0                           DW      $02F0   ;       752     75.21   24.00   614             2.998   10452.567
007235 7F7235 02 EE                           DW      $02EE   ;       750     75.04   23.91   615             3.003   10496.214
007237 7F7237 02 ED                           DW      $02ED   ;       749     74.87   23.82   616             3.008   10540.080
007239 7F7239 02 EB                           DW      $02EB   ;       747     74.70   23.72   617             3.013   10584.167
00723B 7F723B 02 E9                           DW      $02E9   ;       745     74.53   23.63   618             3.018   10628.476
00723D 7F723D 02 E8                           DW      $02E8   ;       744     74.39   23.55   619             3.022   10664.085
00723F 7F723F 02 E6                           DW      $02E6   ;       742     74.22   23.46   620             3.027   10708.799
007241 7F7241 02 E4                           DW      $02E4   ;       740     74.05   23.36   621             3.032   10753.740
007243 7F7243 02 E3                           DW      $02E3   ;       739     73.88   23.27   622             3.037   10798.910
007245 7F7245 02 E1                           DW      $02E1   ;       737     73.71   23.17   623             3.042   10844.311
007247 7F7247 02 DF                           DW      $02DF   ;       735     73.54   23.08   624             3.047   10889.944
007249 7F7249 02 DE                           DW      $02DE   ;       734     73.37   22.98   625             3.052   10935.811
00724B 7F724B 02 DC                           DW      $02DC   ;       732     73.20   22.89   626             3.057   10981.915
00724D 7F724D 02 DA                           DW      $02DA   ;       730     73.03   22.80   627             3.062   11028.256
00724F 7F724F 02 D9                           DW      $02D9   ;       729     72.90   22.72   628             3.066   11065.502
007251 7F7251 02 D7                           DW      $02D7   ;       727     72.72   22.62   629             3.071   11112.276
007253 7F7253 02 D6                           DW      $02D6   ;       726     72.55   22.53   630             3.076   11159.293
007255 7F7255 02 D4                           DW      $02D4   ;       724     72.38   22.43   631             3.081   11206.555
007257 7F7257 02 D2                           DW      $02D2   ;       722     72.21   22.34   632             3.086   11254.065
007259 7F7259 02 D0                           DW      $02D0   ;       720     72.04   22.24   633             3.091   11301.823
00725B 7F725B 02 CF                           DW      $02CF   ;       719     71.87   22.15   634             3.096   11349.832
00725D 7F725D 02 CD                           DW      $02CD   ;       717     71.70   22.05   635             3.101   11398.094
00725F 7F725F 02 CC                           DW      $02CC   ;       716     71.56   21.98   636             3.105   11436.887
007261 7F7261 02 CA                           DW      $02CA   ;       714     71.39   21.88   637             3.110   11485.608
007263 7F7263 02 C8                           DW      $02C8   ;       712     71.22   21.79   638             3.115   11534.589
007265 7F7265 02 C7                           DW      $02C7   ;       711     71.05   21.69   639             3.120   11583.830
007267 7F7267 02 C5                           DW      $02C5   ;       709     70.88   21.60   640             3.125   11633.333
007269 7F7269 02 C3                           DW      $02C3   ;       707     70.70   21.50   641             3.130   11683.102
00726B 7F726B 02 C1                           DW      $02C1   ;       705     70.53   21.41   642             3.135   11733.137
00726D 7F726D 02 C0                           DW      $02C0   ;       704     70.36   21.31   643             3.140   11783.441
00726F 7F726F 02 BE                           DW      $02BE   ;       702     70.19   21.22   644             3.145   11834.016
007271 7F7271 02 BD                           DW      $02BD   ;       701     70.05   21.14   645             3.149   11874.673
007273 7F7273 02 BB                           DW      $02BB   ;       699     69.88   21.04   646             3.154   11925.742
007275 7F7275 02 B9                           DW      $02B9   ;       697     69.71   20.95   647             3.159   11977.089
007277 7F7277 02 B7                           DW      $02B7   ;       695     69.53   20.85   648             3.164   12028.715
007279 7F7279 02 B6                           DW      $02B6   ;       694     69.36   20.76   649             3.169   12080.623
00727B 7F727B 02 B4                           DW      $02B4   ;       692     69.19   20.66   650             3.174   12132.815
00727D 7F727D 02 B2                           DW      $02B2   ;       690     69.02   20.57   651             3.179   12185.294
00727F 7F727F 02 B0                           DW      $02B0   ;       688     68.84   20.47   652             3.184   12238.062
007281 7F7281 02 AF                           DW      $02AF   ;       687     68.71   20.39   653             3.188   12280.486
007283 7F7283 02 AD                           DW      $02AD   ;       685     68.53   20.30   654             3.193   12333.780
007285 7F7285 02 AC                           DW      $02AC   ;       684     68.36   20.20   655             3.198   12387.370
007287 7F7287 02 AA                           DW      $02AA   ;       682     68.19   20.10   656             3.203   12441.258
007289 7F7289 02 A8                           DW      $02A8   ;       680     68.01   20.00   657             3.208   12495.446
00728B 7F728B 02 A6                           DW      $02A6   ;       678     67.84   19.91   658             3.213   12549.938
00728D 7F728D 02 A5                           DW      $02A5   ;       677     67.67   19.81   659             3.218   12604.736
00728F 7F728F 02 A3                           DW      $02A3   ;       675     67.49   19.72   660             3.223   12659.842
007291 7F7291 02 A1                           DW      $02A1   ;       673     67.32   19.62   661             3.228   12715.260
007293 7F7293 02 A0                           DW      $02A0   ;       672     67.18   19.54   662             3.232   12759.819
007295 7F7295 02 9E                           DW      $029E   ;       670     67.01   19.45   663             3.237   12815.803
007297 7F7297 02 9C                           DW      $029C   ;       668     66.83   19.35   664             3.242   12872.105
007299 7F7299 02 9B                           DW      $029B   ;       667     66.66   19.26   665             3.247   12928.728
00729B 7F729B 02 99                           DW      $0299   ;       665     66.49   19.16   666             3.252   12985.675
00729D 7F729D 02 97                           DW      $0297   ;       663     66.31   19.06   667             3.257   13042.949
00729F 7F729F 02 95                           DW      $0295   ;       661     66.14   18.96   668             3.262   13100.552
0072A1 7F72A1 02 94                           DW      $0294   ;       660     65.96   18.87   669             3.267   13158.488
0072A3 7F72A3 02 92                           DW      $0292   ;       658     65.82   18.79   670             3.271   13205.078
0072A5 7F72A5 02 91                           DW      $0291   ;       657     65.65   18.69   671             3.276   13263.619
0072A7 7F72A7 02 8F                           DW      $028F   ;       655     65.47   18.60   672             3.281   13322.501
0072A9 7F72A9 02 8D                           DW      $028D   ;       653     65.30   18.50   673             3.286   13381.727
0072AB 7F72AB 02 8B                           DW      $028B   ;       651     65.12   18.40   674             3.291   13441.299
0072AD 7F72AD 02 8A                           DW      $028A   ;       650     64.95   18.30   675             3.296   13501.221
0072AF 7F72AF 02 88                           DW      $0288   ;       648     64.77   18.21   676             3.301   13561.495
0072B1 7F72B1 02 86                           DW      $0286   ;       646     64.59   18.11   677             3.306   13622.125
0072B3 7F72B3 02 84                           DW      $0284   ;       644     64.42   18.01   678             3.311   13683.114
0072B5 7F72B5 02 83                           DW      $0283   ;       643     64.28   17.93   679             3.315   13732.166
0072B7 7F72B7 02 81                           DW      $0281   ;       641     64.10   17.83   680             3.320   13793.81
0072B9 7F72B9 02 7F                           DW      $027F   ;       639     63.93   17.74   681             3.325   13855.821
0072BB 7F72BB 02 7E                           DW      $027E   ;       638     63.75   17.64   682             3.330   13981.204
0072BD 7F72BD 02 7C                           DW      $027C   ;       636     63.57   17.54   683             3.335   13980.961
0072BF 7F72BF 02 7A                           DW      $027A   ;       634     63.40   17.44   684             3.340   14044.096
0072C1 7F72C1 02 78                           DW      $0278   ;       632     63.22   17.34   685             3.345   14107.613
0072C3 7F72C3 02 76                           DW      $0276   ;       630     63.04   17.24   686             3.350   14171.515
0072C5 7F72C5 02 75                           DW      $0275   ;       629     62.90   17.17   687             3.354   14222.916
0072C7 7F72C7 02 73                           DW      $0273   ;       627     62.72   17.07   688             3.359   14287.520
0072C9 7F72C9 02 71                           DW      $0271   ;       625     62.54   16.97   689             3.364   14352.518
0072CB 7F72CB 02 70                           DW      $0270   ;       624     62.37   16.87   690             3.369   14417.915
0072CD 7F72CD 02 6E                           DW      $026E   ;       622     62.19   16.77   691             3.374   14483.715
0072CF 7F72CF 02 6C                           DW      $026C   ;       620     62.01   16.67   692             3.379   14549.920
0072D1 7F72D1 02 6A                           DW      $026A   ;       618     61.83   16.57   693             3.384   14616.535
0072D3 7F72D3 02 69                           DW      $0269   ;       617     61.65   16.47   694             3.389   14683.563
0072D5 7F72D5 02 67                           DW      $0267   ;       615     61.47   16.37   695             3.394   14751.009
0072D7 7F72D7 02 65                           DW      $0265   ;       613     61.33   16.30   696             3.398   14805.268
0072D9 7F72D9 02 64                           DW      $0264   ;       612     61.15   16.20   697             3.403   14873.475
0072DB 7F72DB 02 62                           DW      $0262   ;       610     60.97   16.10   698             3.408   14942.111
0072DD 7F72DD 02 60                           DW      $0260   ;       608     60.79   16.00   699             3.413   15011.178
0072DF 7F72DF 02 5E                           DW      $025E   ;       606     60.61   15.90   700             3.418   15080.683
0072E1 7F72E1 02 5C                           DW      $025C   ;       604     60.43   15.80   701             3.423   15150.628
0072E3 7F72E3 02 5B                           DW      $025B   ;       603     60.25   15.70   702             3.428   15221.018
0072E5 7F72E5 02 59                           DW      $0259   ;       601     60.07   15.60   703             3.433   15291.857
0072E7 7F72E7 02 57                           DW      $0257   ;       599     59.89   15.50   704             3.438   15363.150
0072E9 7F72E9 02 56                           DW      $0256   ;       598     59.75   15.41   705             3.442   15420.513
0072EB 7F72EB 02 54                           DW      $0254   ;       596     59.57   15.32   706             3.447   15492.634
0072ED 7F72ED 02 52                           DW      $0252   ;       594     59.39   15.22   707             3.452   15565.220
0072EF 7F72EF 02 50                           DW      $0250   ;       592     59.21   15.11   708             3.457   15638.276
0072F1 7F72F1 02 4E                           DW      $024E   ;       590     59.02   15.01   709             3.462   15711.808
0072F3 7F72F3 02 4C                           DW      $024C   ;       588     58.84   14.91   710             3.467   15785.819
0072F5 7F72F5 02 4B                           DW      $024B   ;       587     58.66   14.81   711             3.472   15860.314
0072F7 7F72F7 02 49                           DW      $0249   ;       585     58.48   14.71   712             3.477   15935.299
0072F9 7F72F9 02 47                           DW      $0247   ;       583     58.33   14.63   713             3.481   15995.642
0072FB 7F72FB 02 46                           DW      $0246   ;       582     58.15   14.53   714             3.486   16071.519
0072FD 7F72FD 02 44                           DW      $0244   ;       580     57.97   14.43   715             3.491   16147.899
0072FF 7F72FF 02 42                           DW      $0242   ;       578     57.78   14.32   716             3.496   16224.787
007301 7F7301 02 40                           DW      $0240   ;       576     57.60   14.22   717             3.501   16302.188
007303 7F7303 02 3E                           DW      $023E   ;       574     57.42   14.12   718             3.506   16380.107
007305 7F7305 02 3C                           DW      $023C   ;       572     57.23   14.02   719             3.511   16458.549
007307 7F7307 02 3B                           DW      $023B   ;       571     57.05   13.92   720             3.516   16537.520
007309 7F7309 02 39                           DW      $0239   ;       569     56.87   13.81   721             3.521   16617.025
00730B 7F730B 02 37                           DW      $0237   ;       567     56.72   13.73   722             3.525   16681.017
00730D 7F730D 02 35                           DW      $0235   ;       565     56.53   13.63   723             3.530   16761.497
00730F 7F730F 02 34                           DW      $0234   ;       564     56.35   13.53   724             3.535   16842.526
007311 7F7311 02 32                           DW      $0232   ;       562     56.16   13.42   725             3.540   16924.110
007313 7F7313 02 30                           DW      $0230   ;       560     55.98   13.32   726             3.545   17006.254
007315 7F7315 02 2E                           DW      $022E   ;       558     55.79   13.22   727             3.550   17088.966
007317 7F7317 02 2C                           DW      $022C   ;       556     55.61   13.11   728             3.555   17172.249
007319 7F7319 02 2A                           DW      $022A   ;       554     55.42   13.01   729             3.560   17256.111
00731B 7F731B 02 29                           DW      $0229   ;       553     55.27   12.93   730             3.564   17323.621
00731D 7F731D 02 27                           DW      $0227   ;       551     55.08   12.82   731             3.569   17408.539
00731F 7F731F 02 25                           DW      $0225   ;       549     54.90   12.72   732             3.574   17494.053
007321 7F7321 02 23                           DW      $0223   ;       547     54.71   12.62   733             3.579   17580.169
007323 7F7323 02 21                           DW      $0221   ;       545     54.52   12.51   734             3.584   17666.893
007325 7F7325 02 1F                           DW      $021F   ;       543     54.34   12.41   735             3.589   17754.231
007327 7F7327 02 1E                           DW      $021E   ;       542     54.15   12.30   736             3.594   17842.191
007329 7F7329 02 1C                           DW      $021C   ;       540     53.96   12.20   737             3.599   17930.778
00732B 7F732B 02 1A                           DW      $021A   ;       538     53.77   12.09   738             3.604   18020.000
00732D 7F732D 02 18                           DW      $0218   ;       536     53.62   12.01   739             3.608   18091.839
00732F 7F732F 02 16                           DW      $0216   ;       534     53.43   11.91   740             3.613   18182.221
007331 7F7331 02 14                           DW      $0214   ;       532     53.24   11.80   741             3.618   18273.256
007333 7F7333 02 13                           DW      $0213   ;       531     53.05   11.69   742             3.623   18364.953
007335 7F7335 02 11                           DW      $0211   ;       529     52.86   11.59   743             3.628   18457.318
007337 7F7337 02 0F                           DW      $020F   ;       527     52.67   11.48   744             3.633   18550.358
007339 7F7339 02 0D                           DW      $020D   ;       525     52.48   11.38   745             3.638   18644.082
00733B 7F733B 02 0B                           DW      $020B   ;       523     52.29   11.27   746             3.643   18738.497
00733D 7F733D 02 09                           DW      $0209   ;       521     52.14   11.19   747             3.647   18814.531
00733F 7F733F 02 07                           DW      $0207   ;       519     51.94   11.08   748             3.652   18910.208
007341 7F7341 02 06                           DW      $0206   ;       518     51.75   10.97   749             3.657   19006.597
007343 7F7343 02 04                           DW      $0204   ;       516     51.56   10.87   750             3.662   19103.707
007345 7F7345 02 02                           DW      $0202   ;       514     51.37   10.76   751             3.667   19201.545
007347 7F7347 02 00                           DW      $0200   ;       512     51.17   10.65   752             3.672   19300.120
007349 7F7349 01 FE                           DW      $01FE   ;       510     50.98   10.54   753             3.677   19399.441
00734B 7F734B 01 FC                           DW      $01FC   ;       508     50.79   10.44   754             3.682   19449.514
00734D 7F734D 01 FA                           DW      $01FA   ;       506     50.59   10.33   755             3.687   19600.350
00734F 7F734F 01 F8                           DW      $01F8   ;       504     50.44   10.24   756             3.691   19681.574
007351 7F7351 01 F6                           DW      $01F6   ;       502     50.24   10.14   757             3.696   19783.804
007353 7F7353 01 F5                           DW      $01F5   ;       501     50.05   10.03   758             3.701   19886.821
007355 7F7355 01 F3                           DW      $01F3   ;       499     49.85   9.92    759             3.706   19990.634
007357 7F7357 01 F1                           DW      $01F1   ;       497     49.66   9.81    760             3.711   20095.252
007359 7F7359 01 EF                           DW      $01EF   ;       495     49.46   9.70    761             3.716   20200.685
00735B 7F735B 01 ED                           DW      $01ED   ;       493     49.27   9.59    762             3.721   20306.943
00735D 7F735D 01 EB                           DW      $01EB   ;       491     49.07   9.48    763             3.726   20414.035
00735F 7F735F 01 E9                           DW      $01E9   ;       489     48.91   9.39    764             3.730   20500.315
007361 7F7361 01 E7                           DW      $01E7   ;       487     48.71   9.29    765             3.735   20608.933
007363 7F7363 01 E5                           DW      $01E5   ;       485     48.52   9.18    766             3.740   20718.413
007365 7F7365 01 E3                           DW      $01E3   ;       483     48.32   9.07    767             3.745   20828.765
007367 7F7367 01 E1                           DW      $01E1   ;       481     48.12   8.95    768             3.750   20940.000
007369 7F7369 01 DF                           DW      $01DF   ;       479     47.92   8.84    769             3.755   21052.129
00736B 7F736B 01 DD                           DW      $01DD   ;       477     47.72   8.73    770             3.760   21165.161
00736D 7F736D 01 DB                           DW      $01DB   ;       475     47.52   8.62    771             3.765   21279.109
00736F 7F736F 01 D9                           DW      $01D9   ;       473     47.32   8.51    772             3.770   21393.984
007371 7F7371 01 D7                           DW      $01D7   ;       471     47.16   8.42    773             3.774   21486.558
007373 7F7373 01 D6                           DW      $01D6   ;       470     46.96   8.31    774             3.779   21603.129
007375 7F7375 01 D4                           DW      $01D4   ;       468     46.76   8.20    775             3.784   21720.658
007377 7F7377 01 D2                           DW      $01D2   ;       466     46.56   8.08    776             3.789   21839.158
007379 7F7379 01 D0                           DW      $01D0   ;       464     46.35   7.97    777             3.794   21958.640
00737B 7F737B 01 CE                           DW      $01CE   ;       462     46.15   7.86    778             3.799   22079.117
00737D 7F737D 01 CC                           DW      $01CC   ;       460     45.95   7.75    779             3.804   22200.602
00737F 7F737F 01 C9                           DW      $01C9   ;       457     45.74   7.64    780             3.809   22323.107
007381 7F7381 01 C8                           DW      $01C8   ;       456     45.58   7.54    781             3.813   22421.853
007383 7F7383 01 C6                           DW      $01C6   ;       454     45.38   7.43    782             3.818   22546.227
007385 7F7385 01 C4                           DW      $01C4   ;       452     45.17   7.32    783             3.823   22671.657
007387 7F7387 01 C2                           DW      $01C2   ;       450     44.97   7.20    784             3.828   22798.157
007389 7F7389 01 C0                           DW      $01C0   ;       448     44.76   7.09    785             3.833   22925.741
00738B 7F738B 01 BE                           DW      $01BE   ;       446     44.55   6.97    786             3.838   23054.423
00738D 7F738D 01 BC                           DW      $01BC   ;       444     44.35   6.86    787             3.843   23184.218
00738F 7F738F 01 BA                           DW      $01BA   ;       442     44.14   6.74    788             3.848   23315.139
007391 7F7391 01 B7                           DW      $01B7   ;       439     43.93   6.63    789             3.853   23447.201
007393 7F7393 01 B6                           DW      $01B6   ;       438     43.77   6.54    790             3.857   13553.683
007395 7F7395 01 B4                           DW      $01B4   ;       436     43.56   6.42    791             3.862   23687.838
007397 7F7397 01 B2                           DW      $01B2   ;       434     43.35   6.30    792             3.867   23823.177
007399 7F7399 01 AF                           DW      $01AF   ;       431     43.14   6.19    793             3.872   23959.716
00739B 7F739B 01 AD                           DW      $01AD   ;       429     42.93   6.07    794             3.877   24097.471
00739D 7F739D 01 AB                           DW      $01AB   ;       427     42.72   5.95    795             3.882   24236.458
00739F 7F739F 01 A9                           DW      $01A9   ;       425     42.51   5.84    796             3.887   24376.694
0073A1 7F73A1 01 A7                           DW      $01A7   ;       423     42.30   5.72    797             3.892   24518.195
0073A3 7F73A3 01 A5                           DW      $01A5   ;       421     42.13   5.63    798             3.896   24632.319
0073A5 7F73A5 01 A3                           DW      $01A3   ;       419     41.91   5.51    799             3.901   24776.142
0073A7 7F73A7 01 A1                           DW      $01A1   ;       417     41.70   5.39    800             3.906   24921.280
0073A9 7F73A9 01 9F                           DW      $019F   ;       415     41.49   5.27    801             3.911   25067.750
0073AB 7F73AB 01 9D                           DW      $019D   ;       413     41.27   5.15    802             3.916   25215.572
0073AD 7F73AD 01 9B                           DW      $019B   ;       411     41.06   5.03    803             3.921   25364.764
0073AF 7F73AF 01 98                           DW      $0198   ;       408     40.84   4.91    804             3.926   25515.345
0073B1 7F73B1 01 96                           DW      $0196   ;       406     40.63   4.79    805             3.931   25667.334
0073B3 7F73B3 01 94                           DW      $0194   ;       404     40.41   4.67    806             3.936   25820.752
0073B5 7F73B5 01 92                           DW      $0192   ;       402     40.24   4.58    807             3.940   25944.528
0073B7 7F73B7 01 90                           DW      $0190   ;       400     40.02   4.46    808             3.945   26100.569
0073B9 7F73B9 01 8E                           DW      $018E   ;       398     39.80   4.33    809             3.950   26258.095
0073BB 7F73BB 01 8C                           DW      $018C   ;       396     39.58   4.21    810             3.955   26417.129
0073BD 7F73BD 01 8A                           DW      $018A   ;       394     39.36   4.09    811             3.960   26577.692
0073BF 7F73BF 01 87                           DW      $0187   ;       391     39.14   3.97    812             3.965   26739.807
0073C1 7F73C1 01 85                           DW      $0185   ;       389     38.92   3.85    813             3.970   26903.495
0073C3 7F73C3 01 83                           DW      $0183   ;       387     38.70   3.72    814             3.975   27068.780
0073C5 7F73C5 01 81                           DW      $0181   ;       385     38.52   3.62    815             3.979   27202.174
0073C7 7F73C7 01 7F                           DW      $017F   ;       383     38.30   3.50    816             3.984   27370.394
0073C9 7F73C9 01 7D                           DW      $017D   ;       381     38.08   3.37    817             3.989   27540.277
0073CB 7F73CB 01 7B                           DW      $017B   ;       379     37.85   3.25    818             3.994   27711.849
0073CD 7F73CD 01 78                           DW      $0178   ;       376     37.63   3.00    820             4.004   28060.161
0073CF 7F73CF 01 74                           DW      $0174   ;       372     37.18   2.88    821             4.009   28236.953
0073D1 7F73D1 01 72                           DW      $0172   ;       370     36.95   2.75    822             4.014   28415.538
0073D3 7F73D3 01 6F                           DW      $016F   ;       367     36.72   2.62    823             4.019   28595.943
0073D5 7F73D5 01 6D                           DW      $016D   ;       365     36.54   2.52    824             4.023   28741.597
0073D7 7F73D7 01 6B                           DW      $016B   ;       363     36.32   2.40    825             4.028   28925.350
0073D9 7F73D9 01 69                           DW      $0169   ;       361     36.09   2.27    826             4.033   29111.003
0073DB 7F73DB 01 67                           DW      $0167   ;       359     35.86   2.14    827             4.038   29298.586
0073DD 7F73DD 01 64                           DW      $0164   ;       356     35.63   2.01    828             4.043   29488.130
0073DF 7F73DF 01 62                           DW      $0162   ;       354     35.40   1.89    829             4.048   29679.644
0073E1 7F73E1 01 60                           DW      $0160   ;       352     35.16   1.76    830             4.053   29873.221
0073E3 7F73E3 01 5D                           DW      $015D   ;       349     34.93   1.63    831             4.058   30068.832
0073E5 7F73E5 01 5B                           DW      $015B   ;       347     34.70   1.50    832             4.063   30266.531
0073E7 7F73E7 01 59                           DW      $0159   ;       345     34.51   1.40    833             4.067   30426.217
0073E9 7F73E9 01 57                           DW      $0157   ;       343     34.28   1.26    834             4.072   30627.759
0073EB 7F73EB 01 54                           DW      $0154   ;       340     34.04   1.13    835             4.077   30831.484
0073ED 7F73ED 01 52                           DW      $0152   ;       338     33.80   1.00    836             4.082   31037.429
0073EF 7F73EF 01 50                           DW      $0150   ;       336     33.57   0.87    837             4.087   31245.630
0073F1 7F73F1 01 4D                           DW      $014D   ;       333     33.33   0.74    838             4.092   31456.123
0073F3 7F73F3 01 4B                           DW      $014B   ;       331     33.09   0.61    839             4.097   31668.948
0073F5 7F73F5 01 49                           DW      $0149   ;       329     32.85   0.47    840             4.102   31884.143
0073F7 7F73F7 01 47                           DW      $0147   ;       327     32.66   0.37    841             4.106   32058.031
0073F9 7F73F9 01 44                           DW      $0144   ;       324     32.42   0.23    842             4.111   32277.593
0073FB 7F73FB 01 42                           DW      $0142   ;       322     32.17   0.10    843             4.116   32499.638
0073FD 7F73FD 01 3F                           DW      $013F   ;       319     31.93   -0.04   844             4.121   32724.209
0073FF 7F73FF 01 3D                           DW      $013D   ;       317     31.69   -0.17   845             4.126   32951.350
007401 7F7401 01 3A                           DW      $013A   ;       314     31.44   -0.31   846             4.131   33181.105
007403 7F7403 01 38                           DW      $0138   ;       312     31.20   -0.45   847             4.136   33413.519
007405 7F7405 01 36                           DW      $0136   ;       310     30.95   -0.58   848             4.141   33648.638
007407 7F7407 01 33                           DW      $0133   ;       307     30.70   -0.72   849             4.146   33886.511
007409 7F7409 01 31                           DW      $0131   ;       305     30.50   -0.83   850             4.150   34078.824
00740B 7F740B 01 2F                           DW      $012F   ;       303     30.25   -0.97   851             4.155   34321.775
00740D 7F740D 01 2C                           DW      $012C   ;       300     30.00   -1.11   852             4.160   34567.619
00740F 7F740F 01 2A                           DW      $012A   ;       298     29.75   -1.25   853             4.165   34816.407
007411 7F7411 01 27                           DW      $0127   ;       295     29.50   -1.39   854             4.170   35068.193
007413 7F7413 01 25                           DW      $0125   ;       293     29.25   -1.53   855             4.175   35323.030
007415 7F7415 01 22                           DW      $0122   ;       290     28.99   -1.67   856             4.180   35580.976
007417 7F7417 01 1F                           DW      $011F   ;       287     28.74   -1.81   857             4.185   35842.086
007419 7F7419 01 1D                           DW      $011D   ;       285     28.53   -1.93   858             4.189   36053.292
00741B 7F741B 01 1B                           DW      $011B   ;       283     28.28   -2.07   859             4.194   36320.248
00741D 7F741D 01 18                           DW      $0118   ;       280     28.02   -2.21   860             4.199   36590.537
00741F 7F741F 01 16                           DW      $0116   ;       278     27.76   -2.36   861             4.204   36864.221
007421 7F7421 01 13                           DW      $0113   ;       275     27.50   -2.50   862             4.209   37141.365
007423 7F7423 01 10                           DW      $0110   ;       272     27.24   -2.65   863             4.214   37422.036
007425 7F7425 01 0E                           DW      $010E   ;       270     26.98   -2.79   864             4.219   37706.300
007427 7F7427 01 0B                           DW      $010B   ;       267     26.71   -2.94   865             4.224   37994.227
007429 7F7429 01 09                           DW      $0109   ;       265     26.45   -3.08   866             4.229   38285.888
00742B 7F742B 01 06                           DW      $0106   ;       262     26.23   -3.20   867             4.233   38521.956
00742D 7F742D 01 04                           DW      $0104   ;       260     25.97   -3.35   868             4.238   38820.525
00742F 7F742F 01 01                           DW      $0101   ;       257     25.70   -3.50   869             4.243   39123.038
007431 7F7431 00 FE                           DW      $00FE   ;       254     25.43   -3.65   870             4.248   39429.574
007433 7F7433 00 FC                           DW      $00FC   ;       252     25.16   -3.80   871             4.253   39740.214
007435 7F7435 00 F9                           DW      $00F9   ;       249     24.89   -3.95   872             4.258   40055.040
007437 7F7437 00 F6                           DW      $00F6   ;       246     24.62   -4.10   873             4.263   40374.138
007439 7F7439 00 F3                           DW      $00F3   ;       243     24.34   -4.25   874             4.268   40697.596
00743B 7F743B 00 F1                           DW      $00F1   ;       241     24.12   -4.38   875             4.272   40959.560
00743D 7F743D 00 EE                           DW      $00EE   ;       238     23.84   -4.53   876             4.277   41291.093
00743F 7F743F 00 EC                           DW      $00EC   ;       236     23.57   -4.69   877             4.282   41627.242
007441 7F7441 00 E9                           DW      $00E9   ;       233     23.29   -4.84   878             4.287   41968.107
007443 7F7443 00 E6                           DW      $00E6   ;       230     23.01   -5.00   879             4.292   42313.785
007445 7F7445 00 E3                           DW      $00E3   ;       227     22.72   -5.15   880             4.297   42664.381
007447 7F7447 00 E0                           DW      $00E0   ;       224     22.44   -5.31   881             4.302   43020.000
007449 7F7449 00 DE                           DW      $00DE   ;       222     22.16   -5.47   882             4.307   43380.750
00744B 7F744B 00 DB                           DW      $00DB   ;       219     21.87   -5.63   883             4.312   43746.744
00744D 7F744D 00 D8                           DW      $00D8   ;       216     21.64   -5.76   884             4.316   44043.392
00744F 7F744F 00 D6                           DW      $00D6   ;       214     21.35   -5.92   885             4.321   44419.116
007451 7F7451 00 D3                           DW      $00D3   ;       211     21.06   -6.08   886             4.326   44800.415
007453 7F7453 00 D0                           DW      $00D0   ;       208     20.77   -6.24   887             4.331   45187.414
007455 7F7455 00 CD                           DW      $00CD   ;       205     20.48   -6.40   888             4.336   45580.241
007457 7F7457 00 CA                           DW      $00CA   ;       202     20.18   -6.57   889             4.341   45979.029
007459 7F7459 00 C7                           DW      $00C7   ;       199     19.88   -6.73   890             4.346   46383.914
00745B 7F745B 00 C4                           DW      $00C4   ;       196     19.59   -6.90   891             4.351   46795.039
00745D 7F745D 00 C2                           DW      $00C2   ;       194     19.35   -7.03   892             4.355   47128.527
00745F 7F745F 00 BE                           DW      $00BE   ;       190     19.04   -7.20   893             4.360   47551.250
007461 7F7461 00 BB                           DW      $00BB   ;       187     18.74   -7.37   894             4.365   47980.630
007463 7F7463 00 B8                           DW      $00B8   ;       184     18.44   -7.53   895             4.370   48416.825
007465 7F7465 00 B5                           DW      $00B5   ;       181     18.13   -7.71   896             4.375   48860.000
007467 7F7467 00 B2                           DW      $00B2   ;       178     17.82   -7.87   897             4.380   49310.323
007469 7F7469 00 AF                           DW      $00AF   ;       175     17.51   -8.05   898             4.385   49767.967
00746B 7F746B 00 AC                           DW      $00AC   ;       172     17.20   -8.22   899             4.390   50233.115
00746D 7F746D 00 A9                           DW      $00A9   ;       169     16.89   -8.40   900             4.395   50705.950
00746F 7F746F 00 A6                           DW      $00A6   ;       166     16.64   -8.54   901             4.399   51089.884
007471 7F7471 00 A3                           DW      $00A3   ;       163     16.32   -8.71   902             4.404   51577.047
007473 7F7473 00 A0                           DW      $00A0   ;       160     16.00   -8.89   903             4.409   52072.453
007475 7F7475 00 9D                           DW      $009D   ;       157     15.68   -9.07   904             4.414   52576.314
007477 7F7477 00 9A                           DW      $009A   ;       154     15.35   -9.25   905             4.419   53088.847
007479 7F7479 00 96                           DW      $0096   ;       150     15.03   -9.43   906             4.424   53610.278
00747B 7F747B 00 93                           DW      $0093   ;       147     14.70   -9.61   907             4.429   54140.841
00747D 7F747D 00 90                           DW      $0090   ;       144     14.37   -9.79   908             4.434   54680.777
00747F 7F747F 00 8D                           DW      $008D   ;       141     14.11   -9.94   909             4.438   55119.644
007481 7F7481 00 8A                           DW      $008A   ;       138     13.76   -10.12  910             4.443   55677.092
007483 7F7483 00 86                           DW      $0086   ;       134     13.44   -10.31  911             4.448   56244.638
007485 7F7485 00 83                           DW      $0083   ;       131     13.10   -10.50  912             4.453   56822.559
007487 7F7487 00 80                           DW      $0080   ;       128     12.76   -10.69  913             4.458   57411.144
007489 7F7489 00 7C                           DW      $007C   ;       124     12.42   -10.88  914             4.463   58010.689
00748B 7F748B 00 79                           DW      $0079   ;       121     12.08   -11.07  915             4.468   58621.504
00748D 7F748D 00 75                           DW      $0075   ;       117     11.73   -11.26  916             4.473   59243.909
00748F 7F748F 00 72                           DW      $0072   ;       114     11.38   -11.46  917             4.478   59878.238
007491 7F7491 00 6F                           DW      $006F   ;       111     11.10   -11.61  918             4.482   60394.517
007493 7F7493 00 6B                           DW      $006B   ;       107     10.74   -11.81  919             4.487   61051.189
007495 7F7495 00 68                           DW      $0068   ;       104     10.39   -12.00  920             4.492   61720.787
007497 7F7497 00 64                           DW      $0064   ;       100     10.03   -12.21  921             4.497   62403.698
007499 7F7499 00 61                           DW      $0061   ;       97              9.66    -12.41  922             4.502   63100.321
00749B 7F749B 00 5D                           DW      $005D   ;       93      9.30    -12.61  923             4.507   63811.075
00749D 7F749D 00 59                           DW      $0059   ;       89              8.93    -12.82  924             4.512   64536.393
00749F 7F749F 00 56                           DW      $0056   ;       86      8.56    -13.02  925             4.517   65276.729
0074A1 7F74A1 00 53                           DW      $0053   ;       83              8.26    -13.19  926             4.521   65880.125
0074A3 7F74A3 00 4F                           DW      $004F   ;       79              7.86    -13.40  927             4.526   66648.692
0074A5 7F74A5 00 4B                           DW      $004B   ;       75              7.51    -13.61  928             4.531   67433.646
0074A7 7F74A7 00 47                           DW      $0047   ;       71      7.12    -13.82  929             4.536   68235.577
0074A9 7F74A9 00 43                           DW      $0043   ;       67              6.74    -14.03  930             4.541   69054.858
0074AB 7F74AB 00 40                           DW      $0040   ;       64              6.35    -14.25  931             4.546   69892.247
0074AD 7F74AD 00 3C                           DW      $003C   ;       60              5.96    -14.47  932             4.551   70748.285
0074AF 7F74AF 00 38                           DW      $0038   ;       56              5.56    -14.69  933             4.556   71623.604
0074B1 7F74B1 00 34                           DW      $0034   ;       52              5.16    -14.91  934             4.561   72518.861
0074B3 7F74B3 00 30                           DW      $0030   ;       48          4.84        -15.09  935             4.565   73249.885
0074B5 7F74B5 00 2C                           DW      $002C   ;       44              4.44    -15.31  936             4.570   74182.791
0074B7 7F74B7 00 28                           DW      $0028   ;   40          4.03    -15.54  937             4.575   75137.647
0074B9 7F74B9 00 24                           DW      $0024   ;       36      3.61    -15.77  938             4.580   76115.238
0074BB 7F74BB 00 20                           DW      $0020   ;       32              3.20    -16.00  939             4.585   77116.386
0074BD 7F74BD 00 1C                           DW      $001C   ;       28              2.78    -16.23  940             4.590   78141.951
0074BF 7F74BF 00 18                           DW      $0018   ;       24              2.35    -16.47  941             4.595   79192.840
0074C1 7F74C1 00 13                           DW      $0013   ;       19          1.92        -16.71  942             4.600   80270.000
0074C3 7F74C3 00 10                           DW      $0010   ;       16      1.58    -16.90  943             4.604   81151.313
0074C5 7F74C5 00 0B                           DW      $000B   ;       11      1.14    -17.14  944             4.609   82278.312
0074C7 7F74C7 00 07                           DW      $0007   ;       7       0.70    -17.39  945             4.614   83434.508
0074C9 7F74C9 00 03                           DW      $0003   ;       3       0.25    -17.64  946             4.619   84621.050
0074CB 7F74CB FF FE                           DW      $FFFE   ;       -2      -0.20   -17.89  947             4.624   85839.149
0074CD 7F74CD FF F9                           DW      $FFF9   ;       -7      -0.65   -18.14  948             4.629   87090.081
0074CF 7F74CF FF F5                           DW      $FFF5   ;       -11     -1.11   -18.39  949             4.634   88375.191
0074D1 7F74D1 FF F0                           DW      $FFF0   ;       -16     -1.58   -18.65  950             4.639   89695.900
0074D3 7F74D3 FF EC                           DW      $FFEC   ;       -20     -2.05   -18.91  951             4.644   91053.708
0074D5 7F74D5 FF E8                           DW      $FFE8   ;       -24     -2.43   -19.13  952             4.648   92167.727
0074D7 7F74D7 FF E3                           DW      $FFE3   ;       -29     -2.91   -19.39  953             4.653   93956.369
0074D9 7F74D9 FF DE                           DW      $FFDE   ;       -34     -3.39   -19.66  954             4.658   95066.784
0074DB 7F74DB FF D9                           DW      $FFD9   ;       -39     -3.88   -19.93  955             4.663   96580.837
0074DD 7F74DD FF D4                           DW      $FFD4   ;       -44     -4.38   -20.21  956             4.668   98140.482
0074DF 7F74DF FF CF                           DW      $FFCF   ;       -49     -4.88   -20.49  957             4.673   99747.829
0074E1 7F74E1 FF CA                           DW      $FFCA   ;       -54     -5.39   -20.77  958             4.678   101405.093
0074E3 7F74E3 FF C5                           DW      $FFC5   ;       -59     -5.91   -21.06  959             4.683   103114.637
0074E5 7F74E5 FF C0                           DW      $FFC0   ;       -64     -6.43   -21.35  960             4.688   104878.974
0074E7 7F74E7 FF BB                           DW      $FFBB   ;       -69     -6.85   -21.58  961             4.692   106331.688
0074E9 7F74E9 FF B6                           DW      $FFB6   ;       -74     -7.39   -21.88  962             4.697   108201.518
0074EB 7F74EB FF B1                           DW      $FFB1   ;       -79     -7.93   -22.18  963             4.702   110134.094
0074ED 7F74ED FF AB                           DW      $FFAB   ;       -85     -8.48   -22.49  964             4.707   112132.628
0074EF 7F74EF FF A6                           DW      $FFA6   ;       -90     -9.04   -22.80  965             4.712   114200.556
0074F1 7F74F1 FF A0                           DW      $FFA0   ;       -96     -9.60   -23.11  966             4.717   116341.555
0074F3 7F74F3 FF 9A                           DW      $FF9A   ;       -102    -10.18  -23.43  967             4.722   118559.568
0074F5 7F74F5 FF 94                           DW      $FF94   ;       -108    -10.76  -23.75  968             4.727   120858.828
0074F7 7F74F7 FF 90                           DW      $FF90   ;       -112    -11.23  -24.02  969             4.731   122759.777
0074F9 7F74F9 FF 8A                           DW      $FF8A   ;       -118    -11.83  -24.35  970             4.736   125216.970
0074FB 7F74FB FF 84                           DW      $FF84   ;       -124    -12.44  -24.69  971             4.741   127769.035
0074FD 7F74FD FF 7D                           DW      $FF7D   ;       -131    -13.05  -25.03  972             4.746   130421.575
0074FF 7F74FF FF 77                           DW      $FF77   ;       -137    -13.68  -25.38  973             4.751   133180.643
007501 7F7501 FF 71                           DW      $FF71   ;       -143    -14.32  -25.73  974             4.756   136052.787
007503 7F7503 FF 6A                           DW      $FF6A   ;       -150    -14.97  -26.09  975             4.761   139045.105
007505 7F7505 FF 64                           DW      $FF64   ;       -156    -15.63  -26.46  976             4.766   142165.299
007507 7F7507 FF 5D                           DW      $FF5D   ;       -163    -16.30  -26.84  977             4.771   145421.747
007509 7F7509 FF 56                           DW      $FF56   ;       -170    -16.85  -27.14  978             4.775   148131.111
00750B 7F750B FF 50                           DW      $FF50   ;       -176    -17.55  -27.53  979             4.780   151656.364
00750D 7F750D FF 49                           DW      $FF49   ;       -183    -18.25  -27.92  980             4.785   155345.581
00750F 7F750F FF 42                           DW      $FF42   ;       -190    -18.98  -28.32  981             4.790   159210.476
007511 7F7511 FF 3B                           DW      $FF3B   ;       -197    -19.71  -28.73  982             4.795   163263.902
007513 7F7513 FF 37                           DW      $FF37   ;       -201    -20.47  -29.15  983             4.800   167520.000
007515 7F7515 FF 2C                           DW      $FF2C   ;       -212    -21.24  -29.58  984             4.805   171994.359
007517 7F7517 FF 24                           DW      $FF24   ;       -220    -22.02  -30.01  985             4.810   176704.211
007519 7F7519 FF 1D                           DW      $FF1D   ;       -227    -22.66  -30.37  986             4.814   180654.409
00751B 7F751B FF 15                           DW      $FF15   ;       -235    -23.48  -30.82  987             4.819   185837.680
00751D 7F751D FF 0D                           DW      $FF0D   ;       -243    -24.32  -31.29  988             4.824   191315.455
00751F 7F751F FF 04                           DW      $FF04   ;       -252    -25.18  -31.77  989             4.829   197113.567
007521 7F7521 FE FB                           DW      $FEFB   ;       -261    -26.06  -32.25  990             4.834   203260.964
007523 7F7523 FE F2                           DW      $FEF2   ;       -270    -26.96  -32.76  991             4.839   209790.186
007525 7F7525 FE E8                           DW      $FEE8   ;       -280    -27.89  -33.27  992             4.844   216737.949
007527 7F7527 FE E4                           DW      $FEE4   ;       -284    -28.84  -33.80  993             4.849   224145.828
007529 7F7529 FE D6                           DW      $FED6   ;       -298    -29.82  -34.34  994             4.854   232061.096
00752B 7F752B FE CE                           DW      $FECE   ;       -306    -30.63  -34.79  995             4.858   238794.648
00752D 7F752D FE C3                           DW      $FEC3   ;       -317    -31.66  -35.37  996             4.863   247764.526
00752F 7F752F FE B9                           DW      $FEB9   ;       -327    -32.73  -35.96  997             4.868   257413.939
007531 7F7531 FE AE                           DW      $FEAE   ;       -338    -33.83  -36.57  998             4.873   267823.150
007533 7F7533 FE A2                           DW      $FEA2   ;       -350    -34.97  -37.21  999             4.878   279085.574
007535 7F7535 FE 96                           DW      $FE96   ;       -362    -36.16  -37.86  1000    4.883   291310.598
007537 7F7537 FE 8A                           DW      $FE8A   ;       -374    -37.38  -38.55  1001    4.888   304627.143
007539 7F7539 FE 7D                           DW      $FE7D   ;       -387    -38.66  -39.26  1002    4.893   319188.224
00753B 7F753B FE 73                           DW      $FE73   ;       -397    -39.72  -39.84  1003    4.897   331854.951
00753D 7F753D FE 65                           DW      $FE65   ;       -411    -41.09  -40.61  1004    4.902   349142.449
00753F 7F753F FE 57                           DW      $FE57   ;       -425    -42.53  -41.41  1005    4.907   368288.817
007541 7F7541 FE 48                           DW      $FE48   ;       -440    -44.04  -42.24  1006    4.912   389610.909
007543 7F7543 FE 38                           DW      $FE38   ;       -456    -45.62  -43.12  1007    4.917   413501.928
007545 7F7545 FE 27                           DW      $FE27   ;       -473    -47.29  -44.05  1008    4.922   440455.897
007547 7F7547 FE 15                           DW      $FE15   ;       -491    -49.06  -45.03  1009    4.927   471102.192
007549 7F7549 FE 03                           DW      $FE03   ;       -509    -50.94  -46.08  1010    4.932   506255.294
00754B 7F754B FD EE                           DW      $FDEE   ;       -530    -52.94  -47.19  1011    4.937   546988.254
00754D 7F754D FD DD                           DW      $FDDD   ;       -547    -54.65  -48.14  1012    4.941   584545.424
00754F 7F754F FD C6                           DW      $FDC6   ;       -570    -56.95  -49.41  1013    4.946   639316.296
007551 7F7551 FD AE                           DW      $FDAE   ;       -594    -59.41  -50.79  1014    4.951   705264.898
007553 7F7553 FD 93                           DW      $FD93   ;       -621    -62.13  -52.29  1015    4.956   786201.818
007555 7F7555 FD 75                           DW      $FD75   ;       -651    -65.14  -53.96  1016    4.961   887891.795
007557 7F7557 FD 53                           DW      $FD53   ;       -685    -68.51  -55.84  1017    4.966   1019490.588
007559 7F7559 FD 2C                           DW      $FD2C   ;       -724    -72.36  -57.98  1018    4.971   1196468.276
00755B 7F755B FC FF                           DW      $FCFF   ;       -769    -76.86  -60.48  1019    4.976   1447186.667
00755D 7F755D FC D5                           DW      $FCD5   ;       -811    -81.11  -62.84  1020    4.980   1738020.000
00755F 7F755F FC 93                           DW      $FC93   ;       -877    -87.67  -66.48  1021    4.985   2319686.667
007561 7F7561 FC 3A                           DW      $FC3A   ;       -966    -96.61  -71.45  1022    4.990   3483020.000
007563 7F7563 3E 80                           DW      $3E80   ;       1600    160.00  71.11   1023    4.995   Default to 160F (sensor failure)
007565 7F7565 -> $7565                DODGETHERM_TABS_END             EQU     *     ; * Represents the current value of the paged
                                                                        ; program counter
007565 7F7565 -> $7F7565              DODGETHERM_TABS_END_LIN EQU     @     ; @ Represents the current value of the linear
